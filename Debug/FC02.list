
FC02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080056a0  080056a0  000066a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000064  24000000  08005760  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004bec  24000064  080057c4  00007064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004c50  080057c4  00007c50  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019dd6  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003634  00000000  00000000  00020e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001448  00000000  00000000  000244a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000f8d  00000000  00000000  000258e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038944  00000000  00000000  00026875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00018f9a  00000000  00000000  0005f1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00165cc8  00000000  00000000  00078153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dde1b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005700  00000000  00000000  001dde60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000043  00000000  00000000  001e3560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005688 	.word	0x08005688

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08005688 	.word	0x08005688

080002e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000318 <MX_FREERTOS_Init+0x38>)
 80002e6:	2100      	movs	r1, #0
 80002e8:	480c      	ldr	r0, [pc, #48]	@ (800031c <MX_FREERTOS_Init+0x3c>)
 80002ea:	f002 fb77 	bl	80029dc <osThreadNew>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000320 <MX_FREERTOS_Init+0x40>)
 80002f2:	6013      	str	r3, [r2, #0]

  /* creation of Task_LED0 */
  Task_LED0Handle = osThreadNew(AppTask_LED0, NULL, &Task_LED0_attributes);
 80002f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <MX_FREERTOS_Init+0x44>)
 80002f6:	2100      	movs	r1, #0
 80002f8:	480b      	ldr	r0, [pc, #44]	@ (8000328 <MX_FREERTOS_Init+0x48>)
 80002fa:	f002 fb6f 	bl	80029dc <osThreadNew>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <MX_FREERTOS_Init+0x4c>)
 8000302:	6013      	str	r3, [r2, #0]

  /* creation of Task_LED1 */
  Task_LED1Handle = osThreadNew(AppTask_LED1, NULL, &Task_LED1_attributes);
 8000304:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <MX_FREERTOS_Init+0x50>)
 8000306:	2100      	movs	r1, #0
 8000308:	480a      	ldr	r0, [pc, #40]	@ (8000334 <MX_FREERTOS_Init+0x54>)
 800030a:	f002 fb67 	bl	80029dc <osThreadNew>
 800030e:	4603      	mov	r3, r0
 8000310:	4a09      	ldr	r2, [pc, #36]	@ (8000338 <MX_FREERTOS_Init+0x58>)
 8000312:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	080056dc 	.word	0x080056dc
 800031c:	0800033d 	.word	0x0800033d
 8000320:	24000080 	.word	0x24000080
 8000324:	08005700 	.word	0x08005700
 8000328:	0800034d 	.word	0x0800034d
 800032c:	24000084 	.word	0x24000084
 8000330:	08005724 	.word	0x08005724
 8000334:	08000371 	.word	0x08000371
 8000338:	24000088 	.word	0x24000088

0800033c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000344:	2001      	movs	r0, #1
 8000346:	f002 fbdb 	bl	8002b00 <osDelay>
 800034a:	e7fb      	b.n	8000344 <StartDefaultTask+0x8>

0800034c <AppTask_LED0>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AppTask_LED0 */
void AppTask_LED0(void *argument)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AppTask_LED0 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000354:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000358:	4804      	ldr	r0, [pc, #16]	@ (800036c <AppTask_LED0+0x20>)
 800035a:	f000 fefe 	bl	800115a <HAL_GPIO_TogglePin>
    osDelay(10000);
 800035e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000362:	f002 fbcd 	bl	8002b00 <osDelay>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000366:	bf00      	nop
 8000368:	e7f4      	b.n	8000354 <AppTask_LED0+0x8>
 800036a:	bf00      	nop
 800036c:	58020400 	.word	0x58020400

08000370 <AppTask_LED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AppTask_LED1 */
void AppTask_LED1(void *argument)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AppTask_LED1 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000378:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <AppTask_LED1+0x20>)
 800037e:	f000 feec 	bl	800115a <HAL_GPIO_TogglePin>
    osDelay(10000);
 8000382:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000386:	f002 fbbb 	bl	8002b00 <osDelay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800038a:	bf00      	nop
 800038c:	e7f4      	b.n	8000378 <AppTask_LED1+0x8>
 800038e:	bf00      	nop
 8000390:	58020c00 	.word	0x58020c00

08000394 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
*/
void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	@ 0x28
 8000398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003aa:	4b35      	ldr	r3, [pc, #212]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003b0:	4a33      	ldr	r2, [pc, #204]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003ba:	4b31      	ldr	r3, [pc, #196]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	613b      	str	r3, [r7, #16]
 80003c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003d8:	4b29      	ldr	r3, [pc, #164]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e6:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ec:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003f6:	4b22      	ldr	r3, [pc, #136]	@ (8000480 <MX_GPIO_Init+0xec>)
 80003f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b1e      	ldr	r3, [pc, #120]	@ (8000480 <MX_GPIO_Init+0xec>)
 8000406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800040a:	4a1d      	ldr	r2, [pc, #116]	@ (8000480 <MX_GPIO_Init+0xec>)
 800040c:	f043 0302 	orr.w	r3, r3, #2
 8000410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000414:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <MX_GPIO_Init+0xec>)
 8000416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800041a:	f003 0302 	and.w	r3, r3, #2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8000428:	4816      	ldr	r0, [pc, #88]	@ (8000484 <MX_GPIO_Init+0xf0>)
 800042a:	f000 fe7d 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000434:	4814      	ldr	r0, [pc, #80]	@ (8000488 <MX_GPIO_Init+0xf4>)
 8000436:	f000 fe77 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800043a:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4619      	mov	r1, r3
 8000452:	480c      	ldr	r0, [pc, #48]	@ (8000484 <MX_GPIO_Init+0xf0>)
 8000454:	f000 fcb8 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	2301      	movs	r3, #1
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000462:	2302      	movs	r3, #2
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_GPIO_Init+0xf4>)
 8000472:	f000 fca9 	bl	8000dc8 <HAL_GPIO_Init>

}
 8000476:	bf00      	nop
 8000478:	3728      	adds	r7, #40	@ 0x28
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	58024400 	.word	0x58024400
 8000484:	58020c00 	.word	0x58020c00
 8000488:	58020400 	.word	0x58020400

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000490:	f000 f894 	bl	80005bc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 fad8 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f812 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f7ff ff7a 	bl	8000394 <MX_GPIO_Init>
  MX_TIM6_Init();
 80004a0:	f000 fa46 	bl	8000930 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim6);
 80004a4:	4805      	ldr	r0, [pc, #20]	@ (80004bc <main+0x30>)
 80004a6:	f001 ff17 	bl	80022d8 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004aa:	f002 fa4d 	bl	8002948 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80004ae:	f7ff ff17 	bl	80002e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004b2:	f002 fa6d 	bl	8002990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b6:	bf00      	nop
 80004b8:	e7fd      	b.n	80004b6 <main+0x2a>
 80004ba:	bf00      	nop
 80004bc:	240000d8 	.word	0x240000d8

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b09c      	sub	sp, #112	@ 0x70
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ca:	224c      	movs	r2, #76	@ 0x4c
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 ffea 	bl	80054a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2220      	movs	r2, #32
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f004 ffe4 	bl	80054a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004e0:	2002      	movs	r0, #2
 80004e2:	f000 fe55 	bl	8001190 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	4b32      	ldr	r3, [pc, #200]	@ (80005b4 <SystemClock_Config+0xf4>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	4a31      	ldr	r2, [pc, #196]	@ (80005b4 <SystemClock_Config+0xf4>)
 80004f0:	f023 0301 	bic.w	r3, r3, #1
 80004f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004f6:	4b2f      	ldr	r3, [pc, #188]	@ (80005b4 <SystemClock_Config+0xf4>)
 80004f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	4b2d      	ldr	r3, [pc, #180]	@ (80005b8 <SystemClock_Config+0xf8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000508:	4a2b      	ldr	r2, [pc, #172]	@ (80005b8 <SystemClock_Config+0xf8>)
 800050a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <SystemClock_Config+0xf8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800051c:	bf00      	nop
 800051e:	4b26      	ldr	r3, [pc, #152]	@ (80005b8 <SystemClock_Config+0xf8>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800052a:	d1f8      	bne.n	800051e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000530:	2301      	movs	r3, #1
 8000532:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000534:	2340      	movs	r3, #64	@ 0x40
 8000536:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000538:	2302      	movs	r3, #2
 800053a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053c:	2300      	movs	r3, #0
 800053e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000540:	2304      	movs	r3, #4
 8000542:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000544:	2310      	movs	r3, #16
 8000546:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000548:	2302      	movs	r3, #2
 800054a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000550:	2302      	movs	r3, #2
 8000552:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000554:	230c      	movs	r3, #12
 8000556:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000558:	2300      	movs	r3, #0
 800055a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fe4d 	bl	8001204 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000570:	f000 f870 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	233f      	movs	r3, #63	@ 0x3f
 8000576:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2303      	movs	r3, #3
 800057a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000584:	2340      	movs	r3, #64	@ 0x40
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000588:	2340      	movs	r3, #64	@ 0x40
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800058c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000590:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000592:	2340      	movs	r3, #64	@ 0x40
 8000594:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2102      	movs	r1, #2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fa8c 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005a6:	f000 f855 	bl	8000654 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3770      	adds	r7, #112	@ 0x70
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	58000400 	.word	0x58000400
 80005b8:	58024800 	.word	0x58024800

080005bc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005ce:	f000 fb83 	bl	8000cd8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005de:	231f      	movs	r3, #31
 80005e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80005e2:	2387      	movs	r3, #135	@ 0x87
 80005e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005ea:	2300      	movs	r3, #0
 80005ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005fe:	463b      	mov	r3, r7
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fba1 	bl	8000d48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000606:	2004      	movs	r0, #4
 8000608:	f000 fb7e 	bl	8000d08 <HAL_MPU_Enable>

}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d101      	bne.n	800062a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000626:	f000 fa4b 	bl	8000ac0 <HAL_IncTick>
  }
  if(htim->Instance == TIM6)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a07      	ldr	r2, [pc, #28]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d104      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED0_Pin);
 8000634:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800063a:	f000 fd8e 	bl	800115a <HAL_GPIO_TogglePin>

  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010000 	.word	0x40010000
 800064c:	40001000 	.word	0x40001000
 8000650:	58020c00 	.word	0x58020c00

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <Error_Handler+0x8>

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <HAL_MspInit+0x38>)
 8000668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800066c:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <HAL_MspInit+0x38>)
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <HAL_MspInit+0x38>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	210f      	movs	r1, #15
 8000688:	f06f 0001 	mvn.w	r0, #1
 800068c:	f000 fafc 	bl	8000c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	58024400 	.word	0x58024400

0800069c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08e      	sub	sp, #56	@ 0x38
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b0f      	cmp	r3, #15
 80006a8:	d844      	bhi.n	8000734 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	2019      	movs	r0, #25
 80006b0:	f000 faea 	bl	8000c88 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006b4:	2019      	movs	r0, #25
 80006b6:	f000 fb01 	bl	8000cbc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80006ba:	4a24      	ldr	r2, [pc, #144]	@ (800074c <HAL_InitTick+0xb0>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <HAL_InitTick+0xb4>)
 80006c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80006c6:	4a22      	ldr	r2, [pc, #136]	@ (8000750 <HAL_InitTick+0xb4>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <HAL_InitTick+0xb4>)
 80006d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006de:	f107 020c 	add.w	r2, r7, #12
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4611      	mov	r1, r2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fd5b 	bl	80021a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80006ee:	f001 fd43 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 80006f2:	4603      	mov	r3, r0
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006fa:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <HAL_InitTick+0xb8>)
 80006fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000700:	0c9b      	lsrs	r3, r3, #18
 8000702:	3b01      	subs	r3, #1
 8000704:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <HAL_InitTick+0xbc>)
 8000708:	4a14      	ldr	r2, [pc, #80]	@ (800075c <HAL_InitTick+0xc0>)
 800070a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <HAL_InitTick+0xbc>)
 800070e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000712:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000714:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <HAL_InitTick+0xbc>)
 8000716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000718:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_InitTick+0xbc>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <HAL_InitTick+0xbc>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000726:	480c      	ldr	r0, [pc, #48]	@ (8000758 <HAL_InitTick+0xbc>)
 8000728:	f001 fd7e 	bl	8002228 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d107      	bne.n	8000742 <HAL_InitTick+0xa6>
 8000732:	e001      	b.n	8000738 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	e005      	b.n	8000744 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000738:	4807      	ldr	r0, [pc, #28]	@ (8000758 <HAL_InitTick+0xbc>)
 800073a:	f001 fdcd 	bl	80022d8 <HAL_TIM_Base_Start_IT>
 800073e:	4603      	mov	r3, r0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3738      	adds	r7, #56	@ 0x38
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	24000008 	.word	0x24000008
 8000750:	58024400 	.word	0x58024400
 8000754:	431bde83 	.word	0x431bde83
 8000758:	2400008c 	.word	0x2400008c
 800075c:	40010000 	.word	0x40010000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <MemManage_Handler+0x4>

08000778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <UsageFault_Handler+0x4>

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <TIM1_UP_IRQHandler+0x10>)
 800079e:	f001 fe13 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2400008c 	.word	0x2400008c

080007ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007b0:	4802      	ldr	r0, [pc, #8]	@ (80007bc <TIM6_DAC_IRQHandler+0x10>)
 80007b2:	f001 fe09 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	240000d8 	.word	0x240000d8

080007c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007c4:	4b43      	ldr	r3, [pc, #268]	@ (80008d4 <SystemInit+0x114>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ca:	4a42      	ldr	r2, [pc, #264]	@ (80008d4 <SystemInit+0x114>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d4:	4b40      	ldr	r3, [pc, #256]	@ (80008d8 <SystemInit+0x118>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f003 030f 	and.w	r3, r3, #15
 80007dc:	2b06      	cmp	r3, #6
 80007de:	d807      	bhi.n	80007f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007e0:	4b3d      	ldr	r3, [pc, #244]	@ (80008d8 <SystemInit+0x118>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f023 030f 	bic.w	r3, r3, #15
 80007e8:	4a3b      	ldr	r2, [pc, #236]	@ (80008d8 <SystemInit+0x118>)
 80007ea:	f043 0307 	orr.w	r3, r3, #7
 80007ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007f0:	4b3a      	ldr	r3, [pc, #232]	@ (80008dc <SystemInit+0x11c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a39      	ldr	r2, [pc, #228]	@ (80008dc <SystemInit+0x11c>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007fc:	4b37      	ldr	r3, [pc, #220]	@ (80008dc <SystemInit+0x11c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000802:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <SystemInit+0x11c>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4935      	ldr	r1, [pc, #212]	@ (80008dc <SystemInit+0x11c>)
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <SystemInit+0x120>)
 800080a:	4013      	ands	r3, r2
 800080c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800080e:	4b32      	ldr	r3, [pc, #200]	@ (80008d8 <SystemInit+0x118>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800081a:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <SystemInit+0x118>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f023 030f 	bic.w	r3, r3, #15
 8000822:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <SystemInit+0x118>)
 8000824:	f043 0307 	orr.w	r3, r3, #7
 8000828:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <SystemInit+0x11c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000830:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <SystemInit+0x11c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000836:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <SystemInit+0x11c>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <SystemInit+0x11c>)
 800083e:	4a29      	ldr	r2, [pc, #164]	@ (80008e4 <SystemInit+0x124>)
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <SystemInit+0x11c>)
 8000844:	4a28      	ldr	r2, [pc, #160]	@ (80008e8 <SystemInit+0x128>)
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000848:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <SystemInit+0x11c>)
 800084a:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <SystemInit+0x12c>)
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <SystemInit+0x11c>)
 8000850:	2200      	movs	r2, #0
 8000852:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000854:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <SystemInit+0x11c>)
 8000856:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <SystemInit+0x12c>)
 8000858:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800085a:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <SystemInit+0x11c>)
 800085c:	2200      	movs	r2, #0
 800085e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <SystemInit+0x11c>)
 8000862:	4a22      	ldr	r2, [pc, #136]	@ (80008ec <SystemInit+0x12c>)
 8000864:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000866:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <SystemInit+0x11c>)
 8000868:	2200      	movs	r2, #0
 800086a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <SystemInit+0x11c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1a      	ldr	r2, [pc, #104]	@ (80008dc <SystemInit+0x11c>)
 8000872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000876:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <SystemInit+0x11c>)
 800087a:	2200      	movs	r2, #0
 800087c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <SystemInit+0x130>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <SystemInit+0x134>)
 8000884:	4013      	ands	r3, r2
 8000886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800088a:	d202      	bcs.n	8000892 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <SystemInit+0x138>)
 800088e:	2201      	movs	r2, #1
 8000890:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <SystemInit+0x11c>)
 8000894:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d113      	bne.n	80008c8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <SystemInit+0x11c>)
 80008a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80008a6:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <SystemInit+0x11c>)
 80008a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <SystemInit+0x13c>)
 80008b2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80008b6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <SystemInit+0x11c>)
 80008ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80008be:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <SystemInit+0x11c>)
 80008c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00
 80008d8:	52002000 	.word	0x52002000
 80008dc:	58024400 	.word	0x58024400
 80008e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008e4:	02020200 	.word	0x02020200
 80008e8:	01ff0000 	.word	0x01ff0000
 80008ec:	01010280 	.word	0x01010280
 80008f0:	5c001000 	.word	0x5c001000
 80008f4:	ffff0000 	.word	0xffff0000
 80008f8:	51008108 	.word	0x51008108
 80008fc:	52004000 	.word	0x52004000

08000900 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <ExitRun0Mode+0x2c>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <ExitRun0Mode+0x2c>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000910:	bf00      	nop
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <ExitRun0Mode+0x2c>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	58024800 	.word	0x58024800

08000930 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_TIM6_Init+0x68>)
 8000942:	4a16      	ldr	r2, [pc, #88]	@ (800099c <MX_TIM6_Init+0x6c>)
 8000944:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_TIM6_Init+0x68>)
 8000948:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800094c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_TIM6_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_TIM6_Init+0x68>)
 8000956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_TIM6_Init+0x68>)
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_TIM6_Init+0x68>)
 8000964:	f001 fc60 	bl	8002228 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800096e:	f7ff fe71 	bl	8000654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <MX_TIM6_Init+0x68>)
 8000980:	f001 fef2 	bl	8002768 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800098a:	f7ff fe63 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	240000d8 	.word	0x240000d8
 800099c:	40001000 	.word	0x40001000

080009a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_TIM_Base_MspInit+0x48>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d116      	bne.n	80009e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_TIM_Base_MspInit+0x4c>)
 80009b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009b8:	4a0c      	ldr	r2, [pc, #48]	@ (80009ec <HAL_TIM_Base_MspInit+0x4c>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_TIM_Base_MspInit+0x4c>)
 80009c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2105      	movs	r1, #5
 80009d4:	2036      	movs	r0, #54	@ 0x36
 80009d6:	f000 f957 	bl	8000c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009da:	2036      	movs	r0, #54	@ 0x36
 80009dc:	f000 f96e 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40001000 	.word	0x40001000
 80009ec:	58024400 	.word	0x58024400

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009f0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000a2c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80009f4:	f7ff ff84 	bl	8000900 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f8:	f7ff fee2 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	@ (8000a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a22:	f004 fda7 	bl	8005574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a26:	f7ff fd31 	bl	800048c <main>
  bx  lr
 8000a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a34:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000a38:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 8000a3c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000a40:	24004c50 	.word	0x24004c50

08000a44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC3_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4e:	2003      	movs	r0, #3
 8000a50:	f000 f90f 	bl	8000c72 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a54:	f001 f9e6 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_Init+0x68>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	0a1b      	lsrs	r3, r3, #8
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	4913      	ldr	r1, [pc, #76]	@ (8000ab4 <HAL_Init+0x6c>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_Init+0x68>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab4 <HAL_Init+0x6c>)
 8000a7c:	5cd3      	ldrb	r3, [r2, r3]
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	fa22 f303 	lsr.w	r3, r2, r3
 8000a88:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab8 <HAL_Init+0x70>)
 8000a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <HAL_Init+0x74>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a92:	200f      	movs	r0, #15
 8000a94:	f7ff fe02 	bl	800069c <HAL_InitTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e002      	b.n	8000aa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa2:	f7ff fddd 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	08005748 	.word	0x08005748
 8000ab8:	24000004 	.word	0x24000004
 8000abc:	24000000 	.word	0x24000000

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	2400000c 	.word	0x2400000c
 8000ae4:	24000124 	.word	0x24000124

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	24000124 	.word	0x24000124

08000b00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetREVID+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	0c1b      	lsrs	r3, r3, #16
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	5c001000 	.word	0x5c001000

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x40>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x40>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	05fa0000 	.word	0x05fa0000

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	@ (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	@ (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	@ 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff4c 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c96:	f7ff ff63 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000c9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	6978      	ldr	r0, [r7, #20]
 8000ca2:	f7ff ffb3 	bl	8000c0c <NVIC_EncodePriority>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff82 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff56 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000cdc:	f3bf 8f5f 	dmb	sy
}
 8000ce0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <HAL_MPU_Disable+0x28>)
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce6:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <HAL_MPU_Disable+0x28>)
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cee:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <HAL_MPU_Disable+0x2c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	e000ed90 	.word	0xe000ed90

08000d08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d10:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <HAL_MPU_Enable+0x38>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_MPU_Enable+0x3c>)
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1e:	4a09      	ldr	r2, [pc, #36]	@ (8000d44 <HAL_MPU_Enable+0x3c>)
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d26:	f3bf 8f4f 	dsb	sy
}
 8000d2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d2c:	f3bf 8f6f 	isb	sy
}
 8000d30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed90 	.word	0xe000ed90
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	785a      	ldrb	r2, [r3, #1]
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8000d56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	@ (8000dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d64:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7adb      	ldrb	r3, [r3, #11]
 8000d76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7a9b      	ldrb	r3, [r3, #10]
 8000d7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7b5b      	ldrb	r3, [r3, #13]
 8000d86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7b9b      	ldrb	r3, [r3, #14]
 8000d8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7bdb      	ldrb	r3, [r3, #15]
 8000d96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a5b      	ldrb	r3, [r3, #9]
 8000d9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7a1b      	ldrb	r3, [r3, #8]
 8000da6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000da8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000db2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db4:	6113      	str	r3, [r2, #16]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed90 	.word	0xe000ed90

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000dd6:	4b89      	ldr	r3, [pc, #548]	@ (8000ffc <HAL_GPIO_Init+0x234>)
 8000dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dda:	e194      	b.n	8001106 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8186 	beq.w	8001100 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <HAL_GPIO_Init+0x44>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d130      	bne.n	8000e6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e42:	2201      	movs	r2, #1
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	f003 0201 	and.w	r2, r3, #1
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d017      	beq.n	8000eaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	69b9      	ldr	r1, [r7, #24]
 8000efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0203 	and.w	r2, r3, #3
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80e0 	beq.w	8001100 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f40:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <HAL_GPIO_Init+0x238>)
 8000f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f46:	4a2e      	ldr	r2, [pc, #184]	@ (8001000 <HAL_GPIO_Init+0x238>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f50:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <HAL_GPIO_Init+0x238>)
 8000f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5e:	4a29      	ldr	r2, [pc, #164]	@ (8001004 <HAL_GPIO_Init+0x23c>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <HAL_GPIO_Init+0x240>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d052      	beq.n	8001030 <HAL_GPIO_Init+0x268>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800100c <HAL_GPIO_Init+0x244>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d031      	beq.n	8000ff6 <HAL_GPIO_Init+0x22e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <HAL_GPIO_Init+0x248>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d02b      	beq.n	8000ff2 <HAL_GPIO_Init+0x22a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <HAL_GPIO_Init+0x24c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d025      	beq.n	8000fee <HAL_GPIO_Init+0x226>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <HAL_GPIO_Init+0x250>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01f      	beq.n	8000fea <HAL_GPIO_Init+0x222>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_GPIO_Init+0x254>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0x21e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001020 <HAL_GPIO_Init+0x258>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x21a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_GPIO_Init+0x25c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x216>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a18      	ldr	r2, [pc, #96]	@ (8001028 <HAL_GPIO_Init+0x260>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x212>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_GPIO_Init+0x264>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x20e>
 8000fd2:	2309      	movs	r3, #9
 8000fd4:	e02d      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	e02b      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000fda:	2308      	movs	r3, #8
 8000fdc:	e029      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e027      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e025      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e023      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e021      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e01f      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e01d      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e01b      	b.n	8001032 <HAL_GPIO_Init+0x26a>
 8000ffa:	bf00      	nop
 8000ffc:	58000080 	.word	0x58000080
 8001000:	58024400 	.word	0x58024400
 8001004:	58000400 	.word	0x58000400
 8001008:	58020000 	.word	0x58020000
 800100c:	58020400 	.word	0x58020400
 8001010:	58020800 	.word	0x58020800
 8001014:	58020c00 	.word	0x58020c00
 8001018:	58021000 	.word	0x58021000
 800101c:	58021400 	.word	0x58021400
 8001020:	58021800 	.word	0x58021800
 8001024:	58021c00 	.word	0x58021c00
 8001028:	58022000 	.word	0x58022000
 800102c:	58022400 	.word	0x58022400
 8001030:	2300      	movs	r3, #0
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	f002 0203 	and.w	r2, r2, #3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4093      	lsls	r3, r2
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001042:	4938      	ldr	r1, [pc, #224]	@ (8001124 <HAL_GPIO_Init+0x35c>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001076:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800107e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	3301      	adds	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	f47f ae63 	bne.w	8000ddc <HAL_GPIO_Init+0x14>
  }
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3724      	adds	r7, #36	@ 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	58000400 	.word	0x58000400

08001128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
 8001134:	4613      	mov	r3, r2
 8001136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001144:	e003      	b.n	800114e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	041a      	lsls	r2, r3, #16
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	619a      	str	r2, [r3, #24]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800116c:	887a      	ldrh	r2, [r7, #2]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	041a      	lsls	r2, r3, #16
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43d9      	mvns	r1, r3
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	400b      	ands	r3, r1
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_PWREx_ConfigSupply+0x70>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d00a      	beq.n	80011ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <HAL_PWREx_ConfigSupply+0x70>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d001      	beq.n	80011b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e01f      	b.n	80011f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e01d      	b.n	80011f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_PWREx_ConfigSupply+0x70>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	490f      	ldr	r1, [pc, #60]	@ (8001200 <HAL_PWREx_ConfigSupply+0x70>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011ca:	f7ff fc8d 	bl	8000ae8 <HAL_GetTick>
 80011ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011d0:	e009      	b.n	80011e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011d2:	f7ff fc89 	bl	8000ae8 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011e0:	d901      	bls.n	80011e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e007      	b.n	80011f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_PWREx_ConfigSupply+0x70>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011f2:	d1ee      	bne.n	80011d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58024800 	.word	0x58024800

08001204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	f000 bc48 	b.w	8001aa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8088 	beq.w	8001336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001226:	4b99      	ldr	r3, [pc, #612]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001230:	4b96      	ldr	r3, [pc, #600]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001238:	2b10      	cmp	r3, #16
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x48>
 800123c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123e:	2b18      	cmp	r3, #24
 8001240:	d111      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
 8001242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d10c      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b8f      	ldr	r3, [pc, #572]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d06d      	beq.n	8001334 <HAL_RCC_OscConfig+0x130>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d169      	bne.n	8001334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	f000 bc21 	b.w	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x7a>
 8001270:	4b86      	ldr	r3, [pc, #536]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a85      	ldr	r2, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e02e      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x9c>
 8001286:	4b81      	ldr	r3, [pc, #516]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a80      	ldr	r2, [pc, #512]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b7e      	ldr	r3, [pc, #504]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7d      	ldr	r2, [pc, #500]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012aa:	4b78      	ldr	r3, [pc, #480]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a77      	ldr	r2, [pc, #476]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b75      	ldr	r3, [pc, #468]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a74      	ldr	r2, [pc, #464]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012c4:	4b71      	ldr	r3, [pc, #452]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a70      	ldr	r2, [pc, #448]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b6e      	ldr	r3, [pc, #440]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6d      	ldr	r2, [pc, #436]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc00 	bl	8000ae8 <HAL_GetTick>
 80012e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fbfc 	bl	8000ae8 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	@ 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e3d4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fe:	4b63      	ldr	r3, [pc, #396]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fbec 	bl	8000ae8 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fbe8 	bl	8000ae8 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e3c0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001326:	4b59      	ldr	r3, [pc, #356]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x110>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80ca 	beq.w	80014d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001344:	4b51      	ldr	r3, [pc, #324]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800134c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800134e:	4b4f      	ldr	r3, [pc, #316]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001352:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <HAL_RCC_OscConfig+0x166>
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	2b18      	cmp	r3, #24
 800135e:	d156      	bne.n	800140e <HAL_RCC_OscConfig+0x20a>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d151      	bne.n	800140e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136a:	4b48      	ldr	r3, [pc, #288]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e392      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001382:	4b42      	ldr	r3, [pc, #264]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0219 	bic.w	r2, r3, #25
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	493f      	ldr	r1, [pc, #252]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fba8 	bl	8000ae8 <HAL_GetTick>
 8001398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fba4 	bl	8000ae8 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e37c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ae:	4b37      	ldr	r3, [pc, #220]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	f7ff fba1 	bl	8000b00 <HAL_GetREVID>
 80013be:	4603      	mov	r3, r0
 80013c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d817      	bhi.n	80013f8 <HAL_RCC_OscConfig+0x1f4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b40      	cmp	r3, #64	@ 0x40
 80013ce:	d108      	bne.n	80013e2 <HAL_RCC_OscConfig+0x1de>
 80013d0:	4b2e      	ldr	r3, [pc, #184]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013d8:	4a2c      	ldr	r2, [pc, #176]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80013da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e0:	e07a      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	4926      	ldr	r1, [pc, #152]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f6:	e06f      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	4921      	ldr	r1, [pc, #132]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800140c:	e064      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d047      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 0219 	bic.w	r2, r3, #25
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	491a      	ldr	r1, [pc, #104]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fb5e 	bl	8000ae8 <HAL_GetTick>
 800142c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fb5a 	bl	8000ae8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e332      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	f7ff fb57 	bl	8000b00 <HAL_GetREVID>
 8001452:	4603      	mov	r3, r0
 8001454:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001458:	4293      	cmp	r3, r2
 800145a:	d819      	bhi.n	8001490 <HAL_RCC_OscConfig+0x28c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b40      	cmp	r3, #64	@ 0x40
 8001462:	d108      	bne.n	8001476 <HAL_RCC_OscConfig+0x272>
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800146c:	4a07      	ldr	r2, [pc, #28]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 800146e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001472:	6053      	str	r3, [r2, #4]
 8001474:	e030      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	031b      	lsls	r3, r3, #12
 8001484:	4901      	ldr	r1, [pc, #4]	@ (800148c <HAL_RCC_OscConfig+0x288>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 800148a:	e025      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
 800148c:	58024400 	.word	0x58024400
 8001490:	4b9a      	ldr	r3, [pc, #616]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	4997      	ldr	r1, [pc, #604]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	e018      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b95      	ldr	r3, [pc, #596]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a94      	ldr	r2, [pc, #592]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb19 	bl	8000ae8 <HAL_GetTick>
 80014b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb15 	bl	8000ae8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e2ed      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014cc:	4b8b      	ldr	r3, [pc, #556]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a9 	beq.w	8001638 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4b85      	ldr	r3, [pc, #532]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014f0:	4b82      	ldr	r3, [pc, #520]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d007      	beq.n	800150c <HAL_RCC_OscConfig+0x308>
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b18      	cmp	r3, #24
 8001500:	d13a      	bne.n	8001578 <HAL_RCC_OscConfig+0x374>
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d135      	bne.n	8001578 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800150c:	4b7b      	ldr	r3, [pc, #492]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x320>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b80      	cmp	r3, #128	@ 0x80
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2c1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001524:	f7ff faec 	bl	8000b00 <HAL_GetREVID>
 8001528:	4603      	mov	r3, r0
 800152a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800152e:	4293      	cmp	r3, r2
 8001530:	d817      	bhi.n	8001562 <HAL_RCC_OscConfig+0x35e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	2b20      	cmp	r3, #32
 8001538:	d108      	bne.n	800154c <HAL_RCC_OscConfig+0x348>
 800153a:	4b70      	ldr	r3, [pc, #448]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001542:	4a6e      	ldr	r2, [pc, #440]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001548:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800154a:	e075      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800154c:	4b6b      	ldr	r3, [pc, #428]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	069b      	lsls	r3, r3, #26
 800155a:	4968      	ldr	r1, [pc, #416]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001560:	e06a      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001562:	4b66      	ldr	r3, [pc, #408]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	4962      	ldr	r1, [pc, #392]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001572:	4313      	orrs	r3, r2
 8001574:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001576:	e05f      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d042      	beq.n	8001606 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001580:	4b5e      	ldr	r3, [pc, #376]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a5d      	ldr	r2, [pc, #372]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff faac 	bl	8000ae8 <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001594:	f7ff faa8 	bl	8000ae8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e280      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015a6:	4b55      	ldr	r3, [pc, #340]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015b2:	f7ff faa5 	bl	8000b00 <HAL_GetREVID>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015bc:	4293      	cmp	r3, r2
 80015be:	d817      	bhi.n	80015f0 <HAL_RCC_OscConfig+0x3ec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d108      	bne.n	80015da <HAL_RCC_OscConfig+0x3d6>
 80015c8:	4b4c      	ldr	r3, [pc, #304]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80015d0:	4a4a      	ldr	r2, [pc, #296]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015d6:	6053      	str	r3, [r2, #4]
 80015d8:	e02e      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
 80015da:	4b48      	ldr	r3, [pc, #288]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	069b      	lsls	r3, r3, #26
 80015e8:	4944      	ldr	r1, [pc, #272]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
 80015ee:	e023      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
 80015f0:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	493f      	ldr	r1, [pc, #252]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
 8001604:	e018      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a3c      	ldr	r2, [pc, #240]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800160c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fa69 	bl	8000ae8 <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800161a:	f7ff fa65 	bl	8000ae8 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e23d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800162c:	4b33      	ldr	r3, [pc, #204]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d036      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d019      	beq.n	8001680 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164c:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800164e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001650:	4a2a      	ldr	r2, [pc, #168]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fa46 	bl	8000ae8 <HAL_GetTick>
 800165c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fa42 	bl	8000ae8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e21a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001672:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x45c>
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001684:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fa2c 	bl	8000ae8 <HAL_GetTick>
 8001690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fa28 	bl	8000ae8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e200      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d039      	beq.n	8001732 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0c      	ldr	r2, [pc, #48]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fa09 	bl	8000ae8 <HAL_GetTick>
 80016d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016da:	f7ff fa05 	bl	8000ae8 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1dd      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x4d6>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x52e>
 80016fa:	bf00      	nop
 80016fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001700:	4b9b      	ldr	r3, [pc, #620]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a9a      	ldr	r2, [pc, #616]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800170a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800170c:	f7ff f9ec 	bl	8000ae8 <HAL_GetTick>
 8001710:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001714:	f7ff f9e8 	bl	8000ae8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1c0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001726:	4b92      	ldr	r3, [pc, #584]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8081 	beq.w	8001842 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001740:	4b8c      	ldr	r3, [pc, #560]	@ (8001974 <HAL_RCC_OscConfig+0x770>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a8b      	ldr	r2, [pc, #556]	@ (8001974 <HAL_RCC_OscConfig+0x770>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800174c:	f7ff f9cc 	bl	8000ae8 <HAL_GetTick>
 8001750:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7ff f9c8 	bl	8000ae8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1a0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001766:	4b83      	ldr	r3, [pc, #524]	@ (8001974 <HAL_RCC_OscConfig+0x770>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d106      	bne.n	8001788 <HAL_RCC_OscConfig+0x584>
 800177a:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177e:	4a7c      	ldr	r2, [pc, #496]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6713      	str	r3, [r2, #112]	@ 0x70
 8001786:	e02d      	b.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x5a6>
 8001790:	4b77      	ldr	r3, [pc, #476]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001794:	4a76      	ldr	r2, [pc, #472]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
 800179c:	4b74      	ldr	r3, [pc, #464]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a0:	4a73      	ldr	r2, [pc, #460]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c8>
 80017b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017be:	4b6c      	ldr	r3, [pc, #432]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	4a6b      	ldr	r2, [pc, #428]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
 80017cc:	4b68      	ldr	r3, [pc, #416]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	4a67      	ldr	r2, [pc, #412]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d8:	4b65      	ldr	r3, [pc, #404]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a64      	ldr	r2, [pc, #400]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d015      	beq.n	8001818 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f97c 	bl	8000ae8 <HAL_GetTick>
 80017f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff f978 	bl	8000ae8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e14e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800180a:	4b59      	ldr	r3, [pc, #356]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ee      	beq.n	80017f4 <HAL_RCC_OscConfig+0x5f0>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f966 	bl	8000ae8 <HAL_GetTick>
 800181c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff f962 	bl	8000ae8 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e138      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001836:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ee      	bne.n	8001820 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 812d 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800184c:	4b48      	ldr	r3, [pc, #288]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001854:	2b18      	cmp	r3, #24
 8001856:	f000 80bd 	beq.w	80019d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	2b02      	cmp	r3, #2
 8001860:	f040 809e 	bne.w	80019a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b42      	ldr	r3, [pc, #264]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a41      	ldr	r2, [pc, #260]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800186a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f93a 	bl	8000ae8 <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f936 	bl	8000ae8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e10e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800188a:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800189a:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <HAL_RCC_OscConfig+0x774>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	430a      	orrs	r2, r1
 80018aa:	4931      	ldr	r1, [pc, #196]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	3b01      	subs	r3, #1
 80018b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	3b01      	subs	r3, #1
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d8:	3b01      	subs	r3, #1
 80018da:	061b      	lsls	r3, r3, #24
 80018dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80018e0:	4923      	ldr	r1, [pc, #140]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018e6:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	4a21      	ldr	r2, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018f6:	4b21      	ldr	r3, [pc, #132]	@ (800197c <HAL_RCC_OscConfig+0x778>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018fe:	00d2      	lsls	r2, r2, #3
 8001900:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001906:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	f023 020c 	bic.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4917      	ldr	r1, [pc, #92]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191c:	f023 0202 	bic.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001924:	4912      	ldr	r1, [pc, #72]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	4a0d      	ldr	r2, [pc, #52]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f8bf 	bl	8000ae8 <HAL_GetTick>
 800196a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800196c:	e011      	b.n	8001992 <HAL_RCC_OscConfig+0x78e>
 800196e:	bf00      	nop
 8001970:	58024400 	.word	0x58024400
 8001974:	58024800 	.word	0x58024800
 8001978:	fffffc0c 	.word	0xfffffc0c
 800197c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f8b2 	bl	8000ae8 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e08a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x77c>
 800199e:	e082      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a42      	ldr	r2, [pc, #264]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f89c 	bl	8000ae8 <HAL_GetTick>
 80019b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f898 	bl	8000ae8 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e070      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019c6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x7b0>
 80019d2:	e068      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019d4:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019da:	4b35      	ldr	r3, [pc, #212]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d031      	beq.n	8001a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 0203 	and.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d12a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d122      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0a5b      	lsrs	r3, r3, #9
 8001a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d108      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0e1b      	lsrs	r3, r3, #24
 8001a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e02b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d01f      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a72:	f7ff f839 	bl	8000ae8 <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a78:	bf00      	nop
 8001a7a:	f7ff f835 	bl	8000ae8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d0f9      	beq.n	8001a7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_RCC_OscConfig+0x8b0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a92:	00d2      	lsls	r2, r2, #3
 8001a94:	4906      	ldr	r1, [pc, #24]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9e:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3730      	adds	r7, #48	@ 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	ffff0007 	.word	0xffff0007

08001ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e19c      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d910      	bls.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b87      	ldr	r3, [pc, #540]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 020f 	bic.w	r2, r3, #15
 8001ae2:	4985      	ldr	r1, [pc, #532]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b83      	ldr	r3, [pc, #524]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e184      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d908      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b18:	4b78      	ldr	r3, [pc, #480]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	4975      	ldr	r1, [pc, #468]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	4b70      	ldr	r3, [pc, #448]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d908      	bls.n	8001b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b46:	4b6d      	ldr	r3, [pc, #436]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	496a      	ldr	r1, [pc, #424]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	4b64      	ldr	r3, [pc, #400]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d908      	bls.n	8001b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b74:	4b61      	ldr	r3, [pc, #388]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	495e      	ldr	r1, [pc, #376]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	4b59      	ldr	r3, [pc, #356]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d908      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ba2:	4b56      	ldr	r3, [pc, #344]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4953      	ldr	r1, [pc, #332]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d908      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f023 020f 	bic.w	r2, r3, #15
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4947      	ldr	r1, [pc, #284]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d055      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bee:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4940      	ldr	r1, [pc, #256]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c08:	4b3c      	ldr	r3, [pc, #240]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d121      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0f6      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c20:	4b36      	ldr	r3, [pc, #216]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d115      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0ea      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c38:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0de      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c48:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0d6      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c58:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f023 0207 	bic.w	r2, r3, #7
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4925      	ldr	r1, [pc, #148]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c6a:	f7fe ff3d 	bl	8000ae8 <HAL_GetTick>
 8001c6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c72:	f7fe ff39 	bl	8000ae8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0be      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d1eb      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d208      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f023 020f 	bic.w	r2, r3, #15
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	490e      	ldr	r1, [pc, #56]	@ (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d214      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 020f 	bic.w	r2, r3, #15
 8001cde:	4906      	ldr	r1, [pc, #24]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e086      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
 8001cf8:	52002000 	.word	0x52002000
 8001cfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d010      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	4b3f      	ldr	r3, [pc, #252]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d208      	bcs.n	8001d2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4939      	ldr	r1, [pc, #228]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d010      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d208      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d4a:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	492e      	ldr	r1, [pc, #184]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	4b28      	ldr	r3, [pc, #160]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d208      	bcs.n	8001d8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4922      	ldr	r1, [pc, #136]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d010      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d208      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4917      	ldr	r1, [pc, #92]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001db8:	f000 f834 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	4912      	ldr	r1, [pc, #72]	@ (8001e14 <HAL_RCC_ClockConfig+0x35c>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <HAL_RCC_ClockConfig+0x35c>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_RCC_ClockConfig+0x360>)
 8001dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_RCC_ClockConfig+0x364>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_RCC_ClockConfig+0x368>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fc4e 	bl	800069c <HAL_InitTick>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	58024400 	.word	0x58024400
 8001e14:	08005748 	.word	0x08005748
 8001e18:	24000004 	.word	0x24000004
 8001e1c:	24000000 	.word	0x24000000
 8001e20:	24000008 	.word	0x24000008

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2a:	4bb3      	ldr	r3, [pc, #716]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e32:	2b18      	cmp	r3, #24
 8001e34:	f200 8155 	bhi.w	80020e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e38:	a201      	add	r2, pc, #4	@ (adr r2, 8001e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3e:	bf00      	nop
 8001e40:	08001ea5 	.word	0x08001ea5
 8001e44:	080020e3 	.word	0x080020e3
 8001e48:	080020e3 	.word	0x080020e3
 8001e4c:	080020e3 	.word	0x080020e3
 8001e50:	080020e3 	.word	0x080020e3
 8001e54:	080020e3 	.word	0x080020e3
 8001e58:	080020e3 	.word	0x080020e3
 8001e5c:	080020e3 	.word	0x080020e3
 8001e60:	08001ecb 	.word	0x08001ecb
 8001e64:	080020e3 	.word	0x080020e3
 8001e68:	080020e3 	.word	0x080020e3
 8001e6c:	080020e3 	.word	0x080020e3
 8001e70:	080020e3 	.word	0x080020e3
 8001e74:	080020e3 	.word	0x080020e3
 8001e78:	080020e3 	.word	0x080020e3
 8001e7c:	080020e3 	.word	0x080020e3
 8001e80:	08001ed1 	.word	0x08001ed1
 8001e84:	080020e3 	.word	0x080020e3
 8001e88:	080020e3 	.word	0x080020e3
 8001e8c:	080020e3 	.word	0x080020e3
 8001e90:	080020e3 	.word	0x080020e3
 8001e94:	080020e3 	.word	0x080020e3
 8001e98:	080020e3 	.word	0x080020e3
 8001e9c:	080020e3 	.word	0x080020e3
 8001ea0:	08001ed7 	.word	0x08001ed7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea4:	4b94      	ldr	r3, [pc, #592]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001eb0:	4b91      	ldr	r3, [pc, #580]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	4a90      	ldr	r2, [pc, #576]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ec2:	e111      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ec4:	4b8d      	ldr	r3, [pc, #564]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec6:	61bb      	str	r3, [r7, #24]
      break;
 8001ec8:	e10e      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001eca:	4b8d      	ldr	r3, [pc, #564]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ecc:	61bb      	str	r3, [r7, #24]
      break;
 8001ece:	e10b      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ed2:	61bb      	str	r3, [r7, #24]
      break;
 8001ed4:	e108      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ed6:	4b88      	ldr	r3, [pc, #544]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ee0:	4b85      	ldr	r3, [pc, #532]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001eea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001eec:	4b82      	ldr	r3, [pc, #520]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ef6:	4b80      	ldr	r3, [pc, #512]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efa:	08db      	lsrs	r3, r3, #3
 8001efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80e1 	beq.w	80020dc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f000 8083 	beq.w	8002028 <HAL_RCC_GetSysClockFreq+0x204>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	f200 80a1 	bhi.w	800206c <HAL_RCC_GetSysClockFreq+0x248>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x114>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d056      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f36:	e099      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f38:	4b6f      	ldr	r3, [pc, #444]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02d      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f44:	4b6c      	ldr	r3, [pc, #432]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6e:	4b62      	ldr	r3, [pc, #392]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f9e:	e087      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001faa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800210c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb2:	4b51      	ldr	r3, [pc, #324]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fe2:	e065      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002006:	ed97 6a02 	vldr	s12, [r7, #8]
 800200a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800201a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002026:	e043      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002032:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800203a:	4b2f      	ldr	r3, [pc, #188]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800204a:	ed97 6a02 	vldr	s12, [r7, #8]
 800204e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800205a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800205e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800206a:	e021      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002076:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800207a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207e:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002092:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800209a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	0a5b      	lsrs	r3, r3, #9
 80020b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ba:	3301      	adds	r3, #1
 80020bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80020cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d4:	ee17 3a90 	vmov	r3, s15
 80020d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020da:	e005      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
      break;
 80020e0:	e002      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020e4:	61bb      	str	r3, [r7, #24]
      break;
 80020e6:	bf00      	nop
  }

  return sysclockfreq;
 80020e8:	69bb      	ldr	r3, [r7, #24]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	58024400 	.word	0x58024400
 80020fc:	03d09000 	.word	0x03d09000
 8002100:	003d0900 	.word	0x003d0900
 8002104:	017d7840 	.word	0x017d7840
 8002108:	46000000 	.word	0x46000000
 800210c:	4c742400 	.word	0x4c742400
 8002110:	4a742400 	.word	0x4a742400
 8002114:	4bbebc20 	.word	0x4bbebc20

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800211e:	f7ff fe81 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <HAL_RCC_GetHCLKFreq+0x50>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490f      	ldr	r1, [pc, #60]	@ (800216c <HAL_RCC_GetHCLKFreq+0x54>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800213c:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_RCC_GetHCLKFreq+0x50>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	4a09      	ldr	r2, [pc, #36]	@ (800216c <HAL_RCC_GetHCLKFreq+0x54>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <HAL_RCC_GetHCLKFreq+0x58>)
 8002154:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002156:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <HAL_RCC_GetHCLKFreq+0x58>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	58024400 	.word	0x58024400
 800216c:	08005748 	.word	0x08005748
 8002170:	24000004 	.word	0x24000004
 8002174:	24000000 	.word	0x24000000

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800217c:	f7ff ffcc 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4904      	ldr	r1, [pc, #16]	@ (80021a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	58024400 	.word	0x58024400
 80021a0:	08005748 	.word	0x08005748

080021a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	223f      	movs	r2, #63	@ 0x3f
 80021b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_RCC_GetClockConfig+0x7c>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0207 	and.w	r2, r3, #7
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80021c0:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <HAL_RCC_GetClockConfig+0x7c>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <HAL_RCC_GetClockConfig+0x7c>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_RCC_GetClockConfig+0x7c>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80021e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_RCC_GetClockConfig+0x7c>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCC_GetClockConfig+0x7c>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_RCC_GetClockConfig+0x7c>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_RCC_GetClockConfig+0x80>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	58024400 	.word	0x58024400
 8002224:	52002000 	.word	0x52002000

08002228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e049      	b.n	80022ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fba6 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 f9de 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e054      	b.n	800239a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a26      	ldr	r2, [pc, #152]	@ (80023a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x80>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231a:	d01d      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x80>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a22      	ldr	r2, [pc, #136]	@ (80023ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x80>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	@ (80023b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x80>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1f      	ldr	r2, [pc, #124]	@ (80023b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x80>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1e      	ldr	r2, [pc, #120]	@ (80023b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x80>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1c      	ldr	r2, [pc, #112]	@ (80023bc <HAL_TIM_Base_Start_IT+0xe4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x80>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1b      	ldr	r2, [pc, #108]	@ (80023c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d115      	bne.n	8002384 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <HAL_TIM_Base_Start_IT+0xec>)
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d015      	beq.n	8002396 <HAL_TIM_Base_Start_IT+0xbe>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002370:	d011      	beq.n	8002396 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002382:	e008      	b.n	8002396 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e000      	b.n	8002398 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40000c00 	.word	0x40000c00
 80023b8:	40010400 	.word	0x40010400
 80023bc:	40001800 	.word	0x40001800
 80023c0:	40014000 	.word	0x40014000
 80023c4:	00010007 	.word	0x00010007

080023c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d020      	beq.n	800242c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0202 	mvn.w	r2, #2
 80023fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8e9 	bl	80025ea <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8db 	bl	80025d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f8ec 	bl	80025fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0204 	mvn.w	r2, #4
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8c3 	bl	80025ea <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8b5 	bl	80025d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f8c6 	bl	80025fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d020      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0208 	mvn.w	r2, #8
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2204      	movs	r2, #4
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f89d 	bl	80025ea <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f88f 	bl	80025d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8a0 	bl	80025fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d020      	beq.n	8002510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01b      	beq.n	8002510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2208      	movs	r2, #8
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f877 	bl	80025ea <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f869 	bl	80025d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f87a 	bl	80025fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0201 	mvn.w	r2, #1
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe f870 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00c      	beq.n	8002562 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f99b 	bl	8002898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00c      	beq.n	8002586 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800257e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f993 	bl	80028ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00c      	beq.n	80025aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f834 	bl	8002612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00c      	beq.n	80025ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0220 	mvn.w	r2, #32
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f95b 	bl	8002884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a43      	ldr	r2, [pc, #268]	@ (8002748 <TIM_Base_SetConfig+0x120>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <TIM_Base_SetConfig+0x40>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002646:	d00f      	beq.n	8002668 <TIM_Base_SetConfig+0x40>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a40      	ldr	r2, [pc, #256]	@ (800274c <TIM_Base_SetConfig+0x124>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00b      	beq.n	8002668 <TIM_Base_SetConfig+0x40>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3f      	ldr	r2, [pc, #252]	@ (8002750 <TIM_Base_SetConfig+0x128>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <TIM_Base_SetConfig+0x40>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3e      	ldr	r2, [pc, #248]	@ (8002754 <TIM_Base_SetConfig+0x12c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3d      	ldr	r2, [pc, #244]	@ (8002758 <TIM_Base_SetConfig+0x130>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d108      	bne.n	800267a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a32      	ldr	r2, [pc, #200]	@ (8002748 <TIM_Base_SetConfig+0x120>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002688:	d01b      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2f      	ldr	r2, [pc, #188]	@ (800274c <TIM_Base_SetConfig+0x124>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d017      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2e      	ldr	r2, [pc, #184]	@ (8002750 <TIM_Base_SetConfig+0x128>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2d      	ldr	r2, [pc, #180]	@ (8002754 <TIM_Base_SetConfig+0x12c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00f      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002758 <TIM_Base_SetConfig+0x130>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2b      	ldr	r2, [pc, #172]	@ (800275c <TIM_Base_SetConfig+0x134>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002760 <TIM_Base_SetConfig+0x138>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <TIM_Base_SetConfig+0x9a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a29      	ldr	r2, [pc, #164]	@ (8002764 <TIM_Base_SetConfig+0x13c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <TIM_Base_SetConfig+0x120>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0xf2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a16      	ldr	r2, [pc, #88]	@ (8002758 <TIM_Base_SetConfig+0x130>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0xf2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a15      	ldr	r2, [pc, #84]	@ (800275c <TIM_Base_SetConfig+0x134>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0xf2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <TIM_Base_SetConfig+0x138>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0xf2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <TIM_Base_SetConfig+0x13c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d103      	bne.n	8002722 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40010000 	.word	0x40010000
 800274c:	40000400 	.word	0x40000400
 8002750:	40000800 	.word	0x40000800
 8002754:	40000c00 	.word	0x40000c00
 8002758:	40010400 	.word	0x40010400
 800275c:	40014000 	.word	0x40014000
 8002760:	40014400 	.word	0x40014400
 8002764:	40014800 	.word	0x40014800

08002768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800277c:	2302      	movs	r3, #2
 800277e:	e06d      	b.n	800285c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a30      	ldr	r2, [pc, #192]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d108      	bne.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80027ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a20      	ldr	r2, [pc, #128]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d022      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f2:	d01d      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d018      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1c      	ldr	r2, [pc, #112]	@ (8002874 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a15      	ldr	r2, [pc, #84]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a16      	ldr	r2, [pc, #88]	@ (800287c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10c      	bne.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40010000 	.word	0x40010000
 800286c:	40010400 	.word	0x40010400
 8002870:	40000400 	.word	0x40000400
 8002874:	40000800 	.word	0x40000800
 8002878:	40000c00 	.word	0x40000c00
 800287c:	40001800 	.word	0x40001800
 8002880:	40014000 	.word	0x40014000

08002884 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <__NVIC_SetPriority>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	@ (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	@ (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <SysTick_Handler+0x1c>)
 800291a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800291c:	f001 fd46 	bl	80043ac <xTaskGetSchedulerState>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002926:	f002 fb3f 	bl	8004fa8 <xPortSysTickHandler>
  }
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010

08002934 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002938:	2100      	movs	r1, #0
 800293a:	f06f 0004 	mvn.w	r0, #4
 800293e:	f7ff ffbf 	bl	80028c0 <__NVIC_SetPriority>
#endif
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294e:	f3ef 8305 	mrs	r3, IPSR
 8002952:	603b      	str	r3, [r7, #0]
  return(result);
 8002954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800295a:	f06f 0305 	mvn.w	r3, #5
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	e00c      	b.n	800297c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <osKernelInitialize+0x44>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <osKernelInitialize+0x44>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	e002      	b.n	800297c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800297c:	687b      	ldr	r3, [r7, #4]
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	24000128 	.word	0x24000128

08002990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002996:	f3ef 8305 	mrs	r3, IPSR
 800299a:	603b      	str	r3, [r7, #0]
  return(result);
 800299c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80029a2:	f06f 0305 	mvn.w	r3, #5
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	e010      	b.n	80029cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029aa:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <osKernelStart+0x48>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d109      	bne.n	80029c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029b2:	f7ff ffbf 	bl	8002934 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029b6:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <osKernelStart+0x48>)
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80029bc:	f001 f892 	bl	8003ae4 <vTaskStartScheduler>
      stat = osOK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	e002      	b.n	80029cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	24000128 	.word	0x24000128

080029dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08e      	sub	sp, #56	@ 0x38
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ec:	f3ef 8305 	mrs	r3, IPSR
 80029f0:	617b      	str	r3, [r7, #20]
  return(result);
 80029f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d17e      	bne.n	8002af6 <osThreadNew+0x11a>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d07b      	beq.n	8002af6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a02:	2318      	movs	r3, #24
 8002a04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d045      	beq.n	8002aa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <osThreadNew+0x48>
        name = attr->name;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <osThreadNew+0x6e>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b38      	cmp	r3, #56	@ 0x38
 8002a3c:	d805      	bhi.n	8002a4a <osThreadNew+0x6e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <osThreadNew+0x72>
        return (NULL);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e054      	b.n	8002af8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00e      	beq.n	8002a84 <osThreadNew+0xa8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2ba7      	cmp	r3, #167	@ 0xa7
 8002a6c:	d90a      	bls.n	8002a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <osThreadNew+0xa8>
        mem = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e010      	b.n	8002aa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <osThreadNew+0xca>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <osThreadNew+0xca>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <osThreadNew+0xca>
          mem = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e001      	b.n	8002aa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d110      	bne.n	8002ace <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ab4:	9202      	str	r2, [sp, #8]
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fe1a 	bl	80036fc <xTaskCreateStatic>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e013      	b.n	8002af6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d110      	bne.n	8002af6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fe68 	bl	80037bc <xTaskCreate>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <osThreadNew+0x11a>
            hTask = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002af6:	693b      	ldr	r3, [r7, #16]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3728      	adds	r7, #40	@ 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b08:	f3ef 8305 	mrs	r3, IPSR
 8002b0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <osDelay+0x1c>
    stat = osErrorISR;
 8002b14:	f06f 0305 	mvn.w	r3, #5
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e007      	b.n	8002b2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 ffa6 	bl	8003a78 <vTaskDelay>
    }
  }

  return (stat);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4a06      	ldr	r2, [pc, #24]	@ (8002b68 <vApplicationGetIdleTaskMemory+0x30>)
 8002b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2280      	movs	r2, #128	@ 0x80
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	2400012c 	.word	0x2400012c
 8002b68:	240001d4 	.word	0x240001d4

08002b6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	@ (8002b98 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4a06      	ldr	r2, [pc, #24]	@ (8002b9c <vApplicationGetTimerTaskMemory+0x30>)
 8002b82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	240003d4 	.word	0x240003d4
 8002b9c:	2400047c 	.word	0x2400047c

08002ba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f103 0208 	add.w	r2, r3, #8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f103 0208 	add.w	r2, r3, #8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0208 	add.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d103      	bne.n	8002c62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e00c      	b.n	8002c7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3308      	adds	r3, #8
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e002      	b.n	8002c70 <vListInsert+0x2e>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d2f6      	bcs.n	8002c6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	601a      	str	r2, [r3, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6892      	ldr	r2, [r2, #8]
 8002cca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6852      	ldr	r2, [r2, #4]
 8002cd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d103      	bne.n	8002ce8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d34:	f002 f8a8 	bl	8004e88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d40:	68f9      	ldr	r1, [r7, #12]
 8002d42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	441a      	add	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	3b01      	subs	r3, #1
 8002d66:	68f9      	ldr	r1, [r7, #12]
 8002d68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	441a      	add	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	22ff      	movs	r2, #255	@ 0xff
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	22ff      	movs	r2, #255	@ 0xff
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d114      	bne.n	8002db4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01a      	beq.n	8002dc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3310      	adds	r3, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 f942 	bl	8004020 <xTaskRemoveFromEventList>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <xQueueGenericReset+0xd0>)
 8002da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	e009      	b.n	8002dc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3310      	adds	r3, #16
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fef1 	bl	8002ba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3324      	adds	r3, #36	@ 0x24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff feec 	bl	8002ba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dc8:	f002 f890 	bl	8004eec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dcc:	2301      	movs	r3, #1
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	@ 0x38
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	e7fd      	b.n	8002e22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <xQueueGenericCreateStatic+0x56>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <xQueueGenericCreateStatic+0x5a>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <xQueueGenericCreateStatic+0x5c>
 8002e36:	2300      	movs	r3, #0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	623b      	str	r3, [r7, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <xQueueGenericCreateStatic+0x84>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <xQueueGenericCreateStatic+0x88>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <xQueueGenericCreateStatic+0x8a>
 8002e64:	2300      	movs	r3, #0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	61fb      	str	r3, [r7, #28]
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	e7fd      	b.n	8002e7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e82:	2350      	movs	r3, #80	@ 0x50
 8002e84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b50      	cmp	r3, #80	@ 0x50
 8002e8a:	d00b      	beq.n	8002ea4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	61bb      	str	r3, [r7, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002eb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f805 	bl	8002ed6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3730      	adds	r7, #48	@ 0x30
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d103      	bne.n	8002ef2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e002      	b.n	8002ef8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f04:	2101      	movs	r1, #1
 8002f06:	69b8      	ldr	r0, [r7, #24]
 8002f08:	f7ff fefe 	bl	8002d08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	@ 0x38
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <xQueueGenericSend+0x34>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSend+0x42>
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueGenericSend+0x46>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericSend+0x48>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <xQueueGenericSend+0x64>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSend+0x72>
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <xQueueGenericSend+0x76>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueGenericSend+0x78>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueGenericSend+0x94>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	623b      	str	r3, [r7, #32]
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fb0:	f001 f9fc 	bl	80043ac <xTaskGetSchedulerState>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <xQueueGenericSend+0xa4>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <xQueueGenericSend+0xa8>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <xQueueGenericSend+0xaa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61fb      	str	r3, [r7, #28]
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fe2:	f001 ff51 	bl	8004e88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <xQueueGenericSend+0xdc>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d129      	bne.n	800304c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ffe:	f000 fa0f 	bl	8003420 <prvCopyDataToQueue>
 8003002:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800300c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300e:	3324      	adds	r3, #36	@ 0x24
 8003010:	4618      	mov	r0, r3
 8003012:	f001 f805 	bl	8004020 <xTaskRemoveFromEventList>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800301c:	4b3f      	ldr	r3, [pc, #252]	@ (800311c <xQueueGenericSend+0x200>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	e00a      	b.n	8003044 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003034:	4b39      	ldr	r3, [pc, #228]	@ (800311c <xQueueGenericSend+0x200>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003044:	f001 ff52 	bl	8004eec <vPortExitCritical>
				return pdPASS;
 8003048:	2301      	movs	r3, #1
 800304a:	e063      	b.n	8003114 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003052:	f001 ff4b 	bl	8004eec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003056:	2300      	movs	r3, #0
 8003058:	e05c      	b.n	8003114 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800305a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	4618      	mov	r0, r3
 8003066:	f001 f83f 	bl	80040e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800306e:	f001 ff3d 	bl	8004eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003072:	f000 fda7 	bl	8003bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003076:	f001 ff07 	bl	8004e88 <vPortEnterCritical>
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003080:	b25b      	sxtb	r3, r3
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d103      	bne.n	8003090 <xQueueGenericSend+0x174>
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003096:	b25b      	sxtb	r3, r3
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d103      	bne.n	80030a6 <xQueueGenericSend+0x18a>
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030a6:	f001 ff21 	bl	8004eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030aa:	1d3a      	adds	r2, r7, #4
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f82e 	bl	8004114 <xTaskCheckForTimeOut>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d124      	bne.n	8003108 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030c0:	f000 faa6 	bl	8003610 <prvIsQueueFull>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d018      	beq.n	80030fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030cc:	3310      	adds	r3, #16
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 ff52 	bl	8003f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030da:	f000 fa31 	bl	8003540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030de:	f000 fd7f 	bl	8003be0 <xTaskResumeAll>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f47f af7c 	bne.w	8002fe2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80030ea:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <xQueueGenericSend+0x200>)
 80030ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	e772      	b.n	8002fe2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030fe:	f000 fa1f 	bl	8003540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003102:	f000 fd6d 	bl	8003be0 <xTaskResumeAll>
 8003106:	e76c      	b.n	8002fe2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800310a:	f000 fa19 	bl	8003540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800310e:	f000 fd67 	bl	8003be0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003114:	4618      	mov	r0, r3
 8003116:	3738      	adds	r7, #56	@ 0x38
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b090      	sub	sp, #64	@ 0x40
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <xQueueGenericSendFromISR+0x3e>
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <xQueueGenericSendFromISR+0x42>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueGenericSendFromISR+0x44>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d103      	bne.n	800318e <xQueueGenericSendFromISR+0x6e>
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <xQueueGenericSendFromISR+0x72>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <xQueueGenericSendFromISR+0x74>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	623b      	str	r3, [r7, #32]
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031b0:	f001 ff4a 	bl	8005048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031b4:	f3ef 8211 	mrs	r2, BASEPRI
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	61fa      	str	r2, [r7, #28]
 80031ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <xQueueGenericSendFromISR+0xc2>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d12f      	bne.n	8003242 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80031f8:	f000 f912 	bl	8003420 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d112      	bne.n	800322c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003210:	3324      	adds	r3, #36	@ 0x24
 8003212:	4618      	mov	r0, r3
 8003214:	f000 ff04 	bl	8004020 <xTaskRemoveFromEventList>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00e      	beq.n	800323c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00b      	beq.n	800323c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e007      	b.n	800323c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800322c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003230:	3301      	adds	r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	b25a      	sxtb	r2, r3
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800323c:	2301      	movs	r3, #1
 800323e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003240:	e001      	b.n	8003246 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003242:	2300      	movs	r3, #0
 8003244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003248:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003250:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003254:	4618      	mov	r0, r3
 8003256:	3740      	adds	r7, #64	@ 0x40
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	@ 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <xQueueReceive+0x32>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	623b      	str	r3, [r7, #32]
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	e7fd      	b.n	800328a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <xQueueReceive+0x40>
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <xQueueReceive+0x44>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <xQueueReceive+0x46>
 80032a0:	2300      	movs	r3, #0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10b      	bne.n	80032be <xQueueReceive+0x62>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	61fb      	str	r3, [r7, #28]
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	e7fd      	b.n	80032ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032be:	f001 f875 	bl	80043ac <xTaskGetSchedulerState>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <xQueueReceive+0x72>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <xQueueReceive+0x76>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueReceive+0x78>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <xQueueReceive+0x94>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	61bb      	str	r3, [r7, #24]
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032f0:	f001 fdca 	bl	8004e88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01f      	beq.n	8003340 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003304:	f000 f8f6 	bl	80034f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00f      	beq.n	8003338 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	3310      	adds	r3, #16
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fe7f 	bl	8004020 <xTaskRemoveFromEventList>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003328:	4b3c      	ldr	r3, [pc, #240]	@ (800341c <xQueueReceive+0x1c0>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003338:	f001 fdd8 	bl	8004eec <vPortExitCritical>
				return pdPASS;
 800333c:	2301      	movs	r3, #1
 800333e:	e069      	b.n	8003414 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003346:	f001 fdd1 	bl	8004eec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800334a:	2300      	movs	r3, #0
 800334c:	e062      	b.n	8003414 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fec5 	bl	80040e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003362:	f001 fdc3 	bl	8004eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003366:	f000 fc2d 	bl	8003bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800336a:	f001 fd8d 	bl	8004e88 <vPortEnterCritical>
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003374:	b25b      	sxtb	r3, r3
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d103      	bne.n	8003384 <xQueueReceive+0x128>
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800338a:	b25b      	sxtb	r3, r3
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d103      	bne.n	800339a <xQueueReceive+0x13e>
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800339a:	f001 fda7 	bl	8004eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800339e:	1d3a      	adds	r2, r7, #4
 80033a0:	f107 0310 	add.w	r3, r7, #16
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 feb4 	bl	8004114 <xTaskCheckForTimeOut>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d123      	bne.n	80033fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b4:	f000 f916 	bl	80035e4 <prvIsQueueEmpty>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d017      	beq.n	80033ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c0:	3324      	adds	r3, #36	@ 0x24
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fdd8 	bl	8003f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ce:	f000 f8b7 	bl	8003540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033d2:	f000 fc05 	bl	8003be0 <xTaskResumeAll>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d189      	bne.n	80032f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <xQueueReceive+0x1c0>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	e780      	b.n	80032f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f0:	f000 f8a6 	bl	8003540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f4:	f000 fbf4 	bl	8003be0 <xTaskResumeAll>
 80033f8:	e77a      	b.n	80032f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033fc:	f000 f8a0 	bl	8003540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003400:	f000 fbee 	bl	8003be0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003406:	f000 f8ed 	bl	80035e4 <prvIsQueueEmpty>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f43f af6f 	beq.w	80032f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003412:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003414:	4618      	mov	r0, r3
 8003416:	3730      	adds	r7, #48	@ 0x30
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	e000ed04 	.word	0xe000ed04

08003420 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d14d      	bne.n	80034e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 ffcc 	bl	80043e8 <xTaskPriorityDisinherit>
 8003450:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e043      	b.n	80034e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d119      	bne.n	8003494 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6858      	ldr	r0, [r3, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	461a      	mov	r2, r3
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	f002 f8a8 	bl	80055c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	441a      	add	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	d32b      	bcc.n	80034e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e026      	b.n	80034e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68d8      	ldr	r0, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	461a      	mov	r2, r3
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	f002 f88e 	bl	80055c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	425b      	negs	r3, r3
 80034ae:	441a      	add	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d207      	bcs.n	80034d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	425b      	negs	r3, r3
 80034ca:	441a      	add	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d105      	bne.n	80034e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3b01      	subs	r3, #1
 80034e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80034ea:	697b      	ldr	r3, [r7, #20]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d018      	beq.n	8003538 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	441a      	add	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d303      	bcc.n	8003528 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68d9      	ldr	r1, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	461a      	mov	r2, r3
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f002 f844 	bl	80055c0 <memcpy>
	}
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003548:	f001 fc9e 	bl	8004e88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003552:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003554:	e011      	b.n	800357a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3324      	adds	r3, #36	@ 0x24
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fd5c 	bl	8004020 <xTaskRemoveFromEventList>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800356e:	f000 fe35 	bl	80041dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3b01      	subs	r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800357a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	dce9      	bgt.n	8003556 <prvUnlockQueue+0x16>
 8003582:	e000      	b.n	8003586 <prvUnlockQueue+0x46>
					break;
 8003584:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	22ff      	movs	r2, #255	@ 0xff
 800358a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800358e:	f001 fcad 	bl	8004eec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003592:	f001 fc79 	bl	8004e88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800359c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800359e:	e011      	b.n	80035c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d012      	beq.n	80035ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3310      	adds	r3, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fd37 	bl	8004020 <xTaskRemoveFromEventList>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035b8:	f000 fe10 	bl	80041dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035bc:	7bbb      	ldrb	r3, [r7, #14]
 80035be:	3b01      	subs	r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	dce9      	bgt.n	80035a0 <prvUnlockQueue+0x60>
 80035cc:	e000      	b.n	80035d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	22ff      	movs	r2, #255	@ 0xff
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035d8:	f001 fc88 	bl	8004eec <vPortExitCritical>
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035ec:	f001 fc4c 	bl	8004e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e001      	b.n	8003602 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003602:	f001 fc73 	bl	8004eec <vPortExitCritical>

	return xReturn;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003618:	f001 fc36 	bl	8004e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	429a      	cmp	r2, r3
 8003626:	d102      	bne.n	800362e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e001      	b.n	8003632 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003632:	f001 fc5b 	bl	8004eec <vPortExitCritical>

	return xReturn;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	e014      	b.n	800367a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003650:	4a0f      	ldr	r2, [pc, #60]	@ (8003690 <vQueueAddToRegistry+0x50>)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800365c:	490c      	ldr	r1, [pc, #48]	@ (8003690 <vQueueAddToRegistry+0x50>)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003666:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <vQueueAddToRegistry+0x50>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003672:	e006      	b.n	8003682 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b07      	cmp	r3, #7
 800367e:	d9e7      	bls.n	8003650 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	2400087c 	.word	0x2400087c

08003694 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036a4:	f001 fbf0 	bl	8004e88 <vPortEnterCritical>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d103      	bne.n	80036be <vQueueWaitForMessageRestricted+0x2a>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d103      	bne.n	80036d4 <vQueueWaitForMessageRestricted+0x40>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036d4:	f001 fc0a 	bl	8004eec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3324      	adds	r3, #36	@ 0x24
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fc6d 	bl	8003fc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036ee:	6978      	ldr	r0, [r7, #20]
 80036f0:	f7ff ff26 	bl	8003540 <prvUnlockQueue>
	}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08e      	sub	sp, #56	@ 0x38
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800370a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	623b      	str	r3, [r7, #32]
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <xTaskCreateStatic+0x4a>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	61fb      	str	r3, [r7, #28]
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	e7fd      	b.n	8003742 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003746:	23a8      	movs	r3, #168	@ 0xa8
 8003748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2ba8      	cmp	r3, #168	@ 0xa8
 800374e:	d00b      	beq.n	8003768 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61bb      	str	r3, [r7, #24]
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003768:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01e      	beq.n	80037ae <xTaskCreateStatic+0xb2>
 8003770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01b      	beq.n	80037ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	2202      	movs	r2, #2
 8003784:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003788:	2300      	movs	r3, #0
 800378a:	9303      	str	r3, [sp, #12]
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f851 	bl	8003848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037a8:	f000 f8f6 	bl	8003998 <prvAddNewTaskToReadyList>
 80037ac:	e001      	b.n	80037b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037b2:	697b      	ldr	r3, [r7, #20]
	}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3728      	adds	r7, #40	@ 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08c      	sub	sp, #48	@ 0x30
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fc7b 	bl	80050cc <pvPortMalloc>
 80037d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00e      	beq.n	80037fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037de:	20a8      	movs	r0, #168	@ 0xa8
 80037e0:	f001 fc74 	bl	80050cc <pvPortMalloc>
 80037e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80037f2:	e005      	b.n	8003800 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037f4:	6978      	ldr	r0, [r7, #20]
 80037f6:	f001 fd37 	bl	8005268 <vPortFree>
 80037fa:	e001      	b.n	8003800 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d017      	beq.n	8003836 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	2300      	movs	r3, #0
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f80f 	bl	8003848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800382a:	69f8      	ldr	r0, [r7, #28]
 800382c:	f000 f8b4 	bl	8003998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003830:	2301      	movs	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	e002      	b.n	800383c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800383c:	69bb      	ldr	r3, [r7, #24]
	}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003858:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	461a      	mov	r2, r3
 8003860:	21a5      	movs	r1, #165	@ 0xa5
 8003862:	f001 fe21 	bl	80054a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003870:	440b      	add	r3, r1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	617b      	str	r3, [r7, #20]
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	e7fd      	b.n	800389e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01f      	beq.n	80038e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	e012      	b.n	80038d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	7819      	ldrb	r1, [r3, #0]
 80038b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	3334      	adds	r3, #52	@ 0x34
 80038be:	460a      	mov	r2, r1
 80038c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d006      	beq.n	80038dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3301      	adds	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	d9e9      	bls.n	80038ae <prvInitialiseNewTask+0x66>
 80038da:	e000      	b.n	80038de <prvInitialiseNewTask+0x96>
			{
				break;
 80038dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038e6:	e003      	b.n	80038f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f2:	2b37      	cmp	r3, #55	@ 0x37
 80038f4:	d901      	bls.n	80038fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038f6:	2337      	movs	r3, #55	@ 0x37
 80038f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003904:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	2200      	movs	r2, #0
 800390a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	3304      	adds	r3, #4
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f965 	bl	8002be0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	3318      	adds	r3, #24
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f960 	bl	8002be0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003928:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003934:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	2200      	movs	r2, #0
 800393a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	2200      	movs	r2, #0
 8003942:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	3354      	adds	r3, #84	@ 0x54
 800394a:	224c      	movs	r2, #76	@ 0x4c
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fdaa 	bl	80054a8 <memset>
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	4a0d      	ldr	r2, [pc, #52]	@ (800398c <prvInitialiseNewTask+0x144>)
 8003958:	659a      	str	r2, [r3, #88]	@ 0x58
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	4a0c      	ldr	r2, [pc, #48]	@ (8003990 <prvInitialiseNewTask+0x148>)
 800395e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	4a0c      	ldr	r2, [pc, #48]	@ (8003994 <prvInitialiseNewTask+0x14c>)
 8003964:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	69b8      	ldr	r0, [r7, #24]
 800396c:	f001 f95a 	bl	8004c24 <pxPortInitialiseStack>
 8003970:	4602      	mov	r2, r0
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003982:	bf00      	nop
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	24004b10 	.word	0x24004b10
 8003990:	24004b78 	.word	0x24004b78
 8003994:	24004be0 	.word	0x24004be0

08003998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039a0:	f001 fa72 	bl	8004e88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <prvAddNewTaskToReadyList+0xc4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3301      	adds	r3, #1
 80039aa:	4a2c      	ldr	r2, [pc, #176]	@ (8003a5c <prvAddNewTaskToReadyList+0xc4>)
 80039ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003a60 <prvAddNewTaskToReadyList+0xc8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a60 <prvAddNewTaskToReadyList+0xc8>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039bc:	4b27      	ldr	r3, [pc, #156]	@ (8003a5c <prvAddNewTaskToReadyList+0xc4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d110      	bne.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039c4:	f000 fc2e 	bl	8004224 <prvInitialiseTaskLists>
 80039c8:	e00d      	b.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039ca:	4b26      	ldr	r3, [pc, #152]	@ (8003a64 <prvAddNewTaskToReadyList+0xcc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039d2:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <prvAddNewTaskToReadyList+0xc8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d802      	bhi.n	80039e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a60 <prvAddNewTaskToReadyList+0xc8>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039e6:	4b20      	ldr	r3, [pc, #128]	@ (8003a68 <prvAddNewTaskToReadyList+0xd0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <prvAddNewTaskToReadyList+0xd0>)
 80039ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <prvAddNewTaskToReadyList+0xd0>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <prvAddNewTaskToReadyList+0xd4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d903      	bls.n	8003a0c <prvAddNewTaskToReadyList+0x74>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <prvAddNewTaskToReadyList+0xd4>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <prvAddNewTaskToReadyList+0xd8>)
 8003a1a:	441a      	add	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7ff f8e9 	bl	8002bfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a28:	f001 fa60 	bl	8004eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <prvAddNewTaskToReadyList+0xcc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00e      	beq.n	8003a52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a34:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <prvAddNewTaskToReadyList+0xc8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d207      	bcs.n	8003a52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a42:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <prvAddNewTaskToReadyList+0xdc>)
 8003a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	24000d90 	.word	0x24000d90
 8003a60:	240008bc 	.word	0x240008bc
 8003a64:	24000d9c 	.word	0x24000d9c
 8003a68:	24000dac 	.word	0x24000dac
 8003a6c:	24000d98 	.word	0x24000d98
 8003a70:	240008c0 	.word	0x240008c0
 8003a74:	e000ed04 	.word	0xe000ed04

08003a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d018      	beq.n	8003abc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a8a:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <vTaskDelay+0x64>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <vTaskDelay+0x32>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60bb      	str	r3, [r7, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003aaa:	f000 f88b 	bl	8003bc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aae:	2100      	movs	r1, #0
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fd09 	bl	80044c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ab6:	f000 f893 	bl	8003be0 <xTaskResumeAll>
 8003aba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d107      	bne.n	8003ad2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <vTaskDelay+0x68>)
 8003ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	24000db8 	.word	0x24000db8
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003af2:	463a      	mov	r2, r7
 8003af4:	1d39      	adds	r1, r7, #4
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff f81c 	bl	8002b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	9202      	str	r2, [sp, #8]
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	460a      	mov	r2, r1
 8003b12:	4924      	ldr	r1, [pc, #144]	@ (8003ba4 <vTaskStartScheduler+0xc0>)
 8003b14:	4824      	ldr	r0, [pc, #144]	@ (8003ba8 <vTaskStartScheduler+0xc4>)
 8003b16:	f7ff fdf1 	bl	80036fc <xTaskCreateStatic>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <vTaskStartScheduler+0xc8>)
 8003b1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b20:	4b22      	ldr	r3, [pc, #136]	@ (8003bac <vTaskStartScheduler+0xc8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e001      	b.n	8003b32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b38:	f000 fd1a 	bl	8004570 <xTimerCreateTimerTask>
 8003b3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d11b      	bne.n	8003b7c <vTaskStartScheduler+0x98>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	613b      	str	r3, [r7, #16]
}
 8003b56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b58:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <vTaskStartScheduler+0xcc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3354      	adds	r3, #84	@ 0x54
 8003b5e:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <vTaskStartScheduler+0xd0>)
 8003b60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b62:	4b15      	ldr	r3, [pc, #84]	@ (8003bb8 <vTaskStartScheduler+0xd4>)
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b6a:	4b14      	ldr	r3, [pc, #80]	@ (8003bbc <vTaskStartScheduler+0xd8>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b70:	4b13      	ldr	r3, [pc, #76]	@ (8003bc0 <vTaskStartScheduler+0xdc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b76:	f001 f8e3 	bl	8004d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b7a:	e00f      	b.n	8003b9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d10b      	bne.n	8003b9c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60fb      	str	r3, [r7, #12]
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <vTaskStartScheduler+0xb4>
}
 8003b9c:	bf00      	nop
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	080056c4 	.word	0x080056c4
 8003ba8:	080041f5 	.word	0x080041f5
 8003bac:	24000db4 	.word	0x24000db4
 8003bb0:	240008bc 	.word	0x240008bc
 8003bb4:	24000014 	.word	0x24000014
 8003bb8:	24000db0 	.word	0x24000db0
 8003bbc:	24000d9c 	.word	0x24000d9c
 8003bc0:	24000d94 	.word	0x24000d94

08003bc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bc8:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <vTaskSuspendAll+0x18>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a03      	ldr	r2, [pc, #12]	@ (8003bdc <vTaskSuspendAll+0x18>)
 8003bd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	24000db8 	.word	0x24000db8

08003be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bee:	4b42      	ldr	r3, [pc, #264]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <xTaskResumeAll+0x2e>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	603b      	str	r3, [r7, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c0e:	f001 f93b 	bl	8004e88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c12:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a37      	ldr	r2, [pc, #220]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003c1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1c:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <xTaskResumeAll+0x118>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d162      	bne.n	8003cea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c24:	4b35      	ldr	r3, [pc, #212]	@ (8003cfc <xTaskResumeAll+0x11c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05e      	beq.n	8003cea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c2c:	e02f      	b.n	8003c8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c2e:	4b34      	ldr	r3, [pc, #208]	@ (8003d00 <xTaskResumeAll+0x120>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3318      	adds	r3, #24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff f83a 	bl	8002cb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff f835 	bl	8002cb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <xTaskResumeAll+0x124>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d903      	bls.n	8003c5e <xTaskResumeAll+0x7e>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d04 <xTaskResumeAll+0x124>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a27      	ldr	r2, [pc, #156]	@ (8003d08 <xTaskResumeAll+0x128>)
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fe ffc0 	bl	8002bfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7e:	4b23      	ldr	r3, [pc, #140]	@ (8003d0c <xTaskResumeAll+0x12c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003c88:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <xTaskResumeAll+0x130>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <xTaskResumeAll+0x120>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1cb      	bne.n	8003c2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c9c:	f000 fb66 	bl	800436c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d14 <xTaskResumeAll+0x134>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cac:	f000 f846 	bl	8003d3c <xTaskIncrementTick>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003cb6:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <xTaskResumeAll+0x130>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f1      	bne.n	8003cac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <xTaskResumeAll+0x134>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <xTaskResumeAll+0x130>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cda:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <xTaskResumeAll+0x138>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cea:	f001 f8ff 	bl	8004eec <vPortExitCritical>

	return xAlreadyYielded;
 8003cee:	68bb      	ldr	r3, [r7, #8]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	24000db8 	.word	0x24000db8
 8003cfc:	24000d90 	.word	0x24000d90
 8003d00:	24000d50 	.word	0x24000d50
 8003d04:	24000d98 	.word	0x24000d98
 8003d08:	240008c0 	.word	0x240008c0
 8003d0c:	240008bc 	.word	0x240008bc
 8003d10:	24000da4 	.word	0x24000da4
 8003d14:	24000da0 	.word	0x24000da0
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <xTaskGetTickCount+0x1c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	24000d94 	.word	0x24000d94

08003d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d46:	4b4f      	ldr	r3, [pc, #316]	@ (8003e84 <xTaskIncrementTick+0x148>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 8090 	bne.w	8003e70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d50:	4b4d      	ldr	r3, [pc, #308]	@ (8003e88 <xTaskIncrementTick+0x14c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d58:	4a4b      	ldr	r2, [pc, #300]	@ (8003e88 <xTaskIncrementTick+0x14c>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d121      	bne.n	8003da8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d64:	4b49      	ldr	r3, [pc, #292]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	e7fd      	b.n	8003d82 <xTaskIncrementTick+0x46>
 8003d86:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	4b40      	ldr	r3, [pc, #256]	@ (8003e90 <xTaskIncrementTick+0x154>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a3e      	ldr	r2, [pc, #248]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4a3e      	ldr	r2, [pc, #248]	@ (8003e90 <xTaskIncrementTick+0x154>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <xTaskIncrementTick+0x158>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4a3c      	ldr	r2, [pc, #240]	@ (8003e94 <xTaskIncrementTick+0x158>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	f000 fae2 	bl	800436c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da8:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <xTaskIncrementTick+0x15c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d349      	bcc.n	8003e46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db2:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbc:	4b36      	ldr	r3, [pc, #216]	@ (8003e98 <xTaskIncrementTick+0x15c>)
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc2:	601a      	str	r2, [r3, #0]
					break;
 8003dc4:	e03f      	b.n	8003e46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc6:	4b31      	ldr	r3, [pc, #196]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d203      	bcs.n	8003de6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dde:	4a2e      	ldr	r2, [pc, #184]	@ (8003e98 <xTaskIncrementTick+0x15c>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de4:	e02f      	b.n	8003e46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe ff62 	bl	8002cb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	3318      	adds	r3, #24
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe ff59 	bl	8002cb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e06:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <xTaskIncrementTick+0x160>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d903      	bls.n	8003e16 <xTaskIncrementTick+0xda>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <xTaskIncrementTick+0x160>)
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <xTaskIncrementTick+0x164>)
 8003e24:	441a      	add	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fee4 	bl	8002bfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <xTaskIncrementTick+0x168>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d3b8      	bcc.n	8003db2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e44:	e7b5      	b.n	8003db2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e46:	4b17      	ldr	r3, [pc, #92]	@ (8003ea4 <xTaskIncrementTick+0x168>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4c:	4914      	ldr	r1, [pc, #80]	@ (8003ea0 <xTaskIncrementTick+0x164>)
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d901      	bls.n	8003e62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e62:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <xTaskIncrementTick+0x16c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e004      	b.n	8003e7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e70:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <xTaskIncrementTick+0x170>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	4a0d      	ldr	r2, [pc, #52]	@ (8003eac <xTaskIncrementTick+0x170>)
 8003e78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	24000db8 	.word	0x24000db8
 8003e88:	24000d94 	.word	0x24000d94
 8003e8c:	24000d48 	.word	0x24000d48
 8003e90:	24000d4c 	.word	0x24000d4c
 8003e94:	24000da8 	.word	0x24000da8
 8003e98:	24000db0 	.word	0x24000db0
 8003e9c:	24000d98 	.word	0x24000d98
 8003ea0:	240008c0 	.word	0x240008c0
 8003ea4:	240008bc 	.word	0x240008bc
 8003ea8:	24000da4 	.word	0x24000da4
 8003eac:	24000da0 	.word	0x24000da0

08003eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <vTaskSwitchContext+0xb4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8003f68 <vTaskSwitchContext+0xb8>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec4:	e047      	b.n	8003f56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ec6:	4b28      	ldr	r3, [pc, #160]	@ (8003f68 <vTaskSwitchContext+0xb8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ecc:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <vTaskSwitchContext+0xbc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e011      	b.n	8003ef8 <vTaskSwitchContext+0x48>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <vTaskSwitchContext+0x42>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	607b      	str	r3, [r7, #4]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <vTaskSwitchContext+0x3e>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	491d      	ldr	r1, [pc, #116]	@ (8003f70 <vTaskSwitchContext+0xc0>)
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0e3      	beq.n	8003ed4 <vTaskSwitchContext+0x24>
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <vTaskSwitchContext+0xc0>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d104      	bne.n	8003f3c <vTaskSwitchContext+0x8c>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <vTaskSwitchContext+0xc4>)
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <vTaskSwitchContext+0xbc>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f4c:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <vTaskSwitchContext+0xc4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3354      	adds	r3, #84	@ 0x54
 8003f52:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <vTaskSwitchContext+0xc8>)
 8003f54:	6013      	str	r3, [r2, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	24000db8 	.word	0x24000db8
 8003f68:	24000da4 	.word	0x24000da4
 8003f6c:	24000d98 	.word	0x24000d98
 8003f70:	240008c0 	.word	0x240008c0
 8003f74:	240008bc 	.word	0x240008bc
 8003f78:	24000014 	.word	0x24000014

08003f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fa4:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <vTaskPlaceOnEventList+0x48>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3318      	adds	r3, #24
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fe fe48 	bl	8002c42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	6838      	ldr	r0, [r7, #0]
 8003fb6:	f000 fa87 	bl	80044c8 <prvAddCurrentTaskToDelayedList>
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	240008bc 	.word	0x240008bc

08003fc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	617b      	str	r3, [r7, #20]
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	e7fd      	b.n	8003fee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3318      	adds	r3, #24
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7fe fdfd 	bl	8002bfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	68b8      	ldr	r0, [r7, #8]
 8004010:	f000 fa5a 	bl	80044c8 <prvAddCurrentTaskToDelayedList>
	}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	240008bc 	.word	0x240008bc

08004020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60fb      	str	r3, [r7, #12]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3318      	adds	r3, #24
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fe2e 	bl	8002cb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004058:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <xTaskRemoveFromEventList+0xb0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11d      	bne.n	800409c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3304      	adds	r3, #4
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fe25 	bl	8002cb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406e:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <xTaskRemoveFromEventList+0xb4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d903      	bls.n	800407e <xTaskRemoveFromEventList+0x5e>
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <xTaskRemoveFromEventList+0xb4>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a13      	ldr	r2, [pc, #76]	@ (80040d8 <xTaskRemoveFromEventList+0xb8>)
 800408c:	441a      	add	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe fdb0 	bl	8002bfa <vListInsertEnd>
 800409a:	e005      	b.n	80040a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3318      	adds	r3, #24
 80040a0:	4619      	mov	r1, r3
 80040a2:	480e      	ldr	r0, [pc, #56]	@ (80040dc <xTaskRemoveFromEventList+0xbc>)
 80040a4:	f7fe fda9 	bl	8002bfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ac:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <xTaskRemoveFromEventList+0xc0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d905      	bls.n	80040c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040ba:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <xTaskRemoveFromEventList+0xc4>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e001      	b.n	80040c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040c6:	697b      	ldr	r3, [r7, #20]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	24000db8 	.word	0x24000db8
 80040d4:	24000d98 	.word	0x24000d98
 80040d8:	240008c0 	.word	0x240008c0
 80040dc:	24000d50 	.word	0x24000d50
 80040e0:	240008bc 	.word	0x240008bc
 80040e4:	24000da4 	.word	0x24000da4

080040e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <vTaskInternalSetTimeOutState+0x24>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <vTaskInternalSetTimeOutState+0x28>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	605a      	str	r2, [r3, #4]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	24000da8 	.word	0x24000da8
 8004110:	24000d94 	.word	0x24000d94

08004114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800415a:	f000 fe95 	bl	8004e88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800415e:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <xTaskCheckForTimeOut+0xc0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d102      	bne.n	800417e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004178:	2300      	movs	r3, #0
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e023      	b.n	80041c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <xTaskCheckForTimeOut+0xc4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d007      	beq.n	800419a <xTaskCheckForTimeOut+0x86>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004194:	2301      	movs	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e015      	b.n	80041c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d20b      	bcs.n	80041bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff99 	bl	80040e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e004      	b.n	80041c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041c6:	f000 fe91 	bl	8004eec <vPortExitCritical>

	return xReturn;
 80041ca:	69fb      	ldr	r3, [r7, #28]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	24000d94 	.word	0x24000d94
 80041d8:	24000da8 	.word	0x24000da8

080041dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <vTaskMissedYield+0x14>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	24000da4 	.word	0x24000da4

080041f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041fc:	f000 f852 	bl	80042a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004200:	4b06      	ldr	r3, [pc, #24]	@ (800421c <prvIdleTask+0x28>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d9f9      	bls.n	80041fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <prvIdleTask+0x2c>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004218:	e7f0      	b.n	80041fc <prvIdleTask+0x8>
 800421a:	bf00      	nop
 800421c:	240008c0 	.word	0x240008c0
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	e00c      	b.n	800424a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4a12      	ldr	r2, [pc, #72]	@ (8004284 <prvInitialiseTaskLists+0x60>)
 800423c:	4413      	add	r3, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fcae 	bl	8002ba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3301      	adds	r3, #1
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b37      	cmp	r3, #55	@ 0x37
 800424e:	d9ef      	bls.n	8004230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004250:	480d      	ldr	r0, [pc, #52]	@ (8004288 <prvInitialiseTaskLists+0x64>)
 8004252:	f7fe fca5 	bl	8002ba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004256:	480d      	ldr	r0, [pc, #52]	@ (800428c <prvInitialiseTaskLists+0x68>)
 8004258:	f7fe fca2 	bl	8002ba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800425c:	480c      	ldr	r0, [pc, #48]	@ (8004290 <prvInitialiseTaskLists+0x6c>)
 800425e:	f7fe fc9f 	bl	8002ba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004262:	480c      	ldr	r0, [pc, #48]	@ (8004294 <prvInitialiseTaskLists+0x70>)
 8004264:	f7fe fc9c 	bl	8002ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004268:	480b      	ldr	r0, [pc, #44]	@ (8004298 <prvInitialiseTaskLists+0x74>)
 800426a:	f7fe fc99 	bl	8002ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800426e:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <prvInitialiseTaskLists+0x78>)
 8004270:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <prvInitialiseTaskLists+0x64>)
 8004272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004274:	4b0a      	ldr	r3, [pc, #40]	@ (80042a0 <prvInitialiseTaskLists+0x7c>)
 8004276:	4a05      	ldr	r2, [pc, #20]	@ (800428c <prvInitialiseTaskLists+0x68>)
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	240008c0 	.word	0x240008c0
 8004288:	24000d20 	.word	0x24000d20
 800428c:	24000d34 	.word	0x24000d34
 8004290:	24000d50 	.word	0x24000d50
 8004294:	24000d64 	.word	0x24000d64
 8004298:	24000d7c 	.word	0x24000d7c
 800429c:	24000d48 	.word	0x24000d48
 80042a0:	24000d4c 	.word	0x24000d4c

080042a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042aa:	e019      	b.n	80042e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042ac:	f000 fdec 	bl	8004e88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <prvCheckTasksWaitingTermination+0x50>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fcf9 	bl	8002cb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <prvCheckTasksWaitingTermination+0x54>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a0b      	ldr	r2, [pc, #44]	@ (80042f8 <prvCheckTasksWaitingTermination+0x54>)
 80042ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042cc:	4b0b      	ldr	r3, [pc, #44]	@ (80042fc <prvCheckTasksWaitingTermination+0x58>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <prvCheckTasksWaitingTermination+0x58>)
 80042d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042d6:	f000 fe09 	bl	8004eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f810 	bl	8004300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <prvCheckTasksWaitingTermination+0x58>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e1      	bne.n	80042ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	24000d64 	.word	0x24000d64
 80042f8:	24000d90 	.word	0x24000d90
 80042fc:	24000d78 	.word	0x24000d78

08004300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3354      	adds	r3, #84	@ 0x54
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f8d3 	bl	80054b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004318:	2b00      	cmp	r3, #0
 800431a:	d108      	bne.n	800432e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	4618      	mov	r0, r3
 8004322:	f000 ffa1 	bl	8005268 <vPortFree>
				vPortFree( pxTCB );
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 ff9e 	bl	8005268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800432c:	e019      	b.n	8004362 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004334:	2b01      	cmp	r3, #1
 8004336:	d103      	bne.n	8004340 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 ff95 	bl	8005268 <vPortFree>
	}
 800433e:	e010      	b.n	8004362 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004346:	2b02      	cmp	r3, #2
 8004348:	d00b      	beq.n	8004362 <prvDeleteTCB+0x62>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60fb      	str	r3, [r7, #12]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <prvDeleteTCB+0x5e>
	}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004372:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <prvResetNextTaskUnblockTime+0x38>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800437c:	4b0a      	ldr	r3, [pc, #40]	@ (80043a8 <prvResetNextTaskUnblockTime+0x3c>)
 800437e:	f04f 32ff 	mov.w	r2, #4294967295
 8004382:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004384:	e008      	b.n	8004398 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004386:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <prvResetNextTaskUnblockTime+0x38>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a04      	ldr	r2, [pc, #16]	@ (80043a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004396:	6013      	str	r3, [r2, #0]
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	24000d48 	.word	0x24000d48
 80043a8:	24000db0 	.word	0x24000db0

080043ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043b2:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <xTaskGetSchedulerState+0x34>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ba:	2301      	movs	r3, #1
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	e008      	b.n	80043d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043c0:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <xTaskGetSchedulerState+0x38>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043c8:	2302      	movs	r3, #2
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	e001      	b.n	80043d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043d2:	687b      	ldr	r3, [r7, #4]
	}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	24000d9c 	.word	0x24000d9c
 80043e4:	24000db8 	.word	0x24000db8

080043e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d058      	beq.n	80044b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <xTaskPriorityDisinherit+0xd4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	429a      	cmp	r2, r3
 8004406:	d00b      	beq.n	8004420 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60bb      	str	r3, [r7, #8]
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	429a      	cmp	r2, r3
 8004454:	d02c      	beq.n	80044b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445a:	2b00      	cmp	r3, #0
 800445c:	d128      	bne.n	80044b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fc26 	bl	8002cb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004480:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <xTaskPriorityDisinherit+0xd8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d903      	bls.n	8004490 <xTaskPriorityDisinherit+0xa8>
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4a0c      	ldr	r2, [pc, #48]	@ (80044c0 <xTaskPriorityDisinherit+0xd8>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4a09      	ldr	r2, [pc, #36]	@ (80044c4 <xTaskPriorityDisinherit+0xdc>)
 800449e:	441a      	add	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fe fba7 	bl	8002bfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044b0:	697b      	ldr	r3, [r7, #20]
	}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	240008bc 	.word	0x240008bc
 80044c0:	24000d98 	.word	0x24000d98
 80044c4:	240008c0 	.word	0x240008c0

080044c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044d2:	4b21      	ldr	r3, [pc, #132]	@ (8004558 <prvAddCurrentTaskToDelayedList+0x90>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d8:	4b20      	ldr	r3, [pc, #128]	@ (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3304      	adds	r3, #4
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fbe8 	bl	8002cb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d10a      	bne.n	8004502 <prvAddCurrentTaskToDelayedList+0x3a>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044f2:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4819      	ldr	r0, [pc, #100]	@ (8004560 <prvAddCurrentTaskToDelayedList+0x98>)
 80044fc:	f7fe fb7d 	bl	8002bfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004500:	e026      	b.n	8004550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4413      	add	r3, r2
 8004508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800450a:	4b14      	ldr	r3, [pc, #80]	@ (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	429a      	cmp	r2, r3
 8004518:	d209      	bcs.n	800452e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451a:	4b12      	ldr	r3, [pc, #72]	@ (8004564 <prvAddCurrentTaskToDelayedList+0x9c>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b0f      	ldr	r3, [pc, #60]	@ (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7fe fb8b 	bl	8002c42 <vListInsert>
}
 800452c:	e010      	b.n	8004550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452e:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f7fe fb81 	bl	8002c42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004540:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d202      	bcs.n	8004550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800454a:	4a08      	ldr	r2, [pc, #32]	@ (800456c <prvAddCurrentTaskToDelayedList+0xa4>)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6013      	str	r3, [r2, #0]
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	24000d94 	.word	0x24000d94
 800455c:	240008bc 	.word	0x240008bc
 8004560:	24000d7c 	.word	0x24000d7c
 8004564:	24000d4c 	.word	0x24000d4c
 8004568:	24000d48 	.word	0x24000d48
 800456c:	24000db0 	.word	0x24000db0

08004570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	@ 0x28
 8004574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800457a:	f000 fb13 	bl	8004ba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800457e:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <xTimerCreateTimerTask+0x84>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d021      	beq.n	80045ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800458e:	1d3a      	adds	r2, r7, #4
 8004590:	f107 0108 	add.w	r1, r7, #8
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fae7 	bl	8002b6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	9202      	str	r2, [sp, #8]
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	2302      	movs	r3, #2
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	460a      	mov	r2, r1
 80045b0:	4911      	ldr	r1, [pc, #68]	@ (80045f8 <xTimerCreateTimerTask+0x88>)
 80045b2:	4812      	ldr	r0, [pc, #72]	@ (80045fc <xTimerCreateTimerTask+0x8c>)
 80045b4:	f7ff f8a2 	bl	80036fc <xTaskCreateStatic>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <xTimerCreateTimerTask+0x90>)
 80045bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045be:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <xTimerCreateTimerTask+0x90>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	613b      	str	r3, [r7, #16]
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045e8:	697b      	ldr	r3, [r7, #20]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	24000dec 	.word	0x24000dec
 80045f8:	080056cc 	.word	0x080056cc
 80045fc:	0800473d 	.word	0x0800473d
 8004600:	24000df0 	.word	0x24000df0

08004604 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	@ 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004612:	2300      	movs	r3, #0
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <xTimerGenericCommand+0x30>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	623b      	str	r3, [r7, #32]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004634:	4b19      	ldr	r3, [pc, #100]	@ (800469c <xTimerGenericCommand+0x98>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02a      	beq.n	8004692 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b05      	cmp	r3, #5
 800464c:	dc18      	bgt.n	8004680 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800464e:	f7ff fead 	bl	80043ac <xTaskGetSchedulerState>
 8004652:	4603      	mov	r3, r0
 8004654:	2b02      	cmp	r3, #2
 8004656:	d109      	bne.n	800466c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004658:	4b10      	ldr	r3, [pc, #64]	@ (800469c <xTimerGenericCommand+0x98>)
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	f107 0110 	add.w	r1, r7, #16
 8004660:	2300      	movs	r3, #0
 8004662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004664:	f7fe fc5a 	bl	8002f1c <xQueueGenericSend>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24
 800466a:	e012      	b.n	8004692 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <xTimerGenericCommand+0x98>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	f107 0110 	add.w	r1, r7, #16
 8004674:	2300      	movs	r3, #0
 8004676:	2200      	movs	r2, #0
 8004678:	f7fe fc50 	bl	8002f1c <xQueueGenericSend>
 800467c:	6278      	str	r0, [r7, #36]	@ 0x24
 800467e:	e008      	b.n	8004692 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <xTimerGenericCommand+0x98>)
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	f107 0110 	add.w	r1, r7, #16
 8004688:	2300      	movs	r3, #0
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	f7fe fd48 	bl	8003120 <xQueueGenericSendFromISR>
 8004690:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004694:	4618      	mov	r0, r3
 8004696:	3728      	adds	r7, #40	@ 0x28
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	24000dec 	.word	0x24000dec

080046a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046aa:	4b23      	ldr	r3, [pc, #140]	@ (8004738 <prvProcessExpiredTimer+0x98>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fafb 	bl	8002cb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d023      	beq.n	8004714 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	18d1      	adds	r1, r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	6978      	ldr	r0, [r7, #20]
 80046da:	f000 f8d5 	bl	8004888 <prvInsertTimerInActiveList>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046e4:	2300      	movs	r3, #0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	2100      	movs	r1, #0
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f7ff ff88 	bl	8004604 <xTimerGenericCommand>
 80046f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d114      	bne.n	8004726 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	4798      	blx	r3
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	24000de4 	.word	0x24000de4

0800473c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004744:	f107 0308 	add.w	r3, r7, #8
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f859 	bl	8004800 <prvGetNextExpireTime>
 800474e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4619      	mov	r1, r3
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f805 	bl	8004764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800475a:	f000 f8d7 	bl	800490c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800475e:	bf00      	nop
 8004760:	e7f0      	b.n	8004744 <prvTimerTask+0x8>
	...

08004764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800476e:	f7ff fa29 	bl	8003bc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f866 	bl	8004848 <prvSampleTimeNow>
 800477c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d130      	bne.n	80047e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <prvProcessTimerOrBlockTask+0x3c>
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	429a      	cmp	r2, r3
 8004790:	d806      	bhi.n	80047a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004792:	f7ff fa25 	bl	8003be0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff81 	bl	80046a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800479e:	e024      	b.n	80047ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047a6:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <prvProcessTimerOrBlockTask+0x90>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <prvProcessTimerOrBlockTask+0x50>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <prvProcessTimerOrBlockTask+0x52>
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <prvProcessTimerOrBlockTask+0x94>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f7fe ff65 	bl	8003694 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047ca:	f7ff fa09 	bl	8003be0 <xTaskResumeAll>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047d4:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <prvProcessTimerOrBlockTask+0x98>)
 80047d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	f3bf 8f6f 	isb	sy
}
 80047e4:	e001      	b.n	80047ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047e6:	f7ff f9fb 	bl	8003be0 <xTaskResumeAll>
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	24000de8 	.word	0x24000de8
 80047f8:	24000dec 	.word	0x24000dec
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004808:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <prvGetNextExpireTime+0x44>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <prvGetNextExpireTime+0x16>
 8004812:	2201      	movs	r2, #1
 8004814:	e000      	b.n	8004818 <prvGetNextExpireTime+0x18>
 8004816:	2200      	movs	r2, #0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004824:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <prvGetNextExpireTime+0x44>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e001      	b.n	8004834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004834:	68fb      	ldr	r3, [r7, #12]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	24000de4 	.word	0x24000de4

08004848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004850:	f7ff fa64 	bl	8003d1c <xTaskGetTickCount>
 8004854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <prvSampleTimeNow+0x3c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d205      	bcs.n	800486c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004860:	f000 f93a 	bl	8004ad8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e002      	b.n	8004872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004872:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <prvSampleTimeNow+0x3c>)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004878:	68fb      	ldr	r3, [r7, #12]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	24000df4 	.word	0x24000df4

08004888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d812      	bhi.n	80048d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e01b      	b.n	80048fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <prvInsertTimerInActiveList+0x7c>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fe f9b8 	bl	8002c42 <vListInsert>
 80048d2:	e012      	b.n	80048fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d206      	bcs.n	80048ea <prvInsertTimerInActiveList+0x62>
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e007      	b.n	80048fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ea:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <prvInsertTimerInActiveList+0x80>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe f9a4 	bl	8002c42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048fa:	697b      	ldr	r3, [r7, #20]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	24000de8 	.word	0x24000de8
 8004908:	24000de4 	.word	0x24000de4

0800490c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08e      	sub	sp, #56	@ 0x38
 8004910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004912:	e0ce      	b.n	8004ab2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da19      	bge.n	800494e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	3304      	adds	r3, #4
 800491e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	61fb      	str	r3, [r7, #28]
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	e7fd      	b.n	800493a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800493e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004944:	6850      	ldr	r0, [r2, #4]
 8004946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	4611      	mov	r1, r2
 800494c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f2c0 80ae 	blt.w	8004ab2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d004      	beq.n	800496c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004964:	3304      	adds	r3, #4
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe f9a4 	bl	8002cb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800496c:	463b      	mov	r3, r7
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff ff6a 	bl	8004848 <prvSampleTimeNow>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b09      	cmp	r3, #9
 800497a:	f200 8097 	bhi.w	8004aac <prvProcessReceivedCommands+0x1a0>
 800497e:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <prvProcessReceivedCommands+0x78>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049ad 	.word	0x080049ad
 8004990:	08004a23 	.word	0x08004a23
 8004994:	08004a37 	.word	0x08004a37
 8004998:	08004a83 	.word	0x08004a83
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049ad 	.word	0x080049ad
 80049a4:	08004a23 	.word	0x08004a23
 80049a8:	08004a37 	.word	0x08004a37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	18d1      	adds	r1, r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049cc:	f7ff ff5c 	bl	8004888 <prvInsertTimerInActiveList>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d06c      	beq.n	8004ab0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d061      	beq.n	8004ab0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	441a      	add	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	2100      	movs	r1, #0
 80049fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049fe:	f7ff fe01 	bl	8004604 <xTimerGenericCommand>
 8004a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d152      	bne.n	8004ab0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	61bb      	str	r3, [r7, #24]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a34:	e03d      	b.n	8004ab2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	617b      	str	r3, [r7, #20]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	18d1      	adds	r1, r2, r3
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a7c:	f7ff ff04 	bl	8004888 <prvInsertTimerInActiveList>
					break;
 8004a80:	e017      	b.n	8004ab2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a92:	f000 fbe9 	bl	8005268 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a96:	e00c      	b.n	8004ab2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004aaa:	e002      	b.n	8004ab2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004ab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ab2:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <prvProcessReceivedCommands+0x1c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1d39      	adds	r1, r7, #4
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe fbce 	bl	800325c <xQueueReceive>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f47f af26 	bne.w	8004914 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	3730      	adds	r7, #48	@ 0x30
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	24000dec 	.word	0x24000dec

08004ad8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ade:	e049      	b.n	8004b74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b9c <prvSwitchTimerLists+0xc4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aea:	4b2c      	ldr	r3, [pc, #176]	@ (8004b9c <prvSwitchTimerLists+0xc4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe f8db 	bl	8002cb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d02f      	beq.n	8004b74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d90e      	bls.n	8004b44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b32:	4b1a      	ldr	r3, [pc, #104]	@ (8004b9c <prvSwitchTimerLists+0xc4>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f7fe f880 	bl	8002c42 <vListInsert>
 8004b42:	e017      	b.n	8004b74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b44:	2300      	movs	r3, #0
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f7ff fd58 	bl	8004604 <xTimerGenericCommand>
 8004b54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	603b      	str	r3, [r7, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b74:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <prvSwitchTimerLists+0xc4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1b0      	bne.n	8004ae0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b7e:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <prvSwitchTimerLists+0xc4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <prvSwitchTimerLists+0xc8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <prvSwitchTimerLists+0xc4>)
 8004b8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ba0 <prvSwitchTimerLists+0xc8>)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6013      	str	r3, [r2, #0]
}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	24000de4 	.word	0x24000de4
 8004ba0:	24000de8 	.word	0x24000de8

08004ba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004baa:	f000 f96d 	bl	8004e88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bae:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <prvCheckForValidListAndQueue+0x60>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d120      	bne.n	8004bf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bb6:	4814      	ldr	r0, [pc, #80]	@ (8004c08 <prvCheckForValidListAndQueue+0x64>)
 8004bb8:	f7fd fff2 	bl	8002ba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bbc:	4813      	ldr	r0, [pc, #76]	@ (8004c0c <prvCheckForValidListAndQueue+0x68>)
 8004bbe:	f7fd ffef 	bl	8002ba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bc2:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <prvCheckForValidListAndQueue+0x6c>)
 8004bc4:	4a10      	ldr	r2, [pc, #64]	@ (8004c08 <prvCheckForValidListAndQueue+0x64>)
 8004bc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bc8:	4b12      	ldr	r3, [pc, #72]	@ (8004c14 <prvCheckForValidListAndQueue+0x70>)
 8004bca:	4a10      	ldr	r2, [pc, #64]	@ (8004c0c <prvCheckForValidListAndQueue+0x68>)
 8004bcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <prvCheckForValidListAndQueue+0x74>)
 8004bd4:	4a11      	ldr	r2, [pc, #68]	@ (8004c1c <prvCheckForValidListAndQueue+0x78>)
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	200a      	movs	r0, #10
 8004bda:	f7fe f8ff 	bl	8002ddc <xQueueGenericCreateStatic>
 8004bde:	4603      	mov	r3, r0
 8004be0:	4a08      	ldr	r2, [pc, #32]	@ (8004c04 <prvCheckForValidListAndQueue+0x60>)
 8004be2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004be4:	4b07      	ldr	r3, [pc, #28]	@ (8004c04 <prvCheckForValidListAndQueue+0x60>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <prvCheckForValidListAndQueue+0x60>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	490b      	ldr	r1, [pc, #44]	@ (8004c20 <prvCheckForValidListAndQueue+0x7c>)
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fd24 	bl	8003640 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bf8:	f000 f978 	bl	8004eec <vPortExitCritical>
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	24000dec 	.word	0x24000dec
 8004c08:	24000dbc 	.word	0x24000dbc
 8004c0c:	24000dd0 	.word	0x24000dd0
 8004c10:	24000de4 	.word	0x24000de4
 8004c14:	24000de8 	.word	0x24000de8
 8004c18:	24000e98 	.word	0x24000e98
 8004c1c:	24000df8 	.word	0x24000df8
 8004c20:	080056d4 	.word	0x080056d4

08004c24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3b04      	subs	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b04      	subs	r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3b04      	subs	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c54:	4a0c      	ldr	r2, [pc, #48]	@ (8004c88 <pxPortInitialiseStack+0x64>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b14      	subs	r3, #20
 8004c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3b04      	subs	r3, #4
 8004c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f06f 0202 	mvn.w	r2, #2
 8004c72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b20      	subs	r3, #32
 8004c78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	08004c8d 	.word	0x08004c8d

08004c8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c96:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <prvTaskExitError+0x58>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d00b      	beq.n	8004cb8 <prvTaskExitError+0x2c>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60fb      	str	r3, [r7, #12]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <prvTaskExitError+0x28>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60bb      	str	r3, [r7, #8]
}
 8004cca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ccc:	bf00      	nop
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0fc      	beq.n	8004cce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	24000010 	.word	0x24000010
	...

08004cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cf0:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <pxCurrentTCBConst2>)
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	6808      	ldr	r0, [r1, #0]
 8004cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfa:	f380 8809 	msr	PSP, r0
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f380 8811 	msr	BASEPRI, r0
 8004d0a:	4770      	bx	lr
 8004d0c:	f3af 8000 	nop.w

08004d10 <pxCurrentTCBConst2>:
 8004d10:	240008bc 	.word	0x240008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop

08004d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d18:	4808      	ldr	r0, [pc, #32]	@ (8004d3c <prvPortStartFirstTask+0x24>)
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	6800      	ldr	r0, [r0, #0]
 8004d1e:	f380 8808 	msr	MSP, r0
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f380 8814 	msr	CONTROL, r0
 8004d2a:	b662      	cpsie	i
 8004d2c:	b661      	cpsie	f
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	df00      	svc	0
 8004d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d3a:	bf00      	nop
 8004d3c:	e000ed08 	.word	0xe000ed08

08004d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d46:	4b47      	ldr	r3, [pc, #284]	@ (8004e64 <xPortStartScheduler+0x124>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a47      	ldr	r2, [pc, #284]	@ (8004e68 <xPortStartScheduler+0x128>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10b      	bne.n	8004d68 <xPortStartScheduler+0x28>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	e7fd      	b.n	8004d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d68:	4b3e      	ldr	r3, [pc, #248]	@ (8004e64 <xPortStartScheduler+0x124>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e6c <xPortStartScheduler+0x12c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10b      	bne.n	8004d8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	613b      	str	r3, [r7, #16]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d8a:	4b39      	ldr	r3, [pc, #228]	@ (8004e70 <xPortStartScheduler+0x130>)
 8004d8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	22ff      	movs	r2, #255	@ 0xff
 8004d9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	4b31      	ldr	r3, [pc, #196]	@ (8004e74 <xPortStartScheduler+0x134>)
 8004db0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004db2:	4b31      	ldr	r3, [pc, #196]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004db4:	2207      	movs	r2, #7
 8004db6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004db8:	e009      	b.n	8004dce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004dba:	4b2f      	ldr	r3, [pc, #188]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004dc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd6:	2b80      	cmp	r3, #128	@ 0x80
 8004dd8:	d0ef      	beq.n	8004dba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dda:	4b27      	ldr	r3, [pc, #156]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1c3 0307 	rsb	r3, r3, #7
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d00b      	beq.n	8004dfe <xPortStartScheduler+0xbe>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60bb      	str	r3, [r7, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	e7fd      	b.n	8004dfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	4a1c      	ldr	r2, [pc, #112]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004e06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e08:	4b1b      	ldr	r3, [pc, #108]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e10:	4a19      	ldr	r2, [pc, #100]	@ (8004e78 <xPortStartScheduler+0x138>)
 8004e12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e1c:	4b17      	ldr	r3, [pc, #92]	@ (8004e7c <xPortStartScheduler+0x13c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <xPortStartScheduler+0x13c>)
 8004e22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e28:	4b14      	ldr	r3, [pc, #80]	@ (8004e7c <xPortStartScheduler+0x13c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a13      	ldr	r2, [pc, #76]	@ (8004e7c <xPortStartScheduler+0x13c>)
 8004e2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e34:	f000 f8da 	bl	8004fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e38:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <xPortStartScheduler+0x140>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e3e:	f000 f8f9 	bl	8005034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <xPortStartScheduler+0x144>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a0f      	ldr	r2, [pc, #60]	@ (8004e84 <xPortStartScheduler+0x144>)
 8004e48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e4e:	f7ff ff63 	bl	8004d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e52:	f7ff f82d 	bl	8003eb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004e56:	f7ff ff19 	bl	8004c8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	e000ed00 	.word	0xe000ed00
 8004e68:	410fc271 	.word	0x410fc271
 8004e6c:	410fc270 	.word	0x410fc270
 8004e70:	e000e400 	.word	0xe000e400
 8004e74:	24000ee8 	.word	0x24000ee8
 8004e78:	24000eec 	.word	0x24000eec
 8004e7c:	e000ed20 	.word	0xe000ed20
 8004e80:	24000010 	.word	0x24000010
 8004e84:	e000ef34 	.word	0xe000ef34

08004e88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
}
 8004ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <vPortEnterCritical+0x5c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee4 <vPortEnterCritical+0x5c>)
 8004eaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <vPortEnterCritical+0x5c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d110      	bne.n	8004ed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <vPortEnterCritical+0x60>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	603b      	str	r3, [r7, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <vPortEnterCritical+0x4a>
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	24000010 	.word	0x24000010
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <vPortExitCritical+0x50>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <vPortExitCritical+0x26>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	607b      	str	r3, [r7, #4]
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f12:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <vPortExitCritical+0x50>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <vPortExitCritical+0x50>)
 8004f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f1c:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <vPortExitCritical+0x50>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <vPortExitCritical+0x44>
 8004f24:	2300      	movs	r3, #0
 8004f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	24000010 	.word	0x24000010

08004f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f40:	f3ef 8009 	mrs	r0, PSP
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <pxCurrentTCBConst>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f01e 0f10 	tst.w	lr, #16
 8004f50:	bf08      	it	eq
 8004f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	6010      	str	r0, [r2, #0]
 8004f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f64:	f380 8811 	msr	BASEPRI, r0
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f7fe ff9e 	bl	8003eb0 <vTaskSwitchContext>
 8004f74:	f04f 0000 	mov.w	r0, #0
 8004f78:	f380 8811 	msr	BASEPRI, r0
 8004f7c:	bc09      	pop	{r0, r3}
 8004f7e:	6819      	ldr	r1, [r3, #0]
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f86:	f01e 0f10 	tst.w	lr, #16
 8004f8a:	bf08      	it	eq
 8004f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f90:	f380 8809 	msr	PSP, r0
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	f3af 8000 	nop.w

08004fa0 <pxCurrentTCBConst>:
 8004fa0:	240008bc 	.word	0x240008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop

08004fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	607b      	str	r3, [r7, #4]
}
 8004fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fc2:	f7fe febb 	bl	8003d3c <xTaskIncrementTick>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <xPortSysTickHandler+0x40>)
 8004fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f383 8811 	msr	BASEPRI, r3
}
 8004fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <vPortSetupTimerInterrupt+0x34>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <vPortSetupTimerInterrupt+0x38>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <vPortSetupTimerInterrupt+0x3c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0a      	ldr	r2, [pc, #40]	@ (800502c <vPortSetupTimerInterrupt+0x40>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	099b      	lsrs	r3, r3, #6
 8005008:	4a09      	ldr	r2, [pc, #36]	@ (8005030 <vPortSetupTimerInterrupt+0x44>)
 800500a:	3b01      	subs	r3, #1
 800500c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800500e:	4b04      	ldr	r3, [pc, #16]	@ (8005020 <vPortSetupTimerInterrupt+0x34>)
 8005010:	2207      	movs	r2, #7
 8005012:	601a      	str	r2, [r3, #0]
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	e000e010 	.word	0xe000e010
 8005024:	e000e018 	.word	0xe000e018
 8005028:	24000000 	.word	0x24000000
 800502c:	10624dd3 	.word	0x10624dd3
 8005030:	e000e014 	.word	0xe000e014

08005034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005044 <vPortEnableVFP+0x10>
 8005038:	6801      	ldr	r1, [r0, #0]
 800503a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800503e:	6001      	str	r1, [r0, #0]
 8005040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005042:	bf00      	nop
 8005044:	e000ed88 	.word	0xe000ed88

08005048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800504e:	f3ef 8305 	mrs	r3, IPSR
 8005052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	d915      	bls.n	8005086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800505a:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <vPortValidateInterruptPriority+0x74>)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005064:	4b16      	ldr	r3, [pc, #88]	@ (80050c0 <vPortValidateInterruptPriority+0x78>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	7afa      	ldrb	r2, [r7, #11]
 800506a:	429a      	cmp	r2, r3
 800506c:	d20b      	bcs.n	8005086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005086:	4b0f      	ldr	r3, [pc, #60]	@ (80050c4 <vPortValidateInterruptPriority+0x7c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800508e:	4b0e      	ldr	r3, [pc, #56]	@ (80050c8 <vPortValidateInterruptPriority+0x80>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d90b      	bls.n	80050ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	603b      	str	r3, [r7, #0]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <vPortValidateInterruptPriority+0x62>
	}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	e000e3f0 	.word	0xe000e3f0
 80050c0:	24000ee8 	.word	0x24000ee8
 80050c4:	e000ed0c 	.word	0xe000ed0c
 80050c8:	24000eec 	.word	0x24000eec

080050cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	@ 0x28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050d8:	f7fe fd74 	bl	8003bc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005250 <pvPortMalloc+0x184>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050e4:	f000 f924 	bl	8005330 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005254 <pvPortMalloc+0x188>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f040 8095 	bne.w	8005220 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01e      	beq.n	800513a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80050fc:	2208      	movs	r2, #8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d015      	beq.n	800513a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f023 0307 	bic.w	r3, r3, #7
 8005114:	3308      	adds	r3, #8
 8005116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <pvPortMalloc+0x6e>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	617b      	str	r3, [r7, #20]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d06f      	beq.n	8005220 <pvPortMalloc+0x154>
 8005140:	4b45      	ldr	r3, [pc, #276]	@ (8005258 <pvPortMalloc+0x18c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d86a      	bhi.n	8005220 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800514a:	4b44      	ldr	r3, [pc, #272]	@ (800525c <pvPortMalloc+0x190>)
 800514c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800514e:	4b43      	ldr	r3, [pc, #268]	@ (800525c <pvPortMalloc+0x190>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005154:	e004      	b.n	8005160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d903      	bls.n	8005172 <pvPortMalloc+0xa6>
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f1      	bne.n	8005156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005172:	4b37      	ldr	r3, [pc, #220]	@ (8005250 <pvPortMalloc+0x184>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005178:	429a      	cmp	r2, r3
 800517a:	d051      	beq.n	8005220 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2208      	movs	r2, #8
 8005182:	4413      	add	r3, r2
 8005184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	1ad2      	subs	r2, r2, r3
 8005196:	2308      	movs	r3, #8
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	429a      	cmp	r2, r3
 800519c:	d920      	bls.n	80051e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800519e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4413      	add	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00b      	beq.n	80051c8 <pvPortMalloc+0xfc>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	613b      	str	r3, [r7, #16]
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051da:	69b8      	ldr	r0, [r7, #24]
 80051dc:	f000 f90a 	bl	80053f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <pvPortMalloc+0x18c>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005258 <pvPortMalloc+0x18c>)
 80051ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005258 <pvPortMalloc+0x18c>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005260 <pvPortMalloc+0x194>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d203      	bcs.n	8005202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051fa:	4b17      	ldr	r3, [pc, #92]	@ (8005258 <pvPortMalloc+0x18c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a18      	ldr	r2, [pc, #96]	@ (8005260 <pvPortMalloc+0x194>)
 8005200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4b13      	ldr	r3, [pc, #76]	@ (8005254 <pvPortMalloc+0x188>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	431a      	orrs	r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005216:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <pvPortMalloc+0x198>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	4a11      	ldr	r2, [pc, #68]	@ (8005264 <pvPortMalloc+0x198>)
 800521e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005220:	f7fe fcde 	bl	8003be0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <pvPortMalloc+0x17a>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60fb      	str	r3, [r7, #12]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <pvPortMalloc+0x176>
	return pvReturn;
 8005246:	69fb      	ldr	r3, [r7, #28]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3728      	adds	r7, #40	@ 0x28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	24004af8 	.word	0x24004af8
 8005254:	24004b0c 	.word	0x24004b0c
 8005258:	24004afc 	.word	0x24004afc
 800525c:	24004af0 	.word	0x24004af0
 8005260:	24004b00 	.word	0x24004b00
 8005264:	24004b04 	.word	0x24004b04

08005268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04f      	beq.n	800531a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800527a:	2308      	movs	r3, #8
 800527c:	425b      	negs	r3, r3
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4413      	add	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	4b25      	ldr	r3, [pc, #148]	@ (8005324 <vPortFree+0xbc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4013      	ands	r3, r2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <vPortFree+0x46>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60fb      	str	r3, [r7, #12]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <vPortFree+0x66>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60bb      	str	r3, [r7, #8]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <vPortFree+0xbc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01e      	beq.n	800531a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d11a      	bne.n	800531a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005324 <vPortFree+0xbc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052f4:	f7fe fc66 	bl	8003bc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <vPortFree+0xc0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4413      	add	r3, r2
 8005302:	4a09      	ldr	r2, [pc, #36]	@ (8005328 <vPortFree+0xc0>)
 8005304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	f000 f874 	bl	80053f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800530c:	4b07      	ldr	r3, [pc, #28]	@ (800532c <vPortFree+0xc4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	4a06      	ldr	r2, [pc, #24]	@ (800532c <vPortFree+0xc4>)
 8005314:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005316:	f7fe fc63 	bl	8003be0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	24004b0c 	.word	0x24004b0c
 8005328:	24004afc 	.word	0x24004afc
 800532c:	24004b08 	.word	0x24004b08

08005330 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005336:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800533a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800533c:	4b27      	ldr	r3, [pc, #156]	@ (80053dc <prvHeapInit+0xac>)
 800533e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00c      	beq.n	8005364 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3307      	adds	r3, #7
 800534e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <prvHeapInit+0xac>)
 8005360:	4413      	add	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <prvHeapInit+0xb0>)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800536e:	4b1c      	ldr	r3, [pc, #112]	@ (80053e0 <prvHeapInit+0xb0>)
 8005370:	2200      	movs	r2, #0
 8005372:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4413      	add	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800537c:	2208      	movs	r2, #8
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4a15      	ldr	r2, [pc, #84]	@ (80053e4 <prvHeapInit+0xb4>)
 8005390:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005392:	4b14      	ldr	r3, [pc, #80]	@ (80053e4 <prvHeapInit+0xb4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800539a:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <prvHeapInit+0xb4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053b0:	4b0c      	ldr	r3, [pc, #48]	@ (80053e4 <prvHeapInit+0xb4>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4a0a      	ldr	r2, [pc, #40]	@ (80053e8 <prvHeapInit+0xb8>)
 80053be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a09      	ldr	r2, [pc, #36]	@ (80053ec <prvHeapInit+0xbc>)
 80053c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053c8:	4b09      	ldr	r3, [pc, #36]	@ (80053f0 <prvHeapInit+0xc0>)
 80053ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053ce:	601a      	str	r2, [r3, #0]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	24000ef0 	.word	0x24000ef0
 80053e0:	24004af0 	.word	0x24004af0
 80053e4:	24004af8 	.word	0x24004af8
 80053e8:	24004b00 	.word	0x24004b00
 80053ec:	24004afc 	.word	0x24004afc
 80053f0:	24004b0c 	.word	0x24004b0c

080053f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053fc:	4b28      	ldr	r3, [pc, #160]	@ (80054a0 <prvInsertBlockIntoFreeList+0xac>)
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e002      	b.n	8005408 <prvInsertBlockIntoFreeList+0x14>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	429a      	cmp	r2, r3
 8005410:	d8f7      	bhi.n	8005402 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d108      	bne.n	8005436 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	441a      	add	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	441a      	add	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d118      	bne.n	800547c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d00d      	beq.n	8005472 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	441a      	add	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e008      	b.n	8005484 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e003      	b.n	8005484 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	429a      	cmp	r2, r3
 800548a:	d002      	beq.n	8005492 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	24004af0 	.word	0x24004af0
 80054a4:	24004af8 	.word	0x24004af8

080054a8 <memset>:
 80054a8:	4402      	add	r2, r0
 80054aa:	4603      	mov	r3, r0
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d100      	bne.n	80054b2 <memset+0xa>
 80054b0:	4770      	bx	lr
 80054b2:	f803 1b01 	strb.w	r1, [r3], #1
 80054b6:	e7f9      	b.n	80054ac <memset+0x4>

080054b8 <_reclaim_reent>:
 80054b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005570 <_reclaim_reent+0xb8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4283      	cmp	r3, r0
 80054be:	b570      	push	{r4, r5, r6, lr}
 80054c0:	4604      	mov	r4, r0
 80054c2:	d053      	beq.n	800556c <_reclaim_reent+0xb4>
 80054c4:	69c3      	ldr	r3, [r0, #28]
 80054c6:	b31b      	cbz	r3, 8005510 <_reclaim_reent+0x58>
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	b163      	cbz	r3, 80054e6 <_reclaim_reent+0x2e>
 80054cc:	2500      	movs	r5, #0
 80054ce:	69e3      	ldr	r3, [r4, #28]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	5959      	ldr	r1, [r3, r5]
 80054d4:	b9b1      	cbnz	r1, 8005504 <_reclaim_reent+0x4c>
 80054d6:	3504      	adds	r5, #4
 80054d8:	2d80      	cmp	r5, #128	@ 0x80
 80054da:	d1f8      	bne.n	80054ce <_reclaim_reent+0x16>
 80054dc:	69e3      	ldr	r3, [r4, #28]
 80054de:	4620      	mov	r0, r4
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	f000 f87b 	bl	80055dc <_free_r>
 80054e6:	69e3      	ldr	r3, [r4, #28]
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	b111      	cbz	r1, 80054f2 <_reclaim_reent+0x3a>
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 f875 	bl	80055dc <_free_r>
 80054f2:	69e3      	ldr	r3, [r4, #28]
 80054f4:	689d      	ldr	r5, [r3, #8]
 80054f6:	b15d      	cbz	r5, 8005510 <_reclaim_reent+0x58>
 80054f8:	4629      	mov	r1, r5
 80054fa:	4620      	mov	r0, r4
 80054fc:	682d      	ldr	r5, [r5, #0]
 80054fe:	f000 f86d 	bl	80055dc <_free_r>
 8005502:	e7f8      	b.n	80054f6 <_reclaim_reent+0x3e>
 8005504:	680e      	ldr	r6, [r1, #0]
 8005506:	4620      	mov	r0, r4
 8005508:	f000 f868 	bl	80055dc <_free_r>
 800550c:	4631      	mov	r1, r6
 800550e:	e7e1      	b.n	80054d4 <_reclaim_reent+0x1c>
 8005510:	6961      	ldr	r1, [r4, #20]
 8005512:	b111      	cbz	r1, 800551a <_reclaim_reent+0x62>
 8005514:	4620      	mov	r0, r4
 8005516:	f000 f861 	bl	80055dc <_free_r>
 800551a:	69e1      	ldr	r1, [r4, #28]
 800551c:	b111      	cbz	r1, 8005524 <_reclaim_reent+0x6c>
 800551e:	4620      	mov	r0, r4
 8005520:	f000 f85c 	bl	80055dc <_free_r>
 8005524:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005526:	b111      	cbz	r1, 800552e <_reclaim_reent+0x76>
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f857 	bl	80055dc <_free_r>
 800552e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005530:	b111      	cbz	r1, 8005538 <_reclaim_reent+0x80>
 8005532:	4620      	mov	r0, r4
 8005534:	f000 f852 	bl	80055dc <_free_r>
 8005538:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800553a:	b111      	cbz	r1, 8005542 <_reclaim_reent+0x8a>
 800553c:	4620      	mov	r0, r4
 800553e:	f000 f84d 	bl	80055dc <_free_r>
 8005542:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005544:	b111      	cbz	r1, 800554c <_reclaim_reent+0x94>
 8005546:	4620      	mov	r0, r4
 8005548:	f000 f848 	bl	80055dc <_free_r>
 800554c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800554e:	b111      	cbz	r1, 8005556 <_reclaim_reent+0x9e>
 8005550:	4620      	mov	r0, r4
 8005552:	f000 f843 	bl	80055dc <_free_r>
 8005556:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005558:	b111      	cbz	r1, 8005560 <_reclaim_reent+0xa8>
 800555a:	4620      	mov	r0, r4
 800555c:	f000 f83e 	bl	80055dc <_free_r>
 8005560:	6a23      	ldr	r3, [r4, #32]
 8005562:	b11b      	cbz	r3, 800556c <_reclaim_reent+0xb4>
 8005564:	4620      	mov	r0, r4
 8005566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800556a:	4718      	bx	r3
 800556c:	bd70      	pop	{r4, r5, r6, pc}
 800556e:	bf00      	nop
 8005570:	24000014 	.word	0x24000014

08005574 <__libc_init_array>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	4d0d      	ldr	r5, [pc, #52]	@ (80055ac <__libc_init_array+0x38>)
 8005578:	4c0d      	ldr	r4, [pc, #52]	@ (80055b0 <__libc_init_array+0x3c>)
 800557a:	1b64      	subs	r4, r4, r5
 800557c:	10a4      	asrs	r4, r4, #2
 800557e:	2600      	movs	r6, #0
 8005580:	42a6      	cmp	r6, r4
 8005582:	d109      	bne.n	8005598 <__libc_init_array+0x24>
 8005584:	4d0b      	ldr	r5, [pc, #44]	@ (80055b4 <__libc_init_array+0x40>)
 8005586:	4c0c      	ldr	r4, [pc, #48]	@ (80055b8 <__libc_init_array+0x44>)
 8005588:	f000 f87e 	bl	8005688 <_init>
 800558c:	1b64      	subs	r4, r4, r5
 800558e:	10a4      	asrs	r4, r4, #2
 8005590:	2600      	movs	r6, #0
 8005592:	42a6      	cmp	r6, r4
 8005594:	d105      	bne.n	80055a2 <__libc_init_array+0x2e>
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	f855 3b04 	ldr.w	r3, [r5], #4
 800559c:	4798      	blx	r3
 800559e:	3601      	adds	r6, #1
 80055a0:	e7ee      	b.n	8005580 <__libc_init_array+0xc>
 80055a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a6:	4798      	blx	r3
 80055a8:	3601      	adds	r6, #1
 80055aa:	e7f2      	b.n	8005592 <__libc_init_array+0x1e>
 80055ac:	08005758 	.word	0x08005758
 80055b0:	08005758 	.word	0x08005758
 80055b4:	08005758 	.word	0x08005758
 80055b8:	0800575c 	.word	0x0800575c

080055bc <__retarget_lock_acquire_recursive>:
 80055bc:	4770      	bx	lr

080055be <__retarget_lock_release_recursive>:
 80055be:	4770      	bx	lr

080055c0 <memcpy>:
 80055c0:	440a      	add	r2, r1
 80055c2:	4291      	cmp	r1, r2
 80055c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c8:	d100      	bne.n	80055cc <memcpy+0xc>
 80055ca:	4770      	bx	lr
 80055cc:	b510      	push	{r4, lr}
 80055ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d6:	4291      	cmp	r1, r2
 80055d8:	d1f9      	bne.n	80055ce <memcpy+0xe>
 80055da:	bd10      	pop	{r4, pc}

080055dc <_free_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4605      	mov	r5, r0
 80055e0:	2900      	cmp	r1, #0
 80055e2:	d041      	beq.n	8005668 <_free_r+0x8c>
 80055e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e8:	1f0c      	subs	r4, r1, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfb8      	it	lt
 80055ee:	18e4      	addlt	r4, r4, r3
 80055f0:	f000 f83e 	bl	8005670 <__malloc_lock>
 80055f4:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <_free_r+0x90>)
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	b933      	cbnz	r3, 8005608 <_free_r+0x2c>
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	6014      	str	r4, [r2, #0]
 80055fe:	4628      	mov	r0, r5
 8005600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005604:	f000 b83a 	b.w	800567c <__malloc_unlock>
 8005608:	42a3      	cmp	r3, r4
 800560a:	d908      	bls.n	800561e <_free_r+0x42>
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	1821      	adds	r1, r4, r0
 8005610:	428b      	cmp	r3, r1
 8005612:	bf01      	itttt	eq
 8005614:	6819      	ldreq	r1, [r3, #0]
 8005616:	685b      	ldreq	r3, [r3, #4]
 8005618:	1809      	addeq	r1, r1, r0
 800561a:	6021      	streq	r1, [r4, #0]
 800561c:	e7ed      	b.n	80055fa <_free_r+0x1e>
 800561e:	461a      	mov	r2, r3
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	b10b      	cbz	r3, 8005628 <_free_r+0x4c>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d9fa      	bls.n	800561e <_free_r+0x42>
 8005628:	6811      	ldr	r1, [r2, #0]
 800562a:	1850      	adds	r0, r2, r1
 800562c:	42a0      	cmp	r0, r4
 800562e:	d10b      	bne.n	8005648 <_free_r+0x6c>
 8005630:	6820      	ldr	r0, [r4, #0]
 8005632:	4401      	add	r1, r0
 8005634:	1850      	adds	r0, r2, r1
 8005636:	4283      	cmp	r3, r0
 8005638:	6011      	str	r1, [r2, #0]
 800563a:	d1e0      	bne.n	80055fe <_free_r+0x22>
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	6053      	str	r3, [r2, #4]
 8005642:	4408      	add	r0, r1
 8005644:	6010      	str	r0, [r2, #0]
 8005646:	e7da      	b.n	80055fe <_free_r+0x22>
 8005648:	d902      	bls.n	8005650 <_free_r+0x74>
 800564a:	230c      	movs	r3, #12
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	e7d6      	b.n	80055fe <_free_r+0x22>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	1821      	adds	r1, r4, r0
 8005654:	428b      	cmp	r3, r1
 8005656:	bf04      	itt	eq
 8005658:	6819      	ldreq	r1, [r3, #0]
 800565a:	685b      	ldreq	r3, [r3, #4]
 800565c:	6063      	str	r3, [r4, #4]
 800565e:	bf04      	itt	eq
 8005660:	1809      	addeq	r1, r1, r0
 8005662:	6021      	streq	r1, [r4, #0]
 8005664:	6054      	str	r4, [r2, #4]
 8005666:	e7ca      	b.n	80055fe <_free_r+0x22>
 8005668:	bd38      	pop	{r3, r4, r5, pc}
 800566a:	bf00      	nop
 800566c:	24004c4c 	.word	0x24004c4c

08005670 <__malloc_lock>:
 8005670:	4801      	ldr	r0, [pc, #4]	@ (8005678 <__malloc_lock+0x8>)
 8005672:	f7ff bfa3 	b.w	80055bc <__retarget_lock_acquire_recursive>
 8005676:	bf00      	nop
 8005678:	24004c48 	.word	0x24004c48

0800567c <__malloc_unlock>:
 800567c:	4801      	ldr	r0, [pc, #4]	@ (8005684 <__malloc_unlock+0x8>)
 800567e:	f7ff bf9e 	b.w	80055be <__retarget_lock_release_recursive>
 8005682:	bf00      	nop
 8005684:	24004c48 	.word	0x24004c48

08005688 <_init>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr

08005694 <_fini>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr
