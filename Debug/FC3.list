
FC3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ef0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022a8  08018190  08018190  00019190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a438  0801a438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a440  0801a440  0001b440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a444  0801a444  0001b444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000230  24000000  0801a448  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001194  24000230  0801a678  0001c230  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240013c4  0801a678  0001c3c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c230  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b91c  00000000  00000000  0001c25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c07  00000000  00000000  00047b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f20  00000000  00000000  0004d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001826  00000000  00000000  0004f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f2cf  00000000  00000000  00050ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003295b  00000000  00000000  0009019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018211d  00000000  00000000  000c2af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00244c15  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009814  00000000  00000000  00244c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  0024e46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000230 	.word	0x24000230
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018178 	.word	0x08018178

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000234 	.word	0x24000234
 80002dc:	08018178 	.word	0x08018178

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b988 	b.w	8000a30 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	468e      	mov	lr, r1
 8000740:	4604      	mov	r4, r0
 8000742:	4688      	mov	r8, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d962      	bls.n	8000814 <__udivmoddi4+0xdc>
 800074e:	fab2 f682 	clz	r6, r2
 8000752:	b14e      	cbz	r6, 8000768 <__udivmoddi4+0x30>
 8000754:	f1c6 0320 	rsb	r3, r6, #32
 8000758:	fa01 f806 	lsl.w	r8, r1, r6
 800075c:	fa20 f303 	lsr.w	r3, r0, r3
 8000760:	40b7      	lsls	r7, r6
 8000762:	ea43 0808 	orr.w	r8, r3, r8
 8000766:	40b4      	lsls	r4, r6
 8000768:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800076c:	fa1f fc87 	uxth.w	ip, r7
 8000770:	fbb8 f1fe 	udiv	r1, r8, lr
 8000774:	0c23      	lsrs	r3, r4, #16
 8000776:	fb0e 8811 	mls	r8, lr, r1, r8
 800077a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077e:	fb01 f20c 	mul.w	r2, r1, ip
 8000782:	429a      	cmp	r2, r3
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0x62>
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	f101 30ff 	add.w	r0, r1, #4294967295
 800078c:	f080 80ea 	bcs.w	8000964 <__udivmoddi4+0x22c>
 8000790:	429a      	cmp	r2, r3
 8000792:	f240 80e7 	bls.w	8000964 <__udivmoddi4+0x22c>
 8000796:	3902      	subs	r1, #2
 8000798:	443b      	add	r3, r7
 800079a:	1a9a      	subs	r2, r3, r2
 800079c:	b2a3      	uxth	r3, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ae:	459c      	cmp	ip, r3
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x8e>
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007b8:	f080 80d6 	bcs.w	8000968 <__udivmoddi4+0x230>
 80007bc:	459c      	cmp	ip, r3
 80007be:	f240 80d3 	bls.w	8000968 <__udivmoddi4+0x230>
 80007c2:	443b      	add	r3, r7
 80007c4:	3802      	subs	r0, #2
 80007c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ca:	eba3 030c 	sub.w	r3, r3, ip
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11d      	cbz	r5, 80007da <__udivmoddi4+0xa2>
 80007d2:	40f3      	lsrs	r3, r6
 80007d4:	2200      	movs	r2, #0
 80007d6:	e9c5 3200 	strd	r3, r2, [r5]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d905      	bls.n	80007ee <__udivmoddi4+0xb6>
 80007e2:	b10d      	cbz	r5, 80007e8 <__udivmoddi4+0xb0>
 80007e4:	e9c5 0100 	strd	r0, r1, [r5]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4608      	mov	r0, r1
 80007ec:	e7f5      	b.n	80007da <__udivmoddi4+0xa2>
 80007ee:	fab3 f183 	clz	r1, r3
 80007f2:	2900      	cmp	r1, #0
 80007f4:	d146      	bne.n	8000884 <__udivmoddi4+0x14c>
 80007f6:	4573      	cmp	r3, lr
 80007f8:	d302      	bcc.n	8000800 <__udivmoddi4+0xc8>
 80007fa:	4282      	cmp	r2, r0
 80007fc:	f200 8105 	bhi.w	8000a0a <__udivmoddi4+0x2d2>
 8000800:	1a84      	subs	r4, r0, r2
 8000802:	eb6e 0203 	sbc.w	r2, lr, r3
 8000806:	2001      	movs	r0, #1
 8000808:	4690      	mov	r8, r2
 800080a:	2d00      	cmp	r5, #0
 800080c:	d0e5      	beq.n	80007da <__udivmoddi4+0xa2>
 800080e:	e9c5 4800 	strd	r4, r8, [r5]
 8000812:	e7e2      	b.n	80007da <__udivmoddi4+0xa2>
 8000814:	2a00      	cmp	r2, #0
 8000816:	f000 8090 	beq.w	800093a <__udivmoddi4+0x202>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	2e00      	cmp	r6, #0
 8000820:	f040 80a4 	bne.w	800096c <__udivmoddi4+0x234>
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	0c03      	lsrs	r3, r0, #16
 8000828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082c:	b280      	uxth	r0, r0
 800082e:	b2bc      	uxth	r4, r7
 8000830:	2101      	movs	r1, #1
 8000832:	fbb2 fcfe 	udiv	ip, r2, lr
 8000836:	fb0e 221c 	mls	r2, lr, ip, r2
 800083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083e:	fb04 f20c 	mul.w	r2, r4, ip
 8000842:	429a      	cmp	r2, r3
 8000844:	d907      	bls.n	8000856 <__udivmoddi4+0x11e>
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	f10c 38ff 	add.w	r8, ip, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x11c>
 800084e:	429a      	cmp	r2, r3
 8000850:	f200 80e0 	bhi.w	8000a14 <__udivmoddi4+0x2dc>
 8000854:	46c4      	mov	ip, r8
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	fbb3 f2fe 	udiv	r2, r3, lr
 800085c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000860:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000864:	fb02 f404 	mul.w	r4, r2, r4
 8000868:	429c      	cmp	r4, r3
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x144>
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x142>
 8000874:	429c      	cmp	r4, r3
 8000876:	f200 80ca 	bhi.w	8000a0e <__udivmoddi4+0x2d6>
 800087a:	4602      	mov	r2, r0
 800087c:	1b1b      	subs	r3, r3, r4
 800087e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000882:	e7a5      	b.n	80007d0 <__udivmoddi4+0x98>
 8000884:	f1c1 0620 	rsb	r6, r1, #32
 8000888:	408b      	lsls	r3, r1
 800088a:	fa22 f706 	lsr.w	r7, r2, r6
 800088e:	431f      	orrs	r7, r3
 8000890:	fa0e f401 	lsl.w	r4, lr, r1
 8000894:	fa20 f306 	lsr.w	r3, r0, r6
 8000898:	fa2e fe06 	lsr.w	lr, lr, r6
 800089c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a0:	4323      	orrs	r3, r4
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	fa1f fc87 	uxth.w	ip, r7
 80008aa:	fbbe f0f9 	udiv	r0, lr, r9
 80008ae:	0c1c      	lsrs	r4, r3, #16
 80008b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008bc:	45a6      	cmp	lr, r4
 80008be:	fa02 f201 	lsl.w	r2, r2, r1
 80008c2:	d909      	bls.n	80008d8 <__udivmoddi4+0x1a0>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ca:	f080 809c 	bcs.w	8000a06 <__udivmoddi4+0x2ce>
 80008ce:	45a6      	cmp	lr, r4
 80008d0:	f240 8099 	bls.w	8000a06 <__udivmoddi4+0x2ce>
 80008d4:	3802      	subs	r0, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	eba4 040e 	sub.w	r4, r4, lr
 80008dc:	fa1f fe83 	uxth.w	lr, r3
 80008e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e4:	fb09 4413 	mls	r4, r9, r3, r4
 80008e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f0:	45a4      	cmp	ip, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x1ce>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008fa:	f080 8082 	bcs.w	8000a02 <__udivmoddi4+0x2ca>
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d97f      	bls.n	8000a02 <__udivmoddi4+0x2ca>
 8000902:	3b02      	subs	r3, #2
 8000904:	443c      	add	r4, r7
 8000906:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800090a:	eba4 040c 	sub.w	r4, r4, ip
 800090e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000912:	4564      	cmp	r4, ip
 8000914:	4673      	mov	r3, lr
 8000916:	46e1      	mov	r9, ip
 8000918:	d362      	bcc.n	80009e0 <__udivmoddi4+0x2a8>
 800091a:	d05f      	beq.n	80009dc <__udivmoddi4+0x2a4>
 800091c:	b15d      	cbz	r5, 8000936 <__udivmoddi4+0x1fe>
 800091e:	ebb8 0203 	subs.w	r2, r8, r3
 8000922:	eb64 0409 	sbc.w	r4, r4, r9
 8000926:	fa04 f606 	lsl.w	r6, r4, r6
 800092a:	fa22 f301 	lsr.w	r3, r2, r1
 800092e:	431e      	orrs	r6, r3
 8000930:	40cc      	lsrs	r4, r1
 8000932:	e9c5 6400 	strd	r6, r4, [r5]
 8000936:	2100      	movs	r1, #0
 8000938:	e74f      	b.n	80007da <__udivmoddi4+0xa2>
 800093a:	fbb1 fcf2 	udiv	ip, r1, r2
 800093e:	0c01      	lsrs	r1, r0, #16
 8000940:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000944:	b280      	uxth	r0, r0
 8000946:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800094a:	463b      	mov	r3, r7
 800094c:	4638      	mov	r0, r7
 800094e:	463c      	mov	r4, r7
 8000950:	46b8      	mov	r8, r7
 8000952:	46be      	mov	lr, r7
 8000954:	2620      	movs	r6, #32
 8000956:	fbb1 f1f7 	udiv	r1, r1, r7
 800095a:	eba2 0208 	sub.w	r2, r2, r8
 800095e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000962:	e766      	b.n	8000832 <__udivmoddi4+0xfa>
 8000964:	4601      	mov	r1, r0
 8000966:	e718      	b.n	800079a <__udivmoddi4+0x62>
 8000968:	4610      	mov	r0, r2
 800096a:	e72c      	b.n	80007c6 <__udivmoddi4+0x8e>
 800096c:	f1c6 0220 	rsb	r2, r6, #32
 8000970:	fa2e f302 	lsr.w	r3, lr, r2
 8000974:	40b7      	lsls	r7, r6
 8000976:	40b1      	lsls	r1, r6
 8000978:	fa20 f202 	lsr.w	r2, r0, r2
 800097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000980:	430a      	orrs	r2, r1
 8000982:	fbb3 f8fe 	udiv	r8, r3, lr
 8000986:	b2bc      	uxth	r4, r7
 8000988:	fb0e 3318 	mls	r3, lr, r8, r3
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000992:	fb08 f904 	mul.w	r9, r8, r4
 8000996:	40b0      	lsls	r0, r6
 8000998:	4589      	cmp	r9, r1
 800099a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800099e:	b280      	uxth	r0, r0
 80009a0:	d93e      	bls.n	8000a20 <__udivmoddi4+0x2e8>
 80009a2:	1879      	adds	r1, r7, r1
 80009a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009a8:	d201      	bcs.n	80009ae <__udivmoddi4+0x276>
 80009aa:	4589      	cmp	r9, r1
 80009ac:	d81f      	bhi.n	80009ee <__udivmoddi4+0x2b6>
 80009ae:	eba1 0109 	sub.w	r1, r1, r9
 80009b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009b6:	fb09 f804 	mul.w	r8, r9, r4
 80009ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80009be:	b292      	uxth	r2, r2
 80009c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009c4:	4542      	cmp	r2, r8
 80009c6:	d229      	bcs.n	8000a1c <__udivmoddi4+0x2e4>
 80009c8:	18ba      	adds	r2, r7, r2
 80009ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80009ce:	d2c4      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d0:	4542      	cmp	r2, r8
 80009d2:	d2c2      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d4:	f1a9 0102 	sub.w	r1, r9, #2
 80009d8:	443a      	add	r2, r7
 80009da:	e7be      	b.n	800095a <__udivmoddi4+0x222>
 80009dc:	45f0      	cmp	r8, lr
 80009de:	d29d      	bcs.n	800091c <__udivmoddi4+0x1e4>
 80009e0:	ebbe 0302 	subs.w	r3, lr, r2
 80009e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009e8:	3801      	subs	r0, #1
 80009ea:	46e1      	mov	r9, ip
 80009ec:	e796      	b.n	800091c <__udivmoddi4+0x1e4>
 80009ee:	eba7 0909 	sub.w	r9, r7, r9
 80009f2:	4449      	add	r1, r9
 80009f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fc:	fb09 f804 	mul.w	r8, r9, r4
 8000a00:	e7db      	b.n	80009ba <__udivmoddi4+0x282>
 8000a02:	4673      	mov	r3, lr
 8000a04:	e77f      	b.n	8000906 <__udivmoddi4+0x1ce>
 8000a06:	4650      	mov	r0, sl
 8000a08:	e766      	b.n	80008d8 <__udivmoddi4+0x1a0>
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	e6fd      	b.n	800080a <__udivmoddi4+0xd2>
 8000a0e:	443b      	add	r3, r7
 8000a10:	3a02      	subs	r2, #2
 8000a12:	e733      	b.n	800087c <__udivmoddi4+0x144>
 8000a14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a18:	443b      	add	r3, r7
 8000a1a:	e71c      	b.n	8000856 <__udivmoddi4+0x11e>
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	e79c      	b.n	800095a <__udivmoddi4+0x222>
 8000a20:	eba1 0109 	sub.w	r1, r1, r9
 8000a24:	46c4      	mov	ip, r8
 8000a26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2a:	fb09 f804 	mul.w	r8, r9, r4
 8000a2e:	e7c4      	b.n	80009ba <__udivmoddi4+0x282>

08000a30 <__aeabi_idiv0>:
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a58:	4b31      	ldr	r3, [pc, #196]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a5a:	4a32      	ldr	r2, [pc, #200]	@ (8000b24 <MX_ADC1_Init+0xf0>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a5e:	4b30      	ldr	r3, [pc, #192]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a64:	4b2e      	ldr	r3, [pc, #184]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a70:	4b2b      	ldr	r3, [pc, #172]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a82:	4b27      	ldr	r3, [pc, #156]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a88:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8e:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a94:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aba:	4819      	ldr	r0, [pc, #100]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000abc:	f004 f8fe 	bl	8004cbc <HAL_ADC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000ac6:	f001 fa6f 	bl	8001fa8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4812      	ldr	r0, [pc, #72]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000ad6:	f005 fc03 	bl	80062e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ae0:	f001 fa62 	bl	8001fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_ADC1_Init+0xf4>)
 8000ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000aec:	2307      	movs	r3, #7
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000af4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000af6:	2304      	movs	r3, #4
 8000af8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <MX_ADC1_Init+0xec>)
 8000b08:	f004 fe14 	bl	8005734 <HAL_ADC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000b12:	f001 fa49 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	@ 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2400024c 	.word	0x2400024c
 8000b24:	40022000 	.word	0x40022000
 8000b28:	10c00010 	.word	0x10c00010

08000b2c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]
 8000b42:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b46:	4a2b      	ldr	r2, [pc, #172]	@ (8000bf4 <MX_ADC2_Init+0xc8>)
 8000b48:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ba6:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000ba8:	f004 f888 	bl	8004cbc <HAL_ADC_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000bb2:	f001 f9f9 	bl	8001fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_ADC2_Init+0xcc>)
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bc6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_ADC2_Init+0xc4>)
 8000bda:	f004 fdab 	bl	8005734 <HAL_ADC_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000be4:	f001 f9e0 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	240002b0 	.word	0x240002b0
 8000bf4:	40022100 	.word	0x40022100
 8000bf8:	21800100 	.word	0x21800100

08000bfc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	@ 0x30
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a41      	ldr	r2, [pc, #260]	@ (8000d20 <HAL_ADC_MspInit+0x124>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d13b      	bne.n	8000c96 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c1e:	4b41      	ldr	r3, [pc, #260]	@ (8000d24 <HAL_ADC_MspInit+0x128>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a3f      	ldr	r2, [pc, #252]	@ (8000d24 <HAL_ADC_MspInit+0x128>)
 8000c26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c28:	4b3e      	ldr	r3, [pc, #248]	@ (8000d24 <HAL_ADC_MspInit+0x128>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10e      	bne.n	8000c4e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c30:	4b3d      	ldr	r3, [pc, #244]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c36:	4a3c      	ldr	r2, [pc, #240]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c40:	4b39      	ldr	r3, [pc, #228]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b36      	ldr	r3, [pc, #216]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c54:	4a34      	ldr	r2, [pc, #208]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5e:	4b32      	ldr	r3, [pc, #200]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482b      	ldr	r0, [pc, #172]	@ (8000d2c <HAL_ADC_MspInit+0x130>)
 8000c80:	f008 fba0 	bl	80093c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2012      	movs	r0, #18
 8000c8a:	f005 fcbf 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c8e:	2012      	movs	r0, #18
 8000c90:	f005 fcd6 	bl	8006640 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000c94:	e03f      	b.n	8000d16 <HAL_ADC_MspInit+0x11a>
  else if(adcHandle->Instance==ADC2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a25      	ldr	r2, [pc, #148]	@ (8000d30 <HAL_ADC_MspInit+0x134>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d13a      	bne.n	8000d16 <HAL_ADC_MspInit+0x11a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <HAL_ADC_MspInit+0x128>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d24 <HAL_ADC_MspInit+0x128>)
 8000ca8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <HAL_ADC_MspInit+0x128>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10e      	bne.n	8000cd0 <HAL_ADC_MspInit+0xd4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cc8:	f003 0320 	and.w	r3, r3, #32
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_ADC_MspInit+0x12c>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <HAL_ADC_MspInit+0x130>)
 8000d02:	f008 fb5f 	bl	80093c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2012      	movs	r0, #18
 8000d0c:	f005 fc7e 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d10:	2012      	movs	r0, #18
 8000d12:	f005 fc95 	bl	8006640 <HAL_NVIC_EnableIRQ>
}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	@ 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40022000 	.word	0x40022000
 8000d24:	24000314 	.word	0x24000314
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	58020800 	.word	0x58020800
 8000d30:	40022100 	.word	0x40022100

08000d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_DMA_Init+0x7c>)
 8000d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d40:	4a1b      	ldr	r2, [pc, #108]	@ (8000db0 <MX_DMA_Init+0x7c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4a:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_DMA_Init+0x7c>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	200b      	movs	r0, #11
 8000d5e:	f005 fc55 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d62:	200b      	movs	r0, #11
 8000d64:	f005 fc6c 	bl	8006640 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	200c      	movs	r0, #12
 8000d6e:	f005 fc4d 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d72:	200c      	movs	r0, #12
 8000d74:	f005 fc64 	bl	8006640 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	200d      	movs	r0, #13
 8000d7e:	f005 fc45 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d82:	200d      	movs	r0, #13
 8000d84:	f005 fc5c 	bl	8006640 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	200e      	movs	r0, #14
 8000d8e:	f005 fc3d 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d92:	200e      	movs	r0, #14
 8000d94:	f005 fc54 	bl	8006640 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	f005 fc35 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000da2:	200f      	movs	r0, #15
 8000da4:	f005 fc4c 	bl	8006640 <HAL_NVIC_EnableIRQ>

}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400

08000db4 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
*/
void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b84      	ldr	r3, [pc, #528]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	4a82      	ldr	r2, [pc, #520]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dda:	4b80      	ldr	r3, [pc, #512]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de8:	4b7c      	ldr	r3, [pc, #496]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a7b      	ldr	r2, [pc, #492]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b78      	ldr	r3, [pc, #480]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b75      	ldr	r3, [pc, #468]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a73      	ldr	r2, [pc, #460]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b71      	ldr	r3, [pc, #452]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b6d      	ldr	r3, [pc, #436]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a6c      	ldr	r2, [pc, #432]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b69      	ldr	r3, [pc, #420]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e42:	4b66      	ldr	r3, [pc, #408]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	4a64      	ldr	r2, [pc, #400]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e52:	4b62      	ldr	r3, [pc, #392]	@ (8000fdc <MX_GPIO_Init+0x228>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS2_ACC_Pin|CS2_GYRO_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f242 0104 	movw	r1, #8196	@ 0x2004
 8000e66:	485e      	ldr	r0, [pc, #376]	@ (8000fe0 <MX_GPIO_Init+0x22c>)
 8000e68:	f008 fc5c 	bl	8009724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FRAM_GPIO_Port, CS_FRAM_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	485c      	ldr	r0, [pc, #368]	@ (8000fe4 <MX_GPIO_Init+0x230>)
 8000e72:	f008 fc57 	bl	8009724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8000e7c:	4859      	ldr	r0, [pc, #356]	@ (8000fe4 <MX_GPIO_Init+0x230>)
 8000e7e:	f008 fc51 	bl	8009724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e88:	4857      	ldr	r0, [pc, #348]	@ (8000fe8 <MX_GPIO_Init+0x234>)
 8000e8a:	f008 fc4b 	bl	8009724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_ACC_Pin|CS_GYRO_Pin, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	210c      	movs	r1, #12
 8000e92:	4856      	ldr	r0, [pc, #344]	@ (8000fec <MX_GPIO_Init+0x238>)
 8000e94:	f008 fc46 	bl	8009724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS2_ACC_Pin CS2_GYRO_Pin */
  GPIO_InitStruct.Pin = CS2_ACC_Pin|CS2_GYRO_Pin;
 8000e98:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	484b      	ldr	r0, [pc, #300]	@ (8000fe0 <MX_GPIO_Init+0x22c>)
 8000eb2:	f008 fa87 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_GYRO2_Pin INT_ACC2_Pin */
  GPIO_InitStruct.Pin = INT_GYRO2_Pin|INT_ACC2_Pin;
 8000eb6:	2318      	movs	r3, #24
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4849      	ldr	r0, [pc, #292]	@ (8000ff0 <MX_GPIO_Init+0x23c>)
 8000ecc:	f008 fa7a 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_DR_Pin */
  GPIO_InitStruct.Pin = I2C1_DR_Pin;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2C1_DR_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4840      	ldr	r0, [pc, #256]	@ (8000fe8 <MX_GPIO_Init+0x234>)
 8000ee6:	f008 fa6d 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_FRAM_Pin */
  GPIO_InitStruct.Pin = CS_FRAM_Pin;
 8000eea:	2310      	movs	r3, #16
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_FRAM_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4838      	ldr	r0, [pc, #224]	@ (8000fe4 <MX_GPIO_Init+0x230>)
 8000f02:	f008 fa5f 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8000f06:	2303      	movs	r3, #3
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f0a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4834      	ldr	r0, [pc, #208]	@ (8000fec <MX_GPIO_Init+0x238>)
 8000f1c:	f008 fa52 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000f20:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	482a      	ldr	r0, [pc, #168]	@ (8000fe4 <MX_GPIO_Init+0x230>)
 8000f3a:	f008 fa43 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <MX_GPIO_Init+0x234>)
 8000f58:	f008 fa34 	bl	80093c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_ACC_Pin CS_GYRO_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|CS_GYRO_Pin;
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	481e      	ldr	r0, [pc, #120]	@ (8000fec <MX_GPIO_Init+0x238>)
 8000f74:	f008 fa26 	bl	80093c4 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_CLOSE);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000f7e:	f003 fc39 	bl	80047f4 <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2006      	movs	r0, #6
 8000f88:	f005 fb40 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f005 fb57 	bl	8006640 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2007      	movs	r0, #7
 8000f98:	f005 fb38 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f9c:	2007      	movs	r0, #7
 8000f9e:	f005 fb4f 	bl	8006640 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2009      	movs	r0, #9
 8000fa8:	f005 fb30 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fac:	2009      	movs	r0, #9
 8000fae:	f005 fb47 	bl	8006640 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f005 fb28 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f005 fb3f 	bl	8006640 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2017      	movs	r0, #23
 8000fc8:	f005 fb20 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fcc:	2017      	movs	r0, #23
 8000fce:	f005 fb37 	bl	8006640 <HAL_NVIC_EnableIRQ>

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	58020800 	.word	0x58020800
 8000fe4:	58020c00 	.word	0x58020c00
 8000fe8:	58020400 	.word	0x58020400
 8000fec:	58020000 	.word	0x58020000
 8000ff0:	58021000 	.word	0x58021000

08000ff4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <MX_I2C1_Init+0x74>)
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <MX_I2C1_Init+0x78>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <MX_I2C1_Init+0x7c>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 236;
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001006:	22ec      	movs	r2, #236	@ 0xec
 8001008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100a:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <MX_I2C1_Init+0x74>)
 800100c:	2201      	movs	r2, #1
 800100e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102e:	480e      	ldr	r0, [pc, #56]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001030:	f008 fbac 	bl	800978c <HAL_I2C_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800103a:	f000 ffb5 	bl	8001fa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103e:	2100      	movs	r1, #0
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001042:	f008 ffc7 	bl	8009fd4 <HAL_I2CEx_ConfigAnalogFilter>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 ffac 	bl	8001fa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_I2C1_Init+0x74>)
 8001054:	f009 f809 	bl	800a06a <HAL_I2CEx_ConfigDigitalFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 ffa3 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	24000318 	.word	0x24000318
 800106c:	40005400 	.word	0x40005400
 8001070:	307075b1 	.word	0x307075b1

08001074 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ba      	sub	sp, #232	@ 0xe8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	22c0      	movs	r2, #192	@ 0xc0
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f013 fda7 	bl	8014be8 <memset>
  if(i2cHandle->Instance==I2C1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <HAL_I2C_MspInit+0xc4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d145      	bne.n	8001130 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010a4:	f04f 0208 	mov.w	r2, #8
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00a f884 	bl	800b1c8 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010c6:	f000 ff6f 	bl	8001fa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_I2C_MspInit+0xc8>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <HAL_I2C_MspInit+0xc8>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_I2C_MspInit+0xc8>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80010e8:	23c0      	movs	r3, #192	@ 0xc0
 80010ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001100:	2304      	movs	r3, #4
 8001102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <HAL_I2C_MspInit+0xcc>)
 800110e:	f008 f959 	bl	80093c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_I2C_MspInit+0xc8>)
 8001114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_I2C_MspInit+0xc8>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_I2C_MspInit+0xc8>)
 8001124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	37e8      	adds	r7, #232	@ 0xe8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40005400 	.word	0x40005400
 800113c:	58024400 	.word	0x58024400
 8001140:	58020400 	.word	0x58020400

08001144 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF); //  huart4串口重定向，将c语言的printf函数重定向到串口4（要包含stdio.h）
 800114c:	1d39      	adds	r1, r7, #4
 800114e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001152:	2201      	movs	r2, #1
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <__io_putchar+0x20>)
 8001156:	f00e fe6f 	bl	800fe38 <HAL_UART_Transmit>
    return ch;
 800115a:	687b      	ldr	r3, [r7, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	24000890 	.word	0x24000890

08001168 <HAL_UART_RxCpltCallback>:
 uint8_t q = 0;
 int maxmotor = 0;
// int maxmotor = 1420;
 int xxx = 1;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//串口中断调试
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if (huart == &huart4) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4aa5      	ldr	r2, [pc, #660]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f040 813e 	bne.w	80013f6 <HAL_UART_RxCpltCallback+0x28e>
	  printf("%d \r\n",rx_buffer[0]);
 800117a:	4ba4      	ldr	r3, [pc, #656]	@ (800140c <HAL_UART_RxCpltCallback+0x2a4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	48a3      	ldr	r0, [pc, #652]	@ (8001410 <HAL_UART_RxCpltCallback+0x2a8>)
 8001182:	f013 fbe9 	bl	8014958 <iprintf>
    switch (rx_buffer[0])
 8001186:	4ba1      	ldr	r3, [pc, #644]	@ (800140c <HAL_UART_RxCpltCallback+0x2a4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	3b30      	subs	r3, #48	@ 0x30
 800118c:	2b09      	cmp	r3, #9
 800118e:	f200 8131 	bhi.w	80013f4 <HAL_UART_RxCpltCallback+0x28c>
 8001192:	a201      	add	r2, pc, #4	@ (adr r2, 8001198 <HAL_UART_RxCpltCallback+0x30>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080013ed 	.word	0x080013ed
 800119c:	080011c1 	.word	0x080011c1
 80011a0:	08001209 	.word	0x08001209
 80011a4:	08001251 	.word	0x08001251
 80011a8:	08001297 	.word	0x08001297
 80011ac:	080012dd 	.word	0x080012dd
 80011b0:	080012f3 	.word	0x080012f3
 80011b4:	0800132f 	.word	0x0800132f
 80011b8:	080013c7 	.word	0x080013c7
 80011bc:	080013df 	.word	0x080013df
    {
    case 49://1
    	/*----------------BMI088陀螺仪/加速度计数据读取----------------*/
        //读取IMU数据
        IMU_Read(BMIx);
 80011c0:	4b94      	ldr	r3, [pc, #592]	@ (8001414 <HAL_UART_RxCpltCallback+0x2ac>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 ffbb 	bl	8004140 <IMU_Read>
        printf("gyro_x: %2f \r\n",BMI088.gyro.dps[xx]);
 80011ca:	4b93      	ldr	r3, [pc, #588]	@ (8001418 <HAL_UART_RxCpltCallback+0x2b0>)
 80011cc:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ec53 2b17 	vmov	r2, r3, d7
 80011d8:	4890      	ldr	r0, [pc, #576]	@ (800141c <HAL_UART_RxCpltCallback+0x2b4>)
 80011da:	f013 fbbd 	bl	8014958 <iprintf>
        printf("gyro_y: %2f \r\n",BMI088.gyro.dps[yy]);
 80011de:	4b8e      	ldr	r3, [pc, #568]	@ (8001418 <HAL_UART_RxCpltCallback+0x2b0>)
 80011e0:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 80011e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e8:	ec53 2b17 	vmov	r2, r3, d7
 80011ec:	488c      	ldr	r0, [pc, #560]	@ (8001420 <HAL_UART_RxCpltCallback+0x2b8>)
 80011ee:	f013 fbb3 	bl	8014958 <iprintf>
        printf("gyro_z: %2f \r\n",BMI088.gyro.dps[zz]);
 80011f2:	4b89      	ldr	r3, [pc, #548]	@ (8001418 <HAL_UART_RxCpltCallback+0x2b0>)
 80011f4:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80011f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011fc:	ec53 2b17 	vmov	r2, r3, d7
 8001200:	4888      	ldr	r0, [pc, #544]	@ (8001424 <HAL_UART_RxCpltCallback+0x2bc>)
 8001202:	f013 fba9 	bl	8014958 <iprintf>
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088.gyro.dps[xx], sizeof(BMI088.gyro.dps[xx]), 100);
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088.gyro.dps[yy], sizeof(BMI088.gyro.dps[yy]), 100);
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088.gyro.dps[zz], sizeof(BMI088.gyro.dps[zz]), 100);

      break;
 8001206:	e0f6      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

    case 50://2
        //读取IMU数据
        IMU_Read(BMIx);
 8001208:	4b82      	ldr	r3, [pc, #520]	@ (8001414 <HAL_UART_RxCpltCallback+0x2ac>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f002 ff97 	bl	8004140 <IMU_Read>
        printf("acc_x: %2f \r\n",BMI088.acc.m_s_2[xx]);
 8001212:	4b81      	ldr	r3, [pc, #516]	@ (8001418 <HAL_UART_RxCpltCallback+0x2b0>)
 8001214:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001218:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800121c:	ec53 2b17 	vmov	r2, r3, d7
 8001220:	4881      	ldr	r0, [pc, #516]	@ (8001428 <HAL_UART_RxCpltCallback+0x2c0>)
 8001222:	f013 fb99 	bl	8014958 <iprintf>
        printf("acc_y: %2f \r\n",BMI088.acc.m_s_2[yy]);
 8001226:	4b7c      	ldr	r3, [pc, #496]	@ (8001418 <HAL_UART_RxCpltCallback+0x2b0>)
 8001228:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800122c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001230:	ec53 2b17 	vmov	r2, r3, d7
 8001234:	487d      	ldr	r0, [pc, #500]	@ (800142c <HAL_UART_RxCpltCallback+0x2c4>)
 8001236:	f013 fb8f 	bl	8014958 <iprintf>
        printf("acc_z: %2f \r\n",BMI088.acc.m_s_2[zz]);
 800123a:	4b77      	ldr	r3, [pc, #476]	@ (8001418 <HAL_UART_RxCpltCallback+0x2b0>)
 800123c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001244:	ec53 2b17 	vmov	r2, r3, d7
 8001248:	4879      	ldr	r0, [pc, #484]	@ (8001430 <HAL_UART_RxCpltCallback+0x2c8>)
 800124a:	f013 fb85 	bl	8014958 <iprintf>
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088.acc.m_s_2[xx], sizeof(BMI088.acc.m_s_2[xx]), 100);
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088.acc.m_s_2[yy], sizeof(BMI088.acc.m_s_2[yy]), 100);
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088.acc.m_s_2[zz], sizeof(BMI088.acc.m_s_2[zz]), 100);

      break;
 800124e:	e0d2      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

    case 51://3
        //读取IMU数据
        IMU_Read(!BMIx);
 8001250:	4b70      	ldr	r3, [pc, #448]	@ (8001414 <HAL_UART_RxCpltCallback+0x2ac>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf14      	ite	ne
 8001258:	2301      	movne	r3, #1
 800125a:	2300      	moveq	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f002 ff68 	bl	8004140 <IMU_Read>
    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088_2.gyro.dps[xx], sizeof(BMI088_2.gyro.dps[xx]), 100);
 8001270:	2364      	movs	r3, #100	@ 0x64
 8001272:	2204      	movs	r2, #4
 8001274:	496f      	ldr	r1, [pc, #444]	@ (8001434 <HAL_UART_RxCpltCallback+0x2cc>)
 8001276:	4864      	ldr	r0, [pc, #400]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 8001278:	f00e fdde 	bl	800fe38 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088_2.gyro.dps[yy], sizeof(BMI088_2.gyro.dps[yy]), 100);
 800127c:	2364      	movs	r3, #100	@ 0x64
 800127e:	2204      	movs	r2, #4
 8001280:	496d      	ldr	r1, [pc, #436]	@ (8001438 <HAL_UART_RxCpltCallback+0x2d0>)
 8001282:	4861      	ldr	r0, [pc, #388]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 8001284:	f00e fdd8 	bl	800fe38 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088_2.gyro.dps[zz], sizeof(BMI088_2.gyro.dps[zz]), 100);
 8001288:	2364      	movs	r3, #100	@ 0x64
 800128a:	2204      	movs	r2, #4
 800128c:	496b      	ldr	r1, [pc, #428]	@ (800143c <HAL_UART_RxCpltCallback+0x2d4>)
 800128e:	485e      	ldr	r0, [pc, #376]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 8001290:	f00e fdd2 	bl	800fe38 <HAL_UART_Transmit>
//    printf("距离 =  %d cm \r\n",payload.distance/10);
//    printf("light_flow_x：%d ,speed_x= %d \r\n",payload.flow_vel_x, (int64_t)payload.flow_vel_x * payload.distance/1000);
//    printf("light_flow_y：%d ,speed_y= %d \r\n",payload.flow_vel_y, (int64_t)payload.flow_vel_y * payload.distance/1000);

      break;
 8001294:	e0af      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

    case 52://4
        //读取IMU数据
        IMU_Read(!BMIx);
 8001296:	4b5f      	ldr	r3, [pc, #380]	@ (8001414 <HAL_UART_RxCpltCallback+0x2ac>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f083 0301 	eor.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 ff45 	bl	8004140 <IMU_Read>
    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088_2.acc.m_s_2[xx], sizeof(BMI088_2.acc.m_s_2[xx]), 100);
 80012b6:	2364      	movs	r3, #100	@ 0x64
 80012b8:	2204      	movs	r2, #4
 80012ba:	4961      	ldr	r1, [pc, #388]	@ (8001440 <HAL_UART_RxCpltCallback+0x2d8>)
 80012bc:	4852      	ldr	r0, [pc, #328]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 80012be:	f00e fdbb 	bl	800fe38 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088_2.acc.m_s_2[yy], sizeof(BMI088_2.acc.m_s_2[yy]), 100);
 80012c2:	2364      	movs	r3, #100	@ 0x64
 80012c4:	2204      	movs	r2, #4
 80012c6:	495f      	ldr	r1, [pc, #380]	@ (8001444 <HAL_UART_RxCpltCallback+0x2dc>)
 80012c8:	484f      	ldr	r0, [pc, #316]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 80012ca:	f00e fdb5 	bl	800fe38 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088_2.acc.m_s_2[zz], sizeof(BMI088_2.acc.m_s_2[zz]), 100);
 80012ce:	2364      	movs	r3, #100	@ 0x64
 80012d0:	2204      	movs	r2, #4
 80012d2:	495d      	ldr	r1, [pc, #372]	@ (8001448 <HAL_UART_RxCpltCallback+0x2e0>)
 80012d4:	484c      	ldr	r0, [pc, #304]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 80012d6:	f00e fdaf 	bl	800fe38 <HAL_UART_Transmit>

      break;
 80012da:	e08c      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

      /*----------------气压计数据读取----------------*/
    case 53://5
    	maxmotor = 300;
 80012dc:	4b5b      	ldr	r3, [pc, #364]	@ (800144c <HAL_UART_RxCpltCallback+0x2e4>)
 80012de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012e2:	601a      	str	r2, [r3, #0]
    	printf("\r\n\r\n\r\nthrottle_value: %d \r\n\r\n\r\n",maxmotor);
 80012e4:	4b59      	ldr	r3, [pc, #356]	@ (800144c <HAL_UART_RxCpltCallback+0x2e4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4859      	ldr	r0, [pc, #356]	@ (8001450 <HAL_UART_RxCpltCallback+0x2e8>)
 80012ec:	f013 fb34 	bl	8014958 <iprintf>
//    	printf("海拔：%2f \r\n",BARO_Data_Now.Actual_altitude);
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BARO_Data_Now.press_correction, sizeof(BARO_Data_Now.Actual_pressure), 100);
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BARO_Data_Now.temp_correction, sizeof(BARO_Data_Now.Actual_temperature), 100);
//    HAL_UART_Transmit(&huart4, (uint8_t*)&BARO_Data_Now.Actual_altitude, sizeof(BARO_Data_Now.Actual_altitude), 100);

      break;
 80012f0:	e081      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

      /*----------------油门调整----------------*/
      case 54://6
          // 实现油门急停
    	  start_fly = 0;
 80012f2:	4b58      	ldr	r3, [pc, #352]	@ (8001454 <HAL_UART_RxCpltCallback+0x2ec>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
    	  slow_down = 0;
 80012f8:	4b57      	ldr	r3, [pc, #348]	@ (8001458 <HAL_UART_RxCpltCallback+0x2f0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
          throttle_value = 0;  // 将油门值设置为0
 80012fe:	4b57      	ldr	r3, [pc, #348]	@ (800145c <HAL_UART_RxCpltCallback+0x2f4>)
 8001300:	2200      	movs	r2, #0
 8001302:	801a      	strh	r2, [r3, #0]
          for (uint8_t m = 0; m < 4; ++m) {
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e00a      	b.n	8001320 <HAL_UART_RxCpltCallback+0x1b8>
              DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 800130a:	4b54      	ldr	r3, [pc, #336]	@ (800145c <HAL_UART_RxCpltCallback+0x2f4>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b29a      	uxth	r2, r3
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f993 	bl	8004640 <DSHOT_Update>
          for (uint8_t m = 0; m < 4; ++m) {
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	3301      	adds	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d9f1      	bls.n	800130a <HAL_UART_RxCpltCallback+0x1a2>
          }
          printf("\r\n Stop! \r\n\r\n");
 8001326:	484e      	ldr	r0, [pc, #312]	@ (8001460 <HAL_UART_RxCpltCallback+0x2f8>)
 8001328:	f013 fb7e 	bl	8014a28 <puts>
          break;
 800132c:	e063      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

      case 55://7
    	  if(xxx==0)
 800132e:	4b4d      	ldr	r3, [pc, #308]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11d      	bne.n	8001372 <HAL_UART_RxCpltCallback+0x20a>
    	  {
    		  throttle_value = 1100;
 8001336:	4b49      	ldr	r3, [pc, #292]	@ (800145c <HAL_UART_RxCpltCallback+0x2f4>)
 8001338:	f240 424c 	movw	r2, #1100	@ 0x44c
 800133c:	801a      	strh	r2, [r3, #0]
				for (uint8_t m = 0; m < 4; ++m) {
 800133e:	2300      	movs	r3, #0
 8001340:	73bb      	strb	r3, [r7, #14]
 8001342:	e00a      	b.n	800135a <HAL_UART_RxCpltCallback+0x1f2>
					DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 8001344:	4b45      	ldr	r3, [pc, #276]	@ (800145c <HAL_UART_RxCpltCallback+0x2f4>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b29a      	uxth	r2, r3
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f003 f976 	bl	8004640 <DSHOT_Update>
				for (uint8_t m = 0; m < 4; ++m) {
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	3301      	adds	r3, #1
 8001358:	73bb      	strb	r3, [r7, #14]
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d9f1      	bls.n	8001344 <HAL_UART_RxCpltCallback+0x1dc>
				}
        	  xxx = 2;
 8001360:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 8001362:	2202      	movs	r2, #2
 8001364:	601a      	str	r2, [r3, #0]
        	  xxx = 2;
 8001366:	4b3f      	ldr	r3, [pc, #252]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 8001368:	2202      	movs	r2, #2
 800136a:	601a      	str	r2, [r3, #0]
        	  xxx = 2;
 800136c:	4b3d      	ldr	r3, [pc, #244]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 800136e:	2202      	movs	r2, #2
 8001370:	601a      	str	r2, [r3, #0]
    	  }


    	  if(xxx==1)
 8001372:	4b3c      	ldr	r3, [pc, #240]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d11d      	bne.n	80013b6 <HAL_UART_RxCpltCallback+0x24e>
    	  {
    		  throttle_value = 750;
 800137a:	4b38      	ldr	r3, [pc, #224]	@ (800145c <HAL_UART_RxCpltCallback+0x2f4>)
 800137c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001380:	801a      	strh	r2, [r3, #0]
				for (uint8_t m = 0; m < 4; ++m) {
 8001382:	2300      	movs	r3, #0
 8001384:	737b      	strb	r3, [r7, #13]
 8001386:	e00a      	b.n	800139e <HAL_UART_RxCpltCallback+0x236>
					DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 8001388:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_UART_RxCpltCallback+0x2f4>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	b29a      	uxth	r2, r3
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f003 f954 	bl	8004640 <DSHOT_Update>
				for (uint8_t m = 0; m < 4; ++m) {
 8001398:	7b7b      	ldrb	r3, [r7, #13]
 800139a:	3301      	adds	r3, #1
 800139c:	737b      	strb	r3, [r7, #13]
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d9f1      	bls.n	8001388 <HAL_UART_RxCpltCallback+0x220>
				}
        	  xxx = 0;
 80013a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
        	  xxx = 0;
 80013aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
        	  xxx = 0;
 80013b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <HAL_UART_RxCpltCallback+0x2fc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
//              DSHOT_Update(0, throttle_value);
//              DSHOT_Update(q, throttle_value);
//              q++;
//              if(q==4)q=0;

          printf("throttle_value: %d \r\n\r\n",throttle_value);
 80013b6:	4b29      	ldr	r3, [pc, #164]	@ (800145c <HAL_UART_RxCpltCallback+0x2f4>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	482a      	ldr	r0, [pc, #168]	@ (8001468 <HAL_UART_RxCpltCallback+0x300>)
 80013c0:	f013 faca 	bl	8014958 <iprintf>
//    	  {
//        	  maxmotor += 20;
//        	  printf("\r\n\r\n\r\nthrottle_value: %d \r\n\r\n\r\n",maxmotor);
//    	  }

          break;
 80013c4:	e017      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>
//              for (uint8_t m = 0; m < 4; ++m) {
//              DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
//              }
//          }
//    	  printf("throttle_value: %d \r\n\r\n",throttle_value);
    	  maxmotor -= 50;
 80013c6:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_UART_RxCpltCallback+0x2e4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3b32      	subs	r3, #50	@ 0x32
 80013cc:	4a1f      	ldr	r2, [pc, #124]	@ (800144c <HAL_UART_RxCpltCallback+0x2e4>)
 80013ce:	6013      	str	r3, [r2, #0]
    	  printf("\r\n\r\n\r\nthrottle_value: %d \r\n\r\n\r\n",maxmotor);
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_UART_RxCpltCallback+0x2e4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	481e      	ldr	r0, [pc, #120]	@ (8001450 <HAL_UART_RxCpltCallback+0x2e8>)
 80013d8:	f013 fabe 	bl	8014958 <iprintf>
          break;
 80013dc:	e00b      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

      case 57://9,缓降
    	  start_fly = 0;
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <HAL_UART_RxCpltCallback+0x2ec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]

    	  slow_down = 1;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <HAL_UART_RxCpltCallback+0x2f0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
    	  break;
 80013ea:	e004      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

      case 48://0，一键起飞
    	  start_fly = 1;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_UART_RxCpltCallback+0x2ec>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
    	  break;
 80013f2:	e000      	b.n	80013f6 <HAL_UART_RxCpltCallback+0x28e>

    default:
      break;
 80013f4:	bf00      	nop
    
    }
    
}
  //重启串口4接收中断
  HAL_UART_Receive_IT(&huart4, rx_buffer, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	4904      	ldr	r1, [pc, #16]	@ (800140c <HAL_UART_RxCpltCallback+0x2a4>)
 80013fa:	4803      	ldr	r0, [pc, #12]	@ (8001408 <HAL_UART_RxCpltCallback+0x2a0>)
 80013fc:	f00e fdaa 	bl	800ff54 <HAL_UART_Receive_IT>

}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24000890 	.word	0x24000890
 800140c:	2400036c 	.word	0x2400036c
 8001410:	08018190 	.word	0x08018190
 8001414:	2400036d 	.word	0x2400036d
 8001418:	24000b2c 	.word	0x24000b2c
 800141c:	08018198 	.word	0x08018198
 8001420:	080181a8 	.word	0x080181a8
 8001424:	080181b8 	.word	0x080181b8
 8001428:	080181c8 	.word	0x080181c8
 800142c:	080181d8 	.word	0x080181d8
 8001430:	080181e8 	.word	0x080181e8
 8001434:	24000cc4 	.word	0x24000cc4
 8001438:	24000cc8 	.word	0x24000cc8
 800143c:	24000ccc 	.word	0x24000ccc
 8001440:	24000c74 	.word	0x24000c74
 8001444:	24000c78 	.word	0x24000c78
 8001448:	24000c7c 	.word	0x24000c7c
 800144c:	2400037c 	.word	0x2400037c
 8001450:	080181f8 	.word	0x080181f8
 8001454:	24000379 	.word	0x24000379
 8001458:	24000378 	.word	0x24000378
 800145c:	24000000 	.word	0x24000000
 8001460:	08018218 	.word	0x08018218
 8001464:	24000004 	.word	0x24000004
 8001468:	08018228 	.word	0x08018228

0800146c <HAL_TIM_PWM_PulseFinishedCallback>:

// TIM1\CH1\DMA传输完成中断
uint8_t r = 0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
//            }
//            r = 0;
//    	}
//
//    }
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_ADC_ConvCpltCallback>:
  double curr=0;
  float BAT_V = 0.0;
  double Dc_Motor_Current = 0.0;

  void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
      if (hadc == &hadc1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a27      	ldr	r2, [pc, #156]	@ (8001528 <HAL_ADC_ConvCpltCallback+0xa8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d118      	bne.n	80014c2 <HAL_ADC_ConvCpltCallback+0x42>
      {
    	  bat = HAL_ADC_GetValue(&hadc1);
 8001490:	4825      	ldr	r0, [pc, #148]	@ (8001528 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001492:	f003 fef3 	bl	800527c <HAL_ADC_GetValue>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_ADC_ConvCpltCallback+0xac>)
 800149c:	801a      	strh	r2, [r3, #0]
          BAT_V = bat * 3.3f / 65535.0f;      //电池电压
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <HAL_ADC_ConvCpltCallback+0xac>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001530 <HAL_ADC_ConvCpltCallback+0xb0>
 80014ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001534 <HAL_ADC_ConvCpltCallback+0xb4>
 80014b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <HAL_ADC_ConvCpltCallback+0xb8>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]
      {
    	  curr = HAL_ADC_GetValue(&hadc2);
          Dc_Motor_Current = (curr * 3.3f / 65535.0f) / 0.01275f; //电机电流,12.75mV/A
      }

  }
 80014c0:	e01f      	b.n	8001502 <HAL_ADC_ConvCpltCallback+0x82>
      else if (hadc == &hadc2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1d      	ldr	r2, [pc, #116]	@ (800153c <HAL_ADC_ConvCpltCallback+0xbc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d11b      	bne.n	8001502 <HAL_ADC_ConvCpltCallback+0x82>
    	  curr = HAL_ADC_GetValue(&hadc2);
 80014ca:	481c      	ldr	r0, [pc, #112]	@ (800153c <HAL_ADC_ConvCpltCallback+0xbc>)
 80014cc:	f003 fed6 	bl	800527c <HAL_ADC_GetValue>
 80014d0:	ee07 0a90 	vmov	s15, r0
 80014d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_ADC_ConvCpltCallback+0xc0>)
 80014da:	ed83 7b00 	vstr	d7, [r3]
          Dc_Motor_Current = (curr * 3.3f / 65535.0f) / 0.01275f; //电机电流,12.75mV/A
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <HAL_ADC_ConvCpltCallback+0xc0>)
 80014e0:	ed93 7b00 	vldr	d7, [r3]
 80014e4:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001510 <HAL_ADC_ConvCpltCallback+0x90>
 80014e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014ec:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8001518 <HAL_ADC_ConvCpltCallback+0x98>
 80014f0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014f4:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8001520 <HAL_ADC_ConvCpltCallback+0xa0>
 80014f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_ADC_ConvCpltCallback+0xc4>)
 80014fe:	ed83 7b00 	vstr	d7, [r3]
  }
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	60000000 	.word	0x60000000
 8001514:	400a6666 	.word	0x400a6666
 8001518:	00000000 	.word	0x00000000
 800151c:	40efffe0 	.word	0x40efffe0
 8001520:	00000000 	.word	0x00000000
 8001524:	3f8a1cac 	.word	0x3f8a1cac
 8001528:	2400024c 	.word	0x2400024c
 800152c:	24000380 	.word	0x24000380
 8001530:	40533333 	.word	0x40533333
 8001534:	477fff00 	.word	0x477fff00
 8001538:	24000390 	.word	0x24000390
 800153c:	240002b0 	.word	0x240002b0
 8001540:	24000388 	.word	0x24000388
 8001544:	24000398 	.word	0x24000398

08001548 <HAL_UARTEx_RxEventCallback>:

  uint8_t rx_buffer2[64]; // usart2接收光流数据缓冲区
  extern DMA_HandleTypeDef hdma_usart2_rx;
  void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart,uint16_t Size) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
      if (huart == &huart2) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a47      	ldr	r2, [pc, #284]	@ (8001674 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f040 8087 	bne.w	800166c <HAL_UARTEx_RxEventCallback+0x124>

    	  micolink_decode(rx_buffer2[0]);//micolink光流数据处理
 800155e:	4b46      	ldr	r3, [pc, #280]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f012 fbce 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[1]);
 8001568:	4b43      	ldr	r3, [pc, #268]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 800156a:	785b      	ldrb	r3, [r3, #1]
 800156c:	4618      	mov	r0, r3
 800156e:	f012 fbc9 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[2]);
 8001572:	4b41      	ldr	r3, [pc, #260]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001574:	789b      	ldrb	r3, [r3, #2]
 8001576:	4618      	mov	r0, r3
 8001578:	f012 fbc4 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[3]);
 800157c:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 800157e:	78db      	ldrb	r3, [r3, #3]
 8001580:	4618      	mov	r0, r3
 8001582:	f012 fbbf 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[4]);
 8001586:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f012 fbba 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[5]);
 8001590:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001592:	795b      	ldrb	r3, [r3, #5]
 8001594:	4618      	mov	r0, r3
 8001596:	f012 fbb5 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[6]);
 800159a:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 800159c:	799b      	ldrb	r3, [r3, #6]
 800159e:	4618      	mov	r0, r3
 80015a0:	f012 fbb0 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[7]);
 80015a4:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015a6:	79db      	ldrb	r3, [r3, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f012 fbab 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[8]);
 80015ae:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015b0:	7a1b      	ldrb	r3, [r3, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f012 fba6 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[9]);
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015ba:	7a5b      	ldrb	r3, [r3, #9]
 80015bc:	4618      	mov	r0, r3
 80015be:	f012 fba1 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[10]);
 80015c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015c4:	7a9b      	ldrb	r3, [r3, #10]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f012 fb9c 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[11]);
 80015cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015ce:	7adb      	ldrb	r3, [r3, #11]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f012 fb97 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[12]);
 80015d6:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015d8:	7b1b      	ldrb	r3, [r3, #12]
 80015da:	4618      	mov	r0, r3
 80015dc:	f012 fb92 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[13]);
 80015e0:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015e2:	7b5b      	ldrb	r3, [r3, #13]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f012 fb8d 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[14]);
 80015ea:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015ec:	7b9b      	ldrb	r3, [r3, #14]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f012 fb88 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[15]);
 80015f4:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 80015f6:	7bdb      	ldrb	r3, [r3, #15]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f012 fb83 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[16]);
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001600:	7c1b      	ldrb	r3, [r3, #16]
 8001602:	4618      	mov	r0, r3
 8001604:	f012 fb7e 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[17]);
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 800160a:	7c5b      	ldrb	r3, [r3, #17]
 800160c:	4618      	mov	r0, r3
 800160e:	f012 fb79 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[18]);
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001614:	7c9b      	ldrb	r3, [r3, #18]
 8001616:	4618      	mov	r0, r3
 8001618:	f012 fb74 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[19]);
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 800161e:	7cdb      	ldrb	r3, [r3, #19]
 8001620:	4618      	mov	r0, r3
 8001622:	f012 fb6f 	bl	8013d04 <micolink_decode>
    	  micolink_decode(rx_buffer2[20]);
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001628:	7d1b      	ldrb	r3, [r3, #20]
 800162a:	4618      	mov	r0, r3
 800162c:	f012 fb6a 	bl	8013d04 <micolink_decode>
  		  micolink_decode(rx_buffer2[21]);
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001632:	7d5b      	ldrb	r3, [r3, #21]
 8001634:	4618      	mov	r0, r3
 8001636:	f012 fb65 	bl	8013d04 <micolink_decode>
  		  micolink_decode(rx_buffer2[22]);
 800163a:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 800163c:	7d9b      	ldrb	r3, [r3, #22]
 800163e:	4618      	mov	r0, r3
 8001640:	f012 fb60 	bl	8013d04 <micolink_decode>
  		  micolink_decode(rx_buffer2[23]);
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001646:	7ddb      	ldrb	r3, [r3, #23]
 8001648:	4618      	mov	r0, r3
 800164a:	f012 fb5b 	bl	8013d04 <micolink_decode>
  		  micolink_decode(rx_buffer2[24]);
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	4618      	mov	r0, r3
 8001654:	f012 fb56 	bl	8013d04 <micolink_decode>
  		  micolink_decode(rx_buffer2[25]);
 8001658:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 800165a:	7e5b      	ldrb	r3, [r3, #25]
 800165c:	4618      	mov	r0, r3
 800165e:	f012 fb51 	bl	8013d04 <micolink_decode>
  		  micolink_decode(rx_buffer2[26]);
 8001662:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x130>)
 8001664:	7e9b      	ldrb	r3, [r3, #26]
 8001666:	4618      	mov	r0, r3
 8001668:	f012 fb4c 	bl	8013d04 <micolink_decode>

      }
  }
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	24000924 	.word	0x24000924
 8001678:	240003a0 	.word	0x240003a0
 800167c:	00000000 	.word	0x00000000

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001686:	f000 fc34 	bl	8001ef2 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168a:	f003 f827 	bl	80046dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 fb85 	bl	8001d9c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001692:	f000 fbff 	bl	8001e94 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001696:	f7ff fb8d 	bl	8000db4 <MX_GPIO_Init>
  MX_DMA_Init();
 800169a:	f7ff fb4b 	bl	8000d34 <MX_DMA_Init>
  MX_TIM6_Init();
 800169e:	f001 fa4d 	bl	8002b3c <MX_TIM6_Init>
  MX_SPI1_Init();
 80016a2:	f000 fc87 	bl	8001fb4 <MX_SPI1_Init>
  MX_UART4_Init();
 80016a6:	f001 fc23 	bl	8002ef0 <MX_UART4_Init>
  MX_SPI4_Init();
 80016aa:	f000 fd2f 	bl	800210c <MX_SPI4_Init>
  MX_I2C1_Init();
 80016ae:	f7ff fca1 	bl	8000ff4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80016b2:	f000 fcd5 	bl	8002060 <MX_SPI2_Init>
  MX_TIM1_Init();
 80016b6:	f001 f98d 	bl	80029d4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80016ba:	f7ff f9bb 	bl	8000a34 <MX_ADC1_Init>
  MX_ADC2_Init();
 80016be:	f7ff fa35 	bl	8000b2c <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80016c2:	f001 fc61 	bl	8002f88 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80016c6:	f001 fa6f 	bl	8002ba8 <MX_TIM7_Init>

  /*--------气压计--------*/
//   INIT_BARO();

  //开定时器6中断
  HAL_TIM_Base_Start_IT(&htim6);
 80016ca:	4862      	ldr	r0, [pc, #392]	@ (8001854 <main+0x1d4>)
 80016cc:	f00d f888 	bl	800e7e0 <HAL_TIM_Base_Start_IT>

  //开启串口4接收中断
  HAL_UART_Receive_IT(&huart4, rx_buffer, 1);
 80016d0:	2201      	movs	r2, #1
 80016d2:	4961      	ldr	r1, [pc, #388]	@ (8001858 <main+0x1d8>)
 80016d4:	4861      	ldr	r0, [pc, #388]	@ (800185c <main+0x1dc>)
 80016d6:	f00e fc3d 	bl	800ff54 <HAL_UART_Receive_IT>

  /*-----------初始化并使能BMI088-----------*/
   BMI088_FLOAT_ACC_GYRO_Init(&hspi1);
 80016da:	4861      	ldr	r0, [pc, #388]	@ (8001860 <main+0x1e0>)
 80016dc:	f002 fb34 	bl	8003d48 <BMI088_FLOAT_ACC_GYRO_Init>
//
//    FM25Vx_text();    //测试函数

  /*-----------DMA+PWM输出DShot300信号-----------*/
  /* 先关 HT 中断，只留 TC */
   __HAL_DMA_DISABLE_IT(&hdma_tim1_ch1, DMA_IT_HT);
 80016e0:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <main+0x1e4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a60      	ldr	r2, [pc, #384]	@ (8001868 <main+0x1e8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d04a      	beq.n	8001780 <main+0x100>
 80016ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001864 <main+0x1e4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5f      	ldr	r2, [pc, #380]	@ (800186c <main+0x1ec>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d045      	beq.n	8001780 <main+0x100>
 80016f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001864 <main+0x1e4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001870 <main+0x1f0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d040      	beq.n	8001780 <main+0x100>
 80016fe:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <main+0x1e4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a5c      	ldr	r2, [pc, #368]	@ (8001874 <main+0x1f4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d03b      	beq.n	8001780 <main+0x100>
 8001708:	4b56      	ldr	r3, [pc, #344]	@ (8001864 <main+0x1e4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a5a      	ldr	r2, [pc, #360]	@ (8001878 <main+0x1f8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d036      	beq.n	8001780 <main+0x100>
 8001712:	4b54      	ldr	r3, [pc, #336]	@ (8001864 <main+0x1e4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a59      	ldr	r2, [pc, #356]	@ (800187c <main+0x1fc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d031      	beq.n	8001780 <main+0x100>
 800171c:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <main+0x1e4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <main+0x200>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02c      	beq.n	8001780 <main+0x100>
 8001726:	4b4f      	ldr	r3, [pc, #316]	@ (8001864 <main+0x1e4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a56      	ldr	r2, [pc, #344]	@ (8001884 <main+0x204>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d027      	beq.n	8001780 <main+0x100>
 8001730:	4b4c      	ldr	r3, [pc, #304]	@ (8001864 <main+0x1e4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a54      	ldr	r2, [pc, #336]	@ (8001888 <main+0x208>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d022      	beq.n	8001780 <main+0x100>
 800173a:	4b4a      	ldr	r3, [pc, #296]	@ (8001864 <main+0x1e4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a53      	ldr	r2, [pc, #332]	@ (800188c <main+0x20c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d01d      	beq.n	8001780 <main+0x100>
 8001744:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <main+0x1e4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a51      	ldr	r2, [pc, #324]	@ (8001890 <main+0x210>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d018      	beq.n	8001780 <main+0x100>
 800174e:	4b45      	ldr	r3, [pc, #276]	@ (8001864 <main+0x1e4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a50      	ldr	r2, [pc, #320]	@ (8001894 <main+0x214>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d013      	beq.n	8001780 <main+0x100>
 8001758:	4b42      	ldr	r3, [pc, #264]	@ (8001864 <main+0x1e4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a4e      	ldr	r2, [pc, #312]	@ (8001898 <main+0x218>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00e      	beq.n	8001780 <main+0x100>
 8001762:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <main+0x1e4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a4d      	ldr	r2, [pc, #308]	@ (800189c <main+0x21c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d009      	beq.n	8001780 <main+0x100>
 800176c:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <main+0x1e4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a4b      	ldr	r2, [pc, #300]	@ (80018a0 <main+0x220>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d004      	beq.n	8001780 <main+0x100>
 8001776:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <main+0x1e4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4a      	ldr	r2, [pc, #296]	@ (80018a4 <main+0x224>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d108      	bne.n	8001792 <main+0x112>
 8001780:	4b38      	ldr	r3, [pc, #224]	@ (8001864 <main+0x1e4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <main+0x1e4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0208 	bic.w	r2, r2, #8
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e007      	b.n	80017a2 <main+0x122>
 8001792:	4b34      	ldr	r3, [pc, #208]	@ (8001864 <main+0x1e4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <main+0x1e4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0204 	bic.w	r2, r2, #4
 80017a0:	601a      	str	r2, [r3, #0]
   __HAL_DMA_DISABLE_IT(&hdma_tim1_ch2, DMA_IT_HT);
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <main+0x228>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a30      	ldr	r2, [pc, #192]	@ (8001868 <main+0x1e8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d04a      	beq.n	8001842 <main+0x1c2>
 80017ac:	4b3e      	ldr	r3, [pc, #248]	@ (80018a8 <main+0x228>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2e      	ldr	r2, [pc, #184]	@ (800186c <main+0x1ec>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d045      	beq.n	8001842 <main+0x1c2>
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <main+0x228>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001870 <main+0x1f0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d040      	beq.n	8001842 <main+0x1c2>
 80017c0:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <main+0x228>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001874 <main+0x1f4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d03b      	beq.n	8001842 <main+0x1c2>
 80017ca:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <main+0x228>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001878 <main+0x1f8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d036      	beq.n	8001842 <main+0x1c2>
 80017d4:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <main+0x228>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a28      	ldr	r2, [pc, #160]	@ (800187c <main+0x1fc>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d031      	beq.n	8001842 <main+0x1c2>
 80017de:	4b32      	ldr	r3, [pc, #200]	@ (80018a8 <main+0x228>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a27      	ldr	r2, [pc, #156]	@ (8001880 <main+0x200>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d02c      	beq.n	8001842 <main+0x1c2>
 80017e8:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <main+0x228>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <main+0x204>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d027      	beq.n	8001842 <main+0x1c2>
 80017f2:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <main+0x228>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a24      	ldr	r2, [pc, #144]	@ (8001888 <main+0x208>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d022      	beq.n	8001842 <main+0x1c2>
 80017fc:	4b2a      	ldr	r3, [pc, #168]	@ (80018a8 <main+0x228>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a22      	ldr	r2, [pc, #136]	@ (800188c <main+0x20c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01d      	beq.n	8001842 <main+0x1c2>
 8001806:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <main+0x228>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <main+0x210>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d018      	beq.n	8001842 <main+0x1c2>
 8001810:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <main+0x228>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1f      	ldr	r2, [pc, #124]	@ (8001894 <main+0x214>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <main+0x1c2>
 800181a:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <main+0x228>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1e      	ldr	r2, [pc, #120]	@ (8001898 <main+0x218>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00e      	beq.n	8001842 <main+0x1c2>
 8001824:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <main+0x228>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <main+0x21c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d009      	beq.n	8001842 <main+0x1c2>
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <main+0x228>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1b      	ldr	r2, [pc, #108]	@ (80018a0 <main+0x220>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d004      	beq.n	8001842 <main+0x1c2>
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <main+0x228>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <main+0x224>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d134      	bne.n	80018ac <main+0x22c>
 8001842:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <main+0x228>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <main+0x228>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e033      	b.n	80018bc <main+0x23c>
 8001854:	24000618 	.word	0x24000618
 8001858:	2400036c 	.word	0x2400036c
 800185c:	24000890 	.word	0x24000890
 8001860:	240003e4 	.word	0x240003e4
 8001864:	240006b0 	.word	0x240006b0
 8001868:	40020010 	.word	0x40020010
 800186c:	40020028 	.word	0x40020028
 8001870:	40020040 	.word	0x40020040
 8001874:	40020058 	.word	0x40020058
 8001878:	40020070 	.word	0x40020070
 800187c:	40020088 	.word	0x40020088
 8001880:	400200a0 	.word	0x400200a0
 8001884:	400200b8 	.word	0x400200b8
 8001888:	40020410 	.word	0x40020410
 800188c:	40020428 	.word	0x40020428
 8001890:	40020440 	.word	0x40020440
 8001894:	40020458 	.word	0x40020458
 8001898:	40020470 	.word	0x40020470
 800189c:	40020488 	.word	0x40020488
 80018a0:	400204a0 	.word	0x400204a0
 80018a4:	400204b8 	.word	0x400204b8
 80018a8:	24000728 	.word	0x24000728
 80018ac:	4b7f      	ldr	r3, [pc, #508]	@ (8001aac <main+0x42c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b7e      	ldr	r3, [pc, #504]	@ (8001aac <main+0x42c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0204 	bic.w	r2, r2, #4
 80018ba:	601a      	str	r2, [r3, #0]
   __HAL_DMA_DISABLE_IT(&hdma_tim1_ch3, DMA_IT_HT);
 80018bc:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab0 <main+0x430>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ab4 <main+0x434>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d04a      	beq.n	800195c <main+0x2dc>
 80018c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab0 <main+0x430>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7b      	ldr	r2, [pc, #492]	@ (8001ab8 <main+0x438>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d045      	beq.n	800195c <main+0x2dc>
 80018d0:	4b77      	ldr	r3, [pc, #476]	@ (8001ab0 <main+0x430>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a79      	ldr	r2, [pc, #484]	@ (8001abc <main+0x43c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d040      	beq.n	800195c <main+0x2dc>
 80018da:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <main+0x430>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a78      	ldr	r2, [pc, #480]	@ (8001ac0 <main+0x440>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d03b      	beq.n	800195c <main+0x2dc>
 80018e4:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <main+0x430>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a76      	ldr	r2, [pc, #472]	@ (8001ac4 <main+0x444>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d036      	beq.n	800195c <main+0x2dc>
 80018ee:	4b70      	ldr	r3, [pc, #448]	@ (8001ab0 <main+0x430>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a75      	ldr	r2, [pc, #468]	@ (8001ac8 <main+0x448>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d031      	beq.n	800195c <main+0x2dc>
 80018f8:	4b6d      	ldr	r3, [pc, #436]	@ (8001ab0 <main+0x430>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a73      	ldr	r2, [pc, #460]	@ (8001acc <main+0x44c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02c      	beq.n	800195c <main+0x2dc>
 8001902:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab0 <main+0x430>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a72      	ldr	r2, [pc, #456]	@ (8001ad0 <main+0x450>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d027      	beq.n	800195c <main+0x2dc>
 800190c:	4b68      	ldr	r3, [pc, #416]	@ (8001ab0 <main+0x430>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a70      	ldr	r2, [pc, #448]	@ (8001ad4 <main+0x454>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d022      	beq.n	800195c <main+0x2dc>
 8001916:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <main+0x430>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ad8 <main+0x458>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d01d      	beq.n	800195c <main+0x2dc>
 8001920:	4b63      	ldr	r3, [pc, #396]	@ (8001ab0 <main+0x430>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6d      	ldr	r2, [pc, #436]	@ (8001adc <main+0x45c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d018      	beq.n	800195c <main+0x2dc>
 800192a:	4b61      	ldr	r3, [pc, #388]	@ (8001ab0 <main+0x430>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ae0 <main+0x460>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <main+0x2dc>
 8001934:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab0 <main+0x430>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae4 <main+0x464>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00e      	beq.n	800195c <main+0x2dc>
 800193e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <main+0x430>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a69      	ldr	r2, [pc, #420]	@ (8001ae8 <main+0x468>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d009      	beq.n	800195c <main+0x2dc>
 8001948:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <main+0x430>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a67      	ldr	r2, [pc, #412]	@ (8001aec <main+0x46c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d004      	beq.n	800195c <main+0x2dc>
 8001952:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <main+0x430>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a66      	ldr	r2, [pc, #408]	@ (8001af0 <main+0x470>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d108      	bne.n	800196e <main+0x2ee>
 800195c:	4b54      	ldr	r3, [pc, #336]	@ (8001ab0 <main+0x430>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <main+0x430>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0208 	bic.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e007      	b.n	800197e <main+0x2fe>
 800196e:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <main+0x430>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <main+0x430>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0204 	bic.w	r2, r2, #4
 800197c:	601a      	str	r2, [r3, #0]
   __HAL_DMA_DISABLE_IT(&hdma_tim1_ch4, DMA_IT_HT);
 800197e:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <main+0x474>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab4 <main+0x434>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04a      	beq.n	8001a1e <main+0x39e>
 8001988:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <main+0x474>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ab8 <main+0x438>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d045      	beq.n	8001a1e <main+0x39e>
 8001992:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <main+0x474>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a49      	ldr	r2, [pc, #292]	@ (8001abc <main+0x43c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d040      	beq.n	8001a1e <main+0x39e>
 800199c:	4b55      	ldr	r3, [pc, #340]	@ (8001af4 <main+0x474>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a47      	ldr	r2, [pc, #284]	@ (8001ac0 <main+0x440>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d03b      	beq.n	8001a1e <main+0x39e>
 80019a6:	4b53      	ldr	r3, [pc, #332]	@ (8001af4 <main+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a46      	ldr	r2, [pc, #280]	@ (8001ac4 <main+0x444>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d036      	beq.n	8001a1e <main+0x39e>
 80019b0:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <main+0x474>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a44      	ldr	r2, [pc, #272]	@ (8001ac8 <main+0x448>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d031      	beq.n	8001a1e <main+0x39e>
 80019ba:	4b4e      	ldr	r3, [pc, #312]	@ (8001af4 <main+0x474>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a43      	ldr	r2, [pc, #268]	@ (8001acc <main+0x44c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d02c      	beq.n	8001a1e <main+0x39e>
 80019c4:	4b4b      	ldr	r3, [pc, #300]	@ (8001af4 <main+0x474>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a41      	ldr	r2, [pc, #260]	@ (8001ad0 <main+0x450>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d027      	beq.n	8001a1e <main+0x39e>
 80019ce:	4b49      	ldr	r3, [pc, #292]	@ (8001af4 <main+0x474>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a40      	ldr	r2, [pc, #256]	@ (8001ad4 <main+0x454>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d022      	beq.n	8001a1e <main+0x39e>
 80019d8:	4b46      	ldr	r3, [pc, #280]	@ (8001af4 <main+0x474>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ad8 <main+0x458>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01d      	beq.n	8001a1e <main+0x39e>
 80019e2:	4b44      	ldr	r3, [pc, #272]	@ (8001af4 <main+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a3d      	ldr	r2, [pc, #244]	@ (8001adc <main+0x45c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d018      	beq.n	8001a1e <main+0x39e>
 80019ec:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <main+0x474>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae0 <main+0x460>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <main+0x39e>
 80019f6:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <main+0x474>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae4 <main+0x464>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00e      	beq.n	8001a1e <main+0x39e>
 8001a00:	4b3c      	ldr	r3, [pc, #240]	@ (8001af4 <main+0x474>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a38      	ldr	r2, [pc, #224]	@ (8001ae8 <main+0x468>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d009      	beq.n	8001a1e <main+0x39e>
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001af4 <main+0x474>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a37      	ldr	r2, [pc, #220]	@ (8001aec <main+0x46c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d004      	beq.n	8001a1e <main+0x39e>
 8001a14:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <main+0x474>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a35      	ldr	r2, [pc, #212]	@ (8001af0 <main+0x470>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d108      	bne.n	8001a30 <main+0x3b0>
 8001a1e:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <main+0x474>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <main+0x474>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0208 	bic.w	r2, r2, #8
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <main+0x3c0>
 8001a30:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <main+0x474>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <main+0x474>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0204 	bic.w	r2, r2, #4
 8001a3e:	601a      	str	r2, [r3, #0]
  DSHOT_Start();    // 启动 4 路循环发送
 8001a40:	f002 fe14 	bl	800466c <DSHOT_Start>
  DSHOT_Update(0, 0);  // 电机 0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2000      	movs	r0, #0
 8001a48:	f002 fdfa 	bl	8004640 <DSHOT_Update>
  DSHOT_Update(1, 0);  // 电机 1
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f002 fdf6 	bl	8004640 <DSHOT_Update>
  DSHOT_Update(2, 0);  // 电机 2
 8001a54:	2100      	movs	r1, #0
 8001a56:	2002      	movs	r0, #2
 8001a58:	f002 fdf2 	bl	8004640 <DSHOT_Update>
  DSHOT_Update(3, 0);  // 电机 3
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f002 fdee 	bl	8004640 <DSHOT_Update>

  /*-----------ADC采样BAT电压与电调电流-----------*/
  //ADC校准参考电压
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001a64:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4823      	ldr	r0, [pc, #140]	@ (8001af8 <main+0x478>)
 8001a6c:	f004 fba2 	bl	80061b4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001a70:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001a74:	2100      	movs	r1, #0
 8001a76:	4821      	ldr	r0, [pc, #132]	@ (8001afc <main+0x47c>)
 8001a78:	f004 fb9c 	bl	80061b4 <HAL_ADCEx_Calibration_Start>

  // 启动 ADC 并使能中断
  HAL_ADC_Start_IT(&hadc1);  // 关键：用 _IT 函数启动，自动使能中断
 8001a7c:	481e      	ldr	r0, [pc, #120]	@ (8001af8 <main+0x478>)
 8001a7e:	f003 fabf 	bl	8005000 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8001a82:	481e      	ldr	r0, [pc, #120]	@ (8001afc <main+0x47c>)
 8001a84:	f003 fabc 	bl	8005000 <HAL_ADC_Start_IT>
//  float d_x, d_y;


  extern motor_out_t motor_out; // 电机输出值，由 torque_to_motor 函数计算得到

  uint8_t fly_cnt = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint16_t cnt = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	81bb      	strh	r3, [r7, #12]

  HAL_TIM_Base_Start(&htim7);   // 放在 main 里或任务初始化里一次即可
 8001a90:	481b      	ldr	r0, [pc, #108]	@ (8001b00 <main+0x480>)
 8001a92:	f00c fe35 	bl	800e700 <HAL_TIM_Base_Start>
//	  uint32_t end = __HAL_TIM_GET_COUNTER(&htim7);
//
//	  uint32_t us = (end >= start) ? (end - start) : (0xFFFF - start + end);
//	  printf("耗时: %lu us\r\n", us);

	  	  IMU_Read(BMIx);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <main+0x484>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fb50 	bl	8004140 <IMU_Read>
	  	  process_main();
 8001aa0:	f011 fec4 	bl	801382c <process_main>
	  	  HAL_Delay(1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f002 fe75 	bl	8004794 <HAL_Delay>
//			 bat_cur =0;
//			 printf("BAT_V=%.2f V\r\n",BAT_V*10);
//			 printf("CURR =%.2f A\r\n\r\n",Dc_Motor_Current);
//		 }

	  while (start_fly == 1)
 8001aaa:	e0dd      	b.n	8001c68 <main+0x5e8>
 8001aac:	24000728 	.word	0x24000728
 8001ab0:	240007a0 	.word	0x240007a0
 8001ab4:	40020010 	.word	0x40020010
 8001ab8:	40020028 	.word	0x40020028
 8001abc:	40020040 	.word	0x40020040
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	40020070 	.word	0x40020070
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	400200a0 	.word	0x400200a0
 8001ad0:	400200b8 	.word	0x400200b8
 8001ad4:	40020410 	.word	0x40020410
 8001ad8:	40020428 	.word	0x40020428
 8001adc:	40020440 	.word	0x40020440
 8001ae0:	40020458 	.word	0x40020458
 8001ae4:	40020470 	.word	0x40020470
 8001ae8:	40020488 	.word	0x40020488
 8001aec:	400204a0 	.word	0x400204a0
 8001af0:	400204b8 	.word	0x400204b8
 8001af4:	24000818 	.word	0x24000818
 8001af8:	2400024c 	.word	0x2400024c
 8001afc:	240002b0 	.word	0x240002b0
 8001b00:	24000664 	.word	0x24000664
 8001b04:	2400036d 	.word	0x2400036d
	  {
			 IMU_Read(BMIx);
 8001b08:	4b9d      	ldr	r3, [pc, #628]	@ (8001d80 <main+0x700>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fb17 	bl	8004140 <IMU_Read>
			 process_main();
 8001b12:	f011 fe8b 	bl	801382c <process_main>
			 HAL_Delay(0);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f002 fe3c 	bl	8004794 <HAL_Delay>


			 if(motor_out.m[0]!=0 )//校准完成
 8001b1c:	4b99      	ldr	r3, [pc, #612]	@ (8001d84 <main+0x704>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	f000 809d 	beq.w	8001c68 <main+0x5e8>
			 {
				 if(fly_cnt == 3)
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d105      	bne.n	8001b40 <main+0x4c0>
				 {
					 maxmotor=1400;
 8001b34:	4b94      	ldr	r3, [pc, #592]	@ (8001d88 <main+0x708>)
 8001b36:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8001b3a:	601a      	str	r2, [r3, #0]
					 fly_cnt = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]

				 }
				 if(fly_cnt == 2)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d10e      	bne.n	8001b64 <main+0x4e4>
				 {
					 maxmotor=1100;
 8001b46:	4b90      	ldr	r3, [pc, #576]	@ (8001d88 <main+0x708>)
 8001b48:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001b4c:	601a      	str	r2, [r3, #0]
					 cnt++;
 8001b4e:	89bb      	ldrh	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	81bb      	strh	r3, [r7, #12]
					 if(cnt == 4000)
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001b5a:	d103      	bne.n	8001b64 <main+0x4e4>
					 {
						 fly_cnt = 3;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	73fb      	strb	r3, [r7, #15]
						 cnt = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	81bb      	strh	r3, [r7, #12]
					 }
				 }
				 if(fly_cnt == 1)
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10e      	bne.n	8001b88 <main+0x508>
				 {
					 maxmotor=700;
 8001b6a:	4b87      	ldr	r3, [pc, #540]	@ (8001d88 <main+0x708>)
 8001b6c:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001b70:	601a      	str	r2, [r3, #0]
					 cnt++;
 8001b72:	89bb      	ldrh	r3, [r7, #12]
 8001b74:	3301      	adds	r3, #1
 8001b76:	81bb      	strh	r3, [r7, #12]
					 if(cnt == 4000)
 8001b78:	89bb      	ldrh	r3, [r7, #12]
 8001b7a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001b7e:	d103      	bne.n	8001b88 <main+0x508>
					 {
						 fly_cnt = 2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	73fb      	strb	r3, [r7, #15]
						 cnt = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	81bb      	strh	r3, [r7, #12]
//				 throttle_motor[1] = (motor_out.m[1]/10) *maxmotor;
//				 throttle_motor[2] = (motor_out.m[3]/10) *maxmotor;
//				 throttle_motor[3] = (motor_out.m[2]/10) *maxmotor;


				 throttle_motor[0] = (motor_out.m[2]/10) *maxmotor*1.096;
 8001b88:	4b7e      	ldr	r3, [pc, #504]	@ (8001d84 <main+0x704>)
 8001b8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b8e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001b92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b96:	4b7c      	ldr	r3, [pc, #496]	@ (8001d88 <main+0x708>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001baa:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8001d78 <main+0x6f8>
 8001bae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bb6:	ee17 3a90 	vmov	r3, s15
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b73      	ldr	r3, [pc, #460]	@ (8001d8c <main+0x70c>)
 8001bbe:	801a      	strh	r2, [r3, #0]
//				 throttle_motor[0] = (motor_out.m[2]/10) *maxmotor;
				 throttle_motor[1] = (motor_out.m[3]/10) *maxmotor;
 8001bc0:	4b70      	ldr	r3, [pc, #448]	@ (8001d84 <main+0x704>)
 8001bc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bc6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001bca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bce:	4b6e      	ldr	r3, [pc, #440]	@ (8001d88 <main+0x708>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be2:	ee17 3a90 	vmov	r3, s15
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b68      	ldr	r3, [pc, #416]	@ (8001d8c <main+0x70c>)
 8001bea:	805a      	strh	r2, [r3, #2]
				 throttle_motor[2] = (motor_out.m[0]/10) *maxmotor;
 8001bec:	4b65      	ldr	r3, [pc, #404]	@ (8001d84 <main+0x704>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001bf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bfa:	4b63      	ldr	r3, [pc, #396]	@ (8001d88 <main+0x708>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0e:	ee17 3a90 	vmov	r3, s15
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b5d      	ldr	r3, [pc, #372]	@ (8001d8c <main+0x70c>)
 8001c16:	809a      	strh	r2, [r3, #4]
				 throttle_motor[3] = (motor_out.m[1]/10) *maxmotor;
 8001c18:	4b5a      	ldr	r3, [pc, #360]	@ (8001d84 <main+0x704>)
 8001c1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c1e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001c22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c26:	4b58      	ldr	r3, [pc, #352]	@ (8001d88 <main+0x708>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3a:	ee17 3a90 	vmov	r3, s15
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b52      	ldr	r3, [pc, #328]	@ (8001d8c <main+0x70c>)
 8001c42:	80da      	strh	r2, [r3, #6]
				 for (uint8_t m = 0; m < 4; ++m)
 8001c44:	2300      	movs	r3, #0
 8001c46:	72fb      	strb	r3, [r7, #11]
 8001c48:	e00b      	b.n	8001c62 <main+0x5e2>
				 {
					 DSHOT_Update(m, throttle_motor[m]);
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <main+0x70c>)
 8001c4e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 fcf2 	bl	8004640 <DSHOT_Update>
				 for (uint8_t m = 0; m < 4; ++m)
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	72fb      	strb	r3, [r7, #11]
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d9f0      	bls.n	8001c4a <main+0x5ca>
	  while (start_fly == 1)
 8001c68:	4b49      	ldr	r3, [pc, #292]	@ (8001d90 <main+0x710>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	f43f af4b 	beq.w	8001b08 <main+0x488>
				 }
			 }
	   }

		 if(slow_down==1)
 8001c72:	4b48      	ldr	r3, [pc, #288]	@ (8001d94 <main+0x714>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d179      	bne.n	8001d6e <main+0x6ee>
		 {
			 slow_down=0;
 8001c7a:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <main+0x714>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
			 start_fly == 0;
			 throttle_value = 800 ;
 8001c80:	4b45      	ldr	r3, [pc, #276]	@ (8001d98 <main+0x718>)
 8001c82:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001c86:	801a      	strh	r2, [r3, #0]
			  for (uint8_t m = 0; m < 4; ++m)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	72bb      	strb	r3, [r7, #10]
 8001c8c:	e00a      	b.n	8001ca4 <main+0x624>
			  {
				  DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 8001c8e:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <main+0x718>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	7abb      	ldrb	r3, [r7, #10]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fcd1 	bl	8004640 <DSHOT_Update>
			  for (uint8_t m = 0; m < 4; ++m)
 8001c9e:	7abb      	ldrb	r3, [r7, #10]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	72bb      	strb	r3, [r7, #10]
 8001ca4:	7abb      	ldrb	r3, [r7, #10]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d9f1      	bls.n	8001c8e <main+0x60e>
			  }
			  HAL_Delay(800);
 8001caa:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cae:	f002 fd71 	bl	8004794 <HAL_Delay>
			 throttle_value = 600 ;
 8001cb2:	4b39      	ldr	r3, [pc, #228]	@ (8001d98 <main+0x718>)
 8001cb4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001cb8:	801a      	strh	r2, [r3, #0]
			  for (uint8_t m = 0; m < 4; ++m)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	727b      	strb	r3, [r7, #9]
 8001cbe:	e00a      	b.n	8001cd6 <main+0x656>
			  {
				  DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 8001cc0:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <main+0x718>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	7a7b      	ldrb	r3, [r7, #9]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fcb8 	bl	8004640 <DSHOT_Update>
			  for (uint8_t m = 0; m < 4; ++m)
 8001cd0:	7a7b      	ldrb	r3, [r7, #9]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	727b      	strb	r3, [r7, #9]
 8001cd6:	7a7b      	ldrb	r3, [r7, #9]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d9f1      	bls.n	8001cc0 <main+0x640>
			  }
			  HAL_Delay(500);
 8001cdc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ce0:	f002 fd58 	bl	8004794 <HAL_Delay>
			 throttle_value = 400 ;
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <main+0x718>)
 8001ce6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001cea:	801a      	strh	r2, [r3, #0]
			  for (uint8_t m = 0; m < 4; ++m)
 8001cec:	2300      	movs	r3, #0
 8001cee:	723b      	strb	r3, [r7, #8]
 8001cf0:	e00a      	b.n	8001d08 <main+0x688>
			  {
				  DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 8001cf2:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <main+0x718>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	7a3b      	ldrb	r3, [r7, #8]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fc9f 	bl	8004640 <DSHOT_Update>
			  for (uint8_t m = 0; m < 4; ++m)
 8001d02:	7a3b      	ldrb	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	723b      	strb	r3, [r7, #8]
 8001d08:	7a3b      	ldrb	r3, [r7, #8]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d9f1      	bls.n	8001cf2 <main+0x672>
			  }
			  HAL_Delay(300);
 8001d0e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d12:	f002 fd3f 	bl	8004794 <HAL_Delay>
			 throttle_value = 200 ;
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <main+0x718>)
 8001d18:	22c8      	movs	r2, #200	@ 0xc8
 8001d1a:	801a      	strh	r2, [r3, #0]
			  for (uint8_t m = 0; m < 4; ++m)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	e00a      	b.n	8001d38 <main+0x6b8>
			  {
				  DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <main+0x718>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 fc87 	bl	8004640 <DSHOT_Update>
			  for (uint8_t m = 0; m < 4; ++m)
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	3301      	adds	r3, #1
 8001d36:	71fb      	strb	r3, [r7, #7]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d9f1      	bls.n	8001d22 <main+0x6a2>
			  }
			  HAL_Delay(300);
 8001d3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d42:	f002 fd27 	bl	8004794 <HAL_Delay>
			 throttle_value = 0 ;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <main+0x718>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	801a      	strh	r2, [r3, #0]
			  for (uint8_t m = 0; m < 4; ++m)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	71bb      	strb	r3, [r7, #6]
 8001d50:	e00a      	b.n	8001d68 <main+0x6e8>
			  {
				  DSHOT_Update(m, throttle_value);  // 更新所有四个电机的油门值
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <main+0x718>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	79bb      	ldrb	r3, [r7, #6]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 fc6f 	bl	8004640 <DSHOT_Update>
			  for (uint8_t m = 0; m < 4; ++m)
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	3301      	adds	r3, #1
 8001d66:	71bb      	strb	r3, [r7, #6]
 8001d68:	79bb      	ldrb	r3, [r7, #6]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d9f1      	bls.n	8001d52 <main+0x6d2>
			  }
              //停止
		 }
		 slow_down=0;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <main+0x714>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
	  	  IMU_Read(BMIx);
 8001d74:	e68f      	b.n	8001a96 <main+0x416>
 8001d76:	bf00      	nop
 8001d78:	4bc6a7f0 	.word	0x4bc6a7f0
 8001d7c:	3ff18937 	.word	0x3ff18937
 8001d80:	2400036d 	.word	0x2400036d
 8001d84:	240011d0 	.word	0x240011d0
 8001d88:	2400037c 	.word	0x2400037c
 8001d8c:	24000370 	.word	0x24000370
 8001d90:	24000379 	.word	0x24000379
 8001d94:	24000378 	.word	0x24000378
 8001d98:	24000000 	.word	0x24000000

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b09c      	sub	sp, #112	@ 0x70
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da6:	224c      	movs	r2, #76	@ 0x4c
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f012 ff1c 	bl	8014be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2220      	movs	r2, #32
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f012 ff16 	bl	8014be8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f008 f9a1 	bl	800a104 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4b31      	ldr	r3, [pc, #196]	@ (8001e8c <SystemClock_Config+0xf0>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	4a30      	ldr	r2, [pc, #192]	@ (8001e8c <SystemClock_Config+0xf0>)
 8001dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dd0:	6193      	str	r3, [r2, #24]
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e8c <SystemClock_Config+0xf0>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e90 <SystemClock_Config+0xf4>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e90 <SystemClock_Config+0xf4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <SystemClock_Config+0xf4>)
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001df4:	bf00      	nop
 8001df6:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <SystemClock_Config+0xf0>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e02:	d1f8      	bne.n	8001df6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e04:	2302      	movs	r3, #2
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e0c:	2340      	movs	r3, #64	@ 0x40
 8001e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e10:	2302      	movs	r3, #2
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e14:	2300      	movs	r3, #0
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001e1c:	233c      	movs	r3, #60	@ 0x3c
 8001e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001e24:	2305      	movs	r3, #5
 8001e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e2c:	230c      	movs	r3, #12
 8001e2e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f008 f99b 	bl	800a178 <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001e48:	f000 f8ae 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4c:	233f      	movs	r3, #63	@ 0x3f
 8001e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	2303      	movs	r3, #3
 8001e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e5c:	2340      	movs	r3, #64	@ 0x40
 8001e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e60:	2340      	movs	r3, #64	@ 0x40
 8001e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e6a:	2340      	movs	r3, #64	@ 0x40
 8001e6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2104      	movs	r1, #4
 8001e72:	4618      	mov	r0, r3
 8001e74:	f008 fdda 	bl	800aa2c <HAL_RCC_ClockConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001e7e:	f000 f893 	bl	8001fa8 <Error_Handler>
  }
}
 8001e82:	bf00      	nop
 8001e84:	3770      	adds	r7, #112	@ 0x70
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	58024800 	.word	0x58024800
 8001e90:	58000400 	.word	0x58000400

08001e94 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0b0      	sub	sp, #192	@ 0xc0
 8001e98:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	22c0      	movs	r2, #192	@ 0xc0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f012 fea1 	bl	8014be8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ea6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ec6:	23c0      	movs	r3, #192	@ 0xc0
 8001ec8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4618      	mov	r0, r3
 8001edc:	f009 f974 	bl	800b1c8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001ee6:	f000 f85f 	bl	8001fa8 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	37c0      	adds	r7, #192	@ 0xc0
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ef8:	463b      	mov	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001f04:	f004 fbaa 	bl	800665c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f14:	231f      	movs	r3, #31
 8001f16:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001f18:	2387      	movs	r3, #135	@ 0x87
 8001f1a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001f20:	2300      	movs	r3, #0
 8001f22:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f34:	463b      	mov	r3, r7
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fbc8 	bl	80066cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	f004 fba5 	bl	800668c <HAL_MPU_Enable>

}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0f      	ldr	r2, [pc, #60]	@ (8001f98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001f5e:	f002 fbf9 	bl	8004754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM6)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d111      	bne.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x44>
    {
      //定时器1ms中断服务
	  void check_time_stability_simple(handler01);

	  t++;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f76:	801a      	strh	r2, [r3, #0]
	  if(t==1500)
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d105      	bne.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x44>
	  {
		  t=0;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	801a      	strh	r2, [r3, #0]
		  bat_cur = 1;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
//		 process_main();

    }

  /* USER CODE END Callback 1 */
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40000800 	.word	0x40000800
 8001f9c:	40001000 	.word	0x40001000
 8001fa0:	240003e0 	.word	0x240003e0
 8001fa4:	240003e2 	.word	0x240003e2

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <Error_Handler+0x8>

08001fb4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fb8:	4b27      	ldr	r3, [pc, #156]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fba:	4a28      	ldr	r2, [pc, #160]	@ (800205c <MX_SPI1_Init+0xa8>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fc0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc6:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fce:	2207      	movs	r2, #7
 8001fd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fe0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fe4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002002:	2200      	movs	r2, #0
 8002004:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002008:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800200c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002010:	2200      	movs	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002014:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002016:	2200      	movs	r2, #0
 8002018:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_SPI1_Init+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002028:	2200      	movs	r2, #0
 800202a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800202c:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <MX_SPI1_Init+0xa4>)
 800202e:	2200      	movs	r2, #0
 8002030:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <MX_SPI1_Init+0xa4>)
 800203a:	2200      	movs	r2, #0
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002040:	2200      	movs	r2, #0
 8002042:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <MX_SPI1_Init+0xa4>)
 8002046:	f00b fdbd 	bl	800dbc4 <HAL_SPI_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002050:	f7ff ffaa 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	240003e4 	.word	0x240003e4
 800205c:	40013000 	.word	0x40013000

08002060 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002064:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <MX_SPI2_Init+0xa4>)
 8002066:	4a28      	ldr	r2, [pc, #160]	@ (8002108 <MX_SPI2_Init+0xa8>)
 8002068:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <MX_SPI2_Init+0xa4>)
 800206c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002070:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <MX_SPI2_Init+0xa4>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <MX_SPI2_Init+0xa4>)
 800207a:	2207      	movs	r2, #7
 800207c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207e:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <MX_SPI2_Init+0xa4>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <MX_SPI2_Init+0xa4>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <MX_SPI2_Init+0xa4>)
 800208c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002090:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002092:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <MX_SPI2_Init+0xa4>)
 8002094:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002098:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209a:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <MX_SPI2_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a0:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80020ac:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ba:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020c0:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020e4:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020f0:	4804      	ldr	r0, [pc, #16]	@ (8002104 <MX_SPI2_Init+0xa4>)
 80020f2:	f00b fd67 	bl	800dbc4 <HAL_SPI_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80020fc:	f7ff ff54 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2400046c 	.word	0x2400046c
 8002108:	40003800 	.word	0x40003800

0800210c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002110:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002112:	4a28      	ldr	r2, [pc, #160]	@ (80021b4 <MX_SPI4_Init+0xa8>)
 8002114:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002116:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002118:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800211c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800211e:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002126:	2207      	movs	r2, #7
 8002128:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002130:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002138:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800213c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002140:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002144:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002146:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800214c:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002152:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002158:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 800215a:	2200      	movs	r2, #0
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800215e:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002160:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002164:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002168:	2200      	movs	r2, #0
 800216a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800216c:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 800216e:	2200      	movs	r2, #0
 8002170:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002178:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800217e:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002180:	2200      	movs	r2, #0
 8002182:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002184:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002186:	2200      	movs	r2, #0
 8002188:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 800218c:	2200      	movs	r2, #0
 800218e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002190:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002192:	2200      	movs	r2, #0
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 8002198:	2200      	movs	r2, #0
 800219a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <MX_SPI4_Init+0xa4>)
 800219e:	f00b fd11 	bl	800dbc4 <HAL_SPI_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80021a8:	f7ff fefe 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	240004f4 	.word	0x240004f4
 80021b4:	40013400 	.word	0x40013400

080021b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0c0      	sub	sp, #256	@ 0x100
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d4:	22c0      	movs	r2, #192	@ 0xc0
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f012 fd05 	bl	8014be8 <memset>
  if(spiHandle->Instance==SPI1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a98      	ldr	r2, [pc, #608]	@ (8002444 <HAL_SPI_MspInit+0x28c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d146      	bne.n	8002276 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021fe:	4618      	mov	r0, r3
 8002200:	f008 ffe2 	bl	800b1c8 <HAL_RCCEx_PeriphCLKConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800220a:	f7ff fecd 	bl	8001fa8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800220e:	4b8e      	ldr	r3, [pc, #568]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 8002210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002214:	4a8c      	ldr	r2, [pc, #560]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 8002216:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800221a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800221e:	4b8a      	ldr	r3, [pc, #552]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 8002220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b86      	ldr	r3, [pc, #536]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002232:	4a85      	ldr	r2, [pc, #532]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800223c:	4b82      	ldr	r3, [pc, #520]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800224a:	23e0      	movs	r3, #224	@ 0xe0
 800224c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002262:	2305      	movs	r3, #5
 8002264:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800226c:	4619      	mov	r1, r3
 800226e:	4877      	ldr	r0, [pc, #476]	@ (800244c <HAL_SPI_MspInit+0x294>)
 8002270:	f007 f8a8 	bl	80093c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002274:	e0e0      	b.n	8002438 <HAL_SPI_MspInit+0x280>
  else if(spiHandle->Instance==SPI2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a75      	ldr	r2, [pc, #468]	@ (8002450 <HAL_SPI_MspInit+0x298>)
 800227c:	4293      	cmp	r3, r2
 800227e:	f040 8090 	bne.w	80023a2 <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002282:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002294:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002298:	4618      	mov	r0, r3
 800229a:	f008 ff95 	bl	800b1c8 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_SPI_MspInit+0xf0>
      Error_Handler();
 80022a4:	f7ff fe80 	bl	8001fa8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022a8:	4b67      	ldr	r3, [pc, #412]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022ae:	4a66      	ldr	r2, [pc, #408]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022b8:	4b63      	ldr	r3, [pc, #396]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c6:	4b60      	ldr	r3, [pc, #384]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	4b58      	ldr	r3, [pc, #352]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ea:	4a57      	ldr	r2, [pc, #348]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f4:	4b54      	ldr	r3, [pc, #336]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	4b51      	ldr	r3, [pc, #324]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002308:	4a4f      	ldr	r2, [pc, #316]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002312:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002320:	2308      	movs	r3, #8
 8002322:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002338:	2305      	movs	r3, #5
 800233a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002342:	4619      	mov	r1, r3
 8002344:	4843      	ldr	r0, [pc, #268]	@ (8002454 <HAL_SPI_MspInit+0x29c>)
 8002346:	f007 f83d 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800234a:	2308      	movs	r3, #8
 800234c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002362:	2305      	movs	r3, #5
 8002364:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002368:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800236c:	4619      	mov	r1, r3
 800236e:	483a      	ldr	r0, [pc, #232]	@ (8002458 <HAL_SPI_MspInit+0x2a0>)
 8002370:	f007 f828 	bl	80093c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002374:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800238e:	2305      	movs	r3, #5
 8002390:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002398:	4619      	mov	r1, r3
 800239a:	4830      	ldr	r0, [pc, #192]	@ (800245c <HAL_SPI_MspInit+0x2a4>)
 800239c:	f007 f812 	bl	80093c4 <HAL_GPIO_Init>
}
 80023a0:	e04a      	b.n	8002438 <HAL_SPI_MspInit+0x280>
  else if(spiHandle->Instance==SPI4)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002460 <HAL_SPI_MspInit+0x2a8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d145      	bne.n	8002438 <HAL_SPI_MspInit+0x280>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80023ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023c2:	4618      	mov	r0, r3
 80023c4:	f008 ff00 	bl	800b1c8 <HAL_RCCEx_PeriphCLKConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_SPI_MspInit+0x21a>
      Error_Handler();
 80023ce:	f7ff fdeb 	bl	8001fa8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80023d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80023d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80023da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f0:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80023f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f6:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_SPI_MspInit+0x290>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800240e:	2364      	movs	r3, #100	@ 0x64
 8002410:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002426:	2305      	movs	r3, #5
 8002428:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800242c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002430:	4619      	mov	r1, r3
 8002432:	480c      	ldr	r0, [pc, #48]	@ (8002464 <HAL_SPI_MspInit+0x2ac>)
 8002434:	f006 ffc6 	bl	80093c4 <HAL_GPIO_Init>
}
 8002438:	bf00      	nop
 800243a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40013000 	.word	0x40013000
 8002448:	58024400 	.word	0x58024400
 800244c:	58020000 	.word	0x58020000
 8002450:	40003800 	.word	0x40003800
 8002454:	58020c00 	.word	0x58020c00
 8002458:	58020800 	.word	0x58020800
 800245c:	58020400 	.word	0x58020400
 8002460:	40013400 	.word	0x40013400
 8002464:	58021000 	.word	0x58021000

08002468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_MspInit+0x30>)
 8002470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_MspInit+0x30>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_MspInit+0x30>)
 8002480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	58024400 	.word	0x58024400

0800249c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b090      	sub	sp, #64	@ 0x40
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	d827      	bhi.n	80024fa <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	201e      	movs	r0, #30
 80024b0:	f004 f8ac 	bl	800660c <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024b4:	201e      	movs	r0, #30
 80024b6:	f004 f8c3 	bl	8006640 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80024ba:	4a29      	ldr	r2, [pc, #164]	@ (8002560 <HAL_InitTick+0xc4>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80024c0:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_InitTick+0xc8>)
 80024c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024c6:	4a27      	ldr	r2, [pc, #156]	@ (8002564 <HAL_InitTick+0xc8>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024d0:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_InitTick+0xc8>)
 80024d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024de:	f107 0210 	add.w	r2, r7, #16
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f008 fe2b 	bl	800b144 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_InitTick+0x6a>
 80024f8:	e001      	b.n	80024fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e02b      	b.n	8002556 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024fe:	f008 fdf5 	bl	800b0ec <HAL_RCC_GetPCLK1Freq>
 8002502:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002504:	e004      	b.n	8002510 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002506:	f008 fdf1 	bl	800b0ec <HAL_RCC_GetPCLK1Freq>
 800250a:	4603      	mov	r3, r0
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002512:	4a15      	ldr	r2, [pc, #84]	@ (8002568 <HAL_InitTick+0xcc>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	3b01      	subs	r3, #1
 800251c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800251e:	4b13      	ldr	r3, [pc, #76]	@ (800256c <HAL_InitTick+0xd0>)
 8002520:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <HAL_InitTick+0xd4>)
 8002522:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_InitTick+0xd0>)
 8002526:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800252a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800252c:	4a0f      	ldr	r2, [pc, #60]	@ (800256c <HAL_InitTick+0xd0>)
 800252e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002530:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <HAL_InitTick+0xd0>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <HAL_InitTick+0xd0>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800253e:	480b      	ldr	r0, [pc, #44]	@ (800256c <HAL_InitTick+0xd0>)
 8002540:	f00c f887 	bl	800e652 <HAL_TIM_Base_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800254a:	4808      	ldr	r0, [pc, #32]	@ (800256c <HAL_InitTick+0xd0>)
 800254c:	f00c f948 	bl	800e7e0 <HAL_TIM_Base_Start_IT>
 8002550:	4603      	mov	r3, r0
 8002552:	e000      	b.n	8002556 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	3740      	adds	r7, #64	@ 0x40
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24000010 	.word	0x24000010
 8002564:	58024400 	.word	0x58024400
 8002568:	431bde83 	.word	0x431bde83
 800256c:	2400057c 	.word	0x2400057c
 8002570:	40000800 	.word	0x40000800

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <NMI_Handler+0x4>

0800257c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <HardFault_Handler+0x4>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <MemManage_Handler+0x4>

0800258c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <BusFault_Handler+0x4>

08002594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <UsageFault_Handler+0x4>

0800259c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80025d8:	2001      	movs	r0, #1
 80025da:	f007 f8bc 	bl	8009756 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80025e6:	2002      	movs	r0, #2
 80025e8:	f007 f8b5 	bl	8009756 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO2_Pin);
 80025f4:	2008      	movs	r0, #8
 80025f6:	f007 f8ae 	bl	8009756 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}

080025fe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC2_Pin);
 8002602:	2010      	movs	r0, #16
 8002604:	f007 f8a7 	bl	8009756 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <DMA1_Stream0_IRQHandler+0x10>)
 8002612:	f005 fbc5 	bl	8007da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	240006b0 	.word	0x240006b0

08002620 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <DMA1_Stream1_IRQHandler+0x10>)
 8002626:	f005 fbbb 	bl	8007da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	24000728 	.word	0x24000728

08002634 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <DMA1_Stream2_IRQHandler+0x10>)
 800263a:	f005 fbb1 	bl	8007da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240007a0 	.word	0x240007a0

08002648 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <DMA1_Stream3_IRQHandler+0x10>)
 800264e:	f005 fba7 	bl	8007da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	24000818 	.word	0x24000818

0800265c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <DMA1_Stream4_IRQHandler+0x10>)
 8002662:	f005 fb9d 	bl	8007da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	240009b8 	.word	0x240009b8

08002670 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002674:	4803      	ldr	r0, [pc, #12]	@ (8002684 <ADC_IRQHandler+0x14>)
 8002676:	f002 fe0f 	bl	8005298 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800267a:	4803      	ldr	r0, [pc, #12]	@ (8002688 <ADC_IRQHandler+0x18>)
 800267c:	f002 fe0c 	bl	8005298 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2400024c 	.word	0x2400024c
 8002688:	240002b0 	.word	0x240002b0

0800268c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(I2C1_DR_Pin);
 8002690:	2020      	movs	r0, #32
 8002692:	f007 f860 	bl	8009756 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <TIM4_IRQHandler+0x10>)
 80026a2:	f00c fb93 	bl	800edcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2400057c 	.word	0x2400057c

080026b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <UART4_IRQHandler+0x10>)
 80026b6:	f00d fc99 	bl	800ffec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	24000890 	.word	0x24000890

080026c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <TIM6_DAC_IRQHandler+0x10>)
 80026ca:	f00c fb7f 	bl	800edcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	24000618 	.word	0x24000618

080026d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return 1;
 80026dc:	2301      	movs	r3, #1
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_kill>:

int _kill(int pid, int sig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026f2:	f012 facb 	bl	8014c8c <__errno>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2216      	movs	r2, #22
 80026fa:	601a      	str	r2, [r3, #0]
  return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_exit>:

void _exit (int status)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ffe7 	bl	80026e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800271a:	bf00      	nop
 800271c:	e7fd      	b.n	800271a <_exit+0x12>

0800271e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e00a      	b.n	8002746 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002730:	f3af 8000 	nop.w
 8002734:	4601      	mov	r1, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	60ba      	str	r2, [r7, #8]
 800273c:	b2ca      	uxtb	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	dbf0      	blt.n	8002730 <_read+0x12>
  }

  return len;
 800274e:	687b      	ldr	r3, [r7, #4]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e009      	b.n	800277e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	60ba      	str	r2, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fce6 	bl	8001144 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	dbf1      	blt.n	800276a <_write+0x12>
  }
  return len;
 8002786:	687b      	ldr	r3, [r7, #4]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_close>:

int _close(int file)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027b8:	605a      	str	r2, [r3, #4]
  return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_isatty>:

int _isatty(int file)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027d0:	2301      	movs	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002800:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <_sbrk+0x5c>)
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <_sbrk+0x60>)
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800280c:	4b13      	ldr	r3, [pc, #76]	@ (800285c <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <_sbrk+0x64>)
 8002816:	4a12      	ldr	r2, [pc, #72]	@ (8002860 <_sbrk+0x68>)
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d207      	bcs.n	8002838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002828:	f012 fa30 	bl	8014c8c <__errno>
 800282c:	4603      	mov	r3, r0
 800282e:	220c      	movs	r2, #12
 8002830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
 8002836:	e009      	b.n	800284c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283e:	4b07      	ldr	r3, [pc, #28]	@ (800285c <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	4a05      	ldr	r2, [pc, #20]	@ (800285c <_sbrk+0x64>)
 8002848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	24080000 	.word	0x24080000
 8002858:	00000400 	.word	0x00000400
 800285c:	240005c8 	.word	0x240005c8
 8002860:	240013c8 	.word	0x240013c8

08002864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002868:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <SystemInit+0x114>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	4a42      	ldr	r2, [pc, #264]	@ (8002978 <SystemInit+0x114>)
 8002870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002878:	4b40      	ldr	r3, [pc, #256]	@ (800297c <SystemInit+0x118>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	2b06      	cmp	r3, #6
 8002882:	d807      	bhi.n	8002894 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002884:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <SystemInit+0x118>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 030f 	bic.w	r3, r3, #15
 800288c:	4a3b      	ldr	r2, [pc, #236]	@ (800297c <SystemInit+0x118>)
 800288e:	f043 0307 	orr.w	r3, r3, #7
 8002892:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002894:	4b3a      	ldr	r3, [pc, #232]	@ (8002980 <SystemInit+0x11c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a39      	ldr	r2, [pc, #228]	@ (8002980 <SystemInit+0x11c>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028a0:	4b37      	ldr	r3, [pc, #220]	@ (8002980 <SystemInit+0x11c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <SystemInit+0x11c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4935      	ldr	r1, [pc, #212]	@ (8002980 <SystemInit+0x11c>)
 80028ac:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <SystemInit+0x120>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028b2:	4b32      	ldr	r3, [pc, #200]	@ (800297c <SystemInit+0x118>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028be:	4b2f      	ldr	r3, [pc, #188]	@ (800297c <SystemInit+0x118>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 030f 	bic.w	r3, r3, #15
 80028c6:	4a2d      	ldr	r2, [pc, #180]	@ (800297c <SystemInit+0x118>)
 80028c8:	f043 0307 	orr.w	r3, r3, #7
 80028cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002980 <SystemInit+0x11c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <SystemInit+0x11c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <SystemInit+0x11c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028e0:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <SystemInit+0x11c>)
 80028e2:	4a29      	ldr	r2, [pc, #164]	@ (8002988 <SystemInit+0x124>)
 80028e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028e6:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <SystemInit+0x11c>)
 80028e8:	4a28      	ldr	r2, [pc, #160]	@ (800298c <SystemInit+0x128>)
 80028ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028ec:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <SystemInit+0x11c>)
 80028ee:	4a28      	ldr	r2, [pc, #160]	@ (8002990 <SystemInit+0x12c>)
 80028f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028f2:	4b23      	ldr	r3, [pc, #140]	@ (8002980 <SystemInit+0x11c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028f8:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <SystemInit+0x11c>)
 80028fa:	4a25      	ldr	r2, [pc, #148]	@ (8002990 <SystemInit+0x12c>)
 80028fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028fe:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <SystemInit+0x11c>)
 8002900:	2200      	movs	r2, #0
 8002902:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002904:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <SystemInit+0x11c>)
 8002906:	4a22      	ldr	r2, [pc, #136]	@ (8002990 <SystemInit+0x12c>)
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800290a:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <SystemInit+0x11c>)
 800290c:	2200      	movs	r2, #0
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <SystemInit+0x11c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1a      	ldr	r2, [pc, #104]	@ (8002980 <SystemInit+0x11c>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800291a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800291c:	4b18      	ldr	r3, [pc, #96]	@ (8002980 <SystemInit+0x11c>)
 800291e:	2200      	movs	r2, #0
 8002920:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002922:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <SystemInit+0x130>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <SystemInit+0x134>)
 8002928:	4013      	ands	r3, r2
 800292a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800292e:	d202      	bcs.n	8002936 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002930:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <SystemInit+0x138>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002936:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <SystemInit+0x11c>)
 8002938:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800293c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d113      	bne.n	800296c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002944:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <SystemInit+0x11c>)
 8002946:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800294a:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <SystemInit+0x11c>)
 800294c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002950:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <SystemInit+0x13c>)
 8002956:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800295a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800295c:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <SystemInit+0x11c>)
 800295e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002962:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <SystemInit+0x11c>)
 8002964:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002968:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00
 800297c:	52002000 	.word	0x52002000
 8002980:	58024400 	.word	0x58024400
 8002984:	eaf6ed7f 	.word	0xeaf6ed7f
 8002988:	02020200 	.word	0x02020200
 800298c:	01ff0000 	.word	0x01ff0000
 8002990:	01010280 	.word	0x01010280
 8002994:	5c001000 	.word	0x5c001000
 8002998:	ffff0000 	.word	0xffff0000
 800299c:	51008108 	.word	0x51008108
 80029a0:	52004000 	.word	0x52004000

080029a4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <ExitRun0Mode+0x2c>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <ExitRun0Mode+0x2c>)
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80029b4:	bf00      	nop
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <ExitRun0Mode+0x2c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f9      	beq.n	80029b6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	58024800 	.word	0x58024800

080029d4 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim1_ch4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b096      	sub	sp, #88	@ 0x58
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	615a      	str	r2, [r3, #20]
 80029f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	222c      	movs	r2, #44	@ 0x2c
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f012 f8f1 	bl	8014be8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a06:	4b4b      	ldr	r3, [pc, #300]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a08:	4a4b      	ldr	r2, [pc, #300]	@ (8002b38 <MX_TIM1_Init+0x164>)
 8002a0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8002a0c:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b48      	ldr	r3, [pc, #288]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 8002a18:	4b46      	ldr	r3, [pc, #280]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a1a:	f240 128f 	movw	r2, #399	@ 0x18f
 8002a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a26:	4b43      	ldr	r3, [pc, #268]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a2c:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a2e:	2280      	movs	r2, #128	@ 0x80
 8002a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a32:	4840      	ldr	r0, [pc, #256]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a34:	f00b ff4c 	bl	800e8d0 <HAL_TIM_PWM_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002a3e:	f7ff fab3 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a52:	4619      	mov	r1, r3
 8002a54:	4837      	ldr	r0, [pc, #220]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a56:	f00d f875 	bl	800fb44 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a60:	f7ff faa2 	bl	8001fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a64:	2360      	movs	r3, #96	@ 0x60
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a84:	2200      	movs	r2, #0
 8002a86:	4619      	mov	r1, r3
 8002a88:	482a      	ldr	r0, [pc, #168]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002a8a:	f00c faa7 	bl	800efdc <HAL_TIM_PWM_ConfigChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a94:	f7ff fa88 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4824      	ldr	r0, [pc, #144]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002aa2:	f00c fa9b 	bl	800efdc <HAL_TIM_PWM_ConfigChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002aac:	f7ff fa7c 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ab0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	481e      	ldr	r0, [pc, #120]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002aba:	f00c fa8f 	bl	800efdc <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002ac4:	f7ff fa70 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ac8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002acc:	220c      	movs	r2, #12
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4818      	ldr	r0, [pc, #96]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002ad2:	f00c fa83 	bl	800efdc <HAL_TIM_PWM_ConfigChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002adc:	f7ff fa64 	bl	8001fa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002af8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4807      	ldr	r0, [pc, #28]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002b16:	f00d f8a3 	bl	800fc60 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8002b20:	f7ff fa42 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b24:	4803      	ldr	r0, [pc, #12]	@ (8002b34 <MX_TIM1_Init+0x160>)
 8002b26:	f000 f9a7 	bl	8002e78 <HAL_TIM_MspPostInit>

}
 8002b2a:	bf00      	nop
 8002b2c:	3758      	adds	r7, #88	@ 0x58
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	240005cc 	.word	0x240005cc
 8002b38:	40010000 	.word	0x40010000

08002b3c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <MX_TIM6_Init+0x64>)
 8002b4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <MX_TIM6_Init+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <MX_TIM6_Init+0x64>)
 8002b54:	22ef      	movs	r2, #239	@ 0xef
 8002b56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <MX_TIM6_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <MX_TIM6_Init+0x64>)
 8002b60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_TIM6_Init+0x64>)
 8002b68:	2280      	movs	r2, #128	@ 0x80
 8002b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b6c:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <MX_TIM6_Init+0x64>)
 8002b6e:	f00b fd70 	bl	800e652 <HAL_TIM_Base_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002b78:	f7ff fa16 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_TIM6_Init+0x64>)
 8002b8a:	f00c ffdb 	bl	800fb44 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002b94:	f7ff fa08 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	24000618 	.word	0x24000618
 8002ba4:	40001000 	.word	0x40001000

08002ba8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <MX_TIM7_Init+0x64>)
 8002bba:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <MX_TIM7_Init+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240-1;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <MX_TIM7_Init+0x64>)
 8002bc0:	22ef      	movs	r2, #239	@ 0xef
 8002bc2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <MX_TIM7_Init+0x64>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <MX_TIM7_Init+0x64>)
 8002bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bd0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c0c <MX_TIM7_Init+0x64>)
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bd8:	480c      	ldr	r0, [pc, #48]	@ (8002c0c <MX_TIM7_Init+0x64>)
 8002bda:	f00b fd3a 	bl	800e652 <HAL_TIM_Base_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002be4:	f7ff f9e0 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be8:	2300      	movs	r3, #0
 8002bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	@ (8002c0c <MX_TIM7_Init+0x64>)
 8002bf6:	f00c ffa5 	bl	800fb44 <HAL_TIMEx_MasterConfigSynchronization>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002c00:	f7ff f9d2 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	24000664 	.word	0x24000664
 8002c10:	40001400 	.word	0x40001400

08002c14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd0 <HAL_TIM_PWM_MspInit+0x1bc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	f040 80cf 	bne.w	8002dc6 <HAL_TIM_PWM_MspInit+0x1b2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_TIM_PWM_MspInit+0x1c0>)
 8002c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c2e:	4a69      	ldr	r2, [pc, #420]	@ (8002dd4 <HAL_TIM_PWM_MspInit+0x1c0>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c38:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <HAL_TIM_PWM_MspInit+0x1c0>)
 8002c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 8002c46:	4b64      	ldr	r3, [pc, #400]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c48:	4a64      	ldr	r2, [pc, #400]	@ (8002ddc <HAL_TIM_PWM_MspInit+0x1c8>)
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002c4c:	4b62      	ldr	r3, [pc, #392]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c4e:	220b      	movs	r2, #11
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c52:	4b61      	ldr	r3, [pc, #388]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c54:	2240      	movs	r2, #64	@ 0x40
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c64:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c66:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c6c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c74:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002c76:	4b58      	ldr	r3, [pc, #352]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c7c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c7e:	4b56      	ldr	r3, [pc, #344]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c84:	4b54      	ldr	r3, [pc, #336]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002c8a:	4853      	ldr	r0, [pc, #332]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c8c:	f003 fd5e 	bl	800674c <HAL_DMA_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8002c96:	f7ff f987 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x1c4>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Stream1;
 8002ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8002de4 <HAL_TIM_PWM_MspInit+0x1d0>)
 8002caa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8002cac:	4b4c      	ldr	r3, [pc, #304]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cae:	220c      	movs	r2, #12
 8002cb0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cb4:	2240      	movs	r2, #64	@ 0x40
 8002cb6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb8:	4b49      	ldr	r3, [pc, #292]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002cbe:	4b48      	ldr	r3, [pc, #288]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cc4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cc6:	4b46      	ldr	r3, [pc, #280]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ccc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cce:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cd4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002cd6:	4b42      	ldr	r3, [pc, #264]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cdc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002cde:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002cea:	483d      	ldr	r0, [pc, #244]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cec:	f003 fd2e 	bl	800674c <HAL_DMA_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_TIM_PWM_MspInit+0xe6>
    {
      Error_Handler();
 8002cf6:	f7ff f957 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a38      	ldr	r2, [pc, #224]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d00:	4a37      	ldr	r2, [pc, #220]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x1cc>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Stream2;
 8002d06:	4b38      	ldr	r3, [pc, #224]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d08:	4a38      	ldr	r2, [pc, #224]	@ (8002dec <HAL_TIM_PWM_MspInit+0x1d8>)
 8002d0a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8002d0c:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d0e:	220d      	movs	r2, #13
 8002d10:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d12:	4b35      	ldr	r3, [pc, #212]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d14:	2240      	movs	r2, #64	@ 0x40
 8002d16:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d18:	4b33      	ldr	r3, [pc, #204]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002d1e:	4b32      	ldr	r3, [pc, #200]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d24:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d26:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d2c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d34:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8002d36:	4b2c      	ldr	r3, [pc, #176]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d3c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d44:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002d4a:	4827      	ldr	r0, [pc, #156]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d4c:	f003 fcfe 	bl	800674c <HAL_DMA_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_TIM_PWM_MspInit+0x146>
    {
      Error_Handler();
 8002d56:	f7ff f927 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d60:	4a21      	ldr	r2, [pc, #132]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x1d4>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1_CH4 Init */
    hdma_tim1_ch4.Instance = DMA1_Stream3;
 8002d66:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8002d6a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4.Init.Request = DMA_REQUEST_TIM1_CH4;
 8002d6c:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d6e:	220e      	movs	r2, #14
 8002d70:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d72:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d74:	2240      	movs	r2, #64	@ 0x40
 8002d76:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d78:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d8c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d8e:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d94:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4.Init.Mode = DMA_CIRCULAR;
 8002d96:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d9c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4) != HAL_OK)
 8002daa:	4811      	ldr	r0, [pc, #68]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002dac:	f003 fcce 	bl	800674c <HAL_DMA_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_TIM_PWM_MspInit+0x1a6>
    {
      Error_Handler();
 8002db6:	f7ff f8f7 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	240006b0 	.word	0x240006b0
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	24000728 	.word	0x24000728
 8002de4:	40020028 	.word	0x40020028
 8002de8:	240007a0 	.word	0x240007a0
 8002dec:	40020040 	.word	0x40020040
 8002df0:	24000818 	.word	0x24000818
 8002df4:	40020058 	.word	0x40020058

08002df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	@ (8002e6c <HAL_TIM_Base_MspInit+0x74>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d117      	bne.n	8002e3a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_TIM_Base_MspInit+0x78>)
 8002e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e10:	4a17      	ldr	r2, [pc, #92]	@ (8002e70 <HAL_TIM_Base_MspInit+0x78>)
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <HAL_TIM_Base_MspInit+0x78>)
 8002e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2105      	movs	r1, #5
 8002e2c:	2036      	movs	r0, #54	@ 0x36
 8002e2e:	f003 fbed 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e32:	2036      	movs	r0, #54	@ 0x36
 8002e34:	f003 fc04 	bl	8006640 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002e38:	e013      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM7)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <HAL_TIM_Base_MspInit+0x7c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10e      	bne.n	8002e62 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e44:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <HAL_TIM_Base_MspInit+0x78>)
 8002e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_TIM_Base_MspInit+0x78>)
 8002e4c:	f043 0320 	orr.w	r3, r3, #32
 8002e50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_TIM_Base_MspInit+0x78>)
 8002e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40001000 	.word	0x40001000
 8002e70:	58024400 	.word	0x58024400
 8002e74:	40001400 	.word	0x40001400

08002e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a13      	ldr	r2, [pc, #76]	@ (8002ee4 <HAL_TIM_MspPostInit+0x6c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d11f      	bne.n	8002eda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <HAL_TIM_MspPostInit+0x70>)
 8002e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ea0:	4a11      	ldr	r2, [pc, #68]	@ (8002ee8 <HAL_TIM_MspPostInit+0x70>)
 8002ea2:	f043 0310 	orr.w	r3, r3, #16
 8002ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_TIM_MspPostInit+0x70>)
 8002eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
    PE14     ------> TIM1_CH4
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8002eb8:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4805      	ldr	r0, [pc, #20]	@ (8002eec <HAL_TIM_MspPostInit+0x74>)
 8002ed6:	f006 fa75 	bl	80093c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002eda:	bf00      	nop
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	58024400 	.word	0x58024400
 8002eec:	58021000 	.word	0x58021000

08002ef0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002ef6:	4a23      	ldr	r2, [pc, #140]	@ (8002f84 <MX_UART4_Init+0x94>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002efa:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002efc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f26:	4b16      	ldr	r3, [pc, #88]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f32:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f38:	4811      	ldr	r0, [pc, #68]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f3a:	f00c ff2d 	bl	800fd98 <HAL_UART_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002f44:	f7ff f830 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f48:	2100      	movs	r1, #0
 8002f4a:	480d      	ldr	r0, [pc, #52]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f4c:	f00f fa97 	bl	801247e <HAL_UARTEx_SetTxFifoThreshold>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002f56:	f7ff f827 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4808      	ldr	r0, [pc, #32]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f5e:	f00f facc 	bl	80124fa <HAL_UARTEx_SetRxFifoThreshold>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002f68:	f7ff f81e 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f6c:	4804      	ldr	r0, [pc, #16]	@ (8002f80 <MX_UART4_Init+0x90>)
 8002f6e:	f00f fa4d 	bl	801240c <HAL_UARTEx_DisableFifoMode>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002f78:	f7ff f816 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	24000890 	.word	0x24000890
 8002f84:	40004c00 	.word	0x40004c00

08002f88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002f8e:	4a23      	ldr	r2, [pc, #140]	@ (800301c <MX_USART2_UART_Init+0x94>)
 8002f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f92:	4b21      	ldr	r3, [pc, #132]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002f94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fac:	4b1a      	ldr	r3, [pc, #104]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fae:	220c      	movs	r2, #12
 8002fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb2:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fbe:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fc4:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fca:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fd0:	4811      	ldr	r0, [pc, #68]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fd2:	f00c fee1 	bl	800fd98 <HAL_UART_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002fdc:	f7fe ffe4 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	480d      	ldr	r0, [pc, #52]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002fe4:	f00f fa4b 	bl	801247e <HAL_UARTEx_SetTxFifoThreshold>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002fee:	f7fe ffdb 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4808      	ldr	r0, [pc, #32]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8002ff6:	f00f fa80 	bl	80124fa <HAL_UARTEx_SetRxFifoThreshold>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003000:	f7fe ffd2 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003004:	4804      	ldr	r0, [pc, #16]	@ (8003018 <MX_USART2_UART_Init+0x90>)
 8003006:	f00f fa01 	bl	801240c <HAL_UARTEx_DisableFifoMode>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003010:	f7fe ffca 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	24000924 	.word	0x24000924
 800301c:	40004400 	.word	0x40004400

08003020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0bc      	sub	sp, #240	@ 0xf0
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003038:	f107 0318 	add.w	r3, r7, #24
 800303c:	22c0      	movs	r2, #192	@ 0xc0
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f011 fdd1 	bl	8014be8 <memset>
  if(uartHandle->Instance==UART4)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a68      	ldr	r2, [pc, #416]	@ (80031ec <HAL_UART_MspInit+0x1cc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d14f      	bne.n	80030f0 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003050:	f04f 0202 	mov.w	r2, #2
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003062:	f107 0318 	add.w	r3, r7, #24
 8003066:	4618      	mov	r0, r3
 8003068:	f008 f8ae 	bl	800b1c8 <HAL_RCCEx_PeriphCLKConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003072:	f7fe ff99 	bl	8001fa8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003076:	4b5e      	ldr	r3, [pc, #376]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800307c:	4a5c      	ldr	r2, [pc, #368]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 800307e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003082:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003086:	4b5a      	ldr	r3, [pc, #360]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800308c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003094:	4b56      	ldr	r3, [pc, #344]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800309a:	4a55      	ldr	r2, [pc, #340]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030a4:	4b52      	ldr	r3, [pc, #328]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 80030a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PB8     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80030b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80030cc:	2308      	movs	r3, #8
 80030ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030d6:	4619      	mov	r1, r3
 80030d8:	4846      	ldr	r0, [pc, #280]	@ (80031f4 <HAL_UART_MspInit+0x1d4>)
 80030da:	f006 f973 	bl	80093c4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2034      	movs	r0, #52	@ 0x34
 80030e4:	f003 fa92 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80030e8:	2034      	movs	r0, #52	@ 0x34
 80030ea:	f003 faa9 	bl	8006640 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80030ee:	e079      	b.n	80031e4 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a40      	ldr	r2, [pc, #256]	@ (80031f8 <HAL_UART_MspInit+0x1d8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d174      	bne.n	80031e4 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030fa:	f04f 0202 	mov.w	r2, #2
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800310c:	f107 0318 	add.w	r3, r7, #24
 8003110:	4618      	mov	r0, r3
 8003112:	f008 f859 	bl	800b1c8 <HAL_RCCEx_PeriphCLKConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_MspInit+0x100>
      Error_Handler();
 800311c:	f7fe ff44 	bl	8001fa8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003120:	4b33      	ldr	r3, [pc, #204]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003126:	4a32      	ldr	r2, [pc, #200]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003130:	4b2f      	ldr	r3, [pc, #188]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800313e:	4b2c      	ldr	r3, [pc, #176]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003144:	4a2a      	ldr	r2, [pc, #168]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800314e:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <HAL_UART_MspInit+0x1d0>)
 8003150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800315c:	2360      	movs	r3, #96	@ 0x60
 800315e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003174:	2307      	movs	r3, #7
 8003176:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800317a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800317e:	4619      	mov	r1, r3
 8003180:	481e      	ldr	r0, [pc, #120]	@ (80031fc <HAL_UART_MspInit+0x1dc>)
 8003182:	f006 f91f 	bl	80093c4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8003186:	4b1e      	ldr	r3, [pc, #120]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 8003188:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <HAL_UART_MspInit+0x1e4>)
 800318a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800318c:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 800318e:	222b      	movs	r2, #43	@ 0x2b
 8003190:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003192:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003198:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800319e:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031a6:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031ba:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031c6:	480e      	ldr	r0, [pc, #56]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031c8:	f003 fac0 	bl	800674c <HAL_DMA_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 80031d2:	f7fe fee9 	bl	8001fa8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80031de:	4a08      	ldr	r2, [pc, #32]	@ (8003200 <HAL_UART_MspInit+0x1e0>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80031e4:	bf00      	nop
 80031e6:	37f0      	adds	r7, #240	@ 0xf0
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40004c00 	.word	0x40004c00
 80031f0:	58024400 	.word	0x58024400
 80031f4:	58020400 	.word	0x58020400
 80031f8:	40004400 	.word	0x40004400
 80031fc:	58020c00 	.word	0x58020c00
 8003200:	240009b8 	.word	0x240009b8
 8003204:	40020070 	.word	0x40020070

08003208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003208:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003244 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800320c:	f7ff fbca 	bl	80029a4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003210:	f7ff fb28 	bl	8002864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003214:	480c      	ldr	r0, [pc, #48]	@ (8003248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003216:	490d      	ldr	r1, [pc, #52]	@ (800324c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003218:	4a0d      	ldr	r2, [pc, #52]	@ (8003250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800321c:	e002      	b.n	8003224 <LoopCopyDataInit>

0800321e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003222:	3304      	adds	r3, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003228:	d3f9      	bcc.n	800321e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800322c:	4c0a      	ldr	r4, [pc, #40]	@ (8003258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003230:	e001      	b.n	8003236 <LoopFillZerobss>

08003232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003234:	3204      	adds	r2, #4

08003236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003238:	d3fb      	bcc.n	8003232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800323a:	f011 fd2d 	bl	8014c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323e:	f7fe fa1f 	bl	8001680 <main>
  bx  lr
 8003242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003244:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003248:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800324c:	24000230 	.word	0x24000230
  ldr r2, =_sidata
 8003250:	0801a448 	.word	0x0801a448
  ldr r2, =_sbss
 8003254:	24000230 	.word	0x24000230
  ldr r4, =_ebss
 8003258:	240013c4 	.word	0x240013c4

0800325c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC3_IRQHandler>
	...

08003260 <SPL06_Read_Byte>:
 * 从SPL06-001指定寄存器地址读取1字节数据（硬件I2C实现）
 * @param addr：寄存器地址（如0x00-0x27，见规格书第7章寄存器映射）
 * @return 读取到的寄存器数据
 */
uint8_t SPL06_Read_Byte(uint8_t addr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af04      	add	r7, sp, #16
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
    uint8_t SPL06_Data;
    HAL_StatusTypeDef status;

    // 调用HAL库函数读取数据，符合规格书I2C读时序：
    // 自动完成"写寄存器地址→重复起始→读数据"流程
    status = HAL_I2C_Mem_Read(
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	b29a      	uxth	r2, r3
 800326e:	2364      	movs	r3, #100	@ 0x64
 8003270:	9302      	str	r3, [sp, #8]
 8003272:	2301      	movs	r3, #1
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	f107 030e 	add.w	r3, r7, #14
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2301      	movs	r3, #1
 800327e:	21ec      	movs	r1, #236	@ 0xec
 8003280:	4804      	ldr	r0, [pc, #16]	@ (8003294 <SPL06_Read_Byte+0x34>)
 8003282:	f006 fb1f 	bl	80098c4 <HAL_I2C_Mem_Read>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
    // {
    //     // 通信失败处理（如返回错误值或进入错误函数）
    //     // 可参考规格书第5.3.1节I2C错误处理建议
    //     return 0xFF;  // 错误时返回无效值（根据实际需求调整）
    // }
    return SPL06_Data;
 800328a:	7bbb      	ldrb	r3, [r7, #14]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	24000318 	.word	0x24000318

08003298 <Temperature_conversion>:
	return SPL06_ID;
}

//温度数据处理函数
float Temperature_conversion(uint32_t Temp_Data,float k)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	ed87 0a00 	vstr	s0, [r7]
	// {
	// 	Temp = Temp_Data-Total_Number_24;
	// }
	// else
	// {
	 	 Temp = Temp_Data;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60fb      	str	r3, [r7, #12]
	// }
	Temperature = Temp/k;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032b2:	ed97 7a00 	vldr	s14, [r7]
 80032b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ba:	edc7 7a02 	vstr	s15, [r7, #8]
	return Temperature;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	ee07 3a90 	vmov	s15, r3
}
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <Pressure_conversion>:

//压力数据处理函数
float Pressure_conversion(uint32_t Pressure_Data,float k)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	ed87 0a00 	vstr	s0, [r7]
	// {
	// 	Press = Pressure_Data-Total_Number_24;
	// }
	// else
	// {
	 	Press = Pressure_Data;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]
	// }
	Pressure = Press/k;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032ec:	ed97 7a00 	vldr	s14, [r7]
 80032f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f4:	edc7 7a02 	vstr	s15, [r7, #8]
	return Pressure;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	ee07 3a90 	vmov	s15, r3
}
 80032fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <Correcting_Pressure>:
	// if(Pressure_Para[6]&0x8000) Pressure_Para[6] = Pressure_Para[6] - Total_Number_16;//c30
}

//压力校正函数
float Correcting_Pressure(int *Pressure_Para,float Pressure,float Temperature)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	ed87 0a02 	vstr	s0, [r7, #8]
 8003318:	edc7 0a01 	vstr	s1, [r7, #4]
		float	Corr_Pressure;
	  Corr_Pressure = Pressure_Para[0]+ Pressure*(Pressure_Para[1]+Pressure*(Pressure_Para[4]+Pressure*Pressure_Para[6]))+Temperature*Pressure_Para[2]+Temperature*Pressure*(Pressure_Para[3]+Pressure*Pressure_Para[5]);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3304      	adds	r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3310      	adds	r3, #16
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3318      	adds	r3, #24
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8003352:	edd7 7a02 	vldr	s15, [r7, #8]
 8003356:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800335a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800335e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003362:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003366:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800336a:	edd7 7a02 	vldr	s15, [r7, #8]
 800336e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003372:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3308      	adds	r3, #8
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	ee07 3a90 	vmov	s15, r3
 8003380:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003384:	edd7 7a01 	vldr	s15, [r7, #4]
 8003388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003390:	edd7 6a01 	vldr	s13, [r7, #4]
 8003394:	edd7 7a02 	vldr	s15, [r7, #8]
 8003398:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	330c      	adds	r3, #12
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3314      	adds	r3, #20
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80033b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80033c0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80033c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	edc7 7a05 	vstr	s15, [r7, #20]
		return Corr_Pressure;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	ee07 3a90 	vmov	s15, r3
}
 80033d6:	eeb0 0a67 	vmov.f32	s0, s15
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <Correcting_Temperature>:
 
//温度校正函数
float Correcting_Temperature(int *Temperature_Para,float Temperature)
{	
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	ed87 0a00 	vstr	s0, [r7]
	float Corr_Temperature;
	Corr_Temperature = Temperature_Para[0]*0.5+Temperature_Para[1]*Temperature;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033fc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8003400:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003412:	edd7 7a00 	vldr	s15, [r7]
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800341e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003422:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003426:	edc7 7a03 	vstr	s15, [r7, #12]
	return Corr_Temperature;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	ee07 3a90 	vmov	s15, r3
}
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <BARO_GPIO_EXTI_Callback>:


}

 void  BARO_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	80fb      	strh	r3, [r7, #6]

    switch (GPIO_Pin)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b20      	cmp	r3, #32
 800344e:	f040 80e7 	bne.w	8003620 <BARO_GPIO_EXTI_Callback+0x1e0>
    {
//    	//测试中断
//    	     uint8_t TEXTACC[1] = {0x01};
//    	         HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

		Pressure = 0;
 8003452:	4b7f      	ldr	r3, [pc, #508]	@ (8003650 <BARO_GPIO_EXTI_Callback+0x210>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
		Temperature = 0;
 8003458:	4b7e      	ldr	r3, [pc, #504]	@ (8003654 <BARO_GPIO_EXTI_Callback+0x214>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        uint8_t int_sts;
        int_sts = SPL06_Read_Byte(INT_STS_Addr);
 800345e:	200a      	movs	r0, #10
 8003460:	f7ff fefe 	bl	8003260 <SPL06_Read_Byte>
 8003464:	4603      	mov	r3, r0
 8003466:	75fb      	strb	r3, [r7, #23]

    //检查压力就绪中断（bit0）    
    if ((int_sts & 0x01) == 0x01)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d07b      	beq.n	800356a <BARO_GPIO_EXTI_Callback+0x12a>
    {
//		     	     uint8_t TEXTACC[1] = {0x07};
//   	          HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口
		
        // 读取压力原始数据（PSR_B2-B0，0x00-0x02）
        Pressure_MSB = SPL06_Read_Byte(PSR_B2_Addr);
 8003472:	2000      	movs	r0, #0
 8003474:	f7ff fef4 	bl	8003260 <SPL06_Read_Byte>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	4b76      	ldr	r3, [pc, #472]	@ (8003658 <BARO_GPIO_EXTI_Callback+0x218>)
 800347e:	701a      	strb	r2, [r3, #0]
        Pressure_CSB = SPL06_Read_Byte(PSR_B1_Addr);
 8003480:	2001      	movs	r0, #1
 8003482:	f7ff feed 	bl	8003260 <SPL06_Read_Byte>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	4b74      	ldr	r3, [pc, #464]	@ (800365c <BARO_GPIO_EXTI_Callback+0x21c>)
 800348c:	701a      	strb	r2, [r3, #0]
        Pressure_LSB = SPL06_Read_Byte(PSR_B0_Addr);
 800348e:	2002      	movs	r0, #2
 8003490:	f7ff fee6 	bl	8003260 <SPL06_Read_Byte>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	4b71      	ldr	r3, [pc, #452]	@ (8003660 <BARO_GPIO_EXTI_Callback+0x220>)
 800349a:	701a      	strb	r2, [r3, #0]
        // Pressure = (Pressure_MSB << 16) + (Pressure_CSB << 8) + Pressure_LSB;
		// 拼接为24位数据
        uint32_t raw_24bit = (uint32_t)Pressure_MSB << 16 | (uint32_t)Pressure_CSB << 8 | Pressure_LSB;
 800349c:	4b6e      	ldr	r3, [pc, #440]	@ (8003658 <BARO_GPIO_EXTI_Callback+0x218>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <BARO_GPIO_EXTI_Callback+0x21c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	4313      	orrs	r3, r2
 80034aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003660 <BARO_GPIO_EXTI_Callback+0x220>)
 80034ac:	7812      	ldrb	r2, [r2, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]

        // 符号位扩展为32位有符号整数
  		if (raw_24bit & 0x800000) {  // 若24位最高位为1（负数）
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00f      	beq.n	80034dc <BARO_GPIO_EXTI_Callback+0x9c>
    	Pressure = (int)raw_24bit -Total_Number_24; // 扩展高8位为1
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034c6:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8003630 <BARO_GPIO_EXTI_Callback+0x1f0>
 80034ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80034d2:	ee17 2a90 	vmov	r2, s15
 80034d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <BARO_GPIO_EXTI_Callback+0x210>)
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e002      	b.n	80034e2 <BARO_GPIO_EXTI_Callback+0xa2>
		} else {
    	Pressure = (int)raw_24bit;  // 正数直接转换
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4a5c      	ldr	r2, [pc, #368]	@ (8003650 <BARO_GPIO_EXTI_Callback+0x210>)
 80034e0:	6013      	str	r3, [r2, #0]
		// float rx[1];
		// rx[0] = Pressure;
		// HAL_UART_Transmit(&huart4, (uint8_t*)rx, sizeof(rx), 100); //发送数据给串口
		
        // 压力原始值缩放（对应规格书5.6.1节Praw_SC = Praw / kP）
		BARO_Data_Now.Actual_pressure = Pressure_conversion(Pressure, k_Press);
 80034e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003650 <BARO_GPIO_EXTI_Callback+0x210>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <BARO_GPIO_EXTI_Callback+0x224>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	eeb0 0a67 	vmov.f32	s0, s15
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7ff feed 	bl	80032d2 <Pressure_conversion>
 80034f8:	eef0 7a40 	vmov.f32	s15, s0
 80034fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 80034fe:	edc3 7a01 	vstr	s15, [r3, #4]
		// HAL_UART_Transmit(&huart4, (uint8_t*)&BARO_Data_Now.Actual_altitude, sizeof(BARO_Data_Now.Actual_altitude), 100);
        
		// 压力补偿计算（代入c00等7个系数，包含温度交叉补偿项）//那刚刚上电时的气压是不准的，要等温度读取更新后才准
		BARO_Data_Now.press_correction = Correcting_Pressure(Pressure_Para, BARO_Data_Now.Actual_pressure, BARO_Data_Now.Actual_temperature) + Offest_Pressure;
 8003502:	4b59      	ldr	r3, [pc, #356]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 8003504:	edd3 7a01 	vldr	s15, [r3, #4]
 8003508:	4b57      	ldr	r3, [pc, #348]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	eef0 0a47 	vmov.f32	s1, s14
 8003512:	eeb0 0a67 	vmov.f32	s0, s15
 8003516:	4855      	ldr	r0, [pc, #340]	@ (800366c <BARO_GPIO_EXTI_Callback+0x22c>)
 8003518:	f7ff fef8 	bl	800330c <Correcting_Pressure>
 800351c:	eef0 7a40 	vmov.f32	s15, s0
 8003520:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8003670 <BARO_GPIO_EXTI_Callback+0x230>
 8003524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003528:	4b4f      	ldr	r3, [pc, #316]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 800352a:	edc3 7a04 	vstr	s15, [r3, #16]

        // 计算海拔高度（对应规格书6.3节国际气压公式）
		BARO_Data_Now.Actual_altitude = 44330 * (1 - pow(BARO_Data_Now.press_correction / Standard_atmospheric_pressure, 1.0 / 5.255));
 800352e:	4b4e      	ldr	r3, [pc, #312]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 8003530:	edd3 7a04 	vldr	s15, [r3, #16]
 8003534:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003538:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8003638 <BARO_GPIO_EXTI_Callback+0x1f8>
 800353c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003540:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 8003640 <BARO_GPIO_EXTI_Callback+0x200>
 8003544:	eeb0 0b46 	vmov.f64	d0, d6
 8003548:	f013 fa26 	bl	8016998 <pow>
 800354c:	eeb0 7b40 	vmov.f64	d7, d0
 8003550:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003554:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003558:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8003648 <BARO_GPIO_EXTI_Callback+0x208>
 800355c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003560:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003564:	4b40      	ldr	r3, [pc, #256]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 8003566:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    // 检查温度数据就绪中断（INT_TMP，bit1）
    if ((int_sts & 0x02) == 0x02)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d057      	beq.n	8003624 <BARO_GPIO_EXTI_Callback+0x1e4>
    {
//		     	     uint8_t TEXTACC[1] = {0x08};
//   	          HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

        // 读取温度原始数据（TMP_B2-B0，0x03-0x05）
        Temp_MSB = SPL06_Read_Byte(TMP_B2_Addr);
 8003574:	2003      	movs	r0, #3
 8003576:	f7ff fe73 	bl	8003260 <SPL06_Read_Byte>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	4b3d      	ldr	r3, [pc, #244]	@ (8003674 <BARO_GPIO_EXTI_Callback+0x234>)
 8003580:	701a      	strb	r2, [r3, #0]
        Temp_CSB = SPL06_Read_Byte(TMP_B1_Addr);
 8003582:	2004      	movs	r0, #4
 8003584:	f7ff fe6c 	bl	8003260 <SPL06_Read_Byte>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b3a      	ldr	r3, [pc, #232]	@ (8003678 <BARO_GPIO_EXTI_Callback+0x238>)
 800358e:	701a      	strb	r2, [r3, #0]
        Temp_LSB = SPL06_Read_Byte(TMP_B0_Addr);
 8003590:	2005      	movs	r0, #5
 8003592:	f7ff fe65 	bl	8003260 <SPL06_Read_Byte>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	4b38      	ldr	r3, [pc, #224]	@ (800367c <BARO_GPIO_EXTI_Callback+0x23c>)
 800359c:	701a      	strb	r2, [r3, #0]
        // Temperature = (Temp_MSB << 16) + (Temp_CSB << 8) + Temp_LSB;
		// 拼接为24位数据
  		uint32_t raw_24bit = (uint32_t)Temp_MSB << 16 | (uint32_t)Temp_CSB << 8 | Temp_LSB;
 800359e:	4b35      	ldr	r3, [pc, #212]	@ (8003674 <BARO_GPIO_EXTI_Callback+0x234>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	041a      	lsls	r2, r3, #16
 80035a4:	4b34      	ldr	r3, [pc, #208]	@ (8003678 <BARO_GPIO_EXTI_Callback+0x238>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	4313      	orrs	r3, r2
 80035ac:	4a33      	ldr	r2, [pc, #204]	@ (800367c <BARO_GPIO_EXTI_Callback+0x23c>)
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

		// 符号位扩展为32位有符号整数
		if (raw_24bit & 0x800000) {  // 若24位最高位为1（负数）
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00f      	beq.n	80035de <BARO_GPIO_EXTI_Callback+0x19e>
   		 Temperature = (int)raw_24bit -Total_Number_24;  // 扩展高8位为1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035c8:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8003630 <BARO_GPIO_EXTI_Callback+0x1f0>
 80035cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80035d4:	ee17 2a90 	vmov	r2, s15
 80035d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003654 <BARO_GPIO_EXTI_Callback+0x214>)
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e002      	b.n	80035e4 <BARO_GPIO_EXTI_Callback+0x1a4>
		} else {
    	Temperature = (int)raw_24bit;  // 正数直接转换
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003654 <BARO_GPIO_EXTI_Callback+0x214>)
 80035e2:	6013      	str	r3, [r2, #0]
		}
        
		// 温度原始值缩放（对应规格书5.6.2节Traw_SC = Traw / kT）
		BARO_Data_Now.Actual_temperature = Temperature_conversion(Temperature, k_Temp) ;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <BARO_GPIO_EXTI_Callback+0x214>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b25      	ldr	r3, [pc, #148]	@ (8003680 <BARO_GPIO_EXTI_Callback+0x240>)
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eeb0 0a67 	vmov.f32	s0, s15
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7ff fe4f 	bl	8003298 <Temperature_conversion>
 80035fa:	eef0 7a40 	vmov.f32	s15, s0
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 8003600:	edc3 7a00 	vstr	s15, [r3]
		// 温度补偿计算（代入c0、c1系数，公式：Tcomp = c0*0.5 + c1*Traw_SC）
		BARO_Data_Now.temp_correction = Correcting_Temperature(Temperature_Para, BARO_Data_Now.Actual_temperature) ;
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	481d      	ldr	r0, [pc, #116]	@ (8003684 <BARO_GPIO_EXTI_Callback+0x244>)
 8003610:	f7ff fee8 	bl	80033e4 <Correcting_Temperature>
 8003614:	eef0 7a40 	vmov.f32	s15, s0
 8003618:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <BARO_GPIO_EXTI_Callback+0x228>)
 800361a:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    break;
 800361e:	e001      	b.n	8003624 <BARO_GPIO_EXTI_Callback+0x1e4>
    }

    default:
        break;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <BARO_GPIO_EXTI_Callback+0x1e6>
    break;
 8003624:	bf00      	nop
    }
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	00000000 	.word	0x00000000
 8003634:	41700000 	.word	0x41700000
 8003638:	00000000 	.word	0x00000000
 800363c:	40f8bcd0 	.word	0x40f8bcd0
 8003640:	ccd9456c 	.word	0xccd9456c
 8003644:	3fc85b95 	.word	0x3fc85b95
 8003648:	00000000 	.word	0x00000000
 800364c:	40e5a540 	.word	0x40e5a540
 8003650:	24000a3c 	.word	0x24000a3c
 8003654:	24000a38 	.word	0x24000a38
 8003658:	24000a30 	.word	0x24000a30
 800365c:	24000a31 	.word	0x24000a31
 8003660:	24000a32 	.word	0x24000a32
 8003664:	24000a64 	.word	0x24000a64
 8003668:	24000a6c 	.word	0x24000a6c
 800366c:	24000a40 	.word	0x24000a40
 8003670:	00000000 	.word	0x00000000
 8003674:	24000a33 	.word	0x24000a33
 8003678:	24000a34 	.word	0x24000a34
 800367c:	24000a35 	.word	0x24000a35
 8003680:	24000a68 	.word	0x24000a68
 8003684:	24000a5c 	.word	0x24000a5c

08003688 <BMI088_accel_read_muli_reg>:
low_pass_filter_t gyro_filter[3];  // 陀螺仪滤波

/* 用于读取BMI088温度数据 */
// spi通信在bmi里面，bit（0）位为1表示读，0表示写，这里因为是小端是或0x80
static void BMI088_accel_read_muli_reg(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	461a      	mov	r2, r3
 8003694:	460b      	mov	r3, r1
 8003696:	72fb      	strb	r3, [r7, #11]
 8003698:	4613      	mov	r3, r2
 800369a:	72bb      	strb	r3, [r7, #10]
    BMI088_ACCEL_NS_L();
 800369c:	f000 fb0a 	bl	8003cb4 <BMI088_ACCEL_NS_L>
    BMI088_read_write_byte(hspi, (reg) | 0x80);
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fb0e 	bl	8003ccc <BMI088_read_write_byte>
    BMI088_read_muli_reg(hspi, reg, buf, len);
 80036b0:	7abb      	ldrb	r3, [r7, #10]
 80036b2:	7af9      	ldrb	r1, [r7, #11]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fb1d 	bl	8003cf6 <BMI088_read_muli_reg>
    BMI088_ACCEL_NS_H();
 80036bc:	f000 faee 	bl	8003c9c <BMI088_ACCEL_NS_H>
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <BMI088_Delay>:
 * @author:
 * @date:2022/05/31
 * @note:
 ****************************************************/
static void BMI088_Delay(int times)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    HAL_Delay(times);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f85e 	bl	8004794 <HAL_Delay>
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <BMI088_SPIReadSend>:
 * @author:
 * @date:2022/05/31
 * @note:
 ****************************************************/
static uint8_t BMI088_SPIReadSend(SPI_HandleTypeDef *hspi, uint8_t data)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
    uint8_t ret = 0xff;
 80036ec:	23ff      	movs	r3, #255	@ 0xff
 80036ee:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(hspi, &data, &ret, 1, 0xffff);
 80036f0:	f107 020f 	add.w	r2, r7, #15
 80036f4:	1cf9      	adds	r1, r7, #3
 80036f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2301      	movs	r3, #1
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f00a fb84 	bl	800de0c <HAL_SPI_TransmitReceive>
    return ret;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <BMI088_Read_GYRO>:
 * @author:
 * @date:2022/05/31
 * @note:	已经知道读取陀螺仪数据的函数，如果想使用数据，需要知道滤波函数的用法
 ****************************************************/
static uint8_t BMI088_Read_GYRO(SPI_HandleTypeDef *hspi, uint8_t Addr, int BOARD_OR_FLOAT)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	460b      	mov	r3, r1
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	72fb      	strb	r3, [r7, #11]
    uint8_t val;
    SPI1_GYRO_Enable
 800371e:	2201      	movs	r2, #1
 8003720:	2104      	movs	r1, #4
 8003722:	481d      	ldr	r0, [pc, #116]	@ (8003798 <BMI088_Read_GYRO+0x88>)
 8003724:	f005 fffe 	bl	8009724 <HAL_GPIO_WritePin>
 8003728:	2200      	movs	r2, #0
 800372a:	2108      	movs	r1, #8
 800372c:	481a      	ldr	r0, [pc, #104]	@ (8003798 <BMI088_Read_GYRO+0x88>)
 800372e:	f005 fff9 	bl	8009724 <HAL_GPIO_WritePin>
 8003732:	2201      	movs	r2, #1
 8003734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003738:	4818      	ldr	r0, [pc, #96]	@ (800379c <BMI088_Read_GYRO+0x8c>)
 800373a:	f005 fff3 	bl	8009724 <HAL_GPIO_WritePin>
 800373e:	2200      	movs	r2, #0
 8003740:	2104      	movs	r1, #4
 8003742:	4816      	ldr	r0, [pc, #88]	@ (800379c <BMI088_Read_GYRO+0x8c>)
 8003744:	f005 ffee 	bl	8009724 <HAL_GPIO_WritePin>

        // 步骤1：发送读命令（Addr | 0x80）
        // 此时传感器正在接收地址，返回值无效，所以丢弃
        BMI088_SPIReadSend(hspi, Addr | 0x80); // spi通信在bmi里面，bit（0）位为1表示读，0表示写，这里因为是小端是或0x80
 8003748:	7afb      	ldrb	r3, [r7, #11]
 800374a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4619      	mov	r1, r3
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff ffc4 	bl	80036e0 <BMI088_SPIReadSend>

    // 步骤2：发送虚拟字节（0x00），触发传感器返回数据
    // 此时传感器返回的才是目标寄存器的值
    val = (uint8_t)(BMI088_SPIReadSend(hspi, 0x00) & 0xFF); // 提取数据的低 8 位。
 8003758:	2100      	movs	r1, #0
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ffc0 	bl	80036e0 <BMI088_SPIReadSend>
 8003760:	4603      	mov	r3, r0
 8003762:	75fb      	strb	r3, [r7, #23]
    SPI1_GYRO_Disable;
 8003764:	2201      	movs	r2, #1
 8003766:	2104      	movs	r1, #4
 8003768:	480b      	ldr	r0, [pc, #44]	@ (8003798 <BMI088_Read_GYRO+0x88>)
 800376a:	f005 ffdb 	bl	8009724 <HAL_GPIO_WritePin>
 800376e:	2201      	movs	r2, #1
 8003770:	2108      	movs	r1, #8
 8003772:	4809      	ldr	r0, [pc, #36]	@ (8003798 <BMI088_Read_GYRO+0x88>)
 8003774:	f005 ffd6 	bl	8009724 <HAL_GPIO_WritePin>
 8003778:	2201      	movs	r2, #1
 800377a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800377e:	4807      	ldr	r0, [pc, #28]	@ (800379c <BMI088_Read_GYRO+0x8c>)
 8003780:	f005 ffd0 	bl	8009724 <HAL_GPIO_WritePin>
 8003784:	2201      	movs	r2, #1
 8003786:	2104      	movs	r1, #4
 8003788:	4804      	ldr	r0, [pc, #16]	@ (800379c <BMI088_Read_GYRO+0x8c>)
 800378a:	f005 ffcb 	bl	8009724 <HAL_GPIO_WritePin>
    return val;
 800378e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	58020000 	.word	0x58020000
 800379c:	58020800 	.word	0x58020800

080037a0 <BMI088_Read_ACC>:
 * @author:
 * @date:2022/05/31
 * @note:	已经知道读取加速度计数据的函数，如果想使用数据，需要知道滤波函数的用法
 ****************************************************/
static uint8_t BMI088_Read_ACC(SPI_HandleTypeDef *hspi, uint8_t Addr, int BOARD_OR_FLOAT)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	460b      	mov	r3, r1
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	72fb      	strb	r3, [r7, #11]
    uint8_t val;
    SPI1_ACC_Enable
 80037ae:	2200      	movs	r2, #0
 80037b0:	2104      	movs	r1, #4
 80037b2:	481f      	ldr	r0, [pc, #124]	@ (8003830 <BMI088_Read_ACC+0x90>)
 80037b4:	f005 ffb6 	bl	8009724 <HAL_GPIO_WritePin>
 80037b8:	2201      	movs	r2, #1
 80037ba:	2108      	movs	r1, #8
 80037bc:	481c      	ldr	r0, [pc, #112]	@ (8003830 <BMI088_Read_ACC+0x90>)
 80037be:	f005 ffb1 	bl	8009724 <HAL_GPIO_WritePin>
 80037c2:	2200      	movs	r2, #0
 80037c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037c8:	481a      	ldr	r0, [pc, #104]	@ (8003834 <BMI088_Read_ACC+0x94>)
 80037ca:	f005 ffab 	bl	8009724 <HAL_GPIO_WritePin>
 80037ce:	2201      	movs	r2, #1
 80037d0:	2104      	movs	r1, #4
 80037d2:	4818      	ldr	r0, [pc, #96]	@ (8003834 <BMI088_Read_ACC+0x94>)
 80037d4:	f005 ffa6 	bl	8009724 <HAL_GPIO_WritePin>
        //	HAL_GPIO_WritePin(CS2_ACC_GPIO_Port,CS2_ACC_Pin, GPIO_PIN_RESET);
        //    HAL_GPIO_WritePin(CS2_GYRO_GPIO_Port,CS2_GYRO_Pin, GPIO_PIN_SET);
        BMI088_SPIReadSend(hspi, Addr | 0x80);
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff ff7c 	bl	80036e0 <BMI088_SPIReadSend>

    // 在读取加速度计数据时，传感器不会直接返回请求的寄存器数据
    // 而是先发送一个不可预测的虚拟字节（dummy byte），之后才发送实际的寄存器内容。
    BMI088_SPIReadSend(hspi, 0x00);
 80037e8:	2100      	movs	r1, #0
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ff78 	bl	80036e0 <BMI088_SPIReadSend>

    val = (uint8_t)(BMI088_SPIReadSend(hspi, 0x00) & 0xFF);
 80037f0:	2100      	movs	r1, #0
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ff74 	bl	80036e0 <BMI088_SPIReadSend>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]

    SPI1_ACC_Disable
 80037fc:	2201      	movs	r2, #1
 80037fe:	2104      	movs	r1, #4
 8003800:	480b      	ldr	r0, [pc, #44]	@ (8003830 <BMI088_Read_ACC+0x90>)
 8003802:	f005 ff8f 	bl	8009724 <HAL_GPIO_WritePin>
 8003806:	2201      	movs	r2, #1
 8003808:	2108      	movs	r1, #8
 800380a:	4809      	ldr	r0, [pc, #36]	@ (8003830 <BMI088_Read_ACC+0x90>)
 800380c:	f005 ff8a 	bl	8009724 <HAL_GPIO_WritePin>
 8003810:	2201      	movs	r2, #1
 8003812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003816:	4807      	ldr	r0, [pc, #28]	@ (8003834 <BMI088_Read_ACC+0x94>)
 8003818:	f005 ff84 	bl	8009724 <HAL_GPIO_WritePin>
 800381c:	2201      	movs	r2, #1
 800381e:	2104      	movs	r1, #4
 8003820:	4804      	ldr	r0, [pc, #16]	@ (8003834 <BMI088_Read_ACC+0x94>)
 8003822:	f005 ff7f 	bl	8009724 <HAL_GPIO_WritePin>
        //    HAL_GPIO_WritePin(CS2_ACC_GPIO_Port,CS2_ACC_Pin, GPIO_PIN_SET);
        return val;
 8003826:	7dfb      	ldrb	r3, [r7, #23]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	58020000 	.word	0x58020000
 8003834:	58020800 	.word	0x58020800

08003838 <BMI088_Write_Reg>:
 * @author:
 * @date:2022/05/31
 * @note:
 ****************************************************/
static void BMI088_Write_Reg(SPI_HandleTypeDef *hspi, uint8_t Addr, uint8_t Val, uint8_t ACC_OR_GYRO)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	461a      	mov	r2, r3
 8003846:	4603      	mov	r3, r0
 8003848:	70fb      	strb	r3, [r7, #3]
 800384a:	460b      	mov	r3, r1
 800384c:	70bb      	strb	r3, [r7, #2]
 800384e:	4613      	mov	r3, r2
 8003850:	707b      	strb	r3, [r7, #1]
    if (ACC_OR_GYRO == CS_ACC)
 8003852:	787b      	ldrb	r3, [r7, #1]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d115      	bne.n	8003884 <BMI088_Write_Reg+0x4c>
    {
        SPI1_ACC_Enable
 8003858:	2200      	movs	r2, #0
 800385a:	2104      	movs	r1, #4
 800385c:	4836      	ldr	r0, [pc, #216]	@ (8003938 <BMI088_Write_Reg+0x100>)
 800385e:	f005 ff61 	bl	8009724 <HAL_GPIO_WritePin>
 8003862:	2201      	movs	r2, #1
 8003864:	2108      	movs	r1, #8
 8003866:	4834      	ldr	r0, [pc, #208]	@ (8003938 <BMI088_Write_Reg+0x100>)
 8003868:	f005 ff5c 	bl	8009724 <HAL_GPIO_WritePin>
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003872:	4832      	ldr	r0, [pc, #200]	@ (800393c <BMI088_Write_Reg+0x104>)
 8003874:	f005 ff56 	bl	8009724 <HAL_GPIO_WritePin>
 8003878:	2201      	movs	r2, #1
 800387a:	2104      	movs	r1, #4
 800387c:	482f      	ldr	r0, [pc, #188]	@ (800393c <BMI088_Write_Reg+0x104>)
 800387e:	f005 ff51 	bl	8009724 <HAL_GPIO_WritePin>
 8003882:	e017      	b.n	80038b4 <BMI088_Write_Reg+0x7c>
    }
    else if (ACC_OR_GYRO == CS_GYRO)
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d114      	bne.n	80038b4 <BMI088_Write_Reg+0x7c>
    {
        SPI1_GYRO_Enable
 800388a:	2201      	movs	r2, #1
 800388c:	2104      	movs	r1, #4
 800388e:	482a      	ldr	r0, [pc, #168]	@ (8003938 <BMI088_Write_Reg+0x100>)
 8003890:	f005 ff48 	bl	8009724 <HAL_GPIO_WritePin>
 8003894:	2200      	movs	r2, #0
 8003896:	2108      	movs	r1, #8
 8003898:	4827      	ldr	r0, [pc, #156]	@ (8003938 <BMI088_Write_Reg+0x100>)
 800389a:	f005 ff43 	bl	8009724 <HAL_GPIO_WritePin>
 800389e:	2201      	movs	r2, #1
 80038a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038a4:	4825      	ldr	r0, [pc, #148]	@ (800393c <BMI088_Write_Reg+0x104>)
 80038a6:	f005 ff3d 	bl	8009724 <HAL_GPIO_WritePin>
 80038aa:	2200      	movs	r2, #0
 80038ac:	2104      	movs	r1, #4
 80038ae:	4823      	ldr	r0, [pc, #140]	@ (800393c <BMI088_Write_Reg+0x104>)
 80038b0:	f005 ff38 	bl	8009724 <HAL_GPIO_WritePin>
    }
    BMI088_SPIReadSend(hspi, Addr & 0x7f); // 0x7F的二进制为0111 1111，置零写操作
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ff0e 	bl	80036e0 <BMI088_SPIReadSend>
    BMI088_SPIReadSend(hspi, Val);         // 先发地址再发数据
 80038c4:	78bb      	ldrb	r3, [r7, #2]
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff09 	bl	80036e0 <BMI088_SPIReadSend>
    if (ACC_OR_GYRO == CS_ACC)
 80038ce:	787b      	ldrb	r3, [r7, #1]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d115      	bne.n	8003900 <BMI088_Write_Reg+0xc8>
    {
        SPI1_ACC_Disable
 80038d4:	2201      	movs	r2, #1
 80038d6:	2104      	movs	r1, #4
 80038d8:	4817      	ldr	r0, [pc, #92]	@ (8003938 <BMI088_Write_Reg+0x100>)
 80038da:	f005 ff23 	bl	8009724 <HAL_GPIO_WritePin>
 80038de:	2201      	movs	r2, #1
 80038e0:	2108      	movs	r1, #8
 80038e2:	4815      	ldr	r0, [pc, #84]	@ (8003938 <BMI088_Write_Reg+0x100>)
 80038e4:	f005 ff1e 	bl	8009724 <HAL_GPIO_WritePin>
 80038e8:	2201      	movs	r2, #1
 80038ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038ee:	4813      	ldr	r0, [pc, #76]	@ (800393c <BMI088_Write_Reg+0x104>)
 80038f0:	f005 ff18 	bl	8009724 <HAL_GPIO_WritePin>
 80038f4:	2201      	movs	r2, #1
 80038f6:	2104      	movs	r1, #4
 80038f8:	4810      	ldr	r0, [pc, #64]	@ (800393c <BMI088_Write_Reg+0x104>)
 80038fa:	f005 ff13 	bl	8009724 <HAL_GPIO_WritePin>
    }
    else if (ACC_OR_GYRO == CS_GYRO)
    {
        SPI1_GYRO_Disable
    }
}
 80038fe:	e017      	b.n	8003930 <BMI088_Write_Reg+0xf8>
    else if (ACC_OR_GYRO == CS_GYRO)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d114      	bne.n	8003930 <BMI088_Write_Reg+0xf8>
        SPI1_GYRO_Disable
 8003906:	2201      	movs	r2, #1
 8003908:	2104      	movs	r1, #4
 800390a:	480b      	ldr	r0, [pc, #44]	@ (8003938 <BMI088_Write_Reg+0x100>)
 800390c:	f005 ff0a 	bl	8009724 <HAL_GPIO_WritePin>
 8003910:	2201      	movs	r2, #1
 8003912:	2108      	movs	r1, #8
 8003914:	4808      	ldr	r0, [pc, #32]	@ (8003938 <BMI088_Write_Reg+0x100>)
 8003916:	f005 ff05 	bl	8009724 <HAL_GPIO_WritePin>
 800391a:	2201      	movs	r2, #1
 800391c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003920:	4806      	ldr	r0, [pc, #24]	@ (800393c <BMI088_Write_Reg+0x104>)
 8003922:	f005 feff 	bl	8009724 <HAL_GPIO_WritePin>
 8003926:	2201      	movs	r2, #1
 8003928:	2104      	movs	r1, #4
 800392a:	4804      	ldr	r0, [pc, #16]	@ (800393c <BMI088_Write_Reg+0x104>)
 800392c:	f005 fefa 	bl	8009724 <HAL_GPIO_WritePin>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	58020000 	.word	0x58020000
 800393c:	58020800 	.word	0x58020800

08003940 <BMI088_ACC_Congfig>:
 * @retval  尝试降低采样率是否能提高数据稳定性
 * @date: 2021/10/17
 */
int ret = 0;
static uint8_t BMI088_ACC_Congfig(SPI_HandleTypeDef *hspi, int BOARD_OR_FLOAT)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
    SPI1_ACC_Disable; // 全cs失能，在下面配置的函数会cs使能
 800394a:	2201      	movs	r2, #1
 800394c:	2104      	movs	r1, #4
 800394e:	486c      	ldr	r0, [pc, #432]	@ (8003b00 <BMI088_ACC_Congfig+0x1c0>)
 8003950:	f005 fee8 	bl	8009724 <HAL_GPIO_WritePin>
 8003954:	2201      	movs	r2, #1
 8003956:	2108      	movs	r1, #8
 8003958:	4869      	ldr	r0, [pc, #420]	@ (8003b00 <BMI088_ACC_Congfig+0x1c0>)
 800395a:	f005 fee3 	bl	8009724 <HAL_GPIO_WritePin>
 800395e:	2201      	movs	r2, #1
 8003960:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003964:	4867      	ldr	r0, [pc, #412]	@ (8003b04 <BMI088_ACC_Congfig+0x1c4>)
 8003966:	f005 fedd 	bl	8009724 <HAL_GPIO_WritePin>
 800396a:	2201      	movs	r2, #1
 800396c:	2104      	movs	r1, #4
 800396e:	4865      	ldr	r0, [pc, #404]	@ (8003b04 <BMI088_ACC_Congfig+0x1c4>)
 8003970:	f005 fed8 	bl	8009724 <HAL_GPIO_WritePin>

    BMI088_Write_Reg(hspi, 0x7e, 0xb6, CS_ACC); // Soft Reset
 8003974:	2301      	movs	r3, #1
 8003976:	22b6      	movs	r2, #182	@ 0xb6
 8003978:	217e      	movs	r1, #126	@ 0x7e
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff5c 	bl	8003838 <BMI088_Write_Reg>

    if (hspi == &hspi1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a61      	ldr	r2, [pc, #388]	@ (8003b08 <BMI088_ACC_Congfig+0x1c8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d112      	bne.n	80039ae <BMI088_ACC_Congfig+0x6e>
    {
        while (BMI088.acc_id != ACC_CHIP_ID) // Rising edge ,turn to spi
 8003988:	e00c      	b.n	80039a4 <BMI088_ACC_Congfig+0x64>
        {

            BMI088_Delay(100);
 800398a:	2064      	movs	r0, #100	@ 0x64
 800398c:	f7ff fe9c 	bl	80036c8 <BMI088_Delay>
            BMI088.acc_id = BMI088_Read_ACC(hspi, 0x00, BOARD_OR_FLOAT); // id:1E
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	2100      	movs	r1, #0
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff03 	bl	80037a0 <BMI088_Read_ACC>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <BMI088_ACC_Congfig+0x1cc>)
 80039a0:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
        while (BMI088.acc_id != ACC_CHIP_ID) // Rising edge ,turn to spi
 80039a4:	4b59      	ldr	r3, [pc, #356]	@ (8003b0c <BMI088_ACC_Congfig+0x1cc>)
 80039a6:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80039aa:	2b1e      	cmp	r3, #30
 80039ac:	d1ed      	bne.n	800398a <BMI088_ACC_Congfig+0x4a>
        }
    }

    if (hspi == &hspi4)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a57      	ldr	r2, [pc, #348]	@ (8003b10 <BMI088_ACC_Congfig+0x1d0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d112      	bne.n	80039dc <BMI088_ACC_Congfig+0x9c>
    {
        while (BMI088_2.acc_id != ACC_CHIP_ID) // Rising edge ,turn to spi
 80039b6:	e00c      	b.n	80039d2 <BMI088_ACC_Congfig+0x92>
        {
            BMI088_Delay(100);
 80039b8:	2064      	movs	r0, #100	@ 0x64
 80039ba:	f7ff fe85 	bl	80036c8 <BMI088_Delay>
            BMI088_2.acc_id = BMI088_Read_ACC(hspi, 0x00, BOARD_OR_FLOAT); // id:1E
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	2100      	movs	r1, #0
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff feec 	bl	80037a0 <BMI088_Read_ACC>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b51      	ldr	r3, [pc, #324]	@ (8003b14 <BMI088_ACC_Congfig+0x1d4>)
 80039ce:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
        while (BMI088_2.acc_id != ACC_CHIP_ID) // Rising edge ,turn to spi
 80039d2:	4b50      	ldr	r3, [pc, #320]	@ (8003b14 <BMI088_ACC_Congfig+0x1d4>)
 80039d4:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80039d8:	2b1e      	cmp	r3, #30
 80039da:	d1ed      	bne.n	80039b8 <BMI088_ACC_Congfig+0x78>
            //
            //        HAL_UART_Transmit(&huart4, (uint8_t*)&BMI088_2.acc_id, sizeof(BMI088_2.acc_id), 100); //发送数据给串口
        }
    }

    BMI088_Delay(50); //> 1 ms ;
 80039dc:	2032      	movs	r0, #50	@ 0x32
 80039de:	f7ff fe73 	bl	80036c8 <BMI088_Delay>
    ret = 0;
 80039e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003b18 <BMI088_ACC_Congfig+0x1d8>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
    while (ret != ACC_ON) // 等待启动完成
 80039e8:	e011      	b.n	8003a0e <BMI088_ACC_Congfig+0xce>
    {
        ret = BMI088_Read_ACC(hspi, ACC_PWR_CTRL, BOARD_OR_FLOAT);
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	217d      	movs	r1, #125	@ 0x7d
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fed6 	bl	80037a0 <BMI088_Read_ACC>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <BMI088_ACC_Congfig+0x1d8>)
 80039fa:	601a      	str	r2, [r3, #0]
        BMI088_Write_Reg(hspi, ACC_PWR_CTRL, ACC_ON, CS_ACC);
 80039fc:	2301      	movs	r3, #1
 80039fe:	2204      	movs	r2, #4
 8003a00:	217d      	movs	r1, #125	@ 0x7d
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ff18 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003a08:	2005      	movs	r0, #5
 8003a0a:	f7ff fe5d 	bl	80036c8 <BMI088_Delay>
    while (ret != ACC_ON) // 等待启动完成
 8003a0e:	4b42      	ldr	r3, [pc, #264]	@ (8003b18 <BMI088_ACC_Congfig+0x1d8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d1e9      	bne.n	80039ea <BMI088_ACC_Congfig+0xaa>
    }
    /* 可根据实际使用和加速度寄存器表修改加速度计测量范围 */
    while (BMI088_Read_ACC(hspi, ACC_RANG, BOARD_OR_FLOAT) != Plus_Minus_24G) // 等待配置完成
 8003a16:	e008      	b.n	8003a2a <BMI088_ACC_Congfig+0xea>
    {
        BMI088_Write_Reg(hspi, ACC_RANG, Plus_Minus_24G, CS_ACC); // ACC Rang +- 24g;//
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	2141      	movs	r1, #65	@ 0x41
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff0a 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003a24:	2005      	movs	r0, #5
 8003a26:	f7ff fe4f 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_ACC(hspi, ACC_RANG, BOARD_OR_FLOAT) != Plus_Minus_24G) // 等待配置完成
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	2141      	movs	r1, #65	@ 0x41
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff feb6 	bl	80037a0 <BMI088_Read_ACC>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d1ee      	bne.n	8003a18 <BMI088_ACC_Congfig+0xd8>
    }
    while (BMI088_Read_ACC(hspi, 0x40, BOARD_OR_FLOAT) != 0xBA)
 8003a3a:	e008      	b.n	8003a4e <BMI088_ACC_Congfig+0x10e>
    {
        /* 可根据实际使用和加速度寄存器表修改加速度计数据读取频率 */
        BMI088_Write_Reg(hspi, 0x40, 0xBA, CS_ACC); //
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	22ba      	movs	r2, #186	@ 0xba
 8003a40:	2140      	movs	r1, #64	@ 0x40
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fef8 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003a48:	2005      	movs	r0, #5
 8003a4a:	f7ff fe3d 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_ACC(hspi, 0x40, BOARD_OR_FLOAT) != 0xBA)
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	2140      	movs	r1, #64	@ 0x40
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fea4 	bl	80037a0 <BMI088_Read_ACC>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2bba      	cmp	r3, #186	@ 0xba
 8003a5c:	d1ee      	bne.n	8003a3c <BMI088_ACC_Congfig+0xfc>
    }
    while (BMI088_Read_ACC(hspi, 0X53, BOARD_OR_FLOAT) != 0X08)
 8003a5e:	e008      	b.n	8003a72 <BMI088_ACC_Congfig+0x132>
    {
        BMI088_Write_Reg(hspi, 0X53, 0X08, CS_ACC); // 0000 1000 INT1 OUTPUT PUSH-PULL  Active low
 8003a60:	2301      	movs	r3, #1
 8003a62:	2208      	movs	r2, #8
 8003a64:	2153      	movs	r1, #83	@ 0x53
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fee6 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003a6c:	2005      	movs	r0, #5
 8003a6e:	f7ff fe2b 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_ACC(hspi, 0X53, BOARD_OR_FLOAT) != 0X08)
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	2153      	movs	r1, #83	@ 0x53
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fe92 	bl	80037a0 <BMI088_Read_ACC>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d1ee      	bne.n	8003a60 <BMI088_ACC_Congfig+0x120>
    }
    while (BMI088_Read_ACC(hspi, 0X54, BOARD_OR_FLOAT) != 0X08)
 8003a82:	e008      	b.n	8003a96 <BMI088_ACC_Congfig+0x156>
    {
        BMI088_Write_Reg(hspi, 0X54, 0X08, CS_ACC); // 0000 1000 INT2 OUTPUT PUSH-PULL  Active low
 8003a84:	2301      	movs	r3, #1
 8003a86:	2208      	movs	r2, #8
 8003a88:	2154      	movs	r1, #84	@ 0x54
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff fed4 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003a90:	2005      	movs	r0, #5
 8003a92:	f7ff fe19 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_ACC(hspi, 0X54, BOARD_OR_FLOAT) != 0X08)
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	2154      	movs	r1, #84	@ 0x54
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fe80 	bl	80037a0 <BMI088_Read_ACC>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d1ee      	bne.n	8003a84 <BMI088_ACC_Congfig+0x144>
    }
    while (BMI088_Read_ACC(hspi, 0X58, BOARD_OR_FLOAT) != 0x44)
 8003aa6:	e008      	b.n	8003aba <BMI088_ACC_Congfig+0x17a>
    {
        BMI088_Write_Reg(hspi, 0X58, 0x44, CS_ACC); // 0100 0100 data ready interrupt to INT1 and INT2，使能int1/2
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	2244      	movs	r2, #68	@ 0x44
 8003aac:	2158      	movs	r1, #88	@ 0x58
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fec2 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003ab4:	2005      	movs	r0, #5
 8003ab6:	f7ff fe07 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_ACC(hspi, 0X58, BOARD_OR_FLOAT) != 0x44)
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	2158      	movs	r1, #88	@ 0x58
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fe6e 	bl	80037a0 <BMI088_Read_ACC>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b44      	cmp	r3, #68	@ 0x44
 8003ac8:	d1ee      	bne.n	8003aa8 <BMI088_ACC_Congfig+0x168>
    }

    BMI088_Delay(20); //>1ms
 8003aca:	2014      	movs	r0, #20
 8003acc:	f7ff fdfc 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_ACC(hspi, ACC_PWR_CONF, BOARD_OR_FLOAT) != ACC_ACTIVE)
 8003ad0:	e009      	b.n	8003ae6 <BMI088_ACC_Congfig+0x1a6>
    {
        BMI088_Write_Reg(hspi, ACC_PWR_CONF, ACC_ACTIVE, CS_ACC); // ACtive mode
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	217c      	movs	r1, #124	@ 0x7c
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fead 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(600);                                        //>50ms
 8003ade:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003ae2:	f7ff fdf1 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_ACC(hspi, ACC_PWR_CONF, BOARD_OR_FLOAT) != ACC_ACTIVE)
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	217c      	movs	r1, #124	@ 0x7c
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fe58 	bl	80037a0 <BMI088_Read_ACC>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ed      	bne.n	8003ad2 <BMI088_ACC_Congfig+0x192>
    }
    return 0;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	58020000 	.word	0x58020000
 8003b04:	58020800 	.word	0x58020800
 8003b08:	240003e4 	.word	0x240003e4
 8003b0c:	24000b2c 	.word	0x24000b2c
 8003b10:	240004f4 	.word	0x240004f4
 8003b14:	24000c30 	.word	0x24000c30
 8003b18:	24000b28 	.word	0x24000b28

08003b1c <BMI088_GYRO_Congfig>:
 * @author:
 * @date:2022/05/31
 * @note:	配置陀螺仪产生中断的IO口的输出方式，数据输出频率2000hz
 ****************************************************/
static uint8_t BMI088_GYRO_Congfig(SPI_HandleTypeDef *hspi, int BOARD_OR_FLOAT)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
    SPI1_ACC_Disable; // 全cs失能，在下面配置的函数会cs使能
 8003b26:	2201      	movs	r2, #1
 8003b28:	2104      	movs	r1, #4
 8003b2a:	4856      	ldr	r0, [pc, #344]	@ (8003c84 <BMI088_GYRO_Congfig+0x168>)
 8003b2c:	f005 fdfa 	bl	8009724 <HAL_GPIO_WritePin>
 8003b30:	2201      	movs	r2, #1
 8003b32:	2108      	movs	r1, #8
 8003b34:	4853      	ldr	r0, [pc, #332]	@ (8003c84 <BMI088_GYRO_Congfig+0x168>)
 8003b36:	f005 fdf5 	bl	8009724 <HAL_GPIO_WritePin>
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b40:	4851      	ldr	r0, [pc, #324]	@ (8003c88 <BMI088_GYRO_Congfig+0x16c>)
 8003b42:	f005 fdef 	bl	8009724 <HAL_GPIO_WritePin>
 8003b46:	2201      	movs	r2, #1
 8003b48:	2104      	movs	r1, #4
 8003b4a:	484f      	ldr	r0, [pc, #316]	@ (8003c88 <BMI088_GYRO_Congfig+0x16c>)
 8003b4c:	f005 fdea 	bl	8009724 <HAL_GPIO_WritePin>

    BMI088_Write_Reg(hspi, 0x14, 0xb6, CS_GYRO); // Soft Reset
 8003b50:	2300      	movs	r3, #0
 8003b52:	22b6      	movs	r2, #182	@ 0xb6
 8003b54:	2114      	movs	r1, #20
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fe6e 	bl	8003838 <BMI088_Write_Reg>

    if (hspi == &hspi1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a4b      	ldr	r2, [pc, #300]	@ (8003c8c <BMI088_GYRO_Congfig+0x170>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d112      	bne.n	8003b8a <BMI088_GYRO_Congfig+0x6e>
    {
        while (BMI088.gyro_id != GYRO_CHIP_ID)
 8003b64:	e00c      	b.n	8003b80 <BMI088_GYRO_Congfig+0x64>
        {
            BMI088.gyro_id = BMI088_Read_GYRO(hspi, 0x00, BOARD_OR_FLOAT); // 0x0f
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	2100      	movs	r1, #0
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fdd0 	bl	8003710 <BMI088_Read_GYRO>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b46      	ldr	r3, [pc, #280]	@ (8003c90 <BMI088_GYRO_Congfig+0x174>)
 8003b76:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
            BMI088_Delay(5);
 8003b7a:	2005      	movs	r0, #5
 8003b7c:	f7ff fda4 	bl	80036c8 <BMI088_Delay>
        while (BMI088.gyro_id != GYRO_CHIP_ID)
 8003b80:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <BMI088_GYRO_Congfig+0x174>)
 8003b82:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8003b86:	2b0f      	cmp	r3, #15
 8003b88:	d1ed      	bne.n	8003b66 <BMI088_GYRO_Congfig+0x4a>
        }
    }
    if (hspi == &hspi4)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a41      	ldr	r2, [pc, #260]	@ (8003c94 <BMI088_GYRO_Congfig+0x178>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d11c      	bne.n	8003bcc <BMI088_GYRO_Congfig+0xb0>
    {
        while (BMI088_2.gyro_id != GYRO_CHIP_ID)
 8003b92:	e00c      	b.n	8003bae <BMI088_GYRO_Congfig+0x92>
        {

            //        uint8_t TEXTACC[1] = {0x05};
            //            HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

            BMI088_2.gyro_id = BMI088_Read_GYRO(hspi, 0x00, BOARD_OR_FLOAT); // 0x0f
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	2100      	movs	r1, #0
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fdb9 	bl	8003710 <BMI088_Read_GYRO>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8003c98 <BMI088_GYRO_Congfig+0x17c>)
 8003ba4:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
            BMI088_Delay(5);
 8003ba8:	2005      	movs	r0, #5
 8003baa:	f7ff fd8d 	bl	80036c8 <BMI088_Delay>
        while (BMI088_2.gyro_id != GYRO_CHIP_ID)
 8003bae:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <BMI088_GYRO_Congfig+0x17c>)
 8003bb0:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8003bb4:	2b0f      	cmp	r3, #15
 8003bb6:	d1ed      	bne.n	8003b94 <BMI088_GYRO_Congfig+0x78>
        }
    }

    while (BMI088_Read_GYRO(hspi, GYRO_RANG, BOARD_OR_FLOAT) != Plus_Minus_500)
 8003bb8:	e008      	b.n	8003bcc <BMI088_GYRO_Congfig+0xb0>
    {
        //        uint8_t TEXTACC[1] = {0x06};
        //            HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

        BMI088_Write_Reg(hspi, GYRO_RANG, Plus_Minus_500, CS_GYRO); // rang +-2000
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fe39 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003bc6:	2005      	movs	r0, #5
 8003bc8:	f7ff fd7e 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_GYRO(hspi, GYRO_RANG, BOARD_OR_FLOAT) != Plus_Minus_500)
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	210f      	movs	r1, #15
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fd9d 	bl	8003710 <BMI088_Read_GYRO>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d1ee      	bne.n	8003bba <BMI088_GYRO_Congfig+0x9e>
    }
    // bit #7 is Read Only

    /* 可根据陀螺仪寄存器对照表陀螺仪采样率是2000hz以及相对应的滤波器宽度 */
    BMI088_Write_Reg(hspi, GYRO_BANDWIDTH, ODR_400_FD_47, CS_GYRO);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2203      	movs	r2, #3
 8003be0:	2110      	movs	r1, #16
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fe28 	bl	8003838 <BMI088_Write_Reg>

    while (BMI088_Read_GYRO(hspi, 0X11, BOARD_OR_FLOAT) != 0x00)
 8003be8:	e008      	b.n	8003bfc <BMI088_GYRO_Congfig+0xe0>
    {
        //        uint8_t TEXTACC[1] = {0x07};
        //            HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

        BMI088_Write_Reg(hspi, 0X11, 0x00, CS_GYRO); // normal模式
 8003bea:	2300      	movs	r3, #0
 8003bec:	2200      	movs	r2, #0
 8003bee:	2111      	movs	r1, #17
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fe21 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003bf6:	2005      	movs	r0, #5
 8003bf8:	f7ff fd66 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_GYRO(hspi, 0X11, BOARD_OR_FLOAT) != 0x00)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	2111      	movs	r1, #17
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fd85 	bl	8003710 <BMI088_Read_GYRO>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ee      	bne.n	8003bea <BMI088_GYRO_Congfig+0xce>
    }
    while (BMI088_Read_GYRO(hspi, 0X15, BOARD_OR_FLOAT) != 0X80)
 8003c0c:	e008      	b.n	8003c20 <BMI088_GYRO_Congfig+0x104>
    {
        //        uint8_t TEXTACC[1] = {0x08};
        //            HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

        BMI088_Write_Reg(hspi, 0X15, 0X80, CS_GYRO); // //interrupt使能中断，在bmi088里面加速度的中断自动使能，但是**陀螺仪要手动使能**
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2280      	movs	r2, #128	@ 0x80
 8003c12:	2115      	movs	r1, #21
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fe0f 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003c1a:	2005      	movs	r0, #5
 8003c1c:	f7ff fd54 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_GYRO(hspi, 0X15, BOARD_OR_FLOAT) != 0X80)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	2115      	movs	r1, #21
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fd73 	bl	8003710 <BMI088_Read_GYRO>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b80      	cmp	r3, #128	@ 0x80
 8003c2e:	d1ee      	bne.n	8003c0e <BMI088_GYRO_Congfig+0xf2>
    }
    while (BMI088_Read_GYRO(hspi, 0X16, BOARD_OR_FLOAT) != 0X00) // int3/4配置，只能输出模式
 8003c30:	e008      	b.n	8003c44 <BMI088_GYRO_Congfig+0x128>
    {
        //        uint8_t TEXTACC[1] = {0x09};
        //            HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

        BMI088_Write_Reg(hspi, 0X16, 0X00, CS_GYRO); // OUTPUT PUSH-PULL  Active low
 8003c32:	2300      	movs	r3, #0
 8003c34:	2200      	movs	r2, #0
 8003c36:	2116      	movs	r1, #22
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff fdfd 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003c3e:	2005      	movs	r0, #5
 8003c40:	f7ff fd42 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_GYRO(hspi, 0X16, BOARD_OR_FLOAT) != 0X00) // int3/4配置，只能输出模式
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	2116      	movs	r1, #22
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff fd61 	bl	8003710 <BMI088_Read_GYRO>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ee      	bne.n	8003c32 <BMI088_GYRO_Congfig+0x116>
    }
    while (BMI088_Read_GYRO(hspi, 0X18, BOARD_OR_FLOAT) != 0X81)
 8003c54:	e008      	b.n	8003c68 <BMI088_GYRO_Congfig+0x14c>
    {
        //        uint8_t TEXTACC[1] = {0x10};
        //            HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

        BMI088_Write_Reg(hspi, 0X18, 0X81, CS_GYRO); // data ready interrupt to INT3 and INT4，使能int3/4
 8003c56:	2300      	movs	r3, #0
 8003c58:	2281      	movs	r2, #129	@ 0x81
 8003c5a:	2118      	movs	r1, #24
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fdeb 	bl	8003838 <BMI088_Write_Reg>
        BMI088_Delay(5);
 8003c62:	2005      	movs	r0, #5
 8003c64:	f7ff fd30 	bl	80036c8 <BMI088_Delay>
    while (BMI088_Read_GYRO(hspi, 0X18, BOARD_OR_FLOAT) != 0X81)
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	2118      	movs	r1, #24
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fd4f 	bl	8003710 <BMI088_Read_GYRO>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b81      	cmp	r3, #129	@ 0x81
 8003c76:	d1ee      	bne.n	8003c56 <BMI088_GYRO_Congfig+0x13a>
    }
    return 0;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	58020000 	.word	0x58020000
 8003c88:	58020800 	.word	0x58020800
 8003c8c:	240003e4 	.word	0x240003e4
 8003c90:	24000b2c 	.word	0x24000b2c
 8003c94:	240004f4 	.word	0x240004f4
 8003c98:	24000c30 	.word	0x24000c30

08003c9c <BMI088_ACCEL_NS_H>:
 * @note:	参考的大疆源码BMI088传感器的温度补偿控制
            温度传感器应该是挂载在加速度传感器上，所以读取温度
            需要使用加速度传感器
 ****************************************************/
static void BMI088_ACCEL_NS_H(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET); // 没写完的，先这样吧
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	2104      	movs	r1, #4
 8003ca4:	4802      	ldr	r0, [pc, #8]	@ (8003cb0 <BMI088_ACCEL_NS_H+0x14>)
 8003ca6:	f005 fd3d 	bl	8009724 <HAL_GPIO_WritePin>
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	58020000 	.word	0x58020000

08003cb4 <BMI088_ACCEL_NS_L>:
 * @note:	参考的大疆源码BMI088传感器的温度补偿控制
            温度传感器应该是挂载在加速度传感器上，所以读取温度
            需要使用加速度传感器
 ****************************************************/
static void BMI088_ACCEL_NS_L(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET); // 没写完的，先这样吧
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2104      	movs	r1, #4
 8003cbc:	4802      	ldr	r0, [pc, #8]	@ (8003cc8 <BMI088_ACCEL_NS_L+0x14>)
 8003cbe:	f005 fd31 	bl	8009724 <HAL_GPIO_WritePin>
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	58020000 	.word	0x58020000

08003ccc <BMI088_read_write_byte>:
 * @author:
 * @date:2022/05/31
 * @note:	该函数与 BMI088_Write_Reg 函数不同，使用的时候需要注意
 ****************************************************/
static uint8_t BMI088_read_write_byte(SPI_HandleTypeDef *hspi, uint8_t txdata)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(hspi, &txdata, &rx_data, 1, 1000);
 8003cd8:	f107 020f 	add.w	r2, r7, #15
 8003cdc:	1cf9      	adds	r1, r7, #3
 8003cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f00a f890 	bl	800de0c <HAL_SPI_TransmitReceive>
    return rx_data;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <BMI088_read_muli_reg>:
 * @author:
 * @date:2022/05/31
 * @note:	参考的大疆源码BMI088传感器的温度补偿控制
 ****************************************************/
static void BMI088_read_muli_reg(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	460b      	mov	r3, r1
 8003d04:	72fb      	strb	r3, [r7, #11]
 8003d06:	4613      	mov	r3, r2
 8003d08:	72bb      	strb	r3, [r7, #10]
    BMI088_read_write_byte(hspi, reg | 0x80);
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	4619      	mov	r1, r3
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff ffd9 	bl	8003ccc <BMI088_read_write_byte>
    while (len != 0)
 8003d1a:	e00d      	b.n	8003d38 <BMI088_read_muli_reg+0x42>
    {
        *buf = BMI088_read_write_byte(hspi, 0x55); // 虚拟字节
 8003d1c:	2155      	movs	r1, #85	@ 0x55
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff ffd4 	bl	8003ccc <BMI088_read_write_byte>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	701a      	strb	r2, [r3, #0]
        buf++;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	607b      	str	r3, [r7, #4]
        len--;
 8003d32:	7abb      	ldrb	r3, [r7, #10]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	72bb      	strb	r3, [r7, #10]
    while (len != 0)
 8003d38:	7abb      	ldrb	r3, [r7, #10]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ee      	bne.n	8003d1c <BMI088_read_muli_reg+0x26>
    }
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <BMI088_FLOAT_ACC_GYRO_Init>:
 * @author:
 * @date:2022/05/31
 * @note:
 ****************************************************/
uint8_t BMI088_FLOAT_ACC_GYRO_Init(SPI_HandleTypeDef *hspi)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

    BMI088_ACC_Congfig(hspi, FLOAT_IMU);
 8003d50:	2101      	movs	r1, #1
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fdf4 	bl	8003940 <BMI088_ACC_Congfig>
    BMI088_GYRO_Congfig(hspi, FLOAT_IMU);
 8003d58:	2101      	movs	r1, #1
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fede 	bl	8003b1c <BMI088_GYRO_Congfig>

    for (int i = 0; i < 3; i++) // 初始化滤波器
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e01e      	b.n	8003da4 <BMI088_FLOAT_ACC_GYRO_Init+0x5c>
    {
        lpf_set_cutoff_frequency(&accel_filter[i], 800, 20);
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4a10      	ldr	r2, [pc, #64]	@ (8003db4 <BMI088_FLOAT_ACC_GYRO_Init+0x6c>)
 8003d72:	4413      	add	r3, r2
 8003d74:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8003d78:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8003db8 <BMI088_FLOAT_ACC_GYRO_Init+0x70>
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fafb 	bl	8004378 <lpf_set_cutoff_frequency>
        lpf_set_cutoff_frequency(&gyro_filter[i], 800, 20);
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003dbc <BMI088_FLOAT_ACC_GYRO_Init+0x74>)
 8003d8e:	4413      	add	r3, r2
 8003d90:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8003d94:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003db8 <BMI088_FLOAT_ACC_GYRO_Init+0x70>
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 faed 	bl	8004378 <lpf_set_cutoff_frequency>
    for (int i = 0; i < 3; i++) // 初始化滤波器
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3301      	adds	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	dddd      	ble.n	8003d66 <BMI088_FLOAT_ACC_GYRO_Init+0x1e>
    }

    return 1;
 8003daa:	2301      	movs	r3, #1
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	24000a98 	.word	0x24000a98
 8003db8:	44480000 	.word	0x44480000
 8003dbc:	24000ae0 	.word	0x24000ae0

08003dc0 <HAL_GPIO_EXTI_Callback>:
 * @note:	I/O外部中断回调函数，用于接收陀螺仪和加速度数据
 ****************************************************/
/* 定义变量用于读取传输频率（中断触发） */
int16_t Gyro_Cnt = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
    //    if( mtime.Init_OK!=1)
    //        return;

    switch (GPIO_Pin)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	f200 8124 	bhi.w	800401c <HAL_GPIO_EXTI_Callback+0x25c>
 8003dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <HAL_GPIO_EXTI_Callback+0x1c>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e1d 	.word	0x08003e1d
 8003de0:	08003ea3 	.word	0x08003ea3
 8003de4:	0800401d 	.word	0x0800401d
 8003de8:	0800401d 	.word	0x0800401d
 8003dec:	0800401d 	.word	0x0800401d
 8003df0:	0800401d 	.word	0x0800401d
 8003df4:	0800401d 	.word	0x0800401d
 8003df8:	08003fa3 	.word	0x08003fa3
 8003dfc:	0800401d 	.word	0x0800401d
 8003e00:	0800401d 	.word	0x0800401d
 8003e04:	0800401d 	.word	0x0800401d
 8003e08:	0800401d 	.word	0x0800401d
 8003e0c:	0800401d 	.word	0x0800401d
 8003e10:	0800401d 	.word	0x0800401d
 8003e14:	0800401d 	.word	0x0800401d
 8003e18:	08003f1d 	.word	0x08003f1d

        //     //测试bmi088ACC的中断输出
        //     uint8_t TEXTACC[1] = {0x01};
        //         HAL_UART_Transmit(&huart4, TEXTACC, 1, 100); //发送数据给串口

        BMI088.ACC.buff[0] = BMI088_Read_ACC(&hspi1, 0X12, FLOAT_IMU);
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2112      	movs	r1, #18
 8003e20:	4883      	ldr	r0, [pc, #524]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003e22:	f7ff fcbd 	bl	80037a0 <BMI088_Read_ACC>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b82      	ldr	r3, [pc, #520]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003e2c:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        BMI088.ACC.buff[1] = BMI088_Read_ACC(&hspi1, 0X13, FLOAT_IMU);
 8003e30:	2201      	movs	r2, #1
 8003e32:	2113      	movs	r1, #19
 8003e34:	487e      	ldr	r0, [pc, #504]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003e36:	f7ff fcb3 	bl	80037a0 <BMI088_Read_ACC>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003e40:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
        BMI088.ACC.buff[2] = BMI088_Read_ACC(&hspi1, 0X14, FLOAT_IMU);
 8003e44:	2201      	movs	r2, #1
 8003e46:	2114      	movs	r1, #20
 8003e48:	4879      	ldr	r0, [pc, #484]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003e4a:	f7ff fca9 	bl	80037a0 <BMI088_Read_ACC>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b78      	ldr	r3, [pc, #480]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003e54:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        BMI088.ACC.buff[3] = BMI088_Read_ACC(&hspi1, 0X15, FLOAT_IMU);
 8003e58:	2201      	movs	r2, #1
 8003e5a:	2115      	movs	r1, #21
 8003e5c:	4874      	ldr	r0, [pc, #464]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003e5e:	f7ff fc9f 	bl	80037a0 <BMI088_Read_ACC>
 8003e62:	4603      	mov	r3, r0
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b73      	ldr	r3, [pc, #460]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003e68:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
        BMI088.ACC.buff[4] = BMI088_Read_ACC(&hspi1, 0X16, FLOAT_IMU);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2116      	movs	r1, #22
 8003e70:	486f      	ldr	r0, [pc, #444]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003e72:	f7ff fc95 	bl	80037a0 <BMI088_Read_ACC>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b6e      	ldr	r3, [pc, #440]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003e7c:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
        BMI088.ACC.buff[5] = BMI088_Read_ACC(&hspi1, 0X17, FLOAT_IMU); // 12--17为加速度计xyz信息
 8003e80:	2201      	movs	r2, #1
 8003e82:	2117      	movs	r1, #23
 8003e84:	486a      	ldr	r0, [pc, #424]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003e86:	f7ff fc8b 	bl	80037a0 <BMI088_Read_ACC>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b69      	ldr	r3, [pc, #420]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003e90:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

        /* 用于读取传感器的温度 */
        BMI088_accel_read_muli_reg(&hspi1, BMI088_TEMP_M, BMI088.temp_originalbuff, 2); // 读取raw温度数据
 8003e94:	2302      	movs	r3, #2
 8003e96:	4a68      	ldr	r2, [pc, #416]	@ (8004038 <HAL_GPIO_EXTI_Callback+0x278>)
 8003e98:	2122      	movs	r1, #34	@ 0x22
 8003e9a:	4865      	ldr	r0, [pc, #404]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003e9c:	f7ff fbf4 	bl	8003688 <BMI088_accel_read_muli_reg>
        break;
 8003ea0:	e0bd      	b.n	800401e <HAL_GPIO_EXTI_Callback+0x25e>

        //     //测试bmi088GYRO的中断输出
        //     uint8_t TEXTGYRO[1] = {0x02};
        //         HAL_UART_Transmit(&huart4, TEXTGYRO, 1, 100); //发送数据给串口

        BMI088.GYRO.buff[0] = BMI088_Read_GYRO(&hspi1, 0X02, FLOAT_IMU);
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4862      	ldr	r0, [pc, #392]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003ea8:	f7ff fc32 	bl	8003710 <BMI088_Read_GYRO>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b60      	ldr	r3, [pc, #384]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003eb2:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
        BMI088.GYRO.buff[1] = BMI088_Read_GYRO(&hspi1, 0X03, FLOAT_IMU);
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2103      	movs	r1, #3
 8003eba:	485d      	ldr	r0, [pc, #372]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003ebc:	f7ff fc28 	bl	8003710 <BMI088_Read_GYRO>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003ec6:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
        BMI088.GYRO.buff[2] = BMI088_Read_GYRO(&hspi1, 0X04, FLOAT_IMU);
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2104      	movs	r1, #4
 8003ece:	4858      	ldr	r0, [pc, #352]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003ed0:	f7ff fc1e 	bl	8003710 <BMI088_Read_GYRO>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b56      	ldr	r3, [pc, #344]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003eda:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
        BMI088.GYRO.buff[3] = BMI088_Read_GYRO(&hspi1, 0X05, FLOAT_IMU);
 8003ede:	2201      	movs	r2, #1
 8003ee0:	2105      	movs	r1, #5
 8003ee2:	4853      	ldr	r0, [pc, #332]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003ee4:	f7ff fc14 	bl	8003710 <BMI088_Read_GYRO>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b51      	ldr	r3, [pc, #324]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003eee:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
        BMI088.GYRO.buff[4] = BMI088_Read_GYRO(&hspi1, 0X06, FLOAT_IMU);
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	2106      	movs	r1, #6
 8003ef6:	484e      	ldr	r0, [pc, #312]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003ef8:	f7ff fc0a 	bl	8003710 <BMI088_Read_GYRO>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b4c      	ldr	r3, [pc, #304]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003f02:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
        BMI088.GYRO.buff[5] = BMI088_Read_GYRO(&hspi1, 0X07, FLOAT_IMU); // 2--7为陀螺仪xyz信息
 8003f06:	2201      	movs	r2, #1
 8003f08:	2107      	movs	r1, #7
 8003f0a:	4849      	ldr	r0, [pc, #292]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x270>)
 8003f0c:	f7ff fc00 	bl	8003710 <BMI088_Read_GYRO>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b47      	ldr	r3, [pc, #284]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x274>)
 8003f16:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
        /* 陀螺仪的引脚触发中断一次，计数+1，用于确定陀螺仪传感器实际的传输频率*/
        break;
 8003f1a:	e080      	b.n	800401e <HAL_GPIO_EXTI_Callback+0x25e>

        //    //测试bmi088ACC的中断输出
        //    uint8_t TEXTACC2[1] = {0x03};
        //        HAL_UART_Transmit(&huart4, TEXTACC2, 1, 100); //发送数据给串口

        BMI088_2.ACC.buff[0] = BMI088_Read_ACC(&hspi4, 0X12, FLOAT_IMU);
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	2112      	movs	r1, #18
 8003f20:	4846      	ldr	r0, [pc, #280]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003f22:	f7ff fc3d 	bl	80037a0 <BMI088_Read_ACC>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b45      	ldr	r3, [pc, #276]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003f2c:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        BMI088_2.ACC.buff[1] = BMI088_Read_ACC(&hspi4, 0X13, FLOAT_IMU);
 8003f30:	2201      	movs	r2, #1
 8003f32:	2113      	movs	r1, #19
 8003f34:	4841      	ldr	r0, [pc, #260]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003f36:	f7ff fc33 	bl	80037a0 <BMI088_Read_ACC>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b40      	ldr	r3, [pc, #256]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003f40:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
        BMI088_2.ACC.buff[2] = BMI088_Read_ACC(&hspi4, 0X14, FLOAT_IMU);
 8003f44:	2201      	movs	r2, #1
 8003f46:	2114      	movs	r1, #20
 8003f48:	483c      	ldr	r0, [pc, #240]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003f4a:	f7ff fc29 	bl	80037a0 <BMI088_Read_ACC>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003f54:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        BMI088_2.ACC.buff[3] = BMI088_Read_ACC(&hspi4, 0X15, FLOAT_IMU);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2115      	movs	r1, #21
 8003f5c:	4837      	ldr	r0, [pc, #220]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003f5e:	f7ff fc1f 	bl	80037a0 <BMI088_Read_ACC>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003f68:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
        BMI088_2.ACC.buff[4] = BMI088_Read_ACC(&hspi4, 0X16, FLOAT_IMU);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	2116      	movs	r1, #22
 8003f70:	4832      	ldr	r0, [pc, #200]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003f72:	f7ff fc15 	bl	80037a0 <BMI088_Read_ACC>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b31      	ldr	r3, [pc, #196]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003f7c:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
        BMI088_2.ACC.buff[5] = BMI088_Read_ACC(&hspi4, 0X17, FLOAT_IMU); // 12--17为加速度计xyz信息
 8003f80:	2201      	movs	r2, #1
 8003f82:	2117      	movs	r1, #23
 8003f84:	482d      	ldr	r0, [pc, #180]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003f86:	f7ff fc0b 	bl	80037a0 <BMI088_Read_ACC>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003f90:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

        /* 用于读取传感器的温度 */
        BMI088_accel_read_muli_reg(&hspi4, BMI088_TEMP_M, BMI088.temp_originalbuff, 2); // 读取raw温度数据
 8003f94:	2302      	movs	r3, #2
 8003f96:	4a28      	ldr	r2, [pc, #160]	@ (8004038 <HAL_GPIO_EXTI_Callback+0x278>)
 8003f98:	2122      	movs	r1, #34	@ 0x22
 8003f9a:	4828      	ldr	r0, [pc, #160]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003f9c:	f7ff fb74 	bl	8003688 <BMI088_accel_read_muli_reg>
        break;
 8003fa0:	e03d      	b.n	800401e <HAL_GPIO_EXTI_Callback+0x25e>

        //    //测试bmi088GYRO的中断输出
        //    uint8_t TEXTGYRO2[1] = {0x04};
        //        HAL_UART_Transmit(&huart4, TEXTGYRO2, 1, 100); //发送数据给串口

        BMI088_2.GYRO.buff[0] = BMI088_Read_GYRO(&hspi4, 0X02, FLOAT_IMU);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4825      	ldr	r0, [pc, #148]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003fa8:	f7ff fbb2 	bl	8003710 <BMI088_Read_GYRO>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b23      	ldr	r3, [pc, #140]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003fb2:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
        BMI088_2.GYRO.buff[1] = BMI088_Read_GYRO(&hspi4, 0X03, FLOAT_IMU);
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	2103      	movs	r1, #3
 8003fba:	4820      	ldr	r0, [pc, #128]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003fbc:	f7ff fba8 	bl	8003710 <BMI088_Read_GYRO>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003fc6:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
        BMI088_2.GYRO.buff[2] = BMI088_Read_GYRO(&hspi4, 0X04, FLOAT_IMU);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2104      	movs	r1, #4
 8003fce:	481b      	ldr	r0, [pc, #108]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003fd0:	f7ff fb9e 	bl	8003710 <BMI088_Read_GYRO>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003fda:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
        BMI088_2.GYRO.buff[3] = BMI088_Read_GYRO(&hspi4, 0X05, FLOAT_IMU);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	2105      	movs	r1, #5
 8003fe2:	4816      	ldr	r0, [pc, #88]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003fe4:	f7ff fb94 	bl	8003710 <BMI088_Read_GYRO>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8003fee:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
        BMI088_2.GYRO.buff[4] = BMI088_Read_GYRO(&hspi4, 0X06, FLOAT_IMU);
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2106      	movs	r1, #6
 8003ff6:	4811      	ldr	r0, [pc, #68]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003ff8:	f7ff fb8a 	bl	8003710 <BMI088_Read_GYRO>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8004002:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
        BMI088_2.GYRO.buff[5] = BMI088_Read_GYRO(&hspi4, 0X07, FLOAT_IMU); // 2--7为陀螺仪xyz信息
 8004006:	2201      	movs	r2, #1
 8004008:	2107      	movs	r1, #7
 800400a:	480c      	ldr	r0, [pc, #48]	@ (800403c <HAL_GPIO_EXTI_Callback+0x27c>)
 800400c:	f7ff fb80 	bl	8003710 <BMI088_Read_GYRO>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x280>)
 8004016:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
        /* 陀螺仪的引脚触发中断一次，计数+1，用于确定陀螺仪传感器实际的传输频率*/
        break;
 800401a:	e000      	b.n	800401e <HAL_GPIO_EXTI_Callback+0x25e>

    default:
        break;
 800401c:	bf00      	nop
    }

    BARO_GPIO_EXTI_Callback(GPIO_Pin);
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fa0d 	bl	8003440 <BARO_GPIO_EXTI_Callback>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	240003e4 	.word	0x240003e4
 8004034:	24000b2c 	.word	0x24000b2c
 8004038:	24000bf6 	.word	0x24000bf6
 800403c:	240004f4 	.word	0x240004f4
 8004040:	24000c30 	.word	0x24000c30

08004044 <BMI088_Read_Gyro_Data>:
 * @retval  将读取出来的数据赋值给原始数
 *	@note	 data数据长度是3  原始数据长度是3  采集出来的数据就是原始数据
 * @attention 从这开始实际的频率编程 2000hz
 */
void BMI088_Read_Gyro_Data(bool a)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
    if (!a)
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <BMI088_Read_Gyro_Data+0x44>
    {
        BMI088.gyro.origin[xx] = BMI088.GYRO.data[xx]; // union联合体地址共享
 800405a:	4b19      	ldr	r3, [pc, #100]	@ (80040c0 <BMI088_Read_Gyro_Data+0x7c>)
 800405c:	f9b3 20c4 	ldrsh.w	r2, [r3, #196]	@ 0xc4
 8004060:	4b17      	ldr	r3, [pc, #92]	@ (80040c0 <BMI088_Read_Gyro_Data+0x7c>)
 8004062:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
        BMI088.gyro.origin[yy] = BMI088.GYRO.data[yy];
 8004066:	4b16      	ldr	r3, [pc, #88]	@ (80040c0 <BMI088_Read_Gyro_Data+0x7c>)
 8004068:	f9b3 20c6 	ldrsh.w	r2, [r3, #198]	@ 0xc6
 800406c:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <BMI088_Read_Gyro_Data+0x7c>)
 800406e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
        BMI088.gyro.origin[zz] = -BMI088.GYRO.data[zz];
 8004072:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <BMI088_Read_Gyro_Data+0x7c>)
 8004074:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8004078:	b29b      	uxth	r3, r3
 800407a:	425b      	negs	r3, r3
 800407c:	b29b      	uxth	r3, r3
 800407e:	b21a      	sxth	r2, r3
 8004080:	4b0f      	ldr	r3, [pc, #60]	@ (80040c0 <BMI088_Read_Gyro_Data+0x7c>)
 8004082:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    {
        BMI088_2.gyro.origin[xx] = BMI088_2.GYRO.data[xx]; // union联合体地址共享
        BMI088_2.gyro.origin[yy] = BMI088_2.GYRO.data[yy];
        BMI088_2.gyro.origin[zz] = -BMI088_2.GYRO.data[zz];
    }
}
 8004086:	e015      	b.n	80040b4 <BMI088_Read_Gyro_Data+0x70>
        BMI088_2.gyro.origin[xx] = BMI088_2.GYRO.data[xx]; // union联合体地址共享
 8004088:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <BMI088_Read_Gyro_Data+0x80>)
 800408a:	f9b3 20c4 	ldrsh.w	r2, [r3, #196]	@ 0xc4
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <BMI088_Read_Gyro_Data+0x80>)
 8004090:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
        BMI088_2.gyro.origin[yy] = BMI088_2.GYRO.data[yy];
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <BMI088_Read_Gyro_Data+0x80>)
 8004096:	f9b3 20c6 	ldrsh.w	r2, [r3, #198]	@ 0xc6
 800409a:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <BMI088_Read_Gyro_Data+0x80>)
 800409c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
        BMI088_2.gyro.origin[zz] = -BMI088_2.GYRO.data[zz];
 80040a0:	4b08      	ldr	r3, [pc, #32]	@ (80040c4 <BMI088_Read_Gyro_Data+0x80>)
 80040a2:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	425b      	negs	r3, r3
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	b21a      	sxth	r2, r3
 80040ae:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <BMI088_Read_Gyro_Data+0x80>)
 80040b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	24000b2c 	.word	0x24000b2c
 80040c4:	24000c30 	.word	0x24000c30

080040c8 <BMI088_Read_Acc_Data>:
 * @retval  将读取出来的数据赋值给原始数
 *	@note	 data数据长度是3  原始数据长度是3  采集出来的数据就是原始数据
 * @attention 从这开始实际的频率编程 1600hz
 */
void BMI088_Read_Acc_Data(bool a)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	71fb      	strb	r3, [r7, #7]
    if (!a)
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f083 0301 	eor.w	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d013      	beq.n	8004106 <BMI088_Read_Acc_Data+0x3e>
    {
        BMI088.acc.origin[xx] = BMI088.ACC.data[yy];
 80040de:	4b16      	ldr	r3, [pc, #88]	@ (8004138 <BMI088_Read_Acc_Data+0x70>)
 80040e0:	f9b3 20c0 	ldrsh.w	r2, [r3, #192]	@ 0xc0
 80040e4:	4b14      	ldr	r3, [pc, #80]	@ (8004138 <BMI088_Read_Acc_Data+0x70>)
 80040e6:	801a      	strh	r2, [r3, #0]
        BMI088.acc.origin[yy] = -BMI088.ACC.data[xx];
 80040e8:	4b13      	ldr	r3, [pc, #76]	@ (8004138 <BMI088_Read_Acc_Data+0x70>)
 80040ea:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	425b      	negs	r3, r3
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	b21a      	sxth	r2, r3
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <BMI088_Read_Acc_Data+0x70>)
 80040f8:	805a      	strh	r2, [r3, #2]
        BMI088.acc.origin[zz] = BMI088.ACC.data[zz];
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <BMI088_Read_Acc_Data+0x70>)
 80040fc:	f9b3 20c2 	ldrsh.w	r2, [r3, #194]	@ 0xc2
 8004100:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <BMI088_Read_Acc_Data+0x70>)
 8004102:	809a      	strh	r2, [r3, #4]
    {
        BMI088_2.acc.origin[xx] = BMI088_2.ACC.data[yy];
        BMI088_2.acc.origin[yy] = -BMI088_2.ACC.data[xx];
        BMI088_2.acc.origin[zz] = BMI088_2.ACC.data[zz];
    }
}
 8004104:	e012      	b.n	800412c <BMI088_Read_Acc_Data+0x64>
        BMI088_2.acc.origin[xx] = BMI088_2.ACC.data[yy];
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <BMI088_Read_Acc_Data+0x74>)
 8004108:	f9b3 20c0 	ldrsh.w	r2, [r3, #192]	@ 0xc0
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <BMI088_Read_Acc_Data+0x74>)
 800410e:	801a      	strh	r2, [r3, #0]
        BMI088_2.acc.origin[yy] = -BMI088_2.ACC.data[xx];
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <BMI088_Read_Acc_Data+0x74>)
 8004112:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8004116:	b29b      	uxth	r3, r3
 8004118:	425b      	negs	r3, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	b21a      	sxth	r2, r3
 800411e:	4b07      	ldr	r3, [pc, #28]	@ (800413c <BMI088_Read_Acc_Data+0x74>)
 8004120:	805a      	strh	r2, [r3, #2]
        BMI088_2.acc.origin[zz] = BMI088_2.ACC.data[zz];
 8004122:	4b06      	ldr	r3, [pc, #24]	@ (800413c <BMI088_Read_Acc_Data+0x74>)
 8004124:	f9b3 20c2 	ldrsh.w	r2, [r3, #194]	@ 0xc2
 8004128:	4b04      	ldr	r3, [pc, #16]	@ (800413c <BMI088_Read_Acc_Data+0x74>)
 800412a:	809a      	strh	r2, [r3, #4]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	24000b2c 	.word	0x24000b2c
 800413c:	24000c30 	.word	0x24000c30

08004140 <IMU_Read>:
 * @file: MYGYROData.c
 * @brief:读取加速度/陀螺仪数据并进行单位转换，并转换为 m/(s^2)和°/s
 * @note:这个函数是对外提供的接口函数，用户调用这个函数可以获取到加速度/陀螺仪数据
 ****************************************************/
void IMU_Read(bool a)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
    if (!a)
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	f083 0301 	eor.w	r3, r3, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 809a 	beq.w	800428c <IMU_Read+0x14c>
    {
        mpu *mympu = &BMI088; // 使用指针去操作BMI088的结构体
 8004158:	4b81      	ldr	r3, [pc, #516]	@ (8004360 <IMU_Read+0x220>)
 800415a:	60bb      	str	r3, [r7, #8]

        BMI088_Read_Gyro_Data(a); /* 读取陀螺仪数据 */
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff70 	bl	8004044 <BMI088_Read_Gyro_Data>
        BMI088_Read_Acc_Data(a);  /* 读取加速度数据 */
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff ffae 	bl	80040c8 <BMI088_Read_Acc_Data>

        for (int i = 0; i < 3; i++)
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e087      	b.n	8004282 <IMU_Read+0x142>
        {
            mympu->gyro.dps[i] = mympu->gyro.origin[i] * MPU_GYRO_TO_DPS*0.125f*0.18f - gyro_offset[i];
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	3228      	adds	r2, #40	@ 0x28
 8004178:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004184:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8004348 <IMU_Read+0x208>
 8004188:	ee27 7b06 	vmul.f64	d7, d7, d6
 800418c:	eeb4 6b00 	vmov.f64	d6, #64	@ 0x3e000000  0.125
 8004190:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004194:	ed9f 6b6e 	vldr	d6, [pc, #440]	@ 8004350 <IMU_Read+0x210>
 8004198:	ee27 6b06 	vmul.f64	d6, d7, d6
 800419c:	4a71      	ldr	r2, [pc, #452]	@ (8004364 <IMU_Read+0x224>)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	edd3 7a00 	vldr	s15, [r3]
 80041a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80041b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	3324      	adds	r3, #36	@ 0x24
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	edc3 7a00 	vstr	s15, [r3]
            mympu->gyro.dps[i] = lpf_allpy(&gyro_filter[i], mympu->gyro.dps[i]);
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4a66      	ldr	r2, [pc, #408]	@ (8004368 <IMU_Read+0x228>)
 80041d0:	1899      	adds	r1, r3, r2
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3324      	adds	r3, #36	@ 0x24
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	eeb0 0a67 	vmov.f32	s0, s15
 80041e6:	4608      	mov	r0, r1
 80041e8:	f000 f958 	bl	800449c <lpf_allpy>
 80041ec:	eef0 7a40 	vmov.f32	s15, s0
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3324      	adds	r3, #36	@ 0x24
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	edc3 7a00 	vstr	s15, [r3]

            mympu->acc.m_s_2[i] = mympu->acc.origin[i] * MPU_ACCE_M_S_2 - accel_offset[i];
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004210:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8004358 <IMU_Read+0x218>
 8004214:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004218:	4a54      	ldr	r2, [pc, #336]	@ (800436c <IMU_Read+0x22c>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	edd3 7a00 	vldr	s15, [r3]
 8004224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004228:	ee36 7b47 	vsub.f64	d7, d6, d7
 800422c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	3310      	adds	r3, #16
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	edc3 7a00 	vstr	s15, [r3]
            mympu->acc.m_s_2[i] = lpf_allpy(&accel_filter[i], mympu->acc.origin[i]);
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4a49      	ldr	r2, [pc, #292]	@ (8004370 <IMU_Read+0x230>)
 800424c:	1899      	adds	r1, r3, r2
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425e:	eeb0 0a67 	vmov.f32	s0, s15
 8004262:	4608      	mov	r0, r1
 8004264:	f000 f91a 	bl	800449c <lpf_allpy>
 8004268:	eef0 7a40 	vmov.f32	s15, s0
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3310      	adds	r3, #16
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b02      	cmp	r3, #2
 8004286:	f77f af74 	ble.w	8004172 <IMU_Read+0x32>

            mympu->acc.m_s_2[i] = mympu->acc.origin[i] * MPU_ACCE_M_S_2 - accel_offset[i];
//            mympu->acc.m_s_2[i] = lpf_allpy(&accel_filter[i], mympu->acc.origin[i]);
        }
    }
}
 800428a:	e057      	b.n	800433c <IMU_Read+0x1fc>
        mpu *mympu = &BMI088_2; // 使用指针去操作BMI088_2的结构体
 800428c:	4b39      	ldr	r3, [pc, #228]	@ (8004374 <IMU_Read+0x234>)
 800428e:	60fb      	str	r3, [r7, #12]
        BMI088_Read_Gyro_Data(a); /* 读取陀螺仪数据 */
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fed6 	bl	8004044 <BMI088_Read_Gyro_Data>
        BMI088_Read_Acc_Data(a);  /* 读取加速度数据 */
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ff14 	bl	80040c8 <BMI088_Read_Acc_Data>
        for (int i = 0; i < 3; i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e047      	b.n	8004336 <IMU_Read+0x1f6>
            mympu->gyro.dps[i] = mympu->gyro.origin[i] * MPU_GYRO_TO_DPS*0.125f - gyro_offset[i];
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	3228      	adds	r2, #40	@ 0x28
 80042ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80042b8:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8004348 <IMU_Read+0x208>
 80042bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80042c0:	eeb4 6b00 	vmov.f64	d6, #64	@ 0x3e000000  0.125
 80042c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80042c8:	4a26      	ldr	r2, [pc, #152]	@ (8004364 <IMU_Read+0x224>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80042dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3324      	adds	r3, #36	@ 0x24
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	3304      	adds	r3, #4
 80042ec:	edc3 7a00 	vstr	s15, [r3]
            mympu->acc.m_s_2[i] = mympu->acc.origin[i] * MPU_ACCE_M_S_2 - accel_offset[i];
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80042f8:	ee07 3a90 	vmov	s15, r3
 80042fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004300:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8004358 <IMU_Read+0x218>
 8004304:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004308:	4a18      	ldr	r2, [pc, #96]	@ (800436c <IMU_Read+0x22c>)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	edd3 7a00 	vldr	s15, [r3]
 8004314:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004318:	ee36 7b47 	vsub.f64	d7, d6, d7
 800431c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	3310      	adds	r3, #16
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3301      	adds	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b02      	cmp	r3, #2
 800433a:	ddb4      	ble.n	80042a6 <IMU_Read+0x166>
}
 800433c:	bf00      	nop
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	f3af 8000 	nop.w
 8004348:	00000000 	.word	0x00000000
 800434c:	3faf4000 	.word	0x3faf4000
 8004350:	80000000 	.word	0x80000000
 8004354:	3fc70a3d 	.word	0x3fc70a3d
 8004358:	66666667 	.word	0x66666667
 800435c:	3f7d6666 	.word	0x3f7d6666
 8004360:	24000b2c 	.word	0x24000b2c
 8004364:	24000a8c 	.word	0x24000a8c
 8004368:	24000ae0 	.word	0x24000ae0
 800436c:	24000a80 	.word	0x24000a80
 8004370:	24000a98 	.word	0x24000a98
 8004374:	24000c30 	.word	0x24000c30

08004378 <lpf_set_cutoff_frequency>:
#ifndef M_PI_F
#define M_PI_F  3.14159265358979323846f
#endif

void lpf_set_cutoff_frequency(low_pass_filter_t *p, float sample_freq, float cutoff_freq)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	ed87 0a02 	vstr	s0, [r7, #8]
 8004384:	edc7 0a01 	vstr	s1, [r7, #4]
	p->_cutoff_freq = cutoff_freq;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]

	if (p->_cutoff_freq <= 0.0f) {
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	edd3 7a00 	vldr	s15, [r3]
 8004394:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439c:	d814      	bhi.n	80043c8 <lpf_set_cutoff_frequency+0x50>
		p->_a1 = 0.0f;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	605a      	str	r2, [r3, #4]
		p->_a2 = 0.0f;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	609a      	str	r2, [r3, #8]
		p->_b0 = 0.0f;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	60da      	str	r2, [r3, #12]

		p->_delay_element_1 = 0.0f;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
		p->_delay_element_2 = 0.0f;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	615a      	str	r2, [r3, #20]
		p->_a2 = (1.0f - 2.0f * cosf(M_PI_F / 4.0f) * ohm + ohm * ohm) / c;

		p->_delay_element_1 = 0.0f;
		p->_delay_element_2 = 0.0f;
	}
}
 80043c6:	e060      	b.n	800448a <lpf_set_cutoff_frequency+0x112>
		float fr = sample_freq / cutoff_freq;
 80043c8:	edd7 6a02 	vldr	s13, [r7, #8]
 80043cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80043d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d4:	edc7 7a07 	vstr	s15, [r7, #28]
		float ohm = tanf(M_PI_F / fr);
 80043d8:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8004494 <lpf_set_cutoff_frequency+0x11c>
 80043dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80043e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e4:	eeb0 0a47 	vmov.f32	s0, s14
 80043e8:	f012 fa74 	bl	80168d4 <tanf>
 80043ec:	ed87 0a06 	vstr	s0, [r7, #24]
		float c = 1.0f + 2.0f * cosf(M_PI_F / 4.0f) * ohm + ohm * ohm;
 80043f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80043f4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004498 <lpf_set_cutoff_frequency+0x120>
 80043f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004400:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004404:	edd7 7a06 	vldr	s15, [r7, #24]
 8004408:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800440c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004410:	edc7 7a05 	vstr	s15, [r7, #20]
		p->_b0 = ohm * ohm / c;
 8004414:	edd7 7a06 	vldr	s15, [r7, #24]
 8004418:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800441c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	edc3 7a03 	vstr	s15, [r3, #12]
		p->_a1 = 2.0f * (ohm * ohm - 1.0f) / c;
 800442a:	edd7 7a06 	vldr	s15, [r7, #24]
 800442e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800443a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800443e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	edc3 7a01 	vstr	s15, [r3, #4]
		p->_a2 = (1.0f - 2.0f * cosf(M_PI_F / 4.0f) * ohm + ohm * ohm) / c;
 800444c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004450:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004498 <lpf_set_cutoff_frequency+0x120>
 8004454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800445c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004460:	edd7 7a06 	vldr	s15, [r7, #24]
 8004464:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004468:	ee77 6a27 	vadd.f32	s13, s14, s15
 800446c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	edc3 7a02 	vstr	s15, [r3, #8]
		p->_delay_element_1 = 0.0f;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
		p->_delay_element_2 = 0.0f;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	615a      	str	r2, [r3, #20]
}
 800448a:	bf00      	nop
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40490fdb 	.word	0x40490fdb
 8004498:	3fb504f3 	.word	0x3fb504f3

0800449c <lpf_allpy>:

float lpf_allpy(low_pass_filter_t *p, float sample)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	ed87 0a00 	vstr	s0, [r7]
	if (p->_cutoff_freq <= 0.0f) {
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	d801      	bhi.n	80044bc <lpf_allpy+0x20>
		// no filtering
		return sample;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	e04b      	b.n	8004554 <lpf_allpy+0xb8>
	}

	// do filtering
	float delay_element_0 = sample - p->_delay_element_1 * p->_a1 - p->_delay_element_2 * p->_a2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	ed93 7a04 	vldr	s14, [r3, #16]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80044c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044cc:	ed97 7a00 	vldr	s14, [r7]
 80044d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	edd3 6a05 	vldr	s13, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80044e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e8:	edc7 7a03 	vstr	s15, [r7, #12]

	if (!isfinite(delay_element_0)) {
 80044ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80044f0:	eef0 7ae7 	vabs.f32	s15, s15
 80044f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004568 <lpf_allpy+0xcc>
 80044f8:	eef4 7a47 	vcmp.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	d901      	bls.n	8004506 <lpf_allpy+0x6a>
		// don't allow bad values to propagate via the filter
		delay_element_0 = sample;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	60fb      	str	r3, [r7, #12]
	}

	float output = delay_element_0 * p->_b0 + p->_delay_element_1 * 2.0f * p->_b0 + p->_delay_element_2 * p->_b0;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	ed93 7a03 	vldr	s14, [r3, #12]
 800450c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	edd3 7a04 	vldr	s15, [r3, #16]
 800451a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	edd3 7a03 	vldr	s15, [r3, #12]
 8004524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edd3 6a05 	vldr	s13, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	edd3 7a03 	vldr	s15, [r3, #12]
 8004538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800453c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004540:	edc7 7a02 	vstr	s15, [r7, #8]

	p->_delay_element_2 = p->_delay_element_1;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	615a      	str	r2, [r3, #20]
	p->_delay_element_1 = delay_element_0;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	611a      	str	r2, [r3, #16]

	// return the value. should be no need to check limits
	return output;
 8004552:	68bb      	ldr	r3, [r7, #8]
}
 8004554:	ee07 3a90 	vmov	s15, r3
 8004558:	eeb0 0a67 	vmov.f32	s0, s15
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	7f7fffff 	.word	0x7f7fffff

0800456c <dshot_pack_one>:
 *        逻辑 1 → 300 个定时器 tick (≈ 2.5 µs)
 *        逻辑 0 → 150 个定时器 tick (≈ 1.25 µs)
 *   5. 结果写入 dshotBuf[motor][0..15]，供 DMA 循环发送
 */
static void dshot_pack_one(uint8_t motor, uint16_t throttle, uint8_t telemetry)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
 8004576:	460b      	mov	r3, r1
 8004578:	80bb      	strh	r3, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	71bb      	strb	r3, [r7, #6]
    /* 步骤 1：组装 12 位有效数据 */
    uint16_t value = ((throttle & 0x07FF) << 1) | (telemetry & 0x01);
 800457e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	b21a      	sxth	r2, r3
 8004586:	f640 73fe 	movw	r3, #4094	@ 0xffe
 800458a:	4013      	ands	r3, r2
 800458c:	b21a      	sxth	r2, r3
 800458e:	79bb      	ldrb	r3, [r7, #6]
 8004590:	b21b      	sxth	r3, r3
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	b21b      	sxth	r3, r3
 8004598:	4313      	orrs	r3, r2
 800459a:	b21b      	sxth	r3, r3
 800459c:	817b      	strh	r3, [r7, #10]

    /* 步骤 2：计算 4 位 CRC */
    uint16_t crc = (value ^ (value >> 4) ^ (value >> 8)) & 0x0F;
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	897b      	ldrh	r3, [r7, #10]
 80045a6:	4053      	eors	r3, r2
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	897b      	ldrh	r3, [r7, #10]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	4053      	eors	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	813b      	strh	r3, [r7, #8]

    /* 步骤 3：构成 16 位完整帧 */
    uint16_t frame = (value << 4) | crc;
 80045ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	b21a      	sxth	r2, r3
 80045c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	b21b      	sxth	r3, r3
 80045ca:	82fb      	strh	r3, [r7, #22]

    /* 步骤 4：逐位映射到占空比数组，MSB 先出 */
    for (int i = 0; i < DSHOT_BUF_LEN; ++i) {
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e017      	b.n	8004602 <dshot_pack_one+0x96>
        dshotBuf[motor][i] = (frame & 0x8000) ? 300 : 150;   // 0--150 tick = 1.25us, 1--300 ticks = 2.5us
 80045d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	da02      	bge.n	80045e0 <dshot_pack_one+0x74>
 80045da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80045de:	e000      	b.n	80045e2 <dshot_pack_one+0x76>
 80045e0:	2096      	movs	r0, #150	@ 0x96
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	4915      	ldr	r1, [pc, #84]	@ (800463c <dshot_pack_one+0xd0>)
 80045e6:	224c      	movs	r2, #76	@ 0x4c
 80045e8:	fb03 f202 	mul.w	r2, r3, r2
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	4602      	mov	r2, r0
 80045f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        frame <<= 1;                                    // 左移取下一位
 80045f6:	8afb      	ldrh	r3, [r7, #22]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < DSHOT_BUF_LEN; ++i) {
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	3301      	adds	r3, #1
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b0f      	cmp	r3, #15
 8004606:	dde4      	ble.n	80045d2 <dshot_pack_one+0x66>
    }
    /* 添加帧间隔 */
    for (int j = 16; j < DSHOT_division; ++j) {
 8004608:	2310      	movs	r3, #16
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e00c      	b.n	8004628 <dshot_pack_one+0xbc>
        dshotBuf[motor][j] = 0;
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	490a      	ldr	r1, [pc, #40]	@ (800463c <dshot_pack_one+0xd0>)
 8004612:	224c      	movs	r2, #76	@ 0x4c
 8004614:	fb03 f202 	mul.w	r2, r3, r2
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	2200      	movs	r2, #0
 800461e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int j = 16; j < DSHOT_division; ++j) {
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b4b      	cmp	r3, #75	@ 0x4b
 800462c:	ddef      	ble.n	800460e <dshot_pack_one+0xa2>
    }

}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	24000d34 	.word	0x24000d34

08004640 <DSHOT_Update>:
 *   - telemetry 固定为 0（不请求遥测）
 *   - 函数内部调用 dshot_pack_one 立即覆盖 DMA 循环缓冲区
 *   - 由于 DMA 为 Circular 模式，下一帧即使用新数据
 */
void DSHOT_Update(uint8_t motor, uint16_t throttle)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	460a      	mov	r2, r1
 800464a:	71fb      	strb	r3, [r7, #7]
 800464c:	4613      	mov	r3, r2
 800464e:	80bb      	strh	r3, [r7, #4]
    if (motor >= 4) return;           // 边界保护
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d806      	bhi.n	8004664 <DSHOT_Update+0x24>
    dshot_pack_one(motor, throttle, 0);   // 打包并刷新缓冲区
 8004656:	88b9      	ldrh	r1, [r7, #4]
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2200      	movs	r2, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff ff85 	bl	800456c <dshot_pack_one>
 8004662:	e000      	b.n	8004666 <DSHOT_Update+0x26>
    if (motor >= 4) return;           // 边界保护
 8004664:	bf00      	nop
}
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <DSHOT_Start>:
 *   1. 先给 4 路电机填充 0 油门，防止上电瞬间乱转
 *   2. 依次启动 TIM1_CH1~CH4 的 DMA 循环传输
 *   3. 后续只需调用 DSHOT_Update() 更新油门即可，无需再停/启 DMA
 */
void DSHOT_Start(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
    /* 预置 0 油门，ESC 上电初始化更安全 */
    for (uint8_t m = 0; m < 4; ++m) {
 8004672:	2300      	movs	r3, #0
 8004674:	71fb      	strb	r3, [r7, #7]
 8004676:	e007      	b.n	8004688 <DSHOT_Start+0x1c>
        DSHOT_Update(m, 0);
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ffdf 	bl	8004640 <DSHOT_Update>
    for (uint8_t m = 0; m < 4; ++m) {
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	3301      	adds	r3, #1
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d9f4      	bls.n	8004678 <DSHOT_Start+0xc>
    }

    /* 启动 4 路 DMA，Circular 模式，永不停止 */
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)dshotBuf[0], DSHOT_division);
 800468e:	234c      	movs	r3, #76	@ 0x4c
 8004690:	4a0d      	ldr	r2, [pc, #52]	@ (80046c8 <DSHOT_Start+0x5c>)
 8004692:	2100      	movs	r1, #0
 8004694:	480d      	ldr	r0, [pc, #52]	@ (80046cc <DSHOT_Start+0x60>)
 8004696:	f00a f973 	bl	800e980 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)dshotBuf[1], DSHOT_division);
 800469a:	234c      	movs	r3, #76	@ 0x4c
 800469c:	4a0c      	ldr	r2, [pc, #48]	@ (80046d0 <DSHOT_Start+0x64>)
 800469e:	2104      	movs	r1, #4
 80046a0:	480a      	ldr	r0, [pc, #40]	@ (80046cc <DSHOT_Start+0x60>)
 80046a2:	f00a f96d 	bl	800e980 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)dshotBuf[2], DSHOT_division);
 80046a6:	234c      	movs	r3, #76	@ 0x4c
 80046a8:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <DSHOT_Start+0x68>)
 80046aa:	2108      	movs	r1, #8
 80046ac:	4807      	ldr	r0, [pc, #28]	@ (80046cc <DSHOT_Start+0x60>)
 80046ae:	f00a f967 	bl	800e980 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4, (uint32_t *)dshotBuf[3], DSHOT_division);
 80046b2:	234c      	movs	r3, #76	@ 0x4c
 80046b4:	4a08      	ldr	r2, [pc, #32]	@ (80046d8 <DSHOT_Start+0x6c>)
 80046b6:	210c      	movs	r1, #12
 80046b8:	4804      	ldr	r0, [pc, #16]	@ (80046cc <DSHOT_Start+0x60>)
 80046ba:	f00a f961 	bl	800e980 <HAL_TIM_PWM_Start_DMA>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	24000d34 	.word	0x24000d34
 80046cc:	240005cc 	.word	0x240005cc
 80046d0:	24000dcc 	.word	0x24000dcc
 80046d4:	24000e64 	.word	0x24000e64
 80046d8:	24000efc 	.word	0x24000efc

080046dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e2:	2003      	movs	r0, #3
 80046e4:	f001 ff87 	bl	80065f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046e8:	f006 fb56 	bl	800ad98 <HAL_RCC_GetSysClockFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <HAL_Init+0x68>)
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	4913      	ldr	r1, [pc, #76]	@ (8004748 <HAL_Init+0x6c>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
 8004704:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004706:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <HAL_Init+0x68>)
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	4a0e      	ldr	r2, [pc, #56]	@ (8004748 <HAL_Init+0x6c>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	4a0b      	ldr	r2, [pc, #44]	@ (800474c <HAL_Init+0x70>)
 800471e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004720:	4a0b      	ldr	r2, [pc, #44]	@ (8004750 <HAL_Init+0x74>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004726:	200f      	movs	r0, #15
 8004728:	f7fd feb8 	bl	800249c <HAL_InitTick>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e002      	b.n	800473c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004736:	f7fd fe97 	bl	8002468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58024400 	.word	0x58024400
 8004748:	08018280 	.word	0x08018280
 800474c:	2400000c 	.word	0x2400000c
 8004750:	24000008 	.word	0x24000008

08004754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004758:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <HAL_IncTick+0x20>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_IncTick+0x24>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4413      	add	r3, r2
 8004764:	4a04      	ldr	r2, [pc, #16]	@ (8004778 <HAL_IncTick+0x24>)
 8004766:	6013      	str	r3, [r2, #0]
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	24000014 	.word	0x24000014
 8004778:	24000f94 	.word	0x24000f94

0800477c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return uwTick;
 8004780:	4b03      	ldr	r3, [pc, #12]	@ (8004790 <HAL_GetTick+0x14>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	24000f94 	.word	0x24000f94

08004794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800479c:	f7ff ffee 	bl	800477c <HAL_GetTick>
 80047a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d005      	beq.n	80047ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <HAL_Delay+0x44>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047ba:	bf00      	nop
 80047bc:	f7ff ffde 	bl	800477c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d8f7      	bhi.n	80047bc <HAL_Delay+0x28>
  {
  }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	24000014 	.word	0x24000014

080047dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80047e0:	4b03      	ldr	r3, [pc, #12]	@ (80047f0 <HAL_GetREVID+0x14>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0c1b      	lsrs	r3, r3, #16
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	5c001000 	.word	0x5c001000

080047f4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80047fe:	4b07      	ldr	r3, [pc, #28]	@ (800481c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	43db      	mvns	r3, r3
 8004806:	401a      	ands	r2, r3
 8004808:	4904      	ldr	r1, [pc, #16]	@ (800481c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	58000400 	.word	0x58000400

08004820 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <LL_ADC_SetChannelPreselection+0x24>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2201      	movs	r2, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	e015      	b.n	80048d8 <LL_ADC_SetChannelPreselection+0x50>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80048c2:	2320      	movs	r3, #32
 80048c4:	e003      	b.n	80048ce <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2201      	movs	r2, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	69d2      	ldr	r2, [r2, #28]
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3360      	adds	r3, #96	@ 0x60
 8004900:	461a      	mov	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	430b      	orrs	r3, r1
 800491c:	431a      	orrs	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	611a      	str	r2, [r3, #16]
}
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3360      	adds	r3, #96	@ 0x60
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	431a      	orrs	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	601a      	str	r2, [r3, #0]
  }
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3330      	adds	r3, #48	@ 0x30
 80049cc:	461a      	mov	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	4413      	add	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	211f      	movs	r1, #31
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	0e9b      	lsrs	r3, r3, #26
 80049f4:	f003 011f 	and.w	r1, r3, #31
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004a02:	431a      	orrs	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a20:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	0e5b      	lsrs	r3, r3, #25
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	4413      	add	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	0d1b      	lsrs	r3, r3, #20
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2107      	movs	r1, #7
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	401a      	ands	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0d1b      	lsrs	r3, r3, #20
 8004a74:	f003 031f 	and.w	r3, r3, #31
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	401a      	ands	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0318 	and.w	r3, r3, #24
 8004ab2:	4908      	ldr	r1, [pc, #32]	@ (8004ad4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ab4:	40d9      	lsrs	r1, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	400b      	ands	r3, r1
 8004aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	000fffff 	.word	0x000fffff

08004ad8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6093      	str	r3, [r2, #8]
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	5fffffc0 	.word	0x5fffffc0

08004b34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b48:	d101      	bne.n	8004b4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <LL_ADC_EnableInternalRegulator+0x24>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	6fffffc0 	.word	0x6fffffc0

08004b84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b98:	d101      	bne.n	8004b9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <LL_ADC_Enable+0x24>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	7fffffc0 	.word	0x7fffffc0

08004bd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <LL_ADC_Disable+0x24>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	f043 0202 	orr.w	r2, r3, #2
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	7fffffc0 	.word	0x7fffffc0

08004bfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <LL_ADC_IsEnabled+0x18>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <LL_ADC_IsEnabled+0x1a>
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d101      	bne.n	8004c3a <LL_ADC_IsDisableOngoing+0x18>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <LL_ADC_IsDisableOngoing+0x1a>
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <LL_ADC_REG_StartConversion+0x24>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	f043 0204 	orr.w	r2, r3, #4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	7fffffc0 	.word	0x7fffffc0

08004c70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d101      	bne.n	8004c88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d101      	bne.n	8004cae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b089      	sub	sp, #36	@ 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e18f      	b.n	8004ff6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fb ff89 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff19 	bl	8004b34 <LL_ADC_IsDeepPowerDownEnabled>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff feff 	bl	8004b10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff34 	bl	8004b84 <LL_ADC_IsInternalRegulatorEnabled>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d114      	bne.n	8004d4c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff ff18 	bl	8004b5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d2c:	4b87      	ldr	r3, [pc, #540]	@ (8004f4c <HAL_ADC_Init+0x290>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	099b      	lsrs	r3, r3, #6
 8004d32:	4a87      	ldr	r2, [pc, #540]	@ (8004f50 <HAL_ADC_Init+0x294>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	099b      	lsrs	r3, r3, #6
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d3e:	e002      	b.n	8004d46 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f9      	bne.n	8004d40 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff17 	bl	8004b84 <LL_ADC_IsInternalRegulatorEnabled>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10d      	bne.n	8004d78 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	f043 0210 	orr.w	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	f043 0201 	orr.w	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff77 	bl	8004c70 <LL_ADC_REG_IsConversionOngoing>
 8004d82:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 8129 	bne.w	8004fe4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8125 	bne.w	8004fe4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004da2:	f043 0202 	orr.w	r2, r3, #2
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ff24 	bl	8004bfc <LL_ADC_IsEnabled>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d136      	bne.n	8004e28 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a65      	ldr	r2, [pc, #404]	@ (8004f54 <HAL_ADC_Init+0x298>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_ADC_Init+0x112>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a63      	ldr	r2, [pc, #396]	@ (8004f58 <HAL_ADC_Init+0x29c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10e      	bne.n	8004dec <HAL_ADC_Init+0x130>
 8004dce:	4861      	ldr	r0, [pc, #388]	@ (8004f54 <HAL_ADC_Init+0x298>)
 8004dd0:	f7ff ff14 	bl	8004bfc <LL_ADC_IsEnabled>
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	4860      	ldr	r0, [pc, #384]	@ (8004f58 <HAL_ADC_Init+0x29c>)
 8004dd8:	f7ff ff10 	bl	8004bfc <LL_ADC_IsEnabled>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4323      	orrs	r3, r4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e008      	b.n	8004dfe <HAL_ADC_Init+0x142>
 8004dec:	485b      	ldr	r0, [pc, #364]	@ (8004f5c <HAL_ADC_Init+0x2a0>)
 8004dee:	f7ff ff05 	bl	8004bfc <LL_ADC_IsEnabled>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d012      	beq.n	8004e28 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a53      	ldr	r2, [pc, #332]	@ (8004f54 <HAL_ADC_Init+0x298>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_ADC_Init+0x15a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a51      	ldr	r2, [pc, #324]	@ (8004f58 <HAL_ADC_Init+0x29c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <HAL_ADC_Init+0x15e>
 8004e16:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_ADC_Init+0x2a4>)
 8004e18:	e000      	b.n	8004e1c <HAL_ADC_Init+0x160>
 8004e1a:	4a52      	ldr	r2, [pc, #328]	@ (8004f64 <HAL_ADC_Init+0x2a8>)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f7ff fcfc 	bl	8004820 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004e28:	f7ff fcd8 	bl	80047dc <HAL_GetREVID>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d914      	bls.n	8004e60 <HAL_ADC_Init+0x1a4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d110      	bne.n	8004e60 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7d5b      	ldrb	r3, [r3, #21]
 8004e42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e48:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	7f1b      	ldrb	r3, [r3, #28]
 8004e54:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004e56:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e58:	f043 030c 	orr.w	r3, r3, #12
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	e00d      	b.n	8004e7c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7d5b      	ldrb	r3, [r3, #21]
 8004e64:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e6a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e70:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7f1b      	ldrb	r3, [r3, #28]
 8004e76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	7f1b      	ldrb	r3, [r3, #28]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	045b      	lsls	r3, r3, #17
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f68 <HAL_ADC_Init+0x2ac>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	69b9      	ldr	r1, [r7, #24]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fed2 	bl	8004c70 <LL_ADC_REG_IsConversionOngoing>
 8004ecc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fedf 	bl	8004c96 <LL_ADC_INJ_IsConversionOngoing>
 8004ed8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d15f      	bne.n	8004fa0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d15c      	bne.n	8004fa0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7d1b      	ldrb	r3, [r3, #20]
 8004eea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	4b1c      	ldr	r3, [pc, #112]	@ (8004f6c <HAL_ADC_Init+0x2b0>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	69b9      	ldr	r1, [r7, #24]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d130      	bne.n	8004f74 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <HAL_ADC_Init+0x2b4>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f26:	3a01      	subs	r2, #1
 8004f28:	0411      	lsls	r1, r2, #16
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f2e:	4311      	orrs	r1, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004f34:	4311      	orrs	r1, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	611a      	str	r2, [r3, #16]
 8004f48:	e01c      	b.n	8004f84 <HAL_ADC_Init+0x2c8>
 8004f4a:	bf00      	nop
 8004f4c:	24000008 	.word	0x24000008
 8004f50:	053e2d63 	.word	0x053e2d63
 8004f54:	40022000 	.word	0x40022000
 8004f58:	40022100 	.word	0x40022100
 8004f5c:	58026000 	.word	0x58026000
 8004f60:	40022300 	.word	0x40022300
 8004f64:	58026300 	.word	0x58026300
 8004f68:	fff0c003 	.word	0xfff0c003
 8004f6c:	ffffbffc 	.word	0xffffbffc
 8004f70:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 ffa4 	bl	8005ee8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	f023 010f 	bic.w	r1, r3, #15
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	1e5a      	subs	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fc0:	e007      	b.n	8004fd2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 020f 	bic.w	r2, r2, #15
 8004fd0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	f043 0201 	orr.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54
 8004fe2:	e007      	b.n	8004ff4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe8:	f043 0210 	orr.w	r2, r3, #16
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3724      	adds	r7, #36	@ 0x24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd90      	pop	{r4, r7, pc}
 8004ffe:	bf00      	nop

08005000 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a92      	ldr	r2, [pc, #584]	@ (8005258 <HAL_ADC_Start_IT+0x258>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_ADC_Start_IT+0x1c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a91      	ldr	r2, [pc, #580]	@ (800525c <HAL_ADC_Start_IT+0x25c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d101      	bne.n	8005020 <HAL_ADC_Start_IT+0x20>
 800501c:	4b90      	ldr	r3, [pc, #576]	@ (8005260 <HAL_ADC_Start_IT+0x260>)
 800501e:	e000      	b.n	8005022 <HAL_ADC_Start_IT+0x22>
 8005020:	4b90      	ldr	r3, [pc, #576]	@ (8005264 <HAL_ADC_Start_IT+0x264>)
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fd58 	bl	8004ad8 <LL_ADC_GetMultimode>
 8005028:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fe1e 	bl	8004c70 <LL_ADC_REG_IsConversionOngoing>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	f040 8118 	bne.w	800526c <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_ADC_Start_IT+0x4a>
 8005046:	2302      	movs	r3, #2
 8005048:	e113      	b.n	8005272 <HAL_ADC_Start_IT+0x272>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fe5e 	bl	8005d14 <ADC_Enable>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f040 80f5 	bne.w	800524e <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005068:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <HAL_ADC_Start_IT+0x268>)
 800506a:	4013      	ands	r3, r2
 800506c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a78      	ldr	r2, [pc, #480]	@ (800525c <HAL_ADC_Start_IT+0x25c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d002      	beq.n	8005084 <HAL_ADC_Start_IT+0x84>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	e000      	b.n	8005086 <HAL_ADC_Start_IT+0x86>
 8005084:	4b74      	ldr	r3, [pc, #464]	@ (8005258 <HAL_ADC_Start_IT+0x258>)
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	4293      	cmp	r3, r2
 800508c:	d002      	beq.n	8005094 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d006      	beq.n	80050ba <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b0:	f023 0206 	bic.w	r2, r3, #6
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80050b8:	e002      	b.n	80050c0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	221c      	movs	r2, #28
 80050c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 021c 	bic.w	r2, r2, #28
 80050de:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d108      	bne.n	80050fa <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0208 	orr.w	r2, r2, #8
 80050f6:	605a      	str	r2, [r3, #4]
          break;
 80050f8:	e008      	b.n	800510c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0204 	orr.w	r2, r2, #4
 8005108:	605a      	str	r2, [r3, #4]
          break;
 800510a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0210 	orr.w	r2, r2, #16
 8005122:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a4c      	ldr	r2, [pc, #304]	@ (800525c <HAL_ADC_Start_IT+0x25c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d002      	beq.n	8005134 <HAL_ADC_Start_IT+0x134>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	e000      	b.n	8005136 <HAL_ADC_Start_IT+0x136>
 8005134:	4b48      	ldr	r3, [pc, #288]	@ (8005258 <HAL_ADC_Start_IT+0x258>)
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	4293      	cmp	r3, r2
 800513c:	d008      	beq.n	8005150 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b05      	cmp	r3, #5
 8005148:	d002      	beq.n	8005150 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b09      	cmp	r3, #9
 800514e:	d13a      	bne.n	80051c6 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02d      	beq.n	80051ba <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005162:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005166:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d110      	bne.n	8005198 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0220 	bic.w	r2, r2, #32
 8005184:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005194:	605a      	str	r2, [r3, #4]
              break;
 8005196:	e010      	b.n	80051ba <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0220 	orr.w	r2, r2, #32
 80051b6:	605a      	str	r2, [r3, #4]
              break;
 80051b8:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fd42 	bl	8004c48 <LL_ADC_REG_StartConversion>
 80051c4:	e054      	b.n	8005270 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a21      	ldr	r2, [pc, #132]	@ (800525c <HAL_ADC_Start_IT+0x25c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d002      	beq.n	80051e2 <HAL_ADC_Start_IT+0x1e2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	e000      	b.n	80051e4 <HAL_ADC_Start_IT+0x1e4>
 80051e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <HAL_ADC_Start_IT+0x258>)
 80051e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03e      	beq.n	8005270 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80051fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b08      	cmp	r3, #8
 8005208:	d110      	bne.n	800522c <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0220 	bic.w	r2, r2, #32
 8005218:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005228:	605a      	str	r2, [r3, #4]
              break;
 800522a:	e021      	b.n	8005270 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800523a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0220 	orr.w	r2, r2, #32
 800524a:	605a      	str	r2, [r3, #4]
              break;
 800524c:	e010      	b.n	8005270 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005256:	e00b      	b.n	8005270 <HAL_ADC_Start_IT+0x270>
 8005258:	40022000 	.word	0x40022000
 800525c:	40022100 	.word	0x40022100
 8005260:	40022300 	.word	0x40022300
 8005264:	58026300 	.word	0x58026300
 8005268:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800526c:	2302      	movs	r3, #2
 800526e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop

0800527c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80052a0:	2300      	movs	r3, #0
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a87      	ldr	r2, [pc, #540]	@ (80054d8 <HAL_ADC_IRQHandler+0x240>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <HAL_ADC_IRQHandler+0x30>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a86      	ldr	r2, [pc, #536]	@ (80054dc <HAL_ADC_IRQHandler+0x244>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_IRQHandler+0x34>
 80052c8:	4b85      	ldr	r3, [pc, #532]	@ (80054e0 <HAL_ADC_IRQHandler+0x248>)
 80052ca:	e000      	b.n	80052ce <HAL_ADC_IRQHandler+0x36>
 80052cc:	4b85      	ldr	r3, [pc, #532]	@ (80054e4 <HAL_ADC_IRQHandler+0x24c>)
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fc02 	bl	8004ad8 <LL_ADC_GetMultimode>
 80052d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d017      	beq.n	8005310 <HAL_ADC_IRQHandler+0x78>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d012      	beq.n	8005310 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d105      	bne.n	8005302 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 ffe2 	bl	80062cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2202      	movs	r2, #2
 800530e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <HAL_ADC_IRQHandler+0x8c>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8083 	beq.w	8005436 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d07d      	beq.n	8005436 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fb1d 	bl	8004996 <LL_ADC_REG_IsTriggerSourceSWStart>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d062      	beq.n	8005428 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a5d      	ldr	r2, [pc, #372]	@ (80054dc <HAL_ADC_IRQHandler+0x244>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d002      	beq.n	8005372 <HAL_ADC_IRQHandler+0xda>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	e000      	b.n	8005374 <HAL_ADC_IRQHandler+0xdc>
 8005372:	4b59      	ldr	r3, [pc, #356]	@ (80054d8 <HAL_ADC_IRQHandler+0x240>)
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	4293      	cmp	r3, r2
 800537a:	d008      	beq.n	800538e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b05      	cmp	r3, #5
 8005386:	d002      	beq.n	800538e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b09      	cmp	r3, #9
 800538c:	d104      	bne.n	8005398 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	e00c      	b.n	80053b2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4f      	ldr	r2, [pc, #316]	@ (80054dc <HAL_ADC_IRQHandler+0x244>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d002      	beq.n	80053a8 <HAL_ADC_IRQHandler+0x110>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	e000      	b.n	80053aa <HAL_ADC_IRQHandler+0x112>
 80053a8:	4b4b      	ldr	r3, [pc, #300]	@ (80054d8 <HAL_ADC_IRQHandler+0x240>)
 80053aa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d135      	bne.n	8005428 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d12e      	bne.n	8005428 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fc4e 	bl	8004c70 <LL_ADC_REG_IsConversionOngoing>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11a      	bne.n	8005410 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 020c 	bic.w	r2, r2, #12
 80053e8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d112      	bne.n	8005428 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	f043 0201 	orr.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	655a      	str	r2, [r3, #84]	@ 0x54
 800540e:	e00b      	b.n	8005428 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fc f829 	bl	8001480 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	220c      	movs	r2, #12
 8005434:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <HAL_ADC_IRQHandler+0x1b2>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80a0 	beq.w	8005596 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 809a 	beq.w	8005596 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d105      	bne.n	800547a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005472:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fac8 	bl	8004a14 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005484:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fa83 	bl	8004996 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005490:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a11      	ldr	r2, [pc, #68]	@ (80054dc <HAL_ADC_IRQHandler+0x244>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d002      	beq.n	80054a2 <HAL_ADC_IRQHandler+0x20a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	e000      	b.n	80054a4 <HAL_ADC_IRQHandler+0x20c>
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <HAL_ADC_IRQHandler+0x240>)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d008      	beq.n	80054be <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b06      	cmp	r3, #6
 80054b6:	d002      	beq.n	80054be <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b07      	cmp	r3, #7
 80054bc:	d104      	bne.n	80054c8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	e014      	b.n	80054f2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a03      	ldr	r2, [pc, #12]	@ (80054dc <HAL_ADC_IRQHandler+0x244>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00a      	beq.n	80054e8 <HAL_ADC_IRQHandler+0x250>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	e008      	b.n	80054ea <HAL_ADC_IRQHandler+0x252>
 80054d8:	40022000 	.word	0x40022000
 80054dc:	40022100 	.word	0x40022100
 80054e0:	40022300 	.word	0x40022300
 80054e4:	58026300 	.word	0x58026300
 80054e8:	4b84      	ldr	r3, [pc, #528]	@ (80056fc <HAL_ADC_IRQHandler+0x464>)
 80054ea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d047      	beq.n	8005588 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <HAL_ADC_IRQHandler+0x27a>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d03f      	beq.n	8005588 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	d13a      	bne.n	8005588 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d133      	bne.n	8005588 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d12e      	bne.n	8005588 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fbb1 	bl	8004c96 <LL_ADC_INJ_IsConversionOngoing>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11a      	bne.n	8005570 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005548:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d112      	bne.n	8005588 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	f043 0201 	orr.w	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	655a      	str	r2, [r3, #84]	@ 0x54
 800556e:	e00b      	b.n	8005588 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005574:	f043 0210 	orr.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	f043 0201 	orr.w	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fe77 	bl	800627c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2260      	movs	r2, #96	@ 0x60
 8005594:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d011      	beq.n	80055c4 <HAL_ADC_IRQHandler+0x32c>
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00c      	beq.n	80055c4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8a8 	bl	800570c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2280      	movs	r2, #128	@ 0x80
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d012      	beq.n	80055f4 <HAL_ADC_IRQHandler+0x35c>
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00d      	beq.n	80055f4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055dc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fe5d 	bl	80062a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d012      	beq.n	8005624 <HAL_ADC_IRQHandler+0x38c>
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fe4f 	bl	80062b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005622:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d043      	beq.n	80056b6 <HAL_ADC_IRQHandler+0x41e>
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d03e      	beq.n	80056b6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005640:	2301      	movs	r3, #1
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
 8005644:	e021      	b.n	800568a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <HAL_ADC_IRQHandler+0x464>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_ADC_IRQHandler+0x3c8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a29      	ldr	r2, [pc, #164]	@ (8005700 <HAL_ADC_IRQHandler+0x468>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d101      	bne.n	8005664 <HAL_ADC_IRQHandler+0x3cc>
 8005660:	4b28      	ldr	r3, [pc, #160]	@ (8005704 <HAL_ADC_IRQHandler+0x46c>)
 8005662:	e000      	b.n	8005666 <HAL_ADC_IRQHandler+0x3ce>
 8005664:	4b28      	ldr	r3, [pc, #160]	@ (8005708 <HAL_ADC_IRQHandler+0x470>)
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fa44 	bl	8004af4 <LL_ADC_GetMultiDMATransfer>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005672:	2301      	movs	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
 8005676:	e008      	b.n	800568a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005686:	2301      	movs	r3, #1
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	2b01      	cmp	r3, #1
 800568e:	d10e      	bne.n	80056ae <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005694:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a0:	f043 0202 	orr.w	r2, r3, #2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f839 	bl	8005720 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2210      	movs	r2, #16
 80056b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d018      	beq.n	80056f2 <HAL_ADC_IRQHandler+0x45a>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d013      	beq.n	80056f2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	f043 0208 	orr.w	r2, r3, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fdcf 	bl	8006290 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80056f2:	bf00      	nop
 80056f4:	3728      	adds	r7, #40	@ 0x28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40022000 	.word	0x40022000
 8005700:	40022100 	.word	0x40022100
 8005704:	40022300 	.word	0x40022300
 8005708:	58026300 	.word	0x58026300

0800570c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005734:	b590      	push	{r4, r7, lr}
 8005736:	b08d      	sub	sp, #52	@ 0x34
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a65      	ldr	r2, [pc, #404]	@ (80058e4 <HAL_ADC_ConfigChannel+0x1b0>)
 800574e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_ADC_ConfigChannel+0x2a>
 800575a:	2302      	movs	r3, #2
 800575c:	e2c7      	b.n	8005cee <HAL_ADC_ConfigChannel+0x5ba>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fa80 	bl	8004c70 <LL_ADC_REG_IsConversionOngoing>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 82ac 	bne.w	8005cd0 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	db2c      	blt.n	80057da <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005788:	2b00      	cmp	r3, #0
 800578a:	d108      	bne.n	800579e <HAL_ADC_ConfigChannel+0x6a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	0e9b      	lsrs	r3, r3, #26
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	2201      	movs	r2, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	e016      	b.n	80057cc <HAL_ADC_ConfigChannel+0x98>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	fa93 f3a3 	rbit	r3, r3
 80057aa:	613b      	str	r3, [r7, #16]
  return result;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80057b6:	2320      	movs	r3, #32
 80057b8:	e003      	b.n	80057c2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	fab3 f383 	clz	r3, r3
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2201      	movs	r2, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	69d1      	ldr	r1, [r2, #28]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	430b      	orrs	r3, r1
 80057d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f7ff f8e8 	bl	80049bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fa3d 	bl	8004c70 <LL_ADC_REG_IsConversionOngoing>
 80057f6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff fa4a 	bl	8004c96 <LL_ADC_INJ_IsConversionOngoing>
 8005802:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	f040 80b8 	bne.w	800597c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 80b4 	bne.w	800597c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	6819      	ldr	r1, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	461a      	mov	r2, r3
 8005822:	f7ff f90a 	bl	8004a3a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005826:	4b30      	ldr	r3, [pc, #192]	@ (80058e8 <HAL_ADC_ConfigChannel+0x1b4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800582e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005832:	d10b      	bne.n	800584c <HAL_ADC_ConfigChannel+0x118>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	e01d      	b.n	8005888 <HAL_ADC_ConfigChannel+0x154>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x13e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	e00a      	b.n	8005888 <HAL_ADC_ConfigChannel+0x154>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	089b      	lsrs	r3, r3, #2
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b04      	cmp	r3, #4
 8005890:	d02c      	beq.n	80058ec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6919      	ldr	r1, [r3, #16]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	f7ff f825 	bl	80048ee <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6919      	ldr	r1, [r3, #16]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	7e5b      	ldrb	r3, [r3, #25]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x186>
 80058b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058b8:	e000      	b.n	80058bc <HAL_ADC_ConfigChannel+0x188>
 80058ba:	2300      	movs	r3, #0
 80058bc:	461a      	mov	r2, r3
 80058be:	f7ff f84f 	bl	8004960 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6919      	ldr	r1, [r3, #16]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	7e1b      	ldrb	r3, [r3, #24]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d102      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x1a4>
 80058d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058d6:	e000      	b.n	80058da <HAL_ADC_ConfigChannel+0x1a6>
 80058d8:	2300      	movs	r3, #0
 80058da:	461a      	mov	r2, r3
 80058dc:	f7ff f827 	bl	800492e <LL_ADC_SetDataRightShift>
 80058e0:	e04c      	b.n	800597c <HAL_ADC_ConfigChannel+0x248>
 80058e2:	bf00      	nop
 80058e4:	47ff0000 	.word	0x47ff0000
 80058e8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	069b      	lsls	r3, r3, #26
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d107      	bne.n	8005910 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800590e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005916:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	069b      	lsls	r3, r3, #26
 8005920:	429a      	cmp	r2, r3
 8005922:	d107      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005932:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800593a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	069b      	lsls	r3, r3, #26
 8005944:	429a      	cmp	r2, r3
 8005946:	d107      	bne.n	8005958 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005956:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	069b      	lsls	r3, r3, #26
 8005968:	429a      	cmp	r2, r3
 800596a:	d107      	bne.n	800597c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800597a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff f93b 	bl	8004bfc <LL_ADC_IsEnabled>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	f040 81aa 	bne.w	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6819      	ldr	r1, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	461a      	mov	r2, r3
 800599c:	f7ff f878 	bl	8004a90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a87      	ldr	r2, [pc, #540]	@ (8005bc4 <HAL_ADC_ConfigChannel+0x490>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	f040 809a 	bne.w	8005ae0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4984      	ldr	r1, [pc, #528]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x494>)
 80059b6:	428b      	cmp	r3, r1
 80059b8:	d147      	bne.n	8005a4a <HAL_ADC_ConfigChannel+0x316>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4983      	ldr	r1, [pc, #524]	@ (8005bcc <HAL_ADC_ConfigChannel+0x498>)
 80059c0:	428b      	cmp	r3, r1
 80059c2:	d040      	beq.n	8005a46 <HAL_ADC_ConfigChannel+0x312>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4981      	ldr	r1, [pc, #516]	@ (8005bd0 <HAL_ADC_ConfigChannel+0x49c>)
 80059ca:	428b      	cmp	r3, r1
 80059cc:	d039      	beq.n	8005a42 <HAL_ADC_ConfigChannel+0x30e>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4980      	ldr	r1, [pc, #512]	@ (8005bd4 <HAL_ADC_ConfigChannel+0x4a0>)
 80059d4:	428b      	cmp	r3, r1
 80059d6:	d032      	beq.n	8005a3e <HAL_ADC_ConfigChannel+0x30a>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	497e      	ldr	r1, [pc, #504]	@ (8005bd8 <HAL_ADC_ConfigChannel+0x4a4>)
 80059de:	428b      	cmp	r3, r1
 80059e0:	d02b      	beq.n	8005a3a <HAL_ADC_ConfigChannel+0x306>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	497d      	ldr	r1, [pc, #500]	@ (8005bdc <HAL_ADC_ConfigChannel+0x4a8>)
 80059e8:	428b      	cmp	r3, r1
 80059ea:	d024      	beq.n	8005a36 <HAL_ADC_ConfigChannel+0x302>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	497b      	ldr	r1, [pc, #492]	@ (8005be0 <HAL_ADC_ConfigChannel+0x4ac>)
 80059f2:	428b      	cmp	r3, r1
 80059f4:	d01d      	beq.n	8005a32 <HAL_ADC_ConfigChannel+0x2fe>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	497a      	ldr	r1, [pc, #488]	@ (8005be4 <HAL_ADC_ConfigChannel+0x4b0>)
 80059fc:	428b      	cmp	r3, r1
 80059fe:	d016      	beq.n	8005a2e <HAL_ADC_ConfigChannel+0x2fa>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4978      	ldr	r1, [pc, #480]	@ (8005be8 <HAL_ADC_ConfigChannel+0x4b4>)
 8005a06:	428b      	cmp	r3, r1
 8005a08:	d00f      	beq.n	8005a2a <HAL_ADC_ConfigChannel+0x2f6>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4977      	ldr	r1, [pc, #476]	@ (8005bec <HAL_ADC_ConfigChannel+0x4b8>)
 8005a10:	428b      	cmp	r3, r1
 8005a12:	d008      	beq.n	8005a26 <HAL_ADC_ConfigChannel+0x2f2>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4975      	ldr	r1, [pc, #468]	@ (8005bf0 <HAL_ADC_ConfigChannel+0x4bc>)
 8005a1a:	428b      	cmp	r3, r1
 8005a1c:	d101      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x2ee>
 8005a1e:	4b75      	ldr	r3, [pc, #468]	@ (8005bf4 <HAL_ADC_ConfigChannel+0x4c0>)
 8005a20:	e05a      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a22:	2300      	movs	r3, #0
 8005a24:	e058      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a26:	4b74      	ldr	r3, [pc, #464]	@ (8005bf8 <HAL_ADC_ConfigChannel+0x4c4>)
 8005a28:	e056      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a2a:	4b74      	ldr	r3, [pc, #464]	@ (8005bfc <HAL_ADC_ConfigChannel+0x4c8>)
 8005a2c:	e054      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8005be8 <HAL_ADC_ConfigChannel+0x4b4>)
 8005a30:	e052      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a32:	4b6c      	ldr	r3, [pc, #432]	@ (8005be4 <HAL_ADC_ConfigChannel+0x4b0>)
 8005a34:	e050      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a36:	4b72      	ldr	r3, [pc, #456]	@ (8005c00 <HAL_ADC_ConfigChannel+0x4cc>)
 8005a38:	e04e      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a3a:	4b72      	ldr	r3, [pc, #456]	@ (8005c04 <HAL_ADC_ConfigChannel+0x4d0>)
 8005a3c:	e04c      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a3e:	4b72      	ldr	r3, [pc, #456]	@ (8005c08 <HAL_ADC_ConfigChannel+0x4d4>)
 8005a40:	e04a      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a42:	4b72      	ldr	r3, [pc, #456]	@ (8005c0c <HAL_ADC_ConfigChannel+0x4d8>)
 8005a44:	e048      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e046      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4970      	ldr	r1, [pc, #448]	@ (8005c10 <HAL_ADC_ConfigChannel+0x4dc>)
 8005a50:	428b      	cmp	r3, r1
 8005a52:	d140      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x3a2>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	495c      	ldr	r1, [pc, #368]	@ (8005bcc <HAL_ADC_ConfigChannel+0x498>)
 8005a5a:	428b      	cmp	r3, r1
 8005a5c:	d039      	beq.n	8005ad2 <HAL_ADC_ConfigChannel+0x39e>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	495b      	ldr	r1, [pc, #364]	@ (8005bd0 <HAL_ADC_ConfigChannel+0x49c>)
 8005a64:	428b      	cmp	r3, r1
 8005a66:	d032      	beq.n	8005ace <HAL_ADC_ConfigChannel+0x39a>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4959      	ldr	r1, [pc, #356]	@ (8005bd4 <HAL_ADC_ConfigChannel+0x4a0>)
 8005a6e:	428b      	cmp	r3, r1
 8005a70:	d02b      	beq.n	8005aca <HAL_ADC_ConfigChannel+0x396>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4958      	ldr	r1, [pc, #352]	@ (8005bd8 <HAL_ADC_ConfigChannel+0x4a4>)
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	d024      	beq.n	8005ac6 <HAL_ADC_ConfigChannel+0x392>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4956      	ldr	r1, [pc, #344]	@ (8005bdc <HAL_ADC_ConfigChannel+0x4a8>)
 8005a82:	428b      	cmp	r3, r1
 8005a84:	d01d      	beq.n	8005ac2 <HAL_ADC_ConfigChannel+0x38e>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4955      	ldr	r1, [pc, #340]	@ (8005be0 <HAL_ADC_ConfigChannel+0x4ac>)
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	d016      	beq.n	8005abe <HAL_ADC_ConfigChannel+0x38a>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4953      	ldr	r1, [pc, #332]	@ (8005be4 <HAL_ADC_ConfigChannel+0x4b0>)
 8005a96:	428b      	cmp	r3, r1
 8005a98:	d00f      	beq.n	8005aba <HAL_ADC_ConfigChannel+0x386>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4952      	ldr	r1, [pc, #328]	@ (8005be8 <HAL_ADC_ConfigChannel+0x4b4>)
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	d008      	beq.n	8005ab6 <HAL_ADC_ConfigChannel+0x382>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4951      	ldr	r1, [pc, #324]	@ (8005bf0 <HAL_ADC_ConfigChannel+0x4bc>)
 8005aaa:	428b      	cmp	r3, r1
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x37e>
 8005aae:	4b51      	ldr	r3, [pc, #324]	@ (8005bf4 <HAL_ADC_ConfigChannel+0x4c0>)
 8005ab0:	e012      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e010      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005ab6:	4b51      	ldr	r3, [pc, #324]	@ (8005bfc <HAL_ADC_ConfigChannel+0x4c8>)
 8005ab8:	e00e      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005aba:	4b4b      	ldr	r3, [pc, #300]	@ (8005be8 <HAL_ADC_ConfigChannel+0x4b4>)
 8005abc:	e00c      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005abe:	4b49      	ldr	r3, [pc, #292]	@ (8005be4 <HAL_ADC_ConfigChannel+0x4b0>)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c00 <HAL_ADC_ConfigChannel+0x4cc>)
 8005ac4:	e008      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005ac6:	4b4f      	ldr	r3, [pc, #316]	@ (8005c04 <HAL_ADC_ConfigChannel+0x4d0>)
 8005ac8:	e006      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005aca:	4b4f      	ldr	r3, [pc, #316]	@ (8005c08 <HAL_ADC_ConfigChannel+0x4d4>)
 8005acc:	e004      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005ace:	4b4f      	ldr	r3, [pc, #316]	@ (8005c0c <HAL_ADC_ConfigChannel+0x4d8>)
 8005ad0:	e002      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x3a4>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fe fed4 	bl	8004888 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f280 80fc 	bge.w	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a36      	ldr	r2, [pc, #216]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x494>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_ADC_ConfigChannel+0x3ca>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a45      	ldr	r2, [pc, #276]	@ (8005c10 <HAL_ADC_ConfigChannel+0x4dc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x3ce>
 8005afe:	4b45      	ldr	r3, [pc, #276]	@ (8005c14 <HAL_ADC_ConfigChannel+0x4e0>)
 8005b00:	e000      	b.n	8005b04 <HAL_ADC_ConfigChannel+0x3d0>
 8005b02:	4b45      	ldr	r3, [pc, #276]	@ (8005c18 <HAL_ADC_ConfigChannel+0x4e4>)
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe feb1 	bl	800486c <LL_ADC_GetCommonPathInternalCh>
 8005b0a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x494>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_ADC_ConfigChannel+0x3ec>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c10 <HAL_ADC_ConfigChannel+0x4dc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10e      	bne.n	8005b3e <HAL_ADC_ConfigChannel+0x40a>
 8005b20:	4829      	ldr	r0, [pc, #164]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x494>)
 8005b22:	f7ff f86b 	bl	8004bfc <LL_ADC_IsEnabled>
 8005b26:	4604      	mov	r4, r0
 8005b28:	4839      	ldr	r0, [pc, #228]	@ (8005c10 <HAL_ADC_ConfigChannel+0x4dc>)
 8005b2a:	f7ff f867 	bl	8004bfc <LL_ADC_IsEnabled>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4323      	orrs	r3, r4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf0c      	ite	eq
 8005b36:	2301      	moveq	r3, #1
 8005b38:	2300      	movne	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	e008      	b.n	8005b50 <HAL_ADC_ConfigChannel+0x41c>
 8005b3e:	4837      	ldr	r0, [pc, #220]	@ (8005c1c <HAL_ADC_ConfigChannel+0x4e8>)
 8005b40:	f7ff f85c 	bl	8004bfc <LL_ADC_IsEnabled>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80b3 	beq.w	8005cbc <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a31      	ldr	r2, [pc, #196]	@ (8005c20 <HAL_ADC_ConfigChannel+0x4ec>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d165      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x4f8>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d160      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c1c <HAL_ADC_ConfigChannel+0x4e8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	f040 80b6 	bne.w	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x494>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_ADC_ConfigChannel+0x456>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a22      	ldr	r2, [pc, #136]	@ (8005c10 <HAL_ADC_ConfigChannel+0x4dc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d101      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x45a>
 8005b8a:	4a22      	ldr	r2, [pc, #136]	@ (8005c14 <HAL_ADC_ConfigChannel+0x4e0>)
 8005b8c:	e000      	b.n	8005b90 <HAL_ADC_ConfigChannel+0x45c>
 8005b8e:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <HAL_ADC_ConfigChannel+0x4e4>)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f7fe fe54 	bl	8004846 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b9e:	4b21      	ldr	r3, [pc, #132]	@ (8005c24 <HAL_ADC_ConfigChannel+0x4f0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	4a20      	ldr	r2, [pc, #128]	@ (8005c28 <HAL_ADC_ConfigChannel+0x4f4>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	099b      	lsrs	r3, r3, #6
 8005bac:	3301      	adds	r3, #1
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005bb2:	e002      	b.n	8005bba <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f9      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bc0:	e08f      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
 8005bc2:	bf00      	nop
 8005bc4:	47ff0000 	.word	0x47ff0000
 8005bc8:	40022000 	.word	0x40022000
 8005bcc:	04300002 	.word	0x04300002
 8005bd0:	08600004 	.word	0x08600004
 8005bd4:	0c900008 	.word	0x0c900008
 8005bd8:	10c00010 	.word	0x10c00010
 8005bdc:	14f00020 	.word	0x14f00020
 8005be0:	2a000400 	.word	0x2a000400
 8005be4:	2e300800 	.word	0x2e300800
 8005be8:	32601000 	.word	0x32601000
 8005bec:	43210000 	.word	0x43210000
 8005bf0:	4b840000 	.word	0x4b840000
 8005bf4:	4fb80000 	.word	0x4fb80000
 8005bf8:	47520000 	.word	0x47520000
 8005bfc:	36902000 	.word	0x36902000
 8005c00:	25b00200 	.word	0x25b00200
 8005c04:	21800100 	.word	0x21800100
 8005c08:	1d500080 	.word	0x1d500080
 8005c0c:	19200040 	.word	0x19200040
 8005c10:	40022100 	.word	0x40022100
 8005c14:	40022300 	.word	0x40022300
 8005c18:	58026300 	.word	0x58026300
 8005c1c:	58026000 	.word	0x58026000
 8005c20:	cb840000 	.word	0xcb840000
 8005c24:	24000008 	.word	0x24000008
 8005c28:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a31      	ldr	r2, [pc, #196]	@ (8005cf8 <HAL_ADC_ConfigChannel+0x5c4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d11e      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x540>
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d119      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2d      	ldr	r2, [pc, #180]	@ (8005cfc <HAL_ADC_ConfigChannel+0x5c8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d14b      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d00 <HAL_ADC_ConfigChannel+0x5cc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_ADC_ConfigChannel+0x52a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a2a      	ldr	r2, [pc, #168]	@ (8005d04 <HAL_ADC_ConfigChannel+0x5d0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x52e>
 8005c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d08 <HAL_ADC_ConfigChannel+0x5d4>)
 8005c60:	e000      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x530>
 8005c62:	4a2a      	ldr	r2, [pc, #168]	@ (8005d0c <HAL_ADC_ConfigChannel+0x5d8>)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7fe fdea 	bl	8004846 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c72:	e036      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a25      	ldr	r2, [pc, #148]	@ (8005d10 <HAL_ADC_ConfigChannel+0x5dc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d131      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d12c      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cfc <HAL_ADC_ConfigChannel+0x5c8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d127      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1a      	ldr	r2, [pc, #104]	@ (8005d00 <HAL_ADC_ConfigChannel+0x5cc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_ADC_ConfigChannel+0x572>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a18      	ldr	r2, [pc, #96]	@ (8005d04 <HAL_ADC_ConfigChannel+0x5d0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d101      	bne.n	8005caa <HAL_ADC_ConfigChannel+0x576>
 8005ca6:	4a18      	ldr	r2, [pc, #96]	@ (8005d08 <HAL_ADC_ConfigChannel+0x5d4>)
 8005ca8:	e000      	b.n	8005cac <HAL_ADC_ConfigChannel+0x578>
 8005caa:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <HAL_ADC_ConfigChannel+0x5d8>)
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f7fe fdc6 	bl	8004846 <LL_ADC_SetCommonPathInternalCh>
 8005cba:	e012      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005cce:	e008      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005cea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3734      	adds	r7, #52	@ 0x34
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	c7520000 	.word	0xc7520000
 8005cfc:	58026000 	.word	0x58026000
 8005d00:	40022000 	.word	0x40022000
 8005d04:	40022100 	.word	0x40022100
 8005d08:	40022300 	.word	0x40022300
 8005d0c:	58026300 	.word	0x58026300
 8005d10:	cfb80000 	.word	0xcfb80000

08005d14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe ff6b 	bl	8004bfc <LL_ADC_IsEnabled>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d16e      	bne.n	8005e0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	4b38      	ldr	r3, [pc, #224]	@ (8005e14 <ADC_Enable+0x100>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00d      	beq.n	8005d56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3e:	f043 0210 	orr.w	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e05a      	b.n	8005e0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe ff26 	bl	8004bac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d60:	f7fe fd0c 	bl	800477c <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8005e18 <ADC_Enable+0x104>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <ADC_Enable+0x66>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a29      	ldr	r2, [pc, #164]	@ (8005e1c <ADC_Enable+0x108>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <ADC_Enable+0x6a>
 8005d7a:	4b29      	ldr	r3, [pc, #164]	@ (8005e20 <ADC_Enable+0x10c>)
 8005d7c:	e000      	b.n	8005d80 <ADC_Enable+0x6c>
 8005d7e:	4b29      	ldr	r3, [pc, #164]	@ (8005e24 <ADC_Enable+0x110>)
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fea9 	bl	8004ad8 <LL_ADC_GetMultimode>
 8005d86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a23      	ldr	r2, [pc, #140]	@ (8005e1c <ADC_Enable+0x108>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d002      	beq.n	8005d98 <ADC_Enable+0x84>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	e000      	b.n	8005d9a <ADC_Enable+0x86>
 8005d98:	4b1f      	ldr	r3, [pc, #124]	@ (8005e18 <ADC_Enable+0x104>)
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d130      	bne.n	8005e0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005da8:	e028      	b.n	8005dfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe ff24 	bl	8004bfc <LL_ADC_IsEnabled>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fef4 	bl	8004bac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005dc4:	f7fe fcda 	bl	800477c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d914      	bls.n	8005dfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d00d      	beq.n	8005dfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de4:	f043 0210 	orr.w	r2, r3, #16
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e007      	b.n	8005e0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d1cf      	bne.n	8005daa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	8000003f 	.word	0x8000003f
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	40022100 	.word	0x40022100
 8005e20:	40022300 	.word	0x40022300
 8005e24:	58026300 	.word	0x58026300

08005e28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe fef4 	bl	8004c22 <LL_ADC_IsDisableOngoing>
 8005e3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fedb 	bl	8004bfc <LL_ADC_IsEnabled>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d047      	beq.n	8005edc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d144      	bne.n	8005edc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030d 	and.w	r3, r3, #13
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10c      	bne.n	8005e7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe feb5 	bl	8004bd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e72:	f7fe fc83 	bl	800477c <HAL_GetTick>
 8005e76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e78:	e029      	b.n	8005ece <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7e:	f043 0210 	orr.w	r2, r3, #16
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8a:	f043 0201 	orr.w	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e023      	b.n	8005ede <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e96:	f7fe fc71 	bl	800477c <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d914      	bls.n	8005ece <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00d      	beq.n	8005ece <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	f043 0210 	orr.w	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec2:	f043 0201 	orr.w	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e007      	b.n	8005ede <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1dc      	bne.n	8005e96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80060e0 <ADC_ConfigureBoostMode+0x1f8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <ADC_ConfigureBoostMode+0x1c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a79      	ldr	r2, [pc, #484]	@ (80060e4 <ADC_ConfigureBoostMode+0x1fc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d109      	bne.n	8005f18 <ADC_ConfigureBoostMode+0x30>
 8005f04:	4b78      	ldr	r3, [pc, #480]	@ (80060e8 <ADC_ConfigureBoostMode+0x200>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e008      	b.n	8005f2a <ADC_ConfigureBoostMode+0x42>
 8005f18:	4b74      	ldr	r3, [pc, #464]	@ (80060ec <ADC_ConfigureBoostMode+0x204>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01c      	beq.n	8005f68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005f2e:	f005 f8ad 	bl	800b08c <HAL_RCC_GetHCLKFreq>
 8005f32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f3c:	d010      	beq.n	8005f60 <ADC_ConfigureBoostMode+0x78>
 8005f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f42:	d873      	bhi.n	800602c <ADC_ConfigureBoostMode+0x144>
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f48:	d002      	beq.n	8005f50 <ADC_ConfigureBoostMode+0x68>
 8005f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f4e:	d16d      	bne.n	800602c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
        break;
 8005f5e:	e068      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	60fb      	str	r3, [r7, #12]
        break;
 8005f66:	e064      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005f68:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	f006 fb34 	bl	800c5dc <HAL_RCCEx_GetPeriphCLKFreq>
 8005f74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005f7e:	d051      	beq.n	8006024 <ADC_ConfigureBoostMode+0x13c>
 8005f80:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005f84:	d854      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005f86:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005f8a:	d047      	beq.n	800601c <ADC_ConfigureBoostMode+0x134>
 8005f8c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005f90:	d84e      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005f92:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005f96:	d03d      	beq.n	8006014 <ADC_ConfigureBoostMode+0x12c>
 8005f98:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005f9c:	d848      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa2:	d033      	beq.n	800600c <ADC_ConfigureBoostMode+0x124>
 8005fa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa8:	d842      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005faa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005fae:	d029      	beq.n	8006004 <ADC_ConfigureBoostMode+0x11c>
 8005fb0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005fb4:	d83c      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fb6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fba:	d01a      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fbc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fc0:	d836      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fc2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005fc6:	d014      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fc8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005fcc:	d830      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd2:	d00e      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd8:	d82a      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fde:	d008      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fe0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fe4:	d824      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fea:	d002      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ff0:	d11e      	bne.n	8006030 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	0c9b      	lsrs	r3, r3, #18
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	60fb      	str	r3, [r7, #12]
        break;
 8006002:	e016      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	60fb      	str	r3, [r7, #12]
        break;
 800600a:	e012      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	60fb      	str	r3, [r7, #12]
        break;
 8006012:	e00e      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	60fb      	str	r3, [r7, #12]
        break;
 800601a:	e00a      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	60fb      	str	r3, [r7, #12]
        break;
 8006022:	e006      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	60fb      	str	r3, [r7, #12]
        break;
 800602a:	e002      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
        break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006030:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006032:	f7fe fbd3 	bl	80047dc <HAL_GetREVID>
 8006036:	4603      	mov	r3, r0
 8006038:	f241 0203 	movw	r2, #4099	@ 0x1003
 800603c:	4293      	cmp	r3, r2
 800603e:	d815      	bhi.n	800606c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a2b      	ldr	r2, [pc, #172]	@ (80060f0 <ADC_ConfigureBoostMode+0x208>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d908      	bls.n	800605a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006056:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006058:	e03e      	b.n	80060d8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006068:	609a      	str	r2, [r3, #8]
}
 800606a:	e035      	b.n	80060d8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a1f      	ldr	r2, [pc, #124]	@ (80060f4 <ADC_ConfigureBoostMode+0x20c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d808      	bhi.n	800608c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006088:	609a      	str	r2, [r3, #8]
}
 800608a:	e025      	b.n	80060d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <ADC_ConfigureBoostMode+0x210>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d80a      	bhi.n	80060aa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	e016      	b.n	80060d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a13      	ldr	r2, [pc, #76]	@ (80060fc <ADC_ConfigureBoostMode+0x214>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d80a      	bhi.n	80060c8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060c4:	609a      	str	r2, [r3, #8]
}
 80060c6:	e007      	b.n	80060d8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80060d6:	609a      	str	r2, [r3, #8]
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40022000 	.word	0x40022000
 80060e4:	40022100 	.word	0x40022100
 80060e8:	40022300 	.word	0x40022300
 80060ec:	58026300 	.word	0x58026300
 80060f0:	01312d00 	.word	0x01312d00
 80060f4:	005f5e10 	.word	0x005f5e10
 80060f8:	00bebc20 	.word	0x00bebc20
 80060fc:	017d7840 	.word	0x017d7840

08006100 <LL_ADC_IsEnabled>:
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <LL_ADC_IsEnabled+0x18>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <LL_ADC_IsEnabled+0x1a>
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
	...

08006128 <LL_ADC_StartCalibration>:
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <LL_ADC_StartCalibration+0x38>)
 800613a:	4013      	ands	r3, r2
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006148:	430a      	orrs	r2, r1
 800614a:	4313      	orrs	r3, r2
 800614c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	3ffeffc0 	.word	0x3ffeffc0

08006164 <LL_ADC_IsCalibrationOnGoing>:
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006178:	d101      	bne.n	800617e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_ADC_REG_IsConversionOngoing>:
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b04      	cmp	r3, #4
 800619e:	d101      	bne.n	80061a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e04c      	b.n	800626c <HAL_ADCEx_Calibration_Start+0xb8>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff fe24 	bl	8005e28 <ADC_Disable>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d135      	bne.n	8006256 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ee:	4b21      	ldr	r3, [pc, #132]	@ (8006274 <HAL_ADCEx_Calibration_Start+0xc0>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	f043 0202 	orr.w	r2, r3, #2
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff ff90 	bl	8006128 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006208:	e014      	b.n	8006234 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d30d      	bcc.n	8006234 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621c:	f023 0312 	bic.w	r3, r3, #18
 8006220:	f043 0210 	orr.w	r2, r3, #16
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e01b      	b.n	800626c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff ff93 	bl	8006164 <LL_ADC_IsCalibrationOnGoing>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e2      	bne.n	800620a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006248:	f023 0303 	bic.w	r3, r3, #3
 800624c:	f043 0201 	orr.w	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54
 8006254:	e005      	b.n	8006262 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625a:	f043 0210 	orr.w	r2, r3, #16
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	ffffeefd 	.word	0xffffeefd
 8006278:	25c3f800 	.word	0x25c3f800

0800627c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b09f      	sub	sp, #124	@ 0x7c
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e0be      	b.n	800647c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006306:	2300      	movs	r3, #0
 8006308:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800630a:	2300      	movs	r3, #0
 800630c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a5c      	ldr	r2, [pc, #368]	@ (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d102      	bne.n	800631e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006318:	4b5b      	ldr	r3, [pc, #364]	@ (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800631a:	60bb      	str	r3, [r7, #8]
 800631c:	e001      	b.n	8006322 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632c:	f043 0220 	orr.w	r2, r3, #32
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e09d      	b.n	800647c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff ff22 	bl	800618c <LL_ADC_REG_IsConversionOngoing>
 8006348:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff ff1c 	bl	800618c <LL_ADC_REG_IsConversionOngoing>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d17f      	bne.n	800645a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800635a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800635c:	2b00      	cmp	r3, #0
 800635e:	d17c      	bne.n	800645a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a47      	ldr	r2, [pc, #284]	@ (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a46      	ldr	r2, [pc, #280]	@ (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d101      	bne.n	8006378 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006374:	4b45      	ldr	r3, [pc, #276]	@ (800648c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006376:	e000      	b.n	800637a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006378:	4b45      	ldr	r3, [pc, #276]	@ (8006490 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800637a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d039      	beq.n	80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	431a      	orrs	r2, r3
 8006392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006394:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a3a      	ldr	r2, [pc, #232]	@ (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a38      	ldr	r2, [pc, #224]	@ (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10e      	bne.n	80063c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80063aa:	4836      	ldr	r0, [pc, #216]	@ (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80063ac:	f7ff fea8 	bl	8006100 <LL_ADC_IsEnabled>
 80063b0:	4604      	mov	r4, r0
 80063b2:	4835      	ldr	r0, [pc, #212]	@ (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80063b4:	f7ff fea4 	bl	8006100 <LL_ADC_IsEnabled>
 80063b8:	4603      	mov	r3, r0
 80063ba:	4323      	orrs	r3, r4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e008      	b.n	80063da <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80063c8:	4832      	ldr	r0, [pc, #200]	@ (8006494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80063ca:	f7ff fe99 	bl	8006100 <LL_ADC_IsEnabled>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d047      	beq.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80063de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006498 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	6811      	ldr	r1, [r2, #0]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	6892      	ldr	r2, [r2, #8]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	431a      	orrs	r2, r3
 80063f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80063f6:	e03a      	b.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80063f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006402:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1e      	ldr	r2, [pc, #120]	@ (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1d      	ldr	r2, [pc, #116]	@ (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10e      	bne.n	8006436 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006418:	481a      	ldr	r0, [pc, #104]	@ (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800641a:	f7ff fe71 	bl	8006100 <LL_ADC_IsEnabled>
 800641e:	4604      	mov	r4, r0
 8006420:	4819      	ldr	r0, [pc, #100]	@ (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006422:	f7ff fe6d 	bl	8006100 <LL_ADC_IsEnabled>
 8006426:	4603      	mov	r3, r0
 8006428:	4323      	orrs	r3, r4
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf0c      	ite	eq
 800642e:	2301      	moveq	r3, #1
 8006430:	2300      	movne	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e008      	b.n	8006448 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006436:	4817      	ldr	r0, [pc, #92]	@ (8006494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006438:	f7ff fe62 	bl	8006100 <LL_ADC_IsEnabled>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d010      	beq.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800644c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	4b11      	ldr	r3, [pc, #68]	@ (8006498 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006452:	4013      	ands	r3, r2
 8006454:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006456:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006458:	e009      	b.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800646c:	e000      	b.n	8006470 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800646e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006478:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800647c:	4618      	mov	r0, r3
 800647e:	377c      	adds	r7, #124	@ 0x7c
 8006480:	46bd      	mov	sp, r7
 8006482:	bd90      	pop	{r4, r7, pc}
 8006484:	40022000 	.word	0x40022000
 8006488:	40022100 	.word	0x40022100
 800648c:	40022300 	.word	0x40022300
 8006490:	58026300 	.word	0x58026300
 8006494:	58026000 	.word	0x58026000
 8006498:	fffff0e0 	.word	0xfffff0e0

0800649c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064ac:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <__NVIC_SetPriorityGrouping+0x40>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80064b8:	4013      	ands	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80064c4:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <__NVIC_SetPriorityGrouping+0x44>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064ca:	4a04      	ldr	r2, [pc, #16]	@ (80064dc <__NVIC_SetPriorityGrouping+0x40>)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	60d3      	str	r3, [r2, #12]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	e000ed00 	.word	0xe000ed00
 80064e0:	05fa0000 	.word	0x05fa0000

080064e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064e8:	4b04      	ldr	r3, [pc, #16]	@ (80064fc <__NVIC_GetPriorityGrouping+0x18>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	0a1b      	lsrs	r3, r3, #8
 80064ee:	f003 0307 	and.w	r3, r3, #7
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	e000ed00 	.word	0xe000ed00

08006500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800650a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800650e:	2b00      	cmp	r3, #0
 8006510:	db0b      	blt.n	800652a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	f003 021f 	and.w	r2, r3, #31
 8006518:	4907      	ldr	r1, [pc, #28]	@ (8006538 <__NVIC_EnableIRQ+0x38>)
 800651a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2001      	movs	r0, #1
 8006522:	fa00 f202 	lsl.w	r2, r0, r2
 8006526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	e000e100 	.word	0xe000e100

0800653c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	6039      	str	r1, [r7, #0]
 8006546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800654c:	2b00      	cmp	r3, #0
 800654e:	db0a      	blt.n	8006566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	490c      	ldr	r1, [pc, #48]	@ (8006588 <__NVIC_SetPriority+0x4c>)
 8006556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800655a:	0112      	lsls	r2, r2, #4
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	440b      	add	r3, r1
 8006560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006564:	e00a      	b.n	800657c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4908      	ldr	r1, [pc, #32]	@ (800658c <__NVIC_SetPriority+0x50>)
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	3b04      	subs	r3, #4
 8006574:	0112      	lsls	r2, r2, #4
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	440b      	add	r3, r1
 800657a:	761a      	strb	r2, [r3, #24]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	e000e100 	.word	0xe000e100
 800658c:	e000ed00 	.word	0xe000ed00

08006590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	@ 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f1c3 0307 	rsb	r3, r3, #7
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	bf28      	it	cs
 80065ae:	2304      	movcs	r3, #4
 80065b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	3304      	adds	r3, #4
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d902      	bls.n	80065c0 <NVIC_EncodePriority+0x30>
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3b03      	subs	r3, #3
 80065be:	e000      	b.n	80065c2 <NVIC_EncodePriority+0x32>
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43da      	mvns	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	401a      	ands	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065d8:	f04f 31ff 	mov.w	r1, #4294967295
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	fa01 f303 	lsl.w	r3, r1, r3
 80065e2:	43d9      	mvns	r1, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065e8:	4313      	orrs	r3, r2
         );
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3724      	adds	r7, #36	@ 0x24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff4c 	bl	800649c <__NVIC_SetPriorityGrouping>
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800661a:	f7ff ff63 	bl	80064e4 <__NVIC_GetPriorityGrouping>
 800661e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6978      	ldr	r0, [r7, #20]
 8006626:	f7ff ffb3 	bl	8006590 <NVIC_EncodePriority>
 800662a:	4602      	mov	r2, r0
 800662c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff ff82 	bl	800653c <__NVIC_SetPriority>
}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800664a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff56 	bl	8006500 <__NVIC_EnableIRQ>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006660:	f3bf 8f5f 	dmb	sy
}
 8006664:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006666:	4b07      	ldr	r3, [pc, #28]	@ (8006684 <HAL_MPU_Disable+0x28>)
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	4a06      	ldr	r2, [pc, #24]	@ (8006684 <HAL_MPU_Disable+0x28>)
 800666c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006670:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <HAL_MPU_Disable+0x2c>)
 8006674:	2200      	movs	r2, #0
 8006676:	605a      	str	r2, [r3, #4]
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	e000ed00 	.word	0xe000ed00
 8006688:	e000ed90 	.word	0xe000ed90

0800668c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006694:	4a0b      	ldr	r2, [pc, #44]	@ (80066c4 <HAL_MPU_Enable+0x38>)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800669e:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <HAL_MPU_Enable+0x3c>)
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	4a09      	ldr	r2, [pc, #36]	@ (80066c8 <HAL_MPU_Enable+0x3c>)
 80066a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80066aa:	f3bf 8f4f 	dsb	sy
}
 80066ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066b0:	f3bf 8f6f 	isb	sy
}
 80066b4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	e000ed90 	.word	0xe000ed90
 80066c8:	e000ed00 	.word	0xe000ed00

080066cc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	785a      	ldrb	r2, [r3, #1]
 80066d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <HAL_MPU_ConfigRegion+0x7c>)
 80066da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80066dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006748 <HAL_MPU_ConfigRegion+0x7c>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	4a19      	ldr	r2, [pc, #100]	@ (8006748 <HAL_MPU_ConfigRegion+0x7c>)
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80066e8:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <HAL_MPU_ConfigRegion+0x7c>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	7b1b      	ldrb	r3, [r3, #12]
 80066f4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	7adb      	ldrb	r3, [r3, #11]
 80066fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7a9b      	ldrb	r3, [r3, #10]
 8006702:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006704:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	7b5b      	ldrb	r3, [r3, #13]
 800670a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800670c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	7b9b      	ldrb	r3, [r3, #14]
 8006712:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006714:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7bdb      	ldrb	r3, [r3, #15]
 800671a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800671c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7a5b      	ldrb	r3, [r3, #9]
 8006722:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006724:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7a1b      	ldrb	r3, [r3, #8]
 800672a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800672c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	7812      	ldrb	r2, [r2, #0]
 8006732:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006734:	4a04      	ldr	r2, [pc, #16]	@ (8006748 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006736:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006738:	6113      	str	r3, [r2, #16]
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	e000ed90 	.word	0xe000ed90

0800674c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006754:	f7fe f812 	bl	800477c <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e316      	b.n	8006d92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a66      	ldr	r2, [pc, #408]	@ (8006904 <HAL_DMA_Init+0x1b8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d04a      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a65      	ldr	r2, [pc, #404]	@ (8006908 <HAL_DMA_Init+0x1bc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d045      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a63      	ldr	r2, [pc, #396]	@ (800690c <HAL_DMA_Init+0x1c0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d040      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a62      	ldr	r2, [pc, #392]	@ (8006910 <HAL_DMA_Init+0x1c4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d03b      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a60      	ldr	r2, [pc, #384]	@ (8006914 <HAL_DMA_Init+0x1c8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d036      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a5f      	ldr	r2, [pc, #380]	@ (8006918 <HAL_DMA_Init+0x1cc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d031      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a5d      	ldr	r2, [pc, #372]	@ (800691c <HAL_DMA_Init+0x1d0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02c      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006920 <HAL_DMA_Init+0x1d4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d027      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a5a      	ldr	r2, [pc, #360]	@ (8006924 <HAL_DMA_Init+0x1d8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d022      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a59      	ldr	r2, [pc, #356]	@ (8006928 <HAL_DMA_Init+0x1dc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01d      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a57      	ldr	r2, [pc, #348]	@ (800692c <HAL_DMA_Init+0x1e0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a56      	ldr	r2, [pc, #344]	@ (8006930 <HAL_DMA_Init+0x1e4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a54      	ldr	r2, [pc, #336]	@ (8006934 <HAL_DMA_Init+0x1e8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a53      	ldr	r2, [pc, #332]	@ (8006938 <HAL_DMA_Init+0x1ec>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a51      	ldr	r2, [pc, #324]	@ (800693c <HAL_DMA_Init+0x1f0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_DMA_Init+0xb8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a50      	ldr	r2, [pc, #320]	@ (8006940 <HAL_DMA_Init+0x1f4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d101      	bne.n	8006808 <HAL_DMA_Init+0xbc>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <HAL_DMA_Init+0xbe>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 813b 	beq.w	8006a86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a37      	ldr	r2, [pc, #220]	@ (8006904 <HAL_DMA_Init+0x1b8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d04a      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a36      	ldr	r2, [pc, #216]	@ (8006908 <HAL_DMA_Init+0x1bc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d045      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a34      	ldr	r2, [pc, #208]	@ (800690c <HAL_DMA_Init+0x1c0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d040      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a33      	ldr	r2, [pc, #204]	@ (8006910 <HAL_DMA_Init+0x1c4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d03b      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a31      	ldr	r2, [pc, #196]	@ (8006914 <HAL_DMA_Init+0x1c8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d036      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a30      	ldr	r2, [pc, #192]	@ (8006918 <HAL_DMA_Init+0x1cc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d031      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a2e      	ldr	r2, [pc, #184]	@ (800691c <HAL_DMA_Init+0x1d0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d02c      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2d      	ldr	r2, [pc, #180]	@ (8006920 <HAL_DMA_Init+0x1d4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d027      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2b      	ldr	r2, [pc, #172]	@ (8006924 <HAL_DMA_Init+0x1d8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d022      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2a      	ldr	r2, [pc, #168]	@ (8006928 <HAL_DMA_Init+0x1dc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d01d      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a28      	ldr	r2, [pc, #160]	@ (800692c <HAL_DMA_Init+0x1e0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a27      	ldr	r2, [pc, #156]	@ (8006930 <HAL_DMA_Init+0x1e4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a25      	ldr	r2, [pc, #148]	@ (8006934 <HAL_DMA_Init+0x1e8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a24      	ldr	r2, [pc, #144]	@ (8006938 <HAL_DMA_Init+0x1ec>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a22      	ldr	r2, [pc, #136]	@ (800693c <HAL_DMA_Init+0x1f0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_DMA_Init+0x174>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a21      	ldr	r2, [pc, #132]	@ (8006940 <HAL_DMA_Init+0x1f4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d108      	bne.n	80068d2 <HAL_DMA_Init+0x186>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e007      	b.n	80068e2 <HAL_DMA_Init+0x196>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0201 	bic.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068e2:	e02f      	b.n	8006944 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068e4:	f7fd ff4a 	bl	800477c <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d928      	bls.n	8006944 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2203      	movs	r2, #3
 80068fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e246      	b.n	8006d92 <HAL_DMA_Init+0x646>
 8006904:	40020010 	.word	0x40020010
 8006908:	40020028 	.word	0x40020028
 800690c:	40020040 	.word	0x40020040
 8006910:	40020058 	.word	0x40020058
 8006914:	40020070 	.word	0x40020070
 8006918:	40020088 	.word	0x40020088
 800691c:	400200a0 	.word	0x400200a0
 8006920:	400200b8 	.word	0x400200b8
 8006924:	40020410 	.word	0x40020410
 8006928:	40020428 	.word	0x40020428
 800692c:	40020440 	.word	0x40020440
 8006930:	40020458 	.word	0x40020458
 8006934:	40020470 	.word	0x40020470
 8006938:	40020488 	.word	0x40020488
 800693c:	400204a0 	.word	0x400204a0
 8006940:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1c8      	bne.n	80068e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4b83      	ldr	r3, [pc, #524]	@ (8006b6c <HAL_DMA_Init+0x420>)
 800695e:	4013      	ands	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800696a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006976:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006982:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	2b04      	cmp	r3, #4
 8006996:	d107      	bne.n	80069a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	4313      	orrs	r3, r2
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80069a8:	4b71      	ldr	r3, [pc, #452]	@ (8006b70 <HAL_DMA_Init+0x424>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	4b71      	ldr	r3, [pc, #452]	@ (8006b74 <HAL_DMA_Init+0x428>)
 80069ae:	4013      	ands	r3, r2
 80069b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069b4:	d328      	bcc.n	8006a08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b28      	cmp	r3, #40	@ 0x28
 80069bc:	d903      	bls.n	80069c6 <HAL_DMA_Init+0x27a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80069c4:	d917      	bls.n	80069f6 <HAL_DMA_Init+0x2aa>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80069cc:	d903      	bls.n	80069d6 <HAL_DMA_Init+0x28a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b42      	cmp	r3, #66	@ 0x42
 80069d4:	d90f      	bls.n	80069f6 <HAL_DMA_Init+0x2aa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b46      	cmp	r3, #70	@ 0x46
 80069dc:	d903      	bls.n	80069e6 <HAL_DMA_Init+0x29a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b48      	cmp	r3, #72	@ 0x48
 80069e4:	d907      	bls.n	80069f6 <HAL_DMA_Init+0x2aa>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80069ec:	d905      	bls.n	80069fa <HAL_DMA_Init+0x2ae>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b52      	cmp	r3, #82	@ 0x52
 80069f4:	d801      	bhi.n	80069fa <HAL_DMA_Init+0x2ae>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <HAL_DMA_Init+0x2b0>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0307 	bic.w	r3, r3, #7
 8006a1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d117      	bne.n	8006a62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f002 fb33 	bl	80090b0 <DMA_CheckFifoParam>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d008      	beq.n	8006a62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2240      	movs	r2, #64	@ 0x40
 8006a54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e197      	b.n	8006d92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f002 fa6e 	bl	8008f4c <DMA_CalcBaseAndBitshift>
 8006a70:	4603      	mov	r3, r0
 8006a72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	223f      	movs	r2, #63	@ 0x3f
 8006a7e:	409a      	lsls	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	e0cd      	b.n	8006c22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8006b78 <HAL_DMA_Init+0x42c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d022      	beq.n	8006ad6 <HAL_DMA_Init+0x38a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a39      	ldr	r2, [pc, #228]	@ (8006b7c <HAL_DMA_Init+0x430>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01d      	beq.n	8006ad6 <HAL_DMA_Init+0x38a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a38      	ldr	r2, [pc, #224]	@ (8006b80 <HAL_DMA_Init+0x434>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <HAL_DMA_Init+0x38a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a36      	ldr	r2, [pc, #216]	@ (8006b84 <HAL_DMA_Init+0x438>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <HAL_DMA_Init+0x38a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a35      	ldr	r2, [pc, #212]	@ (8006b88 <HAL_DMA_Init+0x43c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_DMA_Init+0x38a>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a33      	ldr	r2, [pc, #204]	@ (8006b8c <HAL_DMA_Init+0x440>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_DMA_Init+0x38a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a32      	ldr	r2, [pc, #200]	@ (8006b90 <HAL_DMA_Init+0x444>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_DMA_Init+0x38a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a30      	ldr	r2, [pc, #192]	@ (8006b94 <HAL_DMA_Init+0x448>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d101      	bne.n	8006ada <HAL_DMA_Init+0x38e>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <HAL_DMA_Init+0x390>
 8006ada:	2300      	movs	r3, #0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8097 	beq.w	8006c10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a24      	ldr	r2, [pc, #144]	@ (8006b78 <HAL_DMA_Init+0x42c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d021      	beq.n	8006b30 <HAL_DMA_Init+0x3e4>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a22      	ldr	r2, [pc, #136]	@ (8006b7c <HAL_DMA_Init+0x430>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01c      	beq.n	8006b30 <HAL_DMA_Init+0x3e4>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a21      	ldr	r2, [pc, #132]	@ (8006b80 <HAL_DMA_Init+0x434>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d017      	beq.n	8006b30 <HAL_DMA_Init+0x3e4>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1f      	ldr	r2, [pc, #124]	@ (8006b84 <HAL_DMA_Init+0x438>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d012      	beq.n	8006b30 <HAL_DMA_Init+0x3e4>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b88 <HAL_DMA_Init+0x43c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00d      	beq.n	8006b30 <HAL_DMA_Init+0x3e4>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1c      	ldr	r2, [pc, #112]	@ (8006b8c <HAL_DMA_Init+0x440>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d008      	beq.n	8006b30 <HAL_DMA_Init+0x3e4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1b      	ldr	r2, [pc, #108]	@ (8006b90 <HAL_DMA_Init+0x444>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <HAL_DMA_Init+0x3e4>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a19      	ldr	r2, [pc, #100]	@ (8006b94 <HAL_DMA_Init+0x448>)
 8006b2e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4b13      	ldr	r3, [pc, #76]	@ (8006b98 <HAL_DMA_Init+0x44c>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b40      	cmp	r3, #64	@ 0x40
 8006b56:	d021      	beq.n	8006b9c <HAL_DMA_Init+0x450>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b80      	cmp	r3, #128	@ 0x80
 8006b5e:	d102      	bne.n	8006b66 <HAL_DMA_Init+0x41a>
 8006b60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b64:	e01b      	b.n	8006b9e <HAL_DMA_Init+0x452>
 8006b66:	2300      	movs	r3, #0
 8006b68:	e019      	b.n	8006b9e <HAL_DMA_Init+0x452>
 8006b6a:	bf00      	nop
 8006b6c:	fe10803f 	.word	0xfe10803f
 8006b70:	5c001000 	.word	0x5c001000
 8006b74:	ffff0000 	.word	0xffff0000
 8006b78:	58025408 	.word	0x58025408
 8006b7c:	5802541c 	.word	0x5802541c
 8006b80:	58025430 	.word	0x58025430
 8006b84:	58025444 	.word	0x58025444
 8006b88:	58025458 	.word	0x58025458
 8006b8c:	5802546c 	.word	0x5802546c
 8006b90:	58025480 	.word	0x58025480
 8006b94:	58025494 	.word	0x58025494
 8006b98:	fffe000f 	.word	0xfffe000f
 8006b9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68d2      	ldr	r2, [r2, #12]
 8006ba2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006bbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006bcc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	4b6e      	ldr	r3, [pc, #440]	@ (8006d9c <HAL_DMA_Init+0x650>)
 8006be4:	4413      	add	r3, r2
 8006be6:	4a6e      	ldr	r2, [pc, #440]	@ (8006da0 <HAL_DMA_Init+0x654>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	009a      	lsls	r2, r3, #2
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f002 f9a9 	bl	8008f4c <DMA_CalcBaseAndBitshift>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2201      	movs	r2, #1
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	e008      	b.n	8006c22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2240      	movs	r2, #64	@ 0x40
 8006c14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e0b7      	b.n	8006d92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a5f      	ldr	r2, [pc, #380]	@ (8006da4 <HAL_DMA_Init+0x658>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d072      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5d      	ldr	r2, [pc, #372]	@ (8006da8 <HAL_DMA_Init+0x65c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d06d      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8006dac <HAL_DMA_Init+0x660>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d068      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a5a      	ldr	r2, [pc, #360]	@ (8006db0 <HAL_DMA_Init+0x664>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d063      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a59      	ldr	r2, [pc, #356]	@ (8006db4 <HAL_DMA_Init+0x668>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d05e      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a57      	ldr	r2, [pc, #348]	@ (8006db8 <HAL_DMA_Init+0x66c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d059      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a56      	ldr	r2, [pc, #344]	@ (8006dbc <HAL_DMA_Init+0x670>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d054      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a54      	ldr	r2, [pc, #336]	@ (8006dc0 <HAL_DMA_Init+0x674>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d04f      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a53      	ldr	r2, [pc, #332]	@ (8006dc4 <HAL_DMA_Init+0x678>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d04a      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a51      	ldr	r2, [pc, #324]	@ (8006dc8 <HAL_DMA_Init+0x67c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d045      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a50      	ldr	r2, [pc, #320]	@ (8006dcc <HAL_DMA_Init+0x680>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d040      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a4e      	ldr	r2, [pc, #312]	@ (8006dd0 <HAL_DMA_Init+0x684>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d03b      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8006dd4 <HAL_DMA_Init+0x688>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d036      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8006dd8 <HAL_DMA_Init+0x68c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d031      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8006ddc <HAL_DMA_Init+0x690>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d02c      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a48      	ldr	r2, [pc, #288]	@ (8006de0 <HAL_DMA_Init+0x694>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d027      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a47      	ldr	r2, [pc, #284]	@ (8006de4 <HAL_DMA_Init+0x698>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d022      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a45      	ldr	r2, [pc, #276]	@ (8006de8 <HAL_DMA_Init+0x69c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01d      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a44      	ldr	r2, [pc, #272]	@ (8006dec <HAL_DMA_Init+0x6a0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d018      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a42      	ldr	r2, [pc, #264]	@ (8006df0 <HAL_DMA_Init+0x6a4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a41      	ldr	r2, [pc, #260]	@ (8006df4 <HAL_DMA_Init+0x6a8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a3f      	ldr	r2, [pc, #252]	@ (8006df8 <HAL_DMA_Init+0x6ac>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d009      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3e      	ldr	r2, [pc, #248]	@ (8006dfc <HAL_DMA_Init+0x6b0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_DMA_Init+0x5c6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e00 <HAL_DMA_Init+0x6b4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <HAL_DMA_Init+0x5ca>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <HAL_DMA_Init+0x5cc>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d032      	beq.n	8006d82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f002 fa43 	bl	80091a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b80      	cmp	r3, #128	@ 0x80
 8006d28:	d102      	bne.n	8006d30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_DMA_Init+0x624>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d80c      	bhi.n	8006d70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 fac0 	bl	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e008      	b.n	8006d82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	a7fdabf8 	.word	0xa7fdabf8
 8006da0:	cccccccd 	.word	0xcccccccd
 8006da4:	40020010 	.word	0x40020010
 8006da8:	40020028 	.word	0x40020028
 8006dac:	40020040 	.word	0x40020040
 8006db0:	40020058 	.word	0x40020058
 8006db4:	40020070 	.word	0x40020070
 8006db8:	40020088 	.word	0x40020088
 8006dbc:	400200a0 	.word	0x400200a0
 8006dc0:	400200b8 	.word	0x400200b8
 8006dc4:	40020410 	.word	0x40020410
 8006dc8:	40020428 	.word	0x40020428
 8006dcc:	40020440 	.word	0x40020440
 8006dd0:	40020458 	.word	0x40020458
 8006dd4:	40020470 	.word	0x40020470
 8006dd8:	40020488 	.word	0x40020488
 8006ddc:	400204a0 	.word	0x400204a0
 8006de0:	400204b8 	.word	0x400204b8
 8006de4:	58025408 	.word	0x58025408
 8006de8:	5802541c 	.word	0x5802541c
 8006dec:	58025430 	.word	0x58025430
 8006df0:	58025444 	.word	0x58025444
 8006df4:	58025458 	.word	0x58025458
 8006df8:	5802546c 	.word	0x5802546c
 8006dfc:	58025480 	.word	0x58025480
 8006e00:	58025494 	.word	0x58025494

08006e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e226      	b.n	800726e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_DMA_Start_IT+0x2a>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e21f      	b.n	800726e <HAL_DMA_Start_IT+0x46a>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	f040 820a 	bne.w	8007258 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a68      	ldr	r2, [pc, #416]	@ (8006ff8 <HAL_DMA_Start_IT+0x1f4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d04a      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a66      	ldr	r2, [pc, #408]	@ (8006ffc <HAL_DMA_Start_IT+0x1f8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d045      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a65      	ldr	r2, [pc, #404]	@ (8007000 <HAL_DMA_Start_IT+0x1fc>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d040      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a63      	ldr	r2, [pc, #396]	@ (8007004 <HAL_DMA_Start_IT+0x200>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d03b      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a62      	ldr	r2, [pc, #392]	@ (8007008 <HAL_DMA_Start_IT+0x204>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d036      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a60      	ldr	r2, [pc, #384]	@ (800700c <HAL_DMA_Start_IT+0x208>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d031      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a5f      	ldr	r2, [pc, #380]	@ (8007010 <HAL_DMA_Start_IT+0x20c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d02c      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8007014 <HAL_DMA_Start_IT+0x210>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d027      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8007018 <HAL_DMA_Start_IT+0x214>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d022      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800701c <HAL_DMA_Start_IT+0x218>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01d      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a59      	ldr	r2, [pc, #356]	@ (8007020 <HAL_DMA_Start_IT+0x21c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a57      	ldr	r2, [pc, #348]	@ (8007024 <HAL_DMA_Start_IT+0x220>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a56      	ldr	r2, [pc, #344]	@ (8007028 <HAL_DMA_Start_IT+0x224>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a54      	ldr	r2, [pc, #336]	@ (800702c <HAL_DMA_Start_IT+0x228>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a53      	ldr	r2, [pc, #332]	@ (8007030 <HAL_DMA_Start_IT+0x22c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a51      	ldr	r2, [pc, #324]	@ (8007034 <HAL_DMA_Start_IT+0x230>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d108      	bne.n	8006f04 <HAL_DMA_Start_IT+0x100>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e007      	b.n	8006f14 <HAL_DMA_Start_IT+0x110>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0201 	bic.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f001 fe6a 	bl	8008bf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a34      	ldr	r2, [pc, #208]	@ (8006ff8 <HAL_DMA_Start_IT+0x1f4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d04a      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a33      	ldr	r2, [pc, #204]	@ (8006ffc <HAL_DMA_Start_IT+0x1f8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d045      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a31      	ldr	r2, [pc, #196]	@ (8007000 <HAL_DMA_Start_IT+0x1fc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d040      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a30      	ldr	r2, [pc, #192]	@ (8007004 <HAL_DMA_Start_IT+0x200>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d03b      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007008 <HAL_DMA_Start_IT+0x204>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d036      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a2d      	ldr	r2, [pc, #180]	@ (800700c <HAL_DMA_Start_IT+0x208>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d031      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a2b      	ldr	r2, [pc, #172]	@ (8007010 <HAL_DMA_Start_IT+0x20c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02c      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007014 <HAL_DMA_Start_IT+0x210>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d027      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a28      	ldr	r2, [pc, #160]	@ (8007018 <HAL_DMA_Start_IT+0x214>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d022      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a27      	ldr	r2, [pc, #156]	@ (800701c <HAL_DMA_Start_IT+0x218>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d01d      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a25      	ldr	r2, [pc, #148]	@ (8007020 <HAL_DMA_Start_IT+0x21c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d018      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a24      	ldr	r2, [pc, #144]	@ (8007024 <HAL_DMA_Start_IT+0x220>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a22      	ldr	r2, [pc, #136]	@ (8007028 <HAL_DMA_Start_IT+0x224>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a21      	ldr	r2, [pc, #132]	@ (800702c <HAL_DMA_Start_IT+0x228>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8007030 <HAL_DMA_Start_IT+0x22c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_DMA_Start_IT+0x1bc>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1e      	ldr	r2, [pc, #120]	@ (8007034 <HAL_DMA_Start_IT+0x230>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d101      	bne.n	8006fc4 <HAL_DMA_Start_IT+0x1c0>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_DMA_Start_IT+0x1c2>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d036      	beq.n	8007038 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f023 021e 	bic.w	r2, r3, #30
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0216 	orr.w	r2, r2, #22
 8006fdc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d03e      	beq.n	8007064 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0208 	orr.w	r2, r2, #8
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e035      	b.n	8007064 <HAL_DMA_Start_IT+0x260>
 8006ff8:	40020010 	.word	0x40020010
 8006ffc:	40020028 	.word	0x40020028
 8007000:	40020040 	.word	0x40020040
 8007004:	40020058 	.word	0x40020058
 8007008:	40020070 	.word	0x40020070
 800700c:	40020088 	.word	0x40020088
 8007010:	400200a0 	.word	0x400200a0
 8007014:	400200b8 	.word	0x400200b8
 8007018:	40020410 	.word	0x40020410
 800701c:	40020428 	.word	0x40020428
 8007020:	40020440 	.word	0x40020440
 8007024:	40020458 	.word	0x40020458
 8007028:	40020470 	.word	0x40020470
 800702c:	40020488 	.word	0x40020488
 8007030:	400204a0 	.word	0x400204a0
 8007034:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 020e 	bic.w	r2, r3, #14
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 020a 	orr.w	r2, r2, #10
 800704a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0204 	orr.w	r2, r2, #4
 8007062:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a83      	ldr	r2, [pc, #524]	@ (8007278 <HAL_DMA_Start_IT+0x474>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d072      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a82      	ldr	r2, [pc, #520]	@ (800727c <HAL_DMA_Start_IT+0x478>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d06d      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a80      	ldr	r2, [pc, #512]	@ (8007280 <HAL_DMA_Start_IT+0x47c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d068      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a7f      	ldr	r2, [pc, #508]	@ (8007284 <HAL_DMA_Start_IT+0x480>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d063      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a7d      	ldr	r2, [pc, #500]	@ (8007288 <HAL_DMA_Start_IT+0x484>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d05e      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a7c      	ldr	r2, [pc, #496]	@ (800728c <HAL_DMA_Start_IT+0x488>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d059      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a7a      	ldr	r2, [pc, #488]	@ (8007290 <HAL_DMA_Start_IT+0x48c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d054      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a79      	ldr	r2, [pc, #484]	@ (8007294 <HAL_DMA_Start_IT+0x490>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d04f      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a77      	ldr	r2, [pc, #476]	@ (8007298 <HAL_DMA_Start_IT+0x494>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d04a      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a76      	ldr	r2, [pc, #472]	@ (800729c <HAL_DMA_Start_IT+0x498>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d045      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a74      	ldr	r2, [pc, #464]	@ (80072a0 <HAL_DMA_Start_IT+0x49c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d040      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a73      	ldr	r2, [pc, #460]	@ (80072a4 <HAL_DMA_Start_IT+0x4a0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d03b      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a71      	ldr	r2, [pc, #452]	@ (80072a8 <HAL_DMA_Start_IT+0x4a4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d036      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a70      	ldr	r2, [pc, #448]	@ (80072ac <HAL_DMA_Start_IT+0x4a8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d031      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a6e      	ldr	r2, [pc, #440]	@ (80072b0 <HAL_DMA_Start_IT+0x4ac>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d02c      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a6d      	ldr	r2, [pc, #436]	@ (80072b4 <HAL_DMA_Start_IT+0x4b0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d027      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a6b      	ldr	r2, [pc, #428]	@ (80072b8 <HAL_DMA_Start_IT+0x4b4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d022      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a6a      	ldr	r2, [pc, #424]	@ (80072bc <HAL_DMA_Start_IT+0x4b8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d01d      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a68      	ldr	r2, [pc, #416]	@ (80072c0 <HAL_DMA_Start_IT+0x4bc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d018      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a67      	ldr	r2, [pc, #412]	@ (80072c4 <HAL_DMA_Start_IT+0x4c0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a65      	ldr	r2, [pc, #404]	@ (80072c8 <HAL_DMA_Start_IT+0x4c4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00e      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a64      	ldr	r2, [pc, #400]	@ (80072cc <HAL_DMA_Start_IT+0x4c8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a62      	ldr	r2, [pc, #392]	@ (80072d0 <HAL_DMA_Start_IT+0x4cc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <HAL_DMA_Start_IT+0x350>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a61      	ldr	r2, [pc, #388]	@ (80072d4 <HAL_DMA_Start_IT+0x4d0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d101      	bne.n	8007158 <HAL_DMA_Start_IT+0x354>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <HAL_DMA_Start_IT+0x356>
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01a      	beq.n	8007194 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007176:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800717a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800718e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007192:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a37      	ldr	r2, [pc, #220]	@ (8007278 <HAL_DMA_Start_IT+0x474>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04a      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a36      	ldr	r2, [pc, #216]	@ (800727c <HAL_DMA_Start_IT+0x478>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d045      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a34      	ldr	r2, [pc, #208]	@ (8007280 <HAL_DMA_Start_IT+0x47c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d040      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a33      	ldr	r2, [pc, #204]	@ (8007284 <HAL_DMA_Start_IT+0x480>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d03b      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a31      	ldr	r2, [pc, #196]	@ (8007288 <HAL_DMA_Start_IT+0x484>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d036      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a30      	ldr	r2, [pc, #192]	@ (800728c <HAL_DMA_Start_IT+0x488>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d031      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007290 <HAL_DMA_Start_IT+0x48c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02c      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2d      	ldr	r2, [pc, #180]	@ (8007294 <HAL_DMA_Start_IT+0x490>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d027      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007298 <HAL_DMA_Start_IT+0x494>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d022      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2a      	ldr	r2, [pc, #168]	@ (800729c <HAL_DMA_Start_IT+0x498>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d01d      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a28      	ldr	r2, [pc, #160]	@ (80072a0 <HAL_DMA_Start_IT+0x49c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a27      	ldr	r2, [pc, #156]	@ (80072a4 <HAL_DMA_Start_IT+0x4a0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a25      	ldr	r2, [pc, #148]	@ (80072a8 <HAL_DMA_Start_IT+0x4a4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a24      	ldr	r2, [pc, #144]	@ (80072ac <HAL_DMA_Start_IT+0x4a8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a22      	ldr	r2, [pc, #136]	@ (80072b0 <HAL_DMA_Start_IT+0x4ac>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_DMA_Start_IT+0x430>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a21      	ldr	r2, [pc, #132]	@ (80072b4 <HAL_DMA_Start_IT+0x4b0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d108      	bne.n	8007246 <HAL_DMA_Start_IT+0x442>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	e012      	b.n	800726c <HAL_DMA_Start_IT+0x468>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e009      	b.n	800726c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800725e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40020010 	.word	0x40020010
 800727c:	40020028 	.word	0x40020028
 8007280:	40020040 	.word	0x40020040
 8007284:	40020058 	.word	0x40020058
 8007288:	40020070 	.word	0x40020070
 800728c:	40020088 	.word	0x40020088
 8007290:	400200a0 	.word	0x400200a0
 8007294:	400200b8 	.word	0x400200b8
 8007298:	40020410 	.word	0x40020410
 800729c:	40020428 	.word	0x40020428
 80072a0:	40020440 	.word	0x40020440
 80072a4:	40020458 	.word	0x40020458
 80072a8:	40020470 	.word	0x40020470
 80072ac:	40020488 	.word	0x40020488
 80072b0:	400204a0 	.word	0x400204a0
 80072b4:	400204b8 	.word	0x400204b8
 80072b8:	58025408 	.word	0x58025408
 80072bc:	5802541c 	.word	0x5802541c
 80072c0:	58025430 	.word	0x58025430
 80072c4:	58025444 	.word	0x58025444
 80072c8:	58025458 	.word	0x58025458
 80072cc:	5802546c 	.word	0x5802546c
 80072d0:	58025480 	.word	0x58025480
 80072d4:	58025494 	.word	0x58025494

080072d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80072e0:	f7fd fa4c 	bl	800477c <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e2dc      	b.n	80078aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d008      	beq.n	800730e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2280      	movs	r2, #128	@ 0x80
 8007300:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e2cd      	b.n	80078aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a76      	ldr	r2, [pc, #472]	@ (80074ec <HAL_DMA_Abort+0x214>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d04a      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a74      	ldr	r2, [pc, #464]	@ (80074f0 <HAL_DMA_Abort+0x218>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d045      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a73      	ldr	r2, [pc, #460]	@ (80074f4 <HAL_DMA_Abort+0x21c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d040      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a71      	ldr	r2, [pc, #452]	@ (80074f8 <HAL_DMA_Abort+0x220>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d03b      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a70      	ldr	r2, [pc, #448]	@ (80074fc <HAL_DMA_Abort+0x224>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d036      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a6e      	ldr	r2, [pc, #440]	@ (8007500 <HAL_DMA_Abort+0x228>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d031      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a6d      	ldr	r2, [pc, #436]	@ (8007504 <HAL_DMA_Abort+0x22c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d02c      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6b      	ldr	r2, [pc, #428]	@ (8007508 <HAL_DMA_Abort+0x230>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d027      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6a      	ldr	r2, [pc, #424]	@ (800750c <HAL_DMA_Abort+0x234>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d022      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a68      	ldr	r2, [pc, #416]	@ (8007510 <HAL_DMA_Abort+0x238>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d01d      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a67      	ldr	r2, [pc, #412]	@ (8007514 <HAL_DMA_Abort+0x23c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d018      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a65      	ldr	r2, [pc, #404]	@ (8007518 <HAL_DMA_Abort+0x240>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a64      	ldr	r2, [pc, #400]	@ (800751c <HAL_DMA_Abort+0x244>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00e      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a62      	ldr	r2, [pc, #392]	@ (8007520 <HAL_DMA_Abort+0x248>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d009      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a61      	ldr	r2, [pc, #388]	@ (8007524 <HAL_DMA_Abort+0x24c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_DMA_Abort+0xd6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5f      	ldr	r2, [pc, #380]	@ (8007528 <HAL_DMA_Abort+0x250>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d101      	bne.n	80073b2 <HAL_DMA_Abort+0xda>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <HAL_DMA_Abort+0xdc>
 80073b2:	2300      	movs	r3, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d013      	beq.n	80073e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 021e 	bic.w	r2, r2, #30
 80073c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695a      	ldr	r2, [r3, #20]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	e00a      	b.n	80073f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 020e 	bic.w	r2, r2, #14
 80073ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3c      	ldr	r2, [pc, #240]	@ (80074ec <HAL_DMA_Abort+0x214>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d072      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a3a      	ldr	r2, [pc, #232]	@ (80074f0 <HAL_DMA_Abort+0x218>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d06d      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a39      	ldr	r2, [pc, #228]	@ (80074f4 <HAL_DMA_Abort+0x21c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d068      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a37      	ldr	r2, [pc, #220]	@ (80074f8 <HAL_DMA_Abort+0x220>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d063      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a36      	ldr	r2, [pc, #216]	@ (80074fc <HAL_DMA_Abort+0x224>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d05e      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a34      	ldr	r2, [pc, #208]	@ (8007500 <HAL_DMA_Abort+0x228>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d059      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a33      	ldr	r2, [pc, #204]	@ (8007504 <HAL_DMA_Abort+0x22c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d054      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a31      	ldr	r2, [pc, #196]	@ (8007508 <HAL_DMA_Abort+0x230>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04f      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a30      	ldr	r2, [pc, #192]	@ (800750c <HAL_DMA_Abort+0x234>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d04a      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2e      	ldr	r2, [pc, #184]	@ (8007510 <HAL_DMA_Abort+0x238>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d045      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2d      	ldr	r2, [pc, #180]	@ (8007514 <HAL_DMA_Abort+0x23c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d040      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <HAL_DMA_Abort+0x240>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d03b      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a2a      	ldr	r2, [pc, #168]	@ (800751c <HAL_DMA_Abort+0x244>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d036      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a28      	ldr	r2, [pc, #160]	@ (8007520 <HAL_DMA_Abort+0x248>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d031      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a27      	ldr	r2, [pc, #156]	@ (8007524 <HAL_DMA_Abort+0x24c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d02c      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a25      	ldr	r2, [pc, #148]	@ (8007528 <HAL_DMA_Abort+0x250>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d027      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a24      	ldr	r2, [pc, #144]	@ (800752c <HAL_DMA_Abort+0x254>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d022      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a22      	ldr	r2, [pc, #136]	@ (8007530 <HAL_DMA_Abort+0x258>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d01d      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a21      	ldr	r2, [pc, #132]	@ (8007534 <HAL_DMA_Abort+0x25c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d018      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007538 <HAL_DMA_Abort+0x260>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d013      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1e      	ldr	r2, [pc, #120]	@ (800753c <HAL_DMA_Abort+0x264>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00e      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007540 <HAL_DMA_Abort+0x268>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d009      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007544 <HAL_DMA_Abort+0x26c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d004      	beq.n	80074e6 <HAL_DMA_Abort+0x20e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <HAL_DMA_Abort+0x270>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d132      	bne.n	800754c <HAL_DMA_Abort+0x274>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e031      	b.n	800754e <HAL_DMA_Abort+0x276>
 80074ea:	bf00      	nop
 80074ec:	40020010 	.word	0x40020010
 80074f0:	40020028 	.word	0x40020028
 80074f4:	40020040 	.word	0x40020040
 80074f8:	40020058 	.word	0x40020058
 80074fc:	40020070 	.word	0x40020070
 8007500:	40020088 	.word	0x40020088
 8007504:	400200a0 	.word	0x400200a0
 8007508:	400200b8 	.word	0x400200b8
 800750c:	40020410 	.word	0x40020410
 8007510:	40020428 	.word	0x40020428
 8007514:	40020440 	.word	0x40020440
 8007518:	40020458 	.word	0x40020458
 800751c:	40020470 	.word	0x40020470
 8007520:	40020488 	.word	0x40020488
 8007524:	400204a0 	.word	0x400204a0
 8007528:	400204b8 	.word	0x400204b8
 800752c:	58025408 	.word	0x58025408
 8007530:	5802541c 	.word	0x5802541c
 8007534:	58025430 	.word	0x58025430
 8007538:	58025444 	.word	0x58025444
 800753c:	58025458 	.word	0x58025458
 8007540:	5802546c 	.word	0x5802546c
 8007544:	58025480 	.word	0x58025480
 8007548:	58025494 	.word	0x58025494
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800755c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007560:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a6d      	ldr	r2, [pc, #436]	@ (800771c <HAL_DMA_Abort+0x444>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d04a      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a6b      	ldr	r2, [pc, #428]	@ (8007720 <HAL_DMA_Abort+0x448>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d045      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a6a      	ldr	r2, [pc, #424]	@ (8007724 <HAL_DMA_Abort+0x44c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d040      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a68      	ldr	r2, [pc, #416]	@ (8007728 <HAL_DMA_Abort+0x450>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d03b      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a67      	ldr	r2, [pc, #412]	@ (800772c <HAL_DMA_Abort+0x454>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d036      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a65      	ldr	r2, [pc, #404]	@ (8007730 <HAL_DMA_Abort+0x458>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d031      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a64      	ldr	r2, [pc, #400]	@ (8007734 <HAL_DMA_Abort+0x45c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d02c      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a62      	ldr	r2, [pc, #392]	@ (8007738 <HAL_DMA_Abort+0x460>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d027      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a61      	ldr	r2, [pc, #388]	@ (800773c <HAL_DMA_Abort+0x464>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d022      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a5f      	ldr	r2, [pc, #380]	@ (8007740 <HAL_DMA_Abort+0x468>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01d      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007744 <HAL_DMA_Abort+0x46c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d018      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a5c      	ldr	r2, [pc, #368]	@ (8007748 <HAL_DMA_Abort+0x470>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a5b      	ldr	r2, [pc, #364]	@ (800774c <HAL_DMA_Abort+0x474>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a59      	ldr	r2, [pc, #356]	@ (8007750 <HAL_DMA_Abort+0x478>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a58      	ldr	r2, [pc, #352]	@ (8007754 <HAL_DMA_Abort+0x47c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_DMA_Abort+0x32a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a56      	ldr	r2, [pc, #344]	@ (8007758 <HAL_DMA_Abort+0x480>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d108      	bne.n	8007614 <HAL_DMA_Abort+0x33c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	e007      	b.n	8007624 <HAL_DMA_Abort+0x34c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007624:	e013      	b.n	800764e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007626:	f7fd f8a9 	bl	800477c <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b05      	cmp	r3, #5
 8007632:	d90c      	bls.n	800764e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2203      	movs	r2, #3
 800763e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e12d      	b.n	80078aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e5      	bne.n	8007626 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a2f      	ldr	r2, [pc, #188]	@ (800771c <HAL_DMA_Abort+0x444>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d04a      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2d      	ldr	r2, [pc, #180]	@ (8007720 <HAL_DMA_Abort+0x448>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d045      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2c      	ldr	r2, [pc, #176]	@ (8007724 <HAL_DMA_Abort+0x44c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d040      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2a      	ldr	r2, [pc, #168]	@ (8007728 <HAL_DMA_Abort+0x450>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d03b      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a29      	ldr	r2, [pc, #164]	@ (800772c <HAL_DMA_Abort+0x454>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d036      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a27      	ldr	r2, [pc, #156]	@ (8007730 <HAL_DMA_Abort+0x458>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d031      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a26      	ldr	r2, [pc, #152]	@ (8007734 <HAL_DMA_Abort+0x45c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d02c      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a24      	ldr	r2, [pc, #144]	@ (8007738 <HAL_DMA_Abort+0x460>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d027      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a23      	ldr	r2, [pc, #140]	@ (800773c <HAL_DMA_Abort+0x464>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d022      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a21      	ldr	r2, [pc, #132]	@ (8007740 <HAL_DMA_Abort+0x468>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01d      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a20      	ldr	r2, [pc, #128]	@ (8007744 <HAL_DMA_Abort+0x46c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d018      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007748 <HAL_DMA_Abort+0x470>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1d      	ldr	r2, [pc, #116]	@ (800774c <HAL_DMA_Abort+0x474>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00e      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007750 <HAL_DMA_Abort+0x478>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d009      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007754 <HAL_DMA_Abort+0x47c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <HAL_DMA_Abort+0x422>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a18      	ldr	r2, [pc, #96]	@ (8007758 <HAL_DMA_Abort+0x480>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d101      	bne.n	80076fe <HAL_DMA_Abort+0x426>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <HAL_DMA_Abort+0x428>
 80076fe:	2300      	movs	r3, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d02b      	beq.n	800775c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007708:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	223f      	movs	r2, #63	@ 0x3f
 8007714:	409a      	lsls	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	609a      	str	r2, [r3, #8]
 800771a:	e02a      	b.n	8007772 <HAL_DMA_Abort+0x49a>
 800771c:	40020010 	.word	0x40020010
 8007720:	40020028 	.word	0x40020028
 8007724:	40020040 	.word	0x40020040
 8007728:	40020058 	.word	0x40020058
 800772c:	40020070 	.word	0x40020070
 8007730:	40020088 	.word	0x40020088
 8007734:	400200a0 	.word	0x400200a0
 8007738:	400200b8 	.word	0x400200b8
 800773c:	40020410 	.word	0x40020410
 8007740:	40020428 	.word	0x40020428
 8007744:	40020440 	.word	0x40020440
 8007748:	40020458 	.word	0x40020458
 800774c:	40020470 	.word	0x40020470
 8007750:	40020488 	.word	0x40020488
 8007754:	400204a0 	.word	0x400204a0
 8007758:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007760:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	2201      	movs	r2, #1
 800776c:	409a      	lsls	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a4f      	ldr	r2, [pc, #316]	@ (80078b4 <HAL_DMA_Abort+0x5dc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d072      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a4d      	ldr	r2, [pc, #308]	@ (80078b8 <HAL_DMA_Abort+0x5e0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d06d      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a4c      	ldr	r2, [pc, #304]	@ (80078bc <HAL_DMA_Abort+0x5e4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d068      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a4a      	ldr	r2, [pc, #296]	@ (80078c0 <HAL_DMA_Abort+0x5e8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d063      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a49      	ldr	r2, [pc, #292]	@ (80078c4 <HAL_DMA_Abort+0x5ec>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d05e      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a47      	ldr	r2, [pc, #284]	@ (80078c8 <HAL_DMA_Abort+0x5f0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d059      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a46      	ldr	r2, [pc, #280]	@ (80078cc <HAL_DMA_Abort+0x5f4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d054      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a44      	ldr	r2, [pc, #272]	@ (80078d0 <HAL_DMA_Abort+0x5f8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d04f      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a43      	ldr	r2, [pc, #268]	@ (80078d4 <HAL_DMA_Abort+0x5fc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d04a      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a41      	ldr	r2, [pc, #260]	@ (80078d8 <HAL_DMA_Abort+0x600>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d045      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a40      	ldr	r2, [pc, #256]	@ (80078dc <HAL_DMA_Abort+0x604>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d040      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a3e      	ldr	r2, [pc, #248]	@ (80078e0 <HAL_DMA_Abort+0x608>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d03b      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a3d      	ldr	r2, [pc, #244]	@ (80078e4 <HAL_DMA_Abort+0x60c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d036      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a3b      	ldr	r2, [pc, #236]	@ (80078e8 <HAL_DMA_Abort+0x610>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d031      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a3a      	ldr	r2, [pc, #232]	@ (80078ec <HAL_DMA_Abort+0x614>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d02c      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a38      	ldr	r2, [pc, #224]	@ (80078f0 <HAL_DMA_Abort+0x618>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d027      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a37      	ldr	r2, [pc, #220]	@ (80078f4 <HAL_DMA_Abort+0x61c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d022      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a35      	ldr	r2, [pc, #212]	@ (80078f8 <HAL_DMA_Abort+0x620>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d01d      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a34      	ldr	r2, [pc, #208]	@ (80078fc <HAL_DMA_Abort+0x624>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d018      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a32      	ldr	r2, [pc, #200]	@ (8007900 <HAL_DMA_Abort+0x628>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d013      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a31      	ldr	r2, [pc, #196]	@ (8007904 <HAL_DMA_Abort+0x62c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00e      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a2f      	ldr	r2, [pc, #188]	@ (8007908 <HAL_DMA_Abort+0x630>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d009      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a2e      	ldr	r2, [pc, #184]	@ (800790c <HAL_DMA_Abort+0x634>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_DMA_Abort+0x58a>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a2c      	ldr	r2, [pc, #176]	@ (8007910 <HAL_DMA_Abort+0x638>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d101      	bne.n	8007866 <HAL_DMA_Abort+0x58e>
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <HAL_DMA_Abort+0x590>
 8007866:	2300      	movs	r3, #0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d015      	beq.n	8007898 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007874:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00c      	beq.n	8007898 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800788c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007896:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40020010 	.word	0x40020010
 80078b8:	40020028 	.word	0x40020028
 80078bc:	40020040 	.word	0x40020040
 80078c0:	40020058 	.word	0x40020058
 80078c4:	40020070 	.word	0x40020070
 80078c8:	40020088 	.word	0x40020088
 80078cc:	400200a0 	.word	0x400200a0
 80078d0:	400200b8 	.word	0x400200b8
 80078d4:	40020410 	.word	0x40020410
 80078d8:	40020428 	.word	0x40020428
 80078dc:	40020440 	.word	0x40020440
 80078e0:	40020458 	.word	0x40020458
 80078e4:	40020470 	.word	0x40020470
 80078e8:	40020488 	.word	0x40020488
 80078ec:	400204a0 	.word	0x400204a0
 80078f0:	400204b8 	.word	0x400204b8
 80078f4:	58025408 	.word	0x58025408
 80078f8:	5802541c 	.word	0x5802541c
 80078fc:	58025430 	.word	0x58025430
 8007900:	58025444 	.word	0x58025444
 8007904:	58025458 	.word	0x58025458
 8007908:	5802546c 	.word	0x5802546c
 800790c:	58025480 	.word	0x58025480
 8007910:	58025494 	.word	0x58025494

08007914 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e237      	b.n	8007d96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d004      	beq.n	800793c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2280      	movs	r2, #128	@ 0x80
 8007936:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e22c      	b.n	8007d96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a5c      	ldr	r2, [pc, #368]	@ (8007ab4 <HAL_DMA_Abort_IT+0x1a0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d04a      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ab8 <HAL_DMA_Abort_IT+0x1a4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d045      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a59      	ldr	r2, [pc, #356]	@ (8007abc <HAL_DMA_Abort_IT+0x1a8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d040      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a58      	ldr	r2, [pc, #352]	@ (8007ac0 <HAL_DMA_Abort_IT+0x1ac>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d03b      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a56      	ldr	r2, [pc, #344]	@ (8007ac4 <HAL_DMA_Abort_IT+0x1b0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d036      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a55      	ldr	r2, [pc, #340]	@ (8007ac8 <HAL_DMA_Abort_IT+0x1b4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d031      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a53      	ldr	r2, [pc, #332]	@ (8007acc <HAL_DMA_Abort_IT+0x1b8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d02c      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a52      	ldr	r2, [pc, #328]	@ (8007ad0 <HAL_DMA_Abort_IT+0x1bc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d027      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a50      	ldr	r2, [pc, #320]	@ (8007ad4 <HAL_DMA_Abort_IT+0x1c0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d022      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a4f      	ldr	r2, [pc, #316]	@ (8007ad8 <HAL_DMA_Abort_IT+0x1c4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d01d      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a4d      	ldr	r2, [pc, #308]	@ (8007adc <HAL_DMA_Abort_IT+0x1c8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d018      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a4c      	ldr	r2, [pc, #304]	@ (8007ae0 <HAL_DMA_Abort_IT+0x1cc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a4a      	ldr	r2, [pc, #296]	@ (8007ae4 <HAL_DMA_Abort_IT+0x1d0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00e      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a49      	ldr	r2, [pc, #292]	@ (8007ae8 <HAL_DMA_Abort_IT+0x1d4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d009      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a47      	ldr	r2, [pc, #284]	@ (8007aec <HAL_DMA_Abort_IT+0x1d8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d004      	beq.n	80079dc <HAL_DMA_Abort_IT+0xc8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a46      	ldr	r2, [pc, #280]	@ (8007af0 <HAL_DMA_Abort_IT+0x1dc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d101      	bne.n	80079e0 <HAL_DMA_Abort_IT+0xcc>
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <HAL_DMA_Abort_IT+0xce>
 80079e0:	2300      	movs	r3, #0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8086 	beq.w	8007af4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2204      	movs	r2, #4
 80079ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a2f      	ldr	r2, [pc, #188]	@ (8007ab4 <HAL_DMA_Abort_IT+0x1a0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d04a      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2e      	ldr	r2, [pc, #184]	@ (8007ab8 <HAL_DMA_Abort_IT+0x1a4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d045      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a2c      	ldr	r2, [pc, #176]	@ (8007abc <HAL_DMA_Abort_IT+0x1a8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d040      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac0 <HAL_DMA_Abort_IT+0x1ac>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d03b      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a29      	ldr	r2, [pc, #164]	@ (8007ac4 <HAL_DMA_Abort_IT+0x1b0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d036      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a28      	ldr	r2, [pc, #160]	@ (8007ac8 <HAL_DMA_Abort_IT+0x1b4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d031      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a26      	ldr	r2, [pc, #152]	@ (8007acc <HAL_DMA_Abort_IT+0x1b8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d02c      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a25      	ldr	r2, [pc, #148]	@ (8007ad0 <HAL_DMA_Abort_IT+0x1bc>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d027      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a23      	ldr	r2, [pc, #140]	@ (8007ad4 <HAL_DMA_Abort_IT+0x1c0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d022      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <HAL_DMA_Abort_IT+0x1c4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d01d      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a20      	ldr	r2, [pc, #128]	@ (8007adc <HAL_DMA_Abort_IT+0x1c8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d018      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae0 <HAL_DMA_Abort_IT+0x1cc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d013      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae4 <HAL_DMA_Abort_IT+0x1d0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00e      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae8 <HAL_DMA_Abort_IT+0x1d4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d009      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a1a      	ldr	r2, [pc, #104]	@ (8007aec <HAL_DMA_Abort_IT+0x1d8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d004      	beq.n	8007a90 <HAL_DMA_Abort_IT+0x17c>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a19      	ldr	r2, [pc, #100]	@ (8007af0 <HAL_DMA_Abort_IT+0x1dc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d108      	bne.n	8007aa2 <HAL_DMA_Abort_IT+0x18e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e178      	b.n	8007d94 <HAL_DMA_Abort_IT+0x480>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	e16f      	b.n	8007d94 <HAL_DMA_Abort_IT+0x480>
 8007ab4:	40020010 	.word	0x40020010
 8007ab8:	40020028 	.word	0x40020028
 8007abc:	40020040 	.word	0x40020040
 8007ac0:	40020058 	.word	0x40020058
 8007ac4:	40020070 	.word	0x40020070
 8007ac8:	40020088 	.word	0x40020088
 8007acc:	400200a0 	.word	0x400200a0
 8007ad0:	400200b8 	.word	0x400200b8
 8007ad4:	40020410 	.word	0x40020410
 8007ad8:	40020428 	.word	0x40020428
 8007adc:	40020440 	.word	0x40020440
 8007ae0:	40020458 	.word	0x40020458
 8007ae4:	40020470 	.word	0x40020470
 8007ae8:	40020488 	.word	0x40020488
 8007aec:	400204a0 	.word	0x400204a0
 8007af0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 020e 	bic.w	r2, r2, #14
 8007b02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a6c      	ldr	r2, [pc, #432]	@ (8007cbc <HAL_DMA_Abort_IT+0x3a8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d04a      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a6b      	ldr	r2, [pc, #428]	@ (8007cc0 <HAL_DMA_Abort_IT+0x3ac>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d045      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a69      	ldr	r2, [pc, #420]	@ (8007cc4 <HAL_DMA_Abort_IT+0x3b0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d040      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a68      	ldr	r2, [pc, #416]	@ (8007cc8 <HAL_DMA_Abort_IT+0x3b4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d03b      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a66      	ldr	r2, [pc, #408]	@ (8007ccc <HAL_DMA_Abort_IT+0x3b8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d036      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a65      	ldr	r2, [pc, #404]	@ (8007cd0 <HAL_DMA_Abort_IT+0x3bc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d031      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a63      	ldr	r2, [pc, #396]	@ (8007cd4 <HAL_DMA_Abort_IT+0x3c0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d02c      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a62      	ldr	r2, [pc, #392]	@ (8007cd8 <HAL_DMA_Abort_IT+0x3c4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d027      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a60      	ldr	r2, [pc, #384]	@ (8007cdc <HAL_DMA_Abort_IT+0x3c8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d022      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a5f      	ldr	r2, [pc, #380]	@ (8007ce0 <HAL_DMA_Abort_IT+0x3cc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d01d      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ce4 <HAL_DMA_Abort_IT+0x3d0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d018      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a5c      	ldr	r2, [pc, #368]	@ (8007ce8 <HAL_DMA_Abort_IT+0x3d4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5a      	ldr	r2, [pc, #360]	@ (8007cec <HAL_DMA_Abort_IT+0x3d8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00e      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a59      	ldr	r2, [pc, #356]	@ (8007cf0 <HAL_DMA_Abort_IT+0x3dc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d009      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a57      	ldr	r2, [pc, #348]	@ (8007cf4 <HAL_DMA_Abort_IT+0x3e0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <HAL_DMA_Abort_IT+0x290>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a56      	ldr	r2, [pc, #344]	@ (8007cf8 <HAL_DMA_Abort_IT+0x3e4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d108      	bne.n	8007bb6 <HAL_DMA_Abort_IT+0x2a2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0201 	bic.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e007      	b.n	8007bc6 <HAL_DMA_Abort_IT+0x2b2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0201 	bic.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a3c      	ldr	r2, [pc, #240]	@ (8007cbc <HAL_DMA_Abort_IT+0x3a8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d072      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8007cc0 <HAL_DMA_Abort_IT+0x3ac>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d06d      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a39      	ldr	r2, [pc, #228]	@ (8007cc4 <HAL_DMA_Abort_IT+0x3b0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d068      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a37      	ldr	r2, [pc, #220]	@ (8007cc8 <HAL_DMA_Abort_IT+0x3b4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d063      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a36      	ldr	r2, [pc, #216]	@ (8007ccc <HAL_DMA_Abort_IT+0x3b8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d05e      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a34      	ldr	r2, [pc, #208]	@ (8007cd0 <HAL_DMA_Abort_IT+0x3bc>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d059      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a33      	ldr	r2, [pc, #204]	@ (8007cd4 <HAL_DMA_Abort_IT+0x3c0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d054      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a31      	ldr	r2, [pc, #196]	@ (8007cd8 <HAL_DMA_Abort_IT+0x3c4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d04f      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a30      	ldr	r2, [pc, #192]	@ (8007cdc <HAL_DMA_Abort_IT+0x3c8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d04a      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2e      	ldr	r2, [pc, #184]	@ (8007ce0 <HAL_DMA_Abort_IT+0x3cc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d045      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8007ce4 <HAL_DMA_Abort_IT+0x3d0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d040      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a2b      	ldr	r2, [pc, #172]	@ (8007ce8 <HAL_DMA_Abort_IT+0x3d4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d03b      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a2a      	ldr	r2, [pc, #168]	@ (8007cec <HAL_DMA_Abort_IT+0x3d8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d036      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a28      	ldr	r2, [pc, #160]	@ (8007cf0 <HAL_DMA_Abort_IT+0x3dc>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d031      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a27      	ldr	r2, [pc, #156]	@ (8007cf4 <HAL_DMA_Abort_IT+0x3e0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d02c      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a25      	ldr	r2, [pc, #148]	@ (8007cf8 <HAL_DMA_Abort_IT+0x3e4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d027      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a24      	ldr	r2, [pc, #144]	@ (8007cfc <HAL_DMA_Abort_IT+0x3e8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d022      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a22      	ldr	r2, [pc, #136]	@ (8007d00 <HAL_DMA_Abort_IT+0x3ec>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01d      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a21      	ldr	r2, [pc, #132]	@ (8007d04 <HAL_DMA_Abort_IT+0x3f0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d018      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1f      	ldr	r2, [pc, #124]	@ (8007d08 <HAL_DMA_Abort_IT+0x3f4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1e      	ldr	r2, [pc, #120]	@ (8007d0c <HAL_DMA_Abort_IT+0x3f8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8007d10 <HAL_DMA_Abort_IT+0x3fc>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8007d14 <HAL_DMA_Abort_IT+0x400>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_DMA_Abort_IT+0x3a2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a19      	ldr	r2, [pc, #100]	@ (8007d18 <HAL_DMA_Abort_IT+0x404>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d132      	bne.n	8007d1c <HAL_DMA_Abort_IT+0x408>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e031      	b.n	8007d1e <HAL_DMA_Abort_IT+0x40a>
 8007cba:	bf00      	nop
 8007cbc:	40020010 	.word	0x40020010
 8007cc0:	40020028 	.word	0x40020028
 8007cc4:	40020040 	.word	0x40020040
 8007cc8:	40020058 	.word	0x40020058
 8007ccc:	40020070 	.word	0x40020070
 8007cd0:	40020088 	.word	0x40020088
 8007cd4:	400200a0 	.word	0x400200a0
 8007cd8:	400200b8 	.word	0x400200b8
 8007cdc:	40020410 	.word	0x40020410
 8007ce0:	40020428 	.word	0x40020428
 8007ce4:	40020440 	.word	0x40020440
 8007ce8:	40020458 	.word	0x40020458
 8007cec:	40020470 	.word	0x40020470
 8007cf0:	40020488 	.word	0x40020488
 8007cf4:	400204a0 	.word	0x400204a0
 8007cf8:	400204b8 	.word	0x400204b8
 8007cfc:	58025408 	.word	0x58025408
 8007d00:	5802541c 	.word	0x5802541c
 8007d04:	58025430 	.word	0x58025430
 8007d08:	58025444 	.word	0x58025444
 8007d0c:	58025458 	.word	0x58025458
 8007d10:	5802546c 	.word	0x5802546c
 8007d14:	58025480 	.word	0x58025480
 8007d18:	58025494 	.word	0x58025494
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d028      	beq.n	8007d74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	2201      	movs	r2, #1
 8007d42:	409a      	lsls	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007d50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00c      	beq.n	8007d74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop

08007da0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	@ 0x28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007dac:	4b67      	ldr	r3, [pc, #412]	@ (8007f4c <HAL_DMA_IRQHandler+0x1ac>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a67      	ldr	r2, [pc, #412]	@ (8007f50 <HAL_DMA_IRQHandler+0x1b0>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	0a9b      	lsrs	r3, r3, #10
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8007f54 <HAL_DMA_IRQHandler+0x1b4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d04a      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f58 <HAL_DMA_IRQHandler+0x1b8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d045      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a5c      	ldr	r2, [pc, #368]	@ (8007f5c <HAL_DMA_IRQHandler+0x1bc>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d040      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a5a      	ldr	r2, [pc, #360]	@ (8007f60 <HAL_DMA_IRQHandler+0x1c0>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d03b      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a59      	ldr	r2, [pc, #356]	@ (8007f64 <HAL_DMA_IRQHandler+0x1c4>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d036      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a57      	ldr	r2, [pc, #348]	@ (8007f68 <HAL_DMA_IRQHandler+0x1c8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d031      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a56      	ldr	r2, [pc, #344]	@ (8007f6c <HAL_DMA_IRQHandler+0x1cc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d02c      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a54      	ldr	r2, [pc, #336]	@ (8007f70 <HAL_DMA_IRQHandler+0x1d0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d027      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a53      	ldr	r2, [pc, #332]	@ (8007f74 <HAL_DMA_IRQHandler+0x1d4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d022      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a51      	ldr	r2, [pc, #324]	@ (8007f78 <HAL_DMA_IRQHandler+0x1d8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01d      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a50      	ldr	r2, [pc, #320]	@ (8007f7c <HAL_DMA_IRQHandler+0x1dc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d018      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a4e      	ldr	r2, [pc, #312]	@ (8007f80 <HAL_DMA_IRQHandler+0x1e0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8007f84 <HAL_DMA_IRQHandler+0x1e4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00e      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a4b      	ldr	r2, [pc, #300]	@ (8007f88 <HAL_DMA_IRQHandler+0x1e8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a4a      	ldr	r2, [pc, #296]	@ (8007f8c <HAL_DMA_IRQHandler+0x1ec>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xd2>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a48      	ldr	r2, [pc, #288]	@ (8007f90 <HAL_DMA_IRQHandler+0x1f0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d101      	bne.n	8007e76 <HAL_DMA_IRQHandler+0xd6>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <HAL_DMA_IRQHandler+0xd8>
 8007e76:	2300      	movs	r3, #0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 842b 	beq.w	80086d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	2208      	movs	r2, #8
 8007e88:	409a      	lsls	r2, r3
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80a2 	beq.w	8007fd8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a2e      	ldr	r2, [pc, #184]	@ (8007f54 <HAL_DMA_IRQHandler+0x1b4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d04a      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8007f58 <HAL_DMA_IRQHandler+0x1b8>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d045      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a2b      	ldr	r2, [pc, #172]	@ (8007f5c <HAL_DMA_IRQHandler+0x1bc>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d040      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f60 <HAL_DMA_IRQHandler+0x1c0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d03b      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a28      	ldr	r2, [pc, #160]	@ (8007f64 <HAL_DMA_IRQHandler+0x1c4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d036      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a27      	ldr	r2, [pc, #156]	@ (8007f68 <HAL_DMA_IRQHandler+0x1c8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d031      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a25      	ldr	r2, [pc, #148]	@ (8007f6c <HAL_DMA_IRQHandler+0x1cc>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d02c      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a24      	ldr	r2, [pc, #144]	@ (8007f70 <HAL_DMA_IRQHandler+0x1d0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d027      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a22      	ldr	r2, [pc, #136]	@ (8007f74 <HAL_DMA_IRQHandler+0x1d4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d022      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a21      	ldr	r2, [pc, #132]	@ (8007f78 <HAL_DMA_IRQHandler+0x1d8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d01d      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1f      	ldr	r2, [pc, #124]	@ (8007f7c <HAL_DMA_IRQHandler+0x1dc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d018      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1e      	ldr	r2, [pc, #120]	@ (8007f80 <HAL_DMA_IRQHandler+0x1e0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d013      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	@ (8007f84 <HAL_DMA_IRQHandler+0x1e4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00e      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007f88 <HAL_DMA_IRQHandler+0x1e8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d009      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a19      	ldr	r2, [pc, #100]	@ (8007f8c <HAL_DMA_IRQHandler+0x1ec>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <HAL_DMA_IRQHandler+0x194>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a18      	ldr	r2, [pc, #96]	@ (8007f90 <HAL_DMA_IRQHandler+0x1f0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d12f      	bne.n	8007f94 <HAL_DMA_IRQHandler+0x1f4>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bf14      	ite	ne
 8007f42:	2301      	movne	r3, #1
 8007f44:	2300      	moveq	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	e02e      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x208>
 8007f4a:	bf00      	nop
 8007f4c:	24000008 	.word	0x24000008
 8007f50:	1b4e81b5 	.word	0x1b4e81b5
 8007f54:	40020010 	.word	0x40020010
 8007f58:	40020028 	.word	0x40020028
 8007f5c:	40020040 	.word	0x40020040
 8007f60:	40020058 	.word	0x40020058
 8007f64:	40020070 	.word	0x40020070
 8007f68:	40020088 	.word	0x40020088
 8007f6c:	400200a0 	.word	0x400200a0
 8007f70:	400200b8 	.word	0x400200b8
 8007f74:	40020410 	.word	0x40020410
 8007f78:	40020428 	.word	0x40020428
 8007f7c:	40020440 	.word	0x40020440
 8007f80:	40020458 	.word	0x40020458
 8007f84:	40020470 	.word	0x40020470
 8007f88:	40020488 	.word	0x40020488
 8007f8c:	400204a0 	.word	0x400204a0
 8007f90:	400204b8 	.word	0x400204b8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d015      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0204 	bic.w	r2, r2, #4
 8007fba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fc0:	f003 031f 	and.w	r3, r3, #31
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	409a      	lsls	r2, r3
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd0:	f043 0201 	orr.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d06e      	beq.n	80080cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a69      	ldr	r2, [pc, #420]	@ (8008198 <HAL_DMA_IRQHandler+0x3f8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d04a      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a67      	ldr	r2, [pc, #412]	@ (800819c <HAL_DMA_IRQHandler+0x3fc>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d045      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a66      	ldr	r2, [pc, #408]	@ (80081a0 <HAL_DMA_IRQHandler+0x400>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d040      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a64      	ldr	r2, [pc, #400]	@ (80081a4 <HAL_DMA_IRQHandler+0x404>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d03b      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a63      	ldr	r2, [pc, #396]	@ (80081a8 <HAL_DMA_IRQHandler+0x408>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d036      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a61      	ldr	r2, [pc, #388]	@ (80081ac <HAL_DMA_IRQHandler+0x40c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d031      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a60      	ldr	r2, [pc, #384]	@ (80081b0 <HAL_DMA_IRQHandler+0x410>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d02c      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a5e      	ldr	r2, [pc, #376]	@ (80081b4 <HAL_DMA_IRQHandler+0x414>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d027      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a5d      	ldr	r2, [pc, #372]	@ (80081b8 <HAL_DMA_IRQHandler+0x418>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d022      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a5b      	ldr	r2, [pc, #364]	@ (80081bc <HAL_DMA_IRQHandler+0x41c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d01d      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a5a      	ldr	r2, [pc, #360]	@ (80081c0 <HAL_DMA_IRQHandler+0x420>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d018      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a58      	ldr	r2, [pc, #352]	@ (80081c4 <HAL_DMA_IRQHandler+0x424>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d013      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a57      	ldr	r2, [pc, #348]	@ (80081c8 <HAL_DMA_IRQHandler+0x428>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00e      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a55      	ldr	r2, [pc, #340]	@ (80081cc <HAL_DMA_IRQHandler+0x42c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d009      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a54      	ldr	r2, [pc, #336]	@ (80081d0 <HAL_DMA_IRQHandler+0x430>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d004      	beq.n	800808e <HAL_DMA_IRQHandler+0x2ee>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a52      	ldr	r2, [pc, #328]	@ (80081d4 <HAL_DMA_IRQHandler+0x434>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d10a      	bne.n	80080a4 <HAL_DMA_IRQHandler+0x304>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008098:	2b00      	cmp	r3, #0
 800809a:	bf14      	ite	ne
 800809c:	2301      	movne	r3, #1
 800809e:	2300      	moveq	r3, #0
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	e003      	b.n	80080ac <HAL_DMA_IRQHandler+0x30c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00d      	beq.n	80080cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	2201      	movs	r2, #1
 80080ba:	409a      	lsls	r2, r3
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c4:	f043 0202 	orr.w	r2, r3, #2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	2204      	movs	r2, #4
 80080d6:	409a      	lsls	r2, r3
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	4013      	ands	r3, r2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 808f 	beq.w	8008200 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008198 <HAL_DMA_IRQHandler+0x3f8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d04a      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2a      	ldr	r2, [pc, #168]	@ (800819c <HAL_DMA_IRQHandler+0x3fc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d045      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a29      	ldr	r2, [pc, #164]	@ (80081a0 <HAL_DMA_IRQHandler+0x400>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d040      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a27      	ldr	r2, [pc, #156]	@ (80081a4 <HAL_DMA_IRQHandler+0x404>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d03b      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a26      	ldr	r2, [pc, #152]	@ (80081a8 <HAL_DMA_IRQHandler+0x408>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d036      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a24      	ldr	r2, [pc, #144]	@ (80081ac <HAL_DMA_IRQHandler+0x40c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d031      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a23      	ldr	r2, [pc, #140]	@ (80081b0 <HAL_DMA_IRQHandler+0x410>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d02c      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a21      	ldr	r2, [pc, #132]	@ (80081b4 <HAL_DMA_IRQHandler+0x414>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d027      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a20      	ldr	r2, [pc, #128]	@ (80081b8 <HAL_DMA_IRQHandler+0x418>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d022      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <HAL_DMA_IRQHandler+0x41c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d01d      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1d      	ldr	r2, [pc, #116]	@ (80081c0 <HAL_DMA_IRQHandler+0x420>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d018      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1b      	ldr	r2, [pc, #108]	@ (80081c4 <HAL_DMA_IRQHandler+0x424>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1a      	ldr	r2, [pc, #104]	@ (80081c8 <HAL_DMA_IRQHandler+0x428>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00e      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a18      	ldr	r2, [pc, #96]	@ (80081cc <HAL_DMA_IRQHandler+0x42c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d009      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a17      	ldr	r2, [pc, #92]	@ (80081d0 <HAL_DMA_IRQHandler+0x430>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d004      	beq.n	8008182 <HAL_DMA_IRQHandler+0x3e2>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a15      	ldr	r2, [pc, #84]	@ (80081d4 <HAL_DMA_IRQHandler+0x434>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d12a      	bne.n	80081d8 <HAL_DMA_IRQHandler+0x438>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	bf14      	ite	ne
 8008190:	2301      	movne	r3, #1
 8008192:	2300      	moveq	r3, #0
 8008194:	b2db      	uxtb	r3, r3
 8008196:	e023      	b.n	80081e0 <HAL_DMA_IRQHandler+0x440>
 8008198:	40020010 	.word	0x40020010
 800819c:	40020028 	.word	0x40020028
 80081a0:	40020040 	.word	0x40020040
 80081a4:	40020058 	.word	0x40020058
 80081a8:	40020070 	.word	0x40020070
 80081ac:	40020088 	.word	0x40020088
 80081b0:	400200a0 	.word	0x400200a0
 80081b4:	400200b8 	.word	0x400200b8
 80081b8:	40020410 	.word	0x40020410
 80081bc:	40020428 	.word	0x40020428
 80081c0:	40020440 	.word	0x40020440
 80081c4:	40020458 	.word	0x40020458
 80081c8:	40020470 	.word	0x40020470
 80081cc:	40020488 	.word	0x40020488
 80081d0:	400204a0 	.word	0x400204a0
 80081d4:	400204b8 	.word	0x400204b8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2300      	movs	r3, #0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00d      	beq.n	8008200 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2204      	movs	r2, #4
 80081ee:	409a      	lsls	r2, r3
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	f043 0204 	orr.w	r2, r3, #4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2210      	movs	r2, #16
 800820a:	409a      	lsls	r2, r3
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	4013      	ands	r3, r2
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80a6 	beq.w	8008362 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a85      	ldr	r2, [pc, #532]	@ (8008430 <HAL_DMA_IRQHandler+0x690>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d04a      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a83      	ldr	r2, [pc, #524]	@ (8008434 <HAL_DMA_IRQHandler+0x694>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d045      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a82      	ldr	r2, [pc, #520]	@ (8008438 <HAL_DMA_IRQHandler+0x698>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d040      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a80      	ldr	r2, [pc, #512]	@ (800843c <HAL_DMA_IRQHandler+0x69c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d03b      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a7f      	ldr	r2, [pc, #508]	@ (8008440 <HAL_DMA_IRQHandler+0x6a0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d036      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a7d      	ldr	r2, [pc, #500]	@ (8008444 <HAL_DMA_IRQHandler+0x6a4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d031      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a7c      	ldr	r2, [pc, #496]	@ (8008448 <HAL_DMA_IRQHandler+0x6a8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d02c      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a7a      	ldr	r2, [pc, #488]	@ (800844c <HAL_DMA_IRQHandler+0x6ac>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d027      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a79      	ldr	r2, [pc, #484]	@ (8008450 <HAL_DMA_IRQHandler+0x6b0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a77      	ldr	r2, [pc, #476]	@ (8008454 <HAL_DMA_IRQHandler+0x6b4>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01d      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a76      	ldr	r2, [pc, #472]	@ (8008458 <HAL_DMA_IRQHandler+0x6b8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d018      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a74      	ldr	r2, [pc, #464]	@ (800845c <HAL_DMA_IRQHandler+0x6bc>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a73      	ldr	r2, [pc, #460]	@ (8008460 <HAL_DMA_IRQHandler+0x6c0>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00e      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a71      	ldr	r2, [pc, #452]	@ (8008464 <HAL_DMA_IRQHandler+0x6c4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d009      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a70      	ldr	r2, [pc, #448]	@ (8008468 <HAL_DMA_IRQHandler+0x6c8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d004      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x516>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a6e      	ldr	r2, [pc, #440]	@ (800846c <HAL_DMA_IRQHandler+0x6cc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d10a      	bne.n	80082cc <HAL_DMA_IRQHandler+0x52c>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bf14      	ite	ne
 80082c4:	2301      	movne	r3, #1
 80082c6:	2300      	moveq	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	e009      	b.n	80082e0 <HAL_DMA_IRQHandler+0x540>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bf14      	ite	ne
 80082da:	2301      	movne	r3, #1
 80082dc:	2300      	moveq	r3, #0
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d03e      	beq.n	8008362 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e8:	f003 031f 	and.w	r3, r3, #31
 80082ec:	2210      	movs	r2, #16
 80082ee:	409a      	lsls	r2, r3
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d018      	beq.n	8008334 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d108      	bne.n	8008322 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	d024      	beq.n	8008362 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
 8008320:	e01f      	b.n	8008362 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01b      	beq.n	8008362 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	e016      	b.n	8008362 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d107      	bne.n	8008352 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0208 	bic.w	r2, r2, #8
 8008350:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008366:	f003 031f 	and.w	r3, r3, #31
 800836a:	2220      	movs	r2, #32
 800836c:	409a      	lsls	r2, r3
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 8110 	beq.w	8008598 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a2c      	ldr	r2, [pc, #176]	@ (8008430 <HAL_DMA_IRQHandler+0x690>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d04a      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a2b      	ldr	r2, [pc, #172]	@ (8008434 <HAL_DMA_IRQHandler+0x694>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d045      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a29      	ldr	r2, [pc, #164]	@ (8008438 <HAL_DMA_IRQHandler+0x698>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d040      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a28      	ldr	r2, [pc, #160]	@ (800843c <HAL_DMA_IRQHandler+0x69c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d03b      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a26      	ldr	r2, [pc, #152]	@ (8008440 <HAL_DMA_IRQHandler+0x6a0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d036      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a25      	ldr	r2, [pc, #148]	@ (8008444 <HAL_DMA_IRQHandler+0x6a4>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d031      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a23      	ldr	r2, [pc, #140]	@ (8008448 <HAL_DMA_IRQHandler+0x6a8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d02c      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a22      	ldr	r2, [pc, #136]	@ (800844c <HAL_DMA_IRQHandler+0x6ac>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d027      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a20      	ldr	r2, [pc, #128]	@ (8008450 <HAL_DMA_IRQHandler+0x6b0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d022      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008454 <HAL_DMA_IRQHandler+0x6b4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d01d      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008458 <HAL_DMA_IRQHandler+0x6b8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d018      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a1c      	ldr	r2, [pc, #112]	@ (800845c <HAL_DMA_IRQHandler+0x6bc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d013      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008460 <HAL_DMA_IRQHandler+0x6c0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00e      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a19      	ldr	r2, [pc, #100]	@ (8008464 <HAL_DMA_IRQHandler+0x6c4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d009      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a17      	ldr	r2, [pc, #92]	@ (8008468 <HAL_DMA_IRQHandler+0x6c8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <HAL_DMA_IRQHandler+0x678>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a16      	ldr	r2, [pc, #88]	@ (800846c <HAL_DMA_IRQHandler+0x6cc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d12b      	bne.n	8008470 <HAL_DMA_IRQHandler+0x6d0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b00      	cmp	r3, #0
 8008424:	bf14      	ite	ne
 8008426:	2301      	movne	r3, #1
 8008428:	2300      	moveq	r3, #0
 800842a:	b2db      	uxtb	r3, r3
 800842c:	e02a      	b.n	8008484 <HAL_DMA_IRQHandler+0x6e4>
 800842e:	bf00      	nop
 8008430:	40020010 	.word	0x40020010
 8008434:	40020028 	.word	0x40020028
 8008438:	40020040 	.word	0x40020040
 800843c:	40020058 	.word	0x40020058
 8008440:	40020070 	.word	0x40020070
 8008444:	40020088 	.word	0x40020088
 8008448:	400200a0 	.word	0x400200a0
 800844c:	400200b8 	.word	0x400200b8
 8008450:	40020410 	.word	0x40020410
 8008454:	40020428 	.word	0x40020428
 8008458:	40020440 	.word	0x40020440
 800845c:	40020458 	.word	0x40020458
 8008460:	40020470 	.word	0x40020470
 8008464:	40020488 	.word	0x40020488
 8008468:	400204a0 	.word	0x400204a0
 800846c:	400204b8 	.word	0x400204b8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf14      	ite	ne
 800847e:	2301      	movne	r3, #1
 8008480:	2300      	moveq	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8087 	beq.w	8008598 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800848e:	f003 031f 	and.w	r3, r3, #31
 8008492:	2220      	movs	r2, #32
 8008494:	409a      	lsls	r2, r3
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d139      	bne.n	800851a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0216 	bic.w	r2, r2, #22
 80084b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <HAL_DMA_IRQHandler+0x736>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0208 	bic.w	r2, r2, #8
 80084e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ea:	f003 031f 	and.w	r3, r3, #31
 80084ee:	223f      	movs	r2, #63	@ 0x3f
 80084f0:	409a      	lsls	r2, r3
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 834a 	beq.w	8008ba4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
          }
          return;
 8008518:	e344      	b.n	8008ba4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d018      	beq.n	800855a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d108      	bne.n	8008548 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853a:	2b00      	cmp	r3, #0
 800853c:	d02c      	beq.n	8008598 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
 8008546:	e027      	b.n	8008598 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d023      	beq.n	8008598 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
 8008558:	e01e      	b.n	8008598 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10f      	bne.n	8008588 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0210 	bic.w	r2, r2, #16
 8008576:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8306 	beq.w	8008bae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8088 	beq.w	80086c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2204      	movs	r2, #4
 80085b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a7a      	ldr	r2, [pc, #488]	@ (80087a8 <HAL_DMA_IRQHandler+0xa08>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d04a      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a79      	ldr	r2, [pc, #484]	@ (80087ac <HAL_DMA_IRQHandler+0xa0c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d045      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a77      	ldr	r2, [pc, #476]	@ (80087b0 <HAL_DMA_IRQHandler+0xa10>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d040      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a76      	ldr	r2, [pc, #472]	@ (80087b4 <HAL_DMA_IRQHandler+0xa14>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d03b      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a74      	ldr	r2, [pc, #464]	@ (80087b8 <HAL_DMA_IRQHandler+0xa18>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d036      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a73      	ldr	r2, [pc, #460]	@ (80087bc <HAL_DMA_IRQHandler+0xa1c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d031      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a71      	ldr	r2, [pc, #452]	@ (80087c0 <HAL_DMA_IRQHandler+0xa20>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d02c      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a70      	ldr	r2, [pc, #448]	@ (80087c4 <HAL_DMA_IRQHandler+0xa24>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d027      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a6e      	ldr	r2, [pc, #440]	@ (80087c8 <HAL_DMA_IRQHandler+0xa28>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d022      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a6d      	ldr	r2, [pc, #436]	@ (80087cc <HAL_DMA_IRQHandler+0xa2c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d01d      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a6b      	ldr	r2, [pc, #428]	@ (80087d0 <HAL_DMA_IRQHandler+0xa30>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d018      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a6a      	ldr	r2, [pc, #424]	@ (80087d4 <HAL_DMA_IRQHandler+0xa34>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a68      	ldr	r2, [pc, #416]	@ (80087d8 <HAL_DMA_IRQHandler+0xa38>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00e      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a67      	ldr	r2, [pc, #412]	@ (80087dc <HAL_DMA_IRQHandler+0xa3c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d009      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a65      	ldr	r2, [pc, #404]	@ (80087e0 <HAL_DMA_IRQHandler+0xa40>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <HAL_DMA_IRQHandler+0x8b8>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a64      	ldr	r2, [pc, #400]	@ (80087e4 <HAL_DMA_IRQHandler+0xa44>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d108      	bne.n	800866a <HAL_DMA_IRQHandler+0x8ca>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0201 	bic.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	e007      	b.n	800867a <HAL_DMA_IRQHandler+0x8da>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0201 	bic.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008682:	429a      	cmp	r2, r3
 8008684:	d307      	bcc.n	8008696 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1f2      	bne.n	800867a <HAL_DMA_IRQHandler+0x8da>
 8008694:	e000      	b.n	8008698 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008696:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2203      	movs	r2, #3
 80086aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80086ae:	e003      	b.n	80086b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 8272 	beq.w	8008bae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
 80086d2:	e26c      	b.n	8008bae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a43      	ldr	r2, [pc, #268]	@ (80087e8 <HAL_DMA_IRQHandler+0xa48>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d022      	beq.n	8008724 <HAL_DMA_IRQHandler+0x984>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a42      	ldr	r2, [pc, #264]	@ (80087ec <HAL_DMA_IRQHandler+0xa4c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d01d      	beq.n	8008724 <HAL_DMA_IRQHandler+0x984>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a40      	ldr	r2, [pc, #256]	@ (80087f0 <HAL_DMA_IRQHandler+0xa50>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d018      	beq.n	8008724 <HAL_DMA_IRQHandler+0x984>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a3f      	ldr	r2, [pc, #252]	@ (80087f4 <HAL_DMA_IRQHandler+0xa54>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <HAL_DMA_IRQHandler+0x984>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a3d      	ldr	r2, [pc, #244]	@ (80087f8 <HAL_DMA_IRQHandler+0xa58>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00e      	beq.n	8008724 <HAL_DMA_IRQHandler+0x984>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a3c      	ldr	r2, [pc, #240]	@ (80087fc <HAL_DMA_IRQHandler+0xa5c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d009      	beq.n	8008724 <HAL_DMA_IRQHandler+0x984>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a3a      	ldr	r2, [pc, #232]	@ (8008800 <HAL_DMA_IRQHandler+0xa60>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <HAL_DMA_IRQHandler+0x984>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a39      	ldr	r2, [pc, #228]	@ (8008804 <HAL_DMA_IRQHandler+0xa64>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d101      	bne.n	8008728 <HAL_DMA_IRQHandler+0x988>
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <HAL_DMA_IRQHandler+0x98a>
 8008728:	2300      	movs	r3, #0
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 823f 	beq.w	8008bae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800873c:	f003 031f 	and.w	r3, r3, #31
 8008740:	2204      	movs	r2, #4
 8008742:	409a      	lsls	r2, r3
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 80cd 	beq.w	80088e8 <HAL_DMA_IRQHandler+0xb48>
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80c7 	beq.w	80088e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800875e:	f003 031f 	and.w	r3, r3, #31
 8008762:	2204      	movs	r2, #4
 8008764:	409a      	lsls	r2, r3
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d049      	beq.n	8008808 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8210 	beq.w	8008ba8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008790:	e20a      	b.n	8008ba8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8206 	beq.w	8008ba8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087a4:	e200      	b.n	8008ba8 <HAL_DMA_IRQHandler+0xe08>
 80087a6:	bf00      	nop
 80087a8:	40020010 	.word	0x40020010
 80087ac:	40020028 	.word	0x40020028
 80087b0:	40020040 	.word	0x40020040
 80087b4:	40020058 	.word	0x40020058
 80087b8:	40020070 	.word	0x40020070
 80087bc:	40020088 	.word	0x40020088
 80087c0:	400200a0 	.word	0x400200a0
 80087c4:	400200b8 	.word	0x400200b8
 80087c8:	40020410 	.word	0x40020410
 80087cc:	40020428 	.word	0x40020428
 80087d0:	40020440 	.word	0x40020440
 80087d4:	40020458 	.word	0x40020458
 80087d8:	40020470 	.word	0x40020470
 80087dc:	40020488 	.word	0x40020488
 80087e0:	400204a0 	.word	0x400204a0
 80087e4:	400204b8 	.word	0x400204b8
 80087e8:	58025408 	.word	0x58025408
 80087ec:	5802541c 	.word	0x5802541c
 80087f0:	58025430 	.word	0x58025430
 80087f4:	58025444 	.word	0x58025444
 80087f8:	58025458 	.word	0x58025458
 80087fc:	5802546c 	.word	0x5802546c
 8008800:	58025480 	.word	0x58025480
 8008804:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d160      	bne.n	80088d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a7f      	ldr	r2, [pc, #508]	@ (8008a14 <HAL_DMA_IRQHandler+0xc74>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d04a      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a7d      	ldr	r2, [pc, #500]	@ (8008a18 <HAL_DMA_IRQHandler+0xc78>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d045      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a7c      	ldr	r2, [pc, #496]	@ (8008a1c <HAL_DMA_IRQHandler+0xc7c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d040      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a7a      	ldr	r2, [pc, #488]	@ (8008a20 <HAL_DMA_IRQHandler+0xc80>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d03b      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a79      	ldr	r2, [pc, #484]	@ (8008a24 <HAL_DMA_IRQHandler+0xc84>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d036      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a77      	ldr	r2, [pc, #476]	@ (8008a28 <HAL_DMA_IRQHandler+0xc88>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d031      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a76      	ldr	r2, [pc, #472]	@ (8008a2c <HAL_DMA_IRQHandler+0xc8c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d02c      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a74      	ldr	r2, [pc, #464]	@ (8008a30 <HAL_DMA_IRQHandler+0xc90>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d027      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a73      	ldr	r2, [pc, #460]	@ (8008a34 <HAL_DMA_IRQHandler+0xc94>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d022      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a71      	ldr	r2, [pc, #452]	@ (8008a38 <HAL_DMA_IRQHandler+0xc98>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d01d      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a70      	ldr	r2, [pc, #448]	@ (8008a3c <HAL_DMA_IRQHandler+0xc9c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d018      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a6e      	ldr	r2, [pc, #440]	@ (8008a40 <HAL_DMA_IRQHandler+0xca0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d013      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a6d      	ldr	r2, [pc, #436]	@ (8008a44 <HAL_DMA_IRQHandler+0xca4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00e      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a6b      	ldr	r2, [pc, #428]	@ (8008a48 <HAL_DMA_IRQHandler+0xca8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d009      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a6a      	ldr	r2, [pc, #424]	@ (8008a4c <HAL_DMA_IRQHandler+0xcac>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d004      	beq.n	80088b2 <HAL_DMA_IRQHandler+0xb12>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a68      	ldr	r2, [pc, #416]	@ (8008a50 <HAL_DMA_IRQHandler+0xcb0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d108      	bne.n	80088c4 <HAL_DMA_IRQHandler+0xb24>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 0208 	bic.w	r2, r2, #8
 80088c0:	601a      	str	r2, [r3, #0]
 80088c2:	e007      	b.n	80088d4 <HAL_DMA_IRQHandler+0xb34>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0204 	bic.w	r2, r2, #4
 80088d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8165 	beq.w	8008ba8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088e6:	e15f      	b.n	8008ba8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ec:	f003 031f 	and.w	r3, r3, #31
 80088f0:	2202      	movs	r2, #2
 80088f2:	409a      	lsls	r2, r3
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	4013      	ands	r3, r2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80c5 	beq.w	8008a88 <HAL_DMA_IRQHandler+0xce8>
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 80bf 	beq.w	8008a88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800890e:	f003 031f 	and.w	r3, r3, #31
 8008912:	2202      	movs	r2, #2
 8008914:	409a      	lsls	r2, r3
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d018      	beq.n	8008956 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 813a 	beq.w	8008bac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008940:	e134      	b.n	8008bac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 8130 	beq.w	8008bac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008954:	e12a      	b.n	8008bac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8089 	bne.w	8008a74 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2b      	ldr	r2, [pc, #172]	@ (8008a14 <HAL_DMA_IRQHandler+0xc74>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d04a      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a29      	ldr	r2, [pc, #164]	@ (8008a18 <HAL_DMA_IRQHandler+0xc78>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d045      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a28      	ldr	r2, [pc, #160]	@ (8008a1c <HAL_DMA_IRQHandler+0xc7c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d040      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a26      	ldr	r2, [pc, #152]	@ (8008a20 <HAL_DMA_IRQHandler+0xc80>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d03b      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a25      	ldr	r2, [pc, #148]	@ (8008a24 <HAL_DMA_IRQHandler+0xc84>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d036      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a23      	ldr	r2, [pc, #140]	@ (8008a28 <HAL_DMA_IRQHandler+0xc88>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d031      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a22      	ldr	r2, [pc, #136]	@ (8008a2c <HAL_DMA_IRQHandler+0xc8c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d02c      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a20      	ldr	r2, [pc, #128]	@ (8008a30 <HAL_DMA_IRQHandler+0xc90>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d027      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a34 <HAL_DMA_IRQHandler+0xc94>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d022      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a38 <HAL_DMA_IRQHandler+0xc98>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d01d      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a1c      	ldr	r2, [pc, #112]	@ (8008a3c <HAL_DMA_IRQHandler+0xc9c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d018      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008a40 <HAL_DMA_IRQHandler+0xca0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d013      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a19      	ldr	r2, [pc, #100]	@ (8008a44 <HAL_DMA_IRQHandler+0xca4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00e      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a17      	ldr	r2, [pc, #92]	@ (8008a48 <HAL_DMA_IRQHandler+0xca8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d009      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a16      	ldr	r2, [pc, #88]	@ (8008a4c <HAL_DMA_IRQHandler+0xcac>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d004      	beq.n	8008a02 <HAL_DMA_IRQHandler+0xc62>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a14      	ldr	r2, [pc, #80]	@ (8008a50 <HAL_DMA_IRQHandler+0xcb0>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d128      	bne.n	8008a54 <HAL_DMA_IRQHandler+0xcb4>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0214 	bic.w	r2, r2, #20
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e027      	b.n	8008a64 <HAL_DMA_IRQHandler+0xcc4>
 8008a14:	40020010 	.word	0x40020010
 8008a18:	40020028 	.word	0x40020028
 8008a1c:	40020040 	.word	0x40020040
 8008a20:	40020058 	.word	0x40020058
 8008a24:	40020070 	.word	0x40020070
 8008a28:	40020088 	.word	0x40020088
 8008a2c:	400200a0 	.word	0x400200a0
 8008a30:	400200b8 	.word	0x400200b8
 8008a34:	40020410 	.word	0x40020410
 8008a38:	40020428 	.word	0x40020428
 8008a3c:	40020440 	.word	0x40020440
 8008a40:	40020458 	.word	0x40020458
 8008a44:	40020470 	.word	0x40020470
 8008a48:	40020488 	.word	0x40020488
 8008a4c:	400204a0 	.word	0x400204a0
 8008a50:	400204b8 	.word	0x400204b8
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 020a 	bic.w	r2, r2, #10
 8008a62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8097 	beq.w	8008bac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a86:	e091      	b.n	8008bac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a8c:	f003 031f 	and.w	r3, r3, #31
 8008a90:	2208      	movs	r2, #8
 8008a92:	409a      	lsls	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	4013      	ands	r3, r2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8088 	beq.w	8008bae <HAL_DMA_IRQHandler+0xe0e>
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8082 	beq.w	8008bae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a41      	ldr	r2, [pc, #260]	@ (8008bb4 <HAL_DMA_IRQHandler+0xe14>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d04a      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a3f      	ldr	r2, [pc, #252]	@ (8008bb8 <HAL_DMA_IRQHandler+0xe18>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d045      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8008bbc <HAL_DMA_IRQHandler+0xe1c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d040      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a3c      	ldr	r2, [pc, #240]	@ (8008bc0 <HAL_DMA_IRQHandler+0xe20>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d03b      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8008bc4 <HAL_DMA_IRQHandler+0xe24>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d036      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a39      	ldr	r2, [pc, #228]	@ (8008bc8 <HAL_DMA_IRQHandler+0xe28>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d031      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a38      	ldr	r2, [pc, #224]	@ (8008bcc <HAL_DMA_IRQHandler+0xe2c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d02c      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a36      	ldr	r2, [pc, #216]	@ (8008bd0 <HAL_DMA_IRQHandler+0xe30>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d027      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a35      	ldr	r2, [pc, #212]	@ (8008bd4 <HAL_DMA_IRQHandler+0xe34>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d022      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a33      	ldr	r2, [pc, #204]	@ (8008bd8 <HAL_DMA_IRQHandler+0xe38>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01d      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a32      	ldr	r2, [pc, #200]	@ (8008bdc <HAL_DMA_IRQHandler+0xe3c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d018      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a30      	ldr	r2, [pc, #192]	@ (8008be0 <HAL_DMA_IRQHandler+0xe40>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d013      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a2f      	ldr	r2, [pc, #188]	@ (8008be4 <HAL_DMA_IRQHandler+0xe44>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00e      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a2d      	ldr	r2, [pc, #180]	@ (8008be8 <HAL_DMA_IRQHandler+0xe48>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d009      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bec <HAL_DMA_IRQHandler+0xe4c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xdaa>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf0 <HAL_DMA_IRQHandler+0xe50>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d108      	bne.n	8008b5c <HAL_DMA_IRQHandler+0xdbc>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f022 021c 	bic.w	r2, r2, #28
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	e007      	b.n	8008b6c <HAL_DMA_IRQHandler+0xdcc>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 020e 	bic.w	r2, r2, #14
 8008b6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2201      	movs	r2, #1
 8008b76:	409a      	lsls	r2, r3
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	4798      	blx	r3
 8008ba2:	e004      	b.n	8008bae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008ba4:	bf00      	nop
 8008ba6:	e002      	b.n	8008bae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ba8:	bf00      	nop
 8008baa:	e000      	b.n	8008bae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008bae:	3728      	adds	r7, #40	@ 0x28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40020010 	.word	0x40020010
 8008bb8:	40020028 	.word	0x40020028
 8008bbc:	40020040 	.word	0x40020040
 8008bc0:	40020058 	.word	0x40020058
 8008bc4:	40020070 	.word	0x40020070
 8008bc8:	40020088 	.word	0x40020088
 8008bcc:	400200a0 	.word	0x400200a0
 8008bd0:	400200b8 	.word	0x400200b8
 8008bd4:	40020410 	.word	0x40020410
 8008bd8:	40020428 	.word	0x40020428
 8008bdc:	40020440 	.word	0x40020440
 8008be0:	40020458 	.word	0x40020458
 8008be4:	40020470 	.word	0x40020470
 8008be8:	40020488 	.word	0x40020488
 8008bec:	400204a0 	.word	0x400204a0
 8008bf0:	400204b8 	.word	0x400204b8

08008bf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a7f      	ldr	r2, [pc, #508]	@ (8008e10 <DMA_SetConfig+0x21c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d072      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8008e14 <DMA_SetConfig+0x220>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d06d      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a7c      	ldr	r2, [pc, #496]	@ (8008e18 <DMA_SetConfig+0x224>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d068      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a7a      	ldr	r2, [pc, #488]	@ (8008e1c <DMA_SetConfig+0x228>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d063      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a79      	ldr	r2, [pc, #484]	@ (8008e20 <DMA_SetConfig+0x22c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d05e      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a77      	ldr	r2, [pc, #476]	@ (8008e24 <DMA_SetConfig+0x230>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d059      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a76      	ldr	r2, [pc, #472]	@ (8008e28 <DMA_SetConfig+0x234>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d054      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a74      	ldr	r2, [pc, #464]	@ (8008e2c <DMA_SetConfig+0x238>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d04f      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a73      	ldr	r2, [pc, #460]	@ (8008e30 <DMA_SetConfig+0x23c>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d04a      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a71      	ldr	r2, [pc, #452]	@ (8008e34 <DMA_SetConfig+0x240>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d045      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a70      	ldr	r2, [pc, #448]	@ (8008e38 <DMA_SetConfig+0x244>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d040      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a6e      	ldr	r2, [pc, #440]	@ (8008e3c <DMA_SetConfig+0x248>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d03b      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8008e40 <DMA_SetConfig+0x24c>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d036      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a6b      	ldr	r2, [pc, #428]	@ (8008e44 <DMA_SetConfig+0x250>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d031      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a6a      	ldr	r2, [pc, #424]	@ (8008e48 <DMA_SetConfig+0x254>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d02c      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a68      	ldr	r2, [pc, #416]	@ (8008e4c <DMA_SetConfig+0x258>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d027      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a67      	ldr	r2, [pc, #412]	@ (8008e50 <DMA_SetConfig+0x25c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d022      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a65      	ldr	r2, [pc, #404]	@ (8008e54 <DMA_SetConfig+0x260>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d01d      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a64      	ldr	r2, [pc, #400]	@ (8008e58 <DMA_SetConfig+0x264>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d018      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a62      	ldr	r2, [pc, #392]	@ (8008e5c <DMA_SetConfig+0x268>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d013      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a61      	ldr	r2, [pc, #388]	@ (8008e60 <DMA_SetConfig+0x26c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00e      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a5f      	ldr	r2, [pc, #380]	@ (8008e64 <DMA_SetConfig+0x270>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d009      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a5e      	ldr	r2, [pc, #376]	@ (8008e68 <DMA_SetConfig+0x274>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d004      	beq.n	8008cfe <DMA_SetConfig+0x10a>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8008e6c <DMA_SetConfig+0x278>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d101      	bne.n	8008d02 <DMA_SetConfig+0x10e>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <DMA_SetConfig+0x110>
 8008d02:	2300      	movs	r3, #0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00d      	beq.n	8008d24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008d10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008d22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a39      	ldr	r2, [pc, #228]	@ (8008e10 <DMA_SetConfig+0x21c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d04a      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a38      	ldr	r2, [pc, #224]	@ (8008e14 <DMA_SetConfig+0x220>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d045      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a36      	ldr	r2, [pc, #216]	@ (8008e18 <DMA_SetConfig+0x224>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d040      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a35      	ldr	r2, [pc, #212]	@ (8008e1c <DMA_SetConfig+0x228>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d03b      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a33      	ldr	r2, [pc, #204]	@ (8008e20 <DMA_SetConfig+0x22c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d036      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a32      	ldr	r2, [pc, #200]	@ (8008e24 <DMA_SetConfig+0x230>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d031      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a30      	ldr	r2, [pc, #192]	@ (8008e28 <DMA_SetConfig+0x234>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d02c      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8008e2c <DMA_SetConfig+0x238>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d027      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a2d      	ldr	r2, [pc, #180]	@ (8008e30 <DMA_SetConfig+0x23c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d022      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a2c      	ldr	r2, [pc, #176]	@ (8008e34 <DMA_SetConfig+0x240>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d01d      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8008e38 <DMA_SetConfig+0x244>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d018      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a29      	ldr	r2, [pc, #164]	@ (8008e3c <DMA_SetConfig+0x248>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d013      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a27      	ldr	r2, [pc, #156]	@ (8008e40 <DMA_SetConfig+0x24c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00e      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a26      	ldr	r2, [pc, #152]	@ (8008e44 <DMA_SetConfig+0x250>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a24      	ldr	r2, [pc, #144]	@ (8008e48 <DMA_SetConfig+0x254>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <DMA_SetConfig+0x1d0>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a23      	ldr	r2, [pc, #140]	@ (8008e4c <DMA_SetConfig+0x258>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d101      	bne.n	8008dc8 <DMA_SetConfig+0x1d4>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <DMA_SetConfig+0x1d6>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d059      	beq.n	8008e82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dd2:	f003 031f 	and.w	r3, r3, #31
 8008dd6:	223f      	movs	r2, #63	@ 0x3f
 8008dd8:	409a      	lsls	r2, r3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008dec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	2b40      	cmp	r3, #64	@ 0x40
 8008dfc:	d138      	bne.n	8008e70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008e0e:	e086      	b.n	8008f1e <DMA_SetConfig+0x32a>
 8008e10:	40020010 	.word	0x40020010
 8008e14:	40020028 	.word	0x40020028
 8008e18:	40020040 	.word	0x40020040
 8008e1c:	40020058 	.word	0x40020058
 8008e20:	40020070 	.word	0x40020070
 8008e24:	40020088 	.word	0x40020088
 8008e28:	400200a0 	.word	0x400200a0
 8008e2c:	400200b8 	.word	0x400200b8
 8008e30:	40020410 	.word	0x40020410
 8008e34:	40020428 	.word	0x40020428
 8008e38:	40020440 	.word	0x40020440
 8008e3c:	40020458 	.word	0x40020458
 8008e40:	40020470 	.word	0x40020470
 8008e44:	40020488 	.word	0x40020488
 8008e48:	400204a0 	.word	0x400204a0
 8008e4c:	400204b8 	.word	0x400204b8
 8008e50:	58025408 	.word	0x58025408
 8008e54:	5802541c 	.word	0x5802541c
 8008e58:	58025430 	.word	0x58025430
 8008e5c:	58025444 	.word	0x58025444
 8008e60:	58025458 	.word	0x58025458
 8008e64:	5802546c 	.word	0x5802546c
 8008e68:	58025480 	.word	0x58025480
 8008e6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	60da      	str	r2, [r3, #12]
}
 8008e80:	e04d      	b.n	8008f1e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a29      	ldr	r2, [pc, #164]	@ (8008f2c <DMA_SetConfig+0x338>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d022      	beq.n	8008ed2 <DMA_SetConfig+0x2de>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a27      	ldr	r2, [pc, #156]	@ (8008f30 <DMA_SetConfig+0x33c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d01d      	beq.n	8008ed2 <DMA_SetConfig+0x2de>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a26      	ldr	r2, [pc, #152]	@ (8008f34 <DMA_SetConfig+0x340>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d018      	beq.n	8008ed2 <DMA_SetConfig+0x2de>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a24      	ldr	r2, [pc, #144]	@ (8008f38 <DMA_SetConfig+0x344>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <DMA_SetConfig+0x2de>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a23      	ldr	r2, [pc, #140]	@ (8008f3c <DMA_SetConfig+0x348>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00e      	beq.n	8008ed2 <DMA_SetConfig+0x2de>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a21      	ldr	r2, [pc, #132]	@ (8008f40 <DMA_SetConfig+0x34c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d009      	beq.n	8008ed2 <DMA_SetConfig+0x2de>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a20      	ldr	r2, [pc, #128]	@ (8008f44 <DMA_SetConfig+0x350>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <DMA_SetConfig+0x2de>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8008f48 <DMA_SetConfig+0x354>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d101      	bne.n	8008ed6 <DMA_SetConfig+0x2e2>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <DMA_SetConfig+0x2e4>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d020      	beq.n	8008f1e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ee0:	f003 031f 	and.w	r3, r3, #31
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	409a      	lsls	r2, r3
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	2b40      	cmp	r3, #64	@ 0x40
 8008efa:	d108      	bne.n	8008f0e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	60da      	str	r2, [r3, #12]
}
 8008f0c:	e007      	b.n	8008f1e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	60da      	str	r2, [r3, #12]
}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	58025408 	.word	0x58025408
 8008f30:	5802541c 	.word	0x5802541c
 8008f34:	58025430 	.word	0x58025430
 8008f38:	58025444 	.word	0x58025444
 8008f3c:	58025458 	.word	0x58025458
 8008f40:	5802546c 	.word	0x5802546c
 8008f44:	58025480 	.word	0x58025480
 8008f48:	58025494 	.word	0x58025494

08008f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a42      	ldr	r2, [pc, #264]	@ (8009064 <DMA_CalcBaseAndBitshift+0x118>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d04a      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a41      	ldr	r2, [pc, #260]	@ (8009068 <DMA_CalcBaseAndBitshift+0x11c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d045      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800906c <DMA_CalcBaseAndBitshift+0x120>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d040      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a3e      	ldr	r2, [pc, #248]	@ (8009070 <DMA_CalcBaseAndBitshift+0x124>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d03b      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a3c      	ldr	r2, [pc, #240]	@ (8009074 <DMA_CalcBaseAndBitshift+0x128>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d036      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8009078 <DMA_CalcBaseAndBitshift+0x12c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d031      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a39      	ldr	r2, [pc, #228]	@ (800907c <DMA_CalcBaseAndBitshift+0x130>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d02c      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a38      	ldr	r2, [pc, #224]	@ (8009080 <DMA_CalcBaseAndBitshift+0x134>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d027      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a36      	ldr	r2, [pc, #216]	@ (8009084 <DMA_CalcBaseAndBitshift+0x138>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d022      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a35      	ldr	r2, [pc, #212]	@ (8009088 <DMA_CalcBaseAndBitshift+0x13c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d01d      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a33      	ldr	r2, [pc, #204]	@ (800908c <DMA_CalcBaseAndBitshift+0x140>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d018      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a32      	ldr	r2, [pc, #200]	@ (8009090 <DMA_CalcBaseAndBitshift+0x144>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d013      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a30      	ldr	r2, [pc, #192]	@ (8009094 <DMA_CalcBaseAndBitshift+0x148>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d00e      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a2f      	ldr	r2, [pc, #188]	@ (8009098 <DMA_CalcBaseAndBitshift+0x14c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d009      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800909c <DMA_CalcBaseAndBitshift+0x150>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d004      	beq.n	8008ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a2c      	ldr	r2, [pc, #176]	@ (80090a0 <DMA_CalcBaseAndBitshift+0x154>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d101      	bne.n	8008ff8 <DMA_CalcBaseAndBitshift+0xac>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e000      	b.n	8008ffa <DMA_CalcBaseAndBitshift+0xae>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d024      	beq.n	8009048 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	3b10      	subs	r3, #16
 8009006:	4a27      	ldr	r2, [pc, #156]	@ (80090a4 <DMA_CalcBaseAndBitshift+0x158>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	4a24      	ldr	r2, [pc, #144]	@ (80090a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8009018:	5cd3      	ldrb	r3, [r2, r3]
 800901a:	461a      	mov	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b03      	cmp	r3, #3
 8009024:	d908      	bls.n	8009038 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	4b1f      	ldr	r3, [pc, #124]	@ (80090ac <DMA_CalcBaseAndBitshift+0x160>)
 800902e:	4013      	ands	r3, r2
 8009030:	1d1a      	adds	r2, r3, #4
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	659a      	str	r2, [r3, #88]	@ 0x58
 8009036:	e00d      	b.n	8009054 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	4b1b      	ldr	r3, [pc, #108]	@ (80090ac <DMA_CalcBaseAndBitshift+0x160>)
 8009040:	4013      	ands	r3, r2
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	6593      	str	r3, [r2, #88]	@ 0x58
 8009046:	e005      	b.n	8009054 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	40020010 	.word	0x40020010
 8009068:	40020028 	.word	0x40020028
 800906c:	40020040 	.word	0x40020040
 8009070:	40020058 	.word	0x40020058
 8009074:	40020070 	.word	0x40020070
 8009078:	40020088 	.word	0x40020088
 800907c:	400200a0 	.word	0x400200a0
 8009080:	400200b8 	.word	0x400200b8
 8009084:	40020410 	.word	0x40020410
 8009088:	40020428 	.word	0x40020428
 800908c:	40020440 	.word	0x40020440
 8009090:	40020458 	.word	0x40020458
 8009094:	40020470 	.word	0x40020470
 8009098:	40020488 	.word	0x40020488
 800909c:	400204a0 	.word	0x400204a0
 80090a0:	400204b8 	.word	0x400204b8
 80090a4:	aaaaaaab 	.word	0xaaaaaaab
 80090a8:	08018290 	.word	0x08018290
 80090ac:	fffffc00 	.word	0xfffffc00

080090b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d120      	bne.n	8009106 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d858      	bhi.n	800917e <DMA_CheckFifoParam+0xce>
 80090cc:	a201      	add	r2, pc, #4	@ (adr r2, 80090d4 <DMA_CheckFifoParam+0x24>)
 80090ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d2:	bf00      	nop
 80090d4:	080090e5 	.word	0x080090e5
 80090d8:	080090f7 	.word	0x080090f7
 80090dc:	080090e5 	.word	0x080090e5
 80090e0:	0800917f 	.word	0x0800917f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d048      	beq.n	8009182 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090f4:	e045      	b.n	8009182 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80090fe:	d142      	bne.n	8009186 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009104:	e03f      	b.n	8009186 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910e:	d123      	bne.n	8009158 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009114:	2b03      	cmp	r3, #3
 8009116:	d838      	bhi.n	800918a <DMA_CheckFifoParam+0xda>
 8009118:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <DMA_CheckFifoParam+0x70>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009131 	.word	0x08009131
 8009124:	08009137 	.word	0x08009137
 8009128:	08009131 	.word	0x08009131
 800912c:	08009149 	.word	0x08009149
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]
        break;
 8009134:	e030      	b.n	8009198 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d025      	beq.n	800918e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009146:	e022      	b.n	800918e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009150:	d11f      	bne.n	8009192 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009156:	e01c      	b.n	8009192 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915c:	2b02      	cmp	r3, #2
 800915e:	d902      	bls.n	8009166 <DMA_CheckFifoParam+0xb6>
 8009160:	2b03      	cmp	r3, #3
 8009162:	d003      	beq.n	800916c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009164:	e018      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	73fb      	strb	r3, [r7, #15]
        break;
 800916a:	e015      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00e      	beq.n	8009196 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
    break;
 800917c:	e00b      	b.n	8009196 <DMA_CheckFifoParam+0xe6>
        break;
 800917e:	bf00      	nop
 8009180:	e00a      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
        break;
 8009182:	bf00      	nop
 8009184:	e008      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
        break;
 8009186:	bf00      	nop
 8009188:	e006      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
        break;
 800918a:	bf00      	nop
 800918c:	e004      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
        break;
 800918e:	bf00      	nop
 8009190:	e002      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
        break;
 8009192:	bf00      	nop
 8009194:	e000      	b.n	8009198 <DMA_CheckFifoParam+0xe8>
    break;
 8009196:	bf00      	nop
    }
  }

  return status;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop

080091a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a38      	ldr	r2, [pc, #224]	@ (800929c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d022      	beq.n	8009206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a36      	ldr	r2, [pc, #216]	@ (80092a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d01d      	beq.n	8009206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a35      	ldr	r2, [pc, #212]	@ (80092a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d018      	beq.n	8009206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a33      	ldr	r2, [pc, #204]	@ (80092a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d013      	beq.n	8009206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a32      	ldr	r2, [pc, #200]	@ (80092ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d00e      	beq.n	8009206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a30      	ldr	r2, [pc, #192]	@ (80092b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d009      	beq.n	8009206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a2f      	ldr	r2, [pc, #188]	@ (80092b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d004      	beq.n	8009206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a2d      	ldr	r2, [pc, #180]	@ (80092b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d101      	bne.n	800920a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009206:	2301      	movs	r3, #1
 8009208:	e000      	b.n	800920c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800920a:	2300      	movs	r3, #0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01a      	beq.n	8009246 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	3b08      	subs	r3, #8
 8009218:	4a28      	ldr	r2, [pc, #160]	@ (80092bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800921a:	fba2 2303 	umull	r2, r3, r2, r3
 800921e:	091b      	lsrs	r3, r3, #4
 8009220:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	4b26      	ldr	r3, [pc, #152]	@ (80092c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	461a      	mov	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a24      	ldr	r2, [pc, #144]	@ (80092c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009234:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f003 031f 	and.w	r3, r3, #31
 800923c:	2201      	movs	r2, #1
 800923e:	409a      	lsls	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009244:	e024      	b.n	8009290 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	3b10      	subs	r3, #16
 800924e:	4a1e      	ldr	r2, [pc, #120]	@ (80092c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009250:	fba2 2303 	umull	r2, r3, r2, r3
 8009254:	091b      	lsrs	r3, r3, #4
 8009256:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4a1c      	ldr	r2, [pc, #112]	@ (80092cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d806      	bhi.n	800926e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4a1b      	ldr	r2, [pc, #108]	@ (80092d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d902      	bls.n	800926e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3308      	adds	r3, #8
 800926c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4b18      	ldr	r3, [pc, #96]	@ (80092d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a16      	ldr	r2, [pc, #88]	@ (80092d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009280:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	2201      	movs	r2, #1
 800928a:	409a      	lsls	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009290:	bf00      	nop
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	58025408 	.word	0x58025408
 80092a0:	5802541c 	.word	0x5802541c
 80092a4:	58025430 	.word	0x58025430
 80092a8:	58025444 	.word	0x58025444
 80092ac:	58025458 	.word	0x58025458
 80092b0:	5802546c 	.word	0x5802546c
 80092b4:	58025480 	.word	0x58025480
 80092b8:	58025494 	.word	0x58025494
 80092bc:	cccccccd 	.word	0xcccccccd
 80092c0:	16009600 	.word	0x16009600
 80092c4:	58025880 	.word	0x58025880
 80092c8:	aaaaaaab 	.word	0xaaaaaaab
 80092cc:	400204b8 	.word	0x400204b8
 80092d0:	4002040f 	.word	0x4002040f
 80092d4:	10008200 	.word	0x10008200
 80092d8:	40020880 	.word	0x40020880

080092dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d04a      	beq.n	8009388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	d847      	bhi.n	8009388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a25      	ldr	r2, [pc, #148]	@ (8009394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d022      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a24      	ldr	r2, [pc, #144]	@ (8009398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d01d      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a22      	ldr	r2, [pc, #136]	@ (800939c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d018      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a21      	ldr	r2, [pc, #132]	@ (80093a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d013      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a1f      	ldr	r2, [pc, #124]	@ (80093a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d00e      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a1e      	ldr	r2, [pc, #120]	@ (80093a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d009      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a1c      	ldr	r2, [pc, #112]	@ (80093ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d004      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a1b      	ldr	r2, [pc, #108]	@ (80093b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d101      	bne.n	800934c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800934c:	2300      	movs	r3, #0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00a      	beq.n	8009368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4b17      	ldr	r3, [pc, #92]	@ (80093b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	461a      	mov	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a15      	ldr	r2, [pc, #84]	@ (80093b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009364:	671a      	str	r2, [r3, #112]	@ 0x70
 8009366:	e009      	b.n	800937c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4b14      	ldr	r3, [pc, #80]	@ (80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	461a      	mov	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a11      	ldr	r2, [pc, #68]	@ (80093c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800937a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3b01      	subs	r3, #1
 8009380:	2201      	movs	r2, #1
 8009382:	409a      	lsls	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	58025408 	.word	0x58025408
 8009398:	5802541c 	.word	0x5802541c
 800939c:	58025430 	.word	0x58025430
 80093a0:	58025444 	.word	0x58025444
 80093a4:	58025458 	.word	0x58025458
 80093a8:	5802546c 	.word	0x5802546c
 80093ac:	58025480 	.word	0x58025480
 80093b0:	58025494 	.word	0x58025494
 80093b4:	1600963f 	.word	0x1600963f
 80093b8:	58025940 	.word	0x58025940
 80093bc:	1000823f 	.word	0x1000823f
 80093c0:	40020940 	.word	0x40020940

080093c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b089      	sub	sp, #36	@ 0x24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80093d2:	4b89      	ldr	r3, [pc, #548]	@ (80095f8 <HAL_GPIO_Init+0x234>)
 80093d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093d6:	e194      	b.n	8009702 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	2101      	movs	r1, #1
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	4013      	ands	r3, r2
 80093e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 8186 	beq.w	80096fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d005      	beq.n	8009408 <HAL_GPIO_Init+0x44>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f003 0303 	and.w	r3, r3, #3
 8009404:	2b02      	cmp	r3, #2
 8009406:	d130      	bne.n	800946a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	2203      	movs	r2, #3
 8009414:	fa02 f303 	lsl.w	r3, r2, r3
 8009418:	43db      	mvns	r3, r3
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	4013      	ands	r3, r2
 800941e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	68da      	ldr	r2, [r3, #12]
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	fa02 f303 	lsl.w	r3, r2, r3
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	4313      	orrs	r3, r2
 8009430:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800943e:	2201      	movs	r2, #1
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	fa02 f303 	lsl.w	r3, r2, r3
 8009446:	43db      	mvns	r3, r3
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	4013      	ands	r3, r2
 800944c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	091b      	lsrs	r3, r3, #4
 8009454:	f003 0201 	and.w	r2, r3, #1
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	fa02 f303 	lsl.w	r3, r2, r3
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	4313      	orrs	r3, r2
 8009462:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	2b03      	cmp	r3, #3
 8009474:	d017      	beq.n	80094a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	2203      	movs	r2, #3
 8009482:	fa02 f303 	lsl.w	r3, r2, r3
 8009486:	43db      	mvns	r3, r3
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	4013      	ands	r3, r2
 800948c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	fa02 f303 	lsl.w	r3, r2, r3
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	4313      	orrs	r3, r2
 800949e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d123      	bne.n	80094fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	08da      	lsrs	r2, r3, #3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3208      	adds	r2, #8
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	220f      	movs	r2, #15
 80094ca:	fa02 f303 	lsl.w	r3, r2, r3
 80094ce:	43db      	mvns	r3, r3
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	4013      	ands	r3, r2
 80094d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	691a      	ldr	r2, [r3, #16]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	fa02 f303 	lsl.w	r3, r2, r3
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	08da      	lsrs	r2, r3, #3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3208      	adds	r2, #8
 80094f4:	69b9      	ldr	r1, [r7, #24]
 80094f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	2203      	movs	r2, #3
 8009506:	fa02 f303 	lsl.w	r3, r2, r3
 800950a:	43db      	mvns	r3, r3
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	4013      	ands	r3, r2
 8009510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f003 0203 	and.w	r2, r3, #3
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	fa02 f303 	lsl.w	r3, r2, r3
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	4313      	orrs	r3, r2
 8009526:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 80e0 	beq.w	80096fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800953c:	4b2f      	ldr	r3, [pc, #188]	@ (80095fc <HAL_GPIO_Init+0x238>)
 800953e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009542:	4a2e      	ldr	r2, [pc, #184]	@ (80095fc <HAL_GPIO_Init+0x238>)
 8009544:	f043 0302 	orr.w	r3, r3, #2
 8009548:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800954c:	4b2b      	ldr	r3, [pc, #172]	@ (80095fc <HAL_GPIO_Init+0x238>)
 800954e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800955a:	4a29      	ldr	r2, [pc, #164]	@ (8009600 <HAL_GPIO_Init+0x23c>)
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	089b      	lsrs	r3, r3, #2
 8009560:	3302      	adds	r3, #2
 8009562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	220f      	movs	r2, #15
 8009572:	fa02 f303 	lsl.w	r3, r2, r3
 8009576:	43db      	mvns	r3, r3
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	4013      	ands	r3, r2
 800957c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a20      	ldr	r2, [pc, #128]	@ (8009604 <HAL_GPIO_Init+0x240>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d052      	beq.n	800962c <HAL_GPIO_Init+0x268>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a1f      	ldr	r2, [pc, #124]	@ (8009608 <HAL_GPIO_Init+0x244>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d031      	beq.n	80095f2 <HAL_GPIO_Init+0x22e>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a1e      	ldr	r2, [pc, #120]	@ (800960c <HAL_GPIO_Init+0x248>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d02b      	beq.n	80095ee <HAL_GPIO_Init+0x22a>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a1d      	ldr	r2, [pc, #116]	@ (8009610 <HAL_GPIO_Init+0x24c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d025      	beq.n	80095ea <HAL_GPIO_Init+0x226>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009614 <HAL_GPIO_Init+0x250>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d01f      	beq.n	80095e6 <HAL_GPIO_Init+0x222>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009618 <HAL_GPIO_Init+0x254>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d019      	beq.n	80095e2 <HAL_GPIO_Init+0x21e>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a1a      	ldr	r2, [pc, #104]	@ (800961c <HAL_GPIO_Init+0x258>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d013      	beq.n	80095de <HAL_GPIO_Init+0x21a>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a19      	ldr	r2, [pc, #100]	@ (8009620 <HAL_GPIO_Init+0x25c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00d      	beq.n	80095da <HAL_GPIO_Init+0x216>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a18      	ldr	r2, [pc, #96]	@ (8009624 <HAL_GPIO_Init+0x260>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d007      	beq.n	80095d6 <HAL_GPIO_Init+0x212>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a17      	ldr	r2, [pc, #92]	@ (8009628 <HAL_GPIO_Init+0x264>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d101      	bne.n	80095d2 <HAL_GPIO_Init+0x20e>
 80095ce:	2309      	movs	r3, #9
 80095d0:	e02d      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095d2:	230a      	movs	r3, #10
 80095d4:	e02b      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095d6:	2308      	movs	r3, #8
 80095d8:	e029      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095da:	2307      	movs	r3, #7
 80095dc:	e027      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095de:	2306      	movs	r3, #6
 80095e0:	e025      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095e2:	2305      	movs	r3, #5
 80095e4:	e023      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095e6:	2304      	movs	r3, #4
 80095e8:	e021      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095ea:	2303      	movs	r3, #3
 80095ec:	e01f      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e01d      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e01b      	b.n	800962e <HAL_GPIO_Init+0x26a>
 80095f6:	bf00      	nop
 80095f8:	58000080 	.word	0x58000080
 80095fc:	58024400 	.word	0x58024400
 8009600:	58000400 	.word	0x58000400
 8009604:	58020000 	.word	0x58020000
 8009608:	58020400 	.word	0x58020400
 800960c:	58020800 	.word	0x58020800
 8009610:	58020c00 	.word	0x58020c00
 8009614:	58021000 	.word	0x58021000
 8009618:	58021400 	.word	0x58021400
 800961c:	58021800 	.word	0x58021800
 8009620:	58021c00 	.word	0x58021c00
 8009624:	58022000 	.word	0x58022000
 8009628:	58022400 	.word	0x58022400
 800962c:	2300      	movs	r3, #0
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	f002 0203 	and.w	r2, r2, #3
 8009634:	0092      	lsls	r2, r2, #2
 8009636:	4093      	lsls	r3, r2
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	4313      	orrs	r3, r2
 800963c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800963e:	4938      	ldr	r1, [pc, #224]	@ (8009720 <HAL_GPIO_Init+0x35c>)
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	089b      	lsrs	r3, r3, #2
 8009644:	3302      	adds	r3, #2
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800964c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	43db      	mvns	r3, r3
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	4013      	ands	r3, r2
 800965c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009672:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800967a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	43db      	mvns	r3, r3
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	4013      	ands	r3, r2
 800968a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4313      	orrs	r3, r2
 800969e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80096a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	43db      	mvns	r3, r3
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	4013      	ands	r3, r2
 80096b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	43db      	mvns	r3, r3
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	4013      	ands	r3, r2
 80096e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	3301      	adds	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	fa22 f303 	lsr.w	r3, r2, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	f47f ae63 	bne.w	80093d8 <HAL_GPIO_Init+0x14>
  }
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	3724      	adds	r7, #36	@ 0x24
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	58000400 	.word	0x58000400

08009724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	807b      	strh	r3, [r7, #2]
 8009730:	4613      	mov	r3, r2
 8009732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009734:	787b      	ldrb	r3, [r7, #1]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800973a:	887a      	ldrh	r2, [r7, #2]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009740:	e003      	b.n	800974a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009742:	887b      	ldrh	r3, [r7, #2]
 8009744:	041a      	lsls	r2, r3, #16
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	619a      	str	r2, [r3, #24]
}
 800974a:	bf00      	nop
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	4603      	mov	r3, r0
 800975e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009764:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009768:	88fb      	ldrh	r3, [r7, #6]
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	4618      	mov	r0, r3
 800977e:	f7fa fb1f 	bl	8003dc0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e08b      	b.n	80098b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7f7 fc5e 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2224      	movs	r2, #36	@ 0x24
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0201 	bic.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80097dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689a      	ldr	r2, [r3, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d107      	bne.n	8009806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009802:	609a      	str	r2, [r3, #8]
 8009804:	e006      	b.n	8009814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b02      	cmp	r3, #2
 800981a:	d108      	bne.n	800982e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800982a:	605a      	str	r2, [r3, #4]
 800982c:	e007      	b.n	800983e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800983c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6859      	ldr	r1, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b1d      	ldr	r3, [pc, #116]	@ (80098c0 <HAL_I2C_Init+0x134>)
 800984a:	430b      	orrs	r3, r1
 800984c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800985c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691a      	ldr	r2, [r3, #16]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	69d9      	ldr	r1, [r3, #28]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a1a      	ldr	r2, [r3, #32]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0201 	orr.w	r2, r2, #1
 8009896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	02008000 	.word	0x02008000

080098c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	4608      	mov	r0, r1
 80098ce:	4611      	mov	r1, r2
 80098d0:	461a      	mov	r2, r3
 80098d2:	4603      	mov	r3, r0
 80098d4:	817b      	strh	r3, [r7, #10]
 80098d6:	460b      	mov	r3, r1
 80098d8:	813b      	strh	r3, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	f040 80fd 	bne.w	8009ae6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <HAL_I2C_Mem_Read+0x34>
 80098f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d105      	bne.n	8009904 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e0f1      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800990a:	2b01      	cmp	r3, #1
 800990c:	d101      	bne.n	8009912 <HAL_I2C_Mem_Read+0x4e>
 800990e:	2302      	movs	r3, #2
 8009910:	e0ea      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800991a:	f7fa ff2f 	bl	800477c <HAL_GetTick>
 800991e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	2319      	movs	r3, #25
 8009926:	2201      	movs	r2, #1
 8009928:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f95b 	bl	8009be8 <I2C_WaitOnFlagUntilTimeout>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e0d5      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2222      	movs	r2, #34	@ 0x22
 8009940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2240      	movs	r2, #64	@ 0x40
 8009948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a3a      	ldr	r2, [r7, #32]
 8009956:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800995c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009964:	88f8      	ldrh	r0, [r7, #6]
 8009966:	893a      	ldrh	r2, [r7, #8]
 8009968:	8979      	ldrh	r1, [r7, #10]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	4603      	mov	r3, r0
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 f8bf 	bl	8009af8 <I2C_RequestMemoryRead>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e0ad      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009990:	b29b      	uxth	r3, r3
 8009992:	2bff      	cmp	r3, #255	@ 0xff
 8009994:	d90e      	bls.n	80099b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	22ff      	movs	r2, #255	@ 0xff
 800999a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	8979      	ldrh	r1, [r7, #10]
 80099a4:	4b52      	ldr	r3, [pc, #328]	@ (8009af0 <HAL_I2C_Mem_Read+0x22c>)
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fadf 	bl	8009f70 <I2C_TransferConfig>
 80099b2:	e00f      	b.n	80099d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	8979      	ldrh	r1, [r7, #10]
 80099c6:	4b4a      	ldr	r3, [pc, #296]	@ (8009af0 <HAL_I2C_Mem_Read+0x22c>)
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 face 	bl	8009f70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	2200      	movs	r2, #0
 80099dc:	2104      	movs	r1, #4
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 f902 	bl	8009be8 <I2C_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e07c      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d034      	beq.n	8009a94 <HAL_I2C_Mem_Read+0x1d0>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d130      	bne.n	8009a94 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2180      	movs	r1, #128	@ 0x80
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f8d3 	bl	8009be8 <I2C_WaitOnFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e04d      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2bff      	cmp	r3, #255	@ 0xff
 8009a54:	d90e      	bls.n	8009a74 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	22ff      	movs	r2, #255	@ 0xff
 8009a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	8979      	ldrh	r1, [r7, #10]
 8009a64:	2300      	movs	r3, #0
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 fa7f 	bl	8009f70 <I2C_TransferConfig>
 8009a72:	e00f      	b.n	8009a94 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	8979      	ldrh	r1, [r7, #10]
 8009a86:	2300      	movs	r3, #0
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 fa6e 	bl	8009f70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d19a      	bne.n	80099d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 f940 	bl	8009d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e01a      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6859      	ldr	r1, [r3, #4]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8009af4 <HAL_I2C_Mem_Read+0x230>)
 8009ac6:	400b      	ands	r3, r1
 8009ac8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e000      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009ae6:	2302      	movs	r3, #2
  }
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	80002400 	.word	0x80002400
 8009af4:	fe00e800 	.word	0xfe00e800

08009af8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	4608      	mov	r0, r1
 8009b02:	4611      	mov	r1, r2
 8009b04:	461a      	mov	r2, r3
 8009b06:	4603      	mov	r3, r0
 8009b08:	817b      	strh	r3, [r7, #10]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	813b      	strh	r3, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009b12:	88fb      	ldrh	r3, [r7, #6]
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	8979      	ldrh	r1, [r7, #10]
 8009b18:	4b20      	ldr	r3, [pc, #128]	@ (8009b9c <I2C_RequestMemoryRead+0xa4>)
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fa26 	bl	8009f70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	69b9      	ldr	r1, [r7, #24]
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 f8b6 	bl	8009c9a <I2C_WaitOnTXISFlagUntilTimeout>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e02c      	b.n	8009b92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d105      	bne.n	8009b4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b3e:	893b      	ldrh	r3, [r7, #8]
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b48:	e015      	b.n	8009b76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b4a:	893b      	ldrh	r3, [r7, #8]
 8009b4c:	0a1b      	lsrs	r3, r3, #8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b58:	69fa      	ldr	r2, [r7, #28]
 8009b5a:	69b9      	ldr	r1, [r7, #24]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f89c 	bl	8009c9a <I2C_WaitOnTXISFlagUntilTimeout>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e012      	b.n	8009b92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b6c:	893b      	ldrh	r3, [r7, #8]
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2140      	movs	r1, #64	@ 0x40
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 f831 	bl	8009be8 <I2C_WaitOnFlagUntilTimeout>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e000      	b.n	8009b92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	80002000 	.word	0x80002000

08009ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d103      	bne.n	8009bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d007      	beq.n	8009bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0201 	orr.w	r2, r2, #1
 8009bda:	619a      	str	r2, [r3, #24]
  }
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	603b      	str	r3, [r7, #0]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bf8:	e03b      	b.n	8009c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f8d6 	bl	8009db0 <I2C_IsErrorOccurred>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e041      	b.n	8009c92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c14:	d02d      	beq.n	8009c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c16:	f7fa fdb1 	bl	800477c <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d302      	bcc.n	8009c2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d122      	bne.n	8009c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4013      	ands	r3, r2
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	bf0c      	ite	eq
 8009c3c:	2301      	moveq	r3, #1
 8009c3e:	2300      	movne	r3, #0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	461a      	mov	r2, r3
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d113      	bne.n	8009c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c4e:	f043 0220 	orr.w	r2, r3, #32
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e00f      	b.n	8009c92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	699a      	ldr	r2, [r3, #24]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	bf0c      	ite	eq
 8009c82:	2301      	moveq	r3, #1
 8009c84:	2300      	movne	r3, #0
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	461a      	mov	r2, r3
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d0b4      	beq.n	8009bfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ca6:	e033      	b.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f87f 	bl	8009db0 <I2C_IsErrorOccurred>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e031      	b.n	8009d20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc2:	d025      	beq.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cc4:	f7fa fd5a 	bl	800477c <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d302      	bcc.n	8009cda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d11a      	bne.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d013      	beq.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cec:	f043 0220 	orr.w	r2, r3, #32
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e007      	b.n	8009d20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d1c4      	bne.n	8009ca8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d34:	e02f      	b.n	8009d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f838 	bl	8009db0 <I2C_IsErrorOccurred>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e02d      	b.n	8009da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7fa fd17 	bl	800477c <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d11a      	bne.n	8009d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	f003 0320 	and.w	r3, r3, #32
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	d013      	beq.n	8009d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d72:	f043 0220 	orr.w	r2, r3, #32
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e007      	b.n	8009da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	f003 0320 	and.w	r3, r3, #32
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d1c8      	bne.n	8009d36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08a      	sub	sp, #40	@ 0x28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f003 0310 	and.w	r3, r3, #16
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d068      	beq.n	8009eae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2210      	movs	r2, #16
 8009de2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009de4:	e049      	b.n	8009e7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dec:	d045      	beq.n	8009e7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009dee:	f7fa fcc5 	bl	800477c <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d302      	bcc.n	8009e04 <I2C_IsErrorOccurred+0x54>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d13a      	bne.n	8009e7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e26:	d121      	bne.n	8009e6c <I2C_IsErrorOccurred+0xbc>
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e2e:	d01d      	beq.n	8009e6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009e30:	7cfb      	ldrb	r3, [r7, #19]
 8009e32:	2b20      	cmp	r3, #32
 8009e34:	d01a      	beq.n	8009e6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009e46:	f7fa fc99 	bl	800477c <HAL_GetTick>
 8009e4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e4c:	e00e      	b.n	8009e6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009e4e:	f7fa fc95 	bl	800477c <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b19      	cmp	r3, #25
 8009e5a:	d907      	bls.n	8009e6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	f043 0320 	orr.w	r3, r3, #32
 8009e62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009e6a:	e006      	b.n	8009e7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	f003 0320 	and.w	r3, r3, #32
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	d1e9      	bne.n	8009e4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	2b20      	cmp	r3, #32
 8009e86:	d003      	beq.n	8009e90 <I2C_IsErrorOccurred+0xe0>
 8009e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0aa      	beq.n	8009de6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d103      	bne.n	8009ea0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	f043 0304 	orr.w	r3, r3, #4
 8009ea6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	f043 0301 	orr.w	r3, r3, #1
 8009ec6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	f043 0308 	orr.w	r3, r3, #8
 8009ee8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009ef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	f043 0302 	orr.w	r3, r3, #2
 8009f0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01c      	beq.n	8009f5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7ff fe3b 	bl	8009ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6859      	ldr	r1, [r3, #4]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	4b0d      	ldr	r3, [pc, #52]	@ (8009f6c <I2C_IsErrorOccurred+0x1bc>)
 8009f36:	400b      	ands	r3, r1
 8009f38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	431a      	orrs	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3728      	adds	r7, #40	@ 0x28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	fe00e800 	.word	0xfe00e800

08009f70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	607b      	str	r3, [r7, #4]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	817b      	strh	r3, [r7, #10]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f82:	897b      	ldrh	r3, [r7, #10]
 8009f84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f88:	7a7b      	ldrb	r3, [r7, #9]
 8009f8a:	041b      	lsls	r3, r3, #16
 8009f8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f90:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f9e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	0d5b      	lsrs	r3, r3, #21
 8009faa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009fae:	4b08      	ldr	r3, [pc, #32]	@ (8009fd0 <I2C_TransferConfig+0x60>)
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	43db      	mvns	r3, r3
 8009fb4:	ea02 0103 	and.w	r1, r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	03ff63ff 	.word	0x03ff63ff

08009fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	d138      	bne.n	800a05c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e032      	b.n	800a05e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2224      	movs	r2, #36	@ 0x24
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f022 0201 	bic.w	r2, r2, #1
 800a016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6819      	ldr	r1, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	430a      	orrs	r2, r1
 800a036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f042 0201 	orr.w	r2, r2, #1
 800a046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	e000      	b.n	800a05e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a05c:	2302      	movs	r3, #2
  }
}
 800a05e:	4618      	mov	r0, r3
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b085      	sub	sp, #20
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d139      	bne.n	800a0f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a086:	2b01      	cmp	r3, #1
 800a088:	d101      	bne.n	800a08e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e033      	b.n	800a0f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2224      	movs	r2, #36	@ 0x24
 800a09a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0201 	bic.w	r2, r2, #1
 800a0ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a0bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	021b      	lsls	r3, r3, #8
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0201 	orr.w	r2, r2, #1
 800a0de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	e000      	b.n	800a0f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a0f4:	2302      	movs	r3, #2
  }
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
	...

0800a104 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a10c:	4b19      	ldr	r3, [pc, #100]	@ (800a174 <HAL_PWREx_ConfigSupply+0x70>)
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b04      	cmp	r3, #4
 800a116:	d00a      	beq.n	800a12e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a118:	4b16      	ldr	r3, [pc, #88]	@ (800a174 <HAL_PWREx_ConfigSupply+0x70>)
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f003 0307 	and.w	r3, r3, #7
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	429a      	cmp	r2, r3
 800a124:	d001      	beq.n	800a12a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e01f      	b.n	800a16a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e01d      	b.n	800a16a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a12e:	4b11      	ldr	r3, [pc, #68]	@ (800a174 <HAL_PWREx_ConfigSupply+0x70>)
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f023 0207 	bic.w	r2, r3, #7
 800a136:	490f      	ldr	r1, [pc, #60]	@ (800a174 <HAL_PWREx_ConfigSupply+0x70>)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a13e:	f7fa fb1d 	bl	800477c <HAL_GetTick>
 800a142:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a144:	e009      	b.n	800a15a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a146:	f7fa fb19 	bl	800477c <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a154:	d901      	bls.n	800a15a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e007      	b.n	800a16a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a15a:	4b06      	ldr	r3, [pc, #24]	@ (800a174 <HAL_PWREx_ConfigSupply+0x70>)
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a166:	d1ee      	bne.n	800a146 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	58024800 	.word	0x58024800

0800a178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08c      	sub	sp, #48	@ 0x30
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	f000 bc48 	b.w	800aa1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 8088 	beq.w	800a2aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a19a:	4b99      	ldr	r3, [pc, #612]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1a4:	4b96      	ldr	r3, [pc, #600]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d007      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x48>
 800a1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b2:	2b18      	cmp	r3, #24
 800a1b4:	d111      	bne.n	800a1da <HAL_RCC_OscConfig+0x62>
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	f003 0303 	and.w	r3, r3, #3
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d10c      	bne.n	800a1da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1c0:	4b8f      	ldr	r3, [pc, #572]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d06d      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x130>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d169      	bne.n	800a2a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f000 bc21 	b.w	800aa1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1e2:	d106      	bne.n	800a1f2 <HAL_RCC_OscConfig+0x7a>
 800a1e4:	4b86      	ldr	r3, [pc, #536]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a85      	ldr	r2, [pc, #532]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a1ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1ee:	6013      	str	r3, [r2, #0]
 800a1f0:	e02e      	b.n	800a250 <HAL_RCC_OscConfig+0xd8>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10c      	bne.n	800a214 <HAL_RCC_OscConfig+0x9c>
 800a1fa:	4b81      	ldr	r3, [pc, #516]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a80      	ldr	r2, [pc, #512]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	4b7e      	ldr	r3, [pc, #504]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a7d      	ldr	r2, [pc, #500]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a20c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	e01d      	b.n	800a250 <HAL_RCC_OscConfig+0xd8>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a21c:	d10c      	bne.n	800a238 <HAL_RCC_OscConfig+0xc0>
 800a21e:	4b78      	ldr	r3, [pc, #480]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a77      	ldr	r2, [pc, #476]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	4b75      	ldr	r3, [pc, #468]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a74      	ldr	r2, [pc, #464]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	e00b      	b.n	800a250 <HAL_RCC_OscConfig+0xd8>
 800a238:	4b71      	ldr	r3, [pc, #452]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a70      	ldr	r2, [pc, #448]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a23e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	4b6e      	ldr	r3, [pc, #440]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a6d      	ldr	r2, [pc, #436]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a24a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a24e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d013      	beq.n	800a280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a258:	f7fa fa90 	bl	800477c <HAL_GetTick>
 800a25c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a25e:	e008      	b.n	800a272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a260:	f7fa fa8c 	bl	800477c <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b64      	cmp	r3, #100	@ 0x64
 800a26c:	d901      	bls.n	800a272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e3d4      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a272:	4b63      	ldr	r3, [pc, #396]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f0      	beq.n	800a260 <HAL_RCC_OscConfig+0xe8>
 800a27e:	e014      	b.n	800a2aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a280:	f7fa fa7c 	bl	800477c <HAL_GetTick>
 800a284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a286:	e008      	b.n	800a29a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a288:	f7fa fa78 	bl	800477c <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b64      	cmp	r3, #100	@ 0x64
 800a294:	d901      	bls.n	800a29a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e3c0      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a29a:	4b59      	ldr	r3, [pc, #356]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1f0      	bne.n	800a288 <HAL_RCC_OscConfig+0x110>
 800a2a6:	e000      	b.n	800a2aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 80ca 	beq.w	800a44c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2b8:	4b51      	ldr	r3, [pc, #324]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2c2:	4b4f      	ldr	r3, [pc, #316]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d007      	beq.n	800a2de <HAL_RCC_OscConfig+0x166>
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	2b18      	cmp	r3, #24
 800a2d2:	d156      	bne.n	800a382 <HAL_RCC_OscConfig+0x20a>
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d151      	bne.n	800a382 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2de:	4b48      	ldr	r3, [pc, #288]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0304 	and.w	r3, r3, #4
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d005      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x17e>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e392      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2f6:	4b42      	ldr	r3, [pc, #264]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f023 0219 	bic.w	r2, r3, #25
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	493f      	ldr	r1, [pc, #252]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a304:	4313      	orrs	r3, r2
 800a306:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a308:	f7fa fa38 	bl	800477c <HAL_GetTick>
 800a30c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a310:	f7fa fa34 	bl	800477c <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e37c      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a322:	4b37      	ldr	r3, [pc, #220]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0f0      	beq.n	800a310 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32e:	f7fa fa55 	bl	80047dc <HAL_GetREVID>
 800a332:	4603      	mov	r3, r0
 800a334:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a338:	4293      	cmp	r3, r2
 800a33a:	d817      	bhi.n	800a36c <HAL_RCC_OscConfig+0x1f4>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	2b40      	cmp	r3, #64	@ 0x40
 800a342:	d108      	bne.n	800a356 <HAL_RCC_OscConfig+0x1de>
 800a344:	4b2e      	ldr	r3, [pc, #184]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a34c:	4a2c      	ldr	r2, [pc, #176]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a34e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a352:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a354:	e07a      	b.n	800a44c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a356:	4b2a      	ldr	r3, [pc, #168]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	031b      	lsls	r3, r3, #12
 800a364:	4926      	ldr	r1, [pc, #152]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a366:	4313      	orrs	r3, r2
 800a368:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a36a:	e06f      	b.n	800a44c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a36c:	4b24      	ldr	r3, [pc, #144]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	061b      	lsls	r3, r3, #24
 800a37a:	4921      	ldr	r1, [pc, #132]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a37c:	4313      	orrs	r3, r2
 800a37e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a380:	e064      	b.n	800a44c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d047      	beq.n	800a41a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a38a:	4b1d      	ldr	r3, [pc, #116]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f023 0219 	bic.w	r2, r3, #25
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	491a      	ldr	r1, [pc, #104]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39c:	f7fa f9ee 	bl	800477c <HAL_GetTick>
 800a3a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3a2:	e008      	b.n	800a3b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3a4:	f7fa f9ea 	bl	800477c <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e332      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3b6:	4b12      	ldr	r3, [pc, #72]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0304 	and.w	r3, r3, #4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0f0      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3c2:	f7fa fa0b 	bl	80047dc <HAL_GetREVID>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d819      	bhi.n	800a404 <HAL_RCC_OscConfig+0x28c>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	2b40      	cmp	r3, #64	@ 0x40
 800a3d6:	d108      	bne.n	800a3ea <HAL_RCC_OscConfig+0x272>
 800a3d8:	4b09      	ldr	r3, [pc, #36]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a3e0:	4a07      	ldr	r2, [pc, #28]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a3e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3e6:	6053      	str	r3, [r2, #4]
 800a3e8:	e030      	b.n	800a44c <HAL_RCC_OscConfig+0x2d4>
 800a3ea:	4b05      	ldr	r3, [pc, #20]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	031b      	lsls	r3, r3, #12
 800a3f8:	4901      	ldr	r1, [pc, #4]	@ (800a400 <HAL_RCC_OscConfig+0x288>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	604b      	str	r3, [r1, #4]
 800a3fe:	e025      	b.n	800a44c <HAL_RCC_OscConfig+0x2d4>
 800a400:	58024400 	.word	0x58024400
 800a404:	4b9a      	ldr	r3, [pc, #616]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	061b      	lsls	r3, r3, #24
 800a412:	4997      	ldr	r1, [pc, #604]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a414:	4313      	orrs	r3, r2
 800a416:	604b      	str	r3, [r1, #4]
 800a418:	e018      	b.n	800a44c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a41a:	4b95      	ldr	r3, [pc, #596]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a94      	ldr	r2, [pc, #592]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a420:	f023 0301 	bic.w	r3, r3, #1
 800a424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a426:	f7fa f9a9 	bl	800477c <HAL_GetTick>
 800a42a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a42c:	e008      	b.n	800a440 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a42e:	f7fa f9a5 	bl	800477c <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d901      	bls.n	800a440 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e2ed      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a440:	4b8b      	ldr	r3, [pc, #556]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1f0      	bne.n	800a42e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 80a9 	beq.w	800a5ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a45a:	4b85      	ldr	r3, [pc, #532]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a462:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a464:	4b82      	ldr	r3, [pc, #520]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a468:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d007      	beq.n	800a480 <HAL_RCC_OscConfig+0x308>
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	2b18      	cmp	r3, #24
 800a474:	d13a      	bne.n	800a4ec <HAL_RCC_OscConfig+0x374>
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d135      	bne.n	800a4ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a480:	4b7b      	ldr	r3, [pc, #492]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <HAL_RCC_OscConfig+0x320>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	2b80      	cmp	r3, #128	@ 0x80
 800a492:	d001      	beq.n	800a498 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e2c1      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a498:	f7fa f9a0 	bl	80047dc <HAL_GetREVID>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d817      	bhi.n	800a4d6 <HAL_RCC_OscConfig+0x35e>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	2b20      	cmp	r3, #32
 800a4ac:	d108      	bne.n	800a4c0 <HAL_RCC_OscConfig+0x348>
 800a4ae:	4b70      	ldr	r3, [pc, #448]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a4b6:	4a6e      	ldr	r2, [pc, #440]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a4be:	e075      	b.n	800a5ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4c0:	4b6b      	ldr	r3, [pc, #428]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	069b      	lsls	r3, r3, #26
 800a4ce:	4968      	ldr	r1, [pc, #416]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a4d4:	e06a      	b.n	800a5ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4d6:	4b66      	ldr	r3, [pc, #408]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	061b      	lsls	r3, r3, #24
 800a4e4:	4962      	ldr	r1, [pc, #392]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a4ea:	e05f      	b.n	800a5ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d042      	beq.n	800a57a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a4f4:	4b5e      	ldr	r3, [pc, #376]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a5d      	ldr	r2, [pc, #372]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a500:	f7fa f93c 	bl	800477c <HAL_GetTick>
 800a504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a508:	f7fa f938 	bl	800477c <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e280      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a51a:	4b55      	ldr	r3, [pc, #340]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f0      	beq.n	800a508 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a526:	f7fa f959 	bl	80047dc <HAL_GetREVID>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a530:	4293      	cmp	r3, r2
 800a532:	d817      	bhi.n	800a564 <HAL_RCC_OscConfig+0x3ec>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	2b20      	cmp	r3, #32
 800a53a:	d108      	bne.n	800a54e <HAL_RCC_OscConfig+0x3d6>
 800a53c:	4b4c      	ldr	r3, [pc, #304]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a544:	4a4a      	ldr	r2, [pc, #296]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a546:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a54a:	6053      	str	r3, [r2, #4]
 800a54c:	e02e      	b.n	800a5ac <HAL_RCC_OscConfig+0x434>
 800a54e:	4b48      	ldr	r3, [pc, #288]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	069b      	lsls	r3, r3, #26
 800a55c:	4944      	ldr	r1, [pc, #272]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	604b      	str	r3, [r1, #4]
 800a562:	e023      	b.n	800a5ac <HAL_RCC_OscConfig+0x434>
 800a564:	4b42      	ldr	r3, [pc, #264]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	061b      	lsls	r3, r3, #24
 800a572:	493f      	ldr	r1, [pc, #252]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a574:	4313      	orrs	r3, r2
 800a576:	60cb      	str	r3, [r1, #12]
 800a578:	e018      	b.n	800a5ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a57a:	4b3d      	ldr	r3, [pc, #244]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a3c      	ldr	r2, [pc, #240]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a586:	f7fa f8f9 	bl	800477c <HAL_GetTick>
 800a58a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a58c:	e008      	b.n	800a5a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a58e:	f7fa f8f5 	bl	800477c <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d901      	bls.n	800a5a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e23d      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a5a0:	4b33      	ldr	r3, [pc, #204]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f0      	bne.n	800a58e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d036      	beq.n	800a626 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d019      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5c0:	4b2b      	ldr	r3, [pc, #172]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a5c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5c4:	4a2a      	ldr	r2, [pc, #168]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5cc:	f7fa f8d6 	bl	800477c <HAL_GetTick>
 800a5d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5d4:	f7fa f8d2 	bl	800477c <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e21a      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a5e6:	4b22      	ldr	r3, [pc, #136]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a5e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ea:	f003 0302 	and.w	r3, r3, #2
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0f0      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x45c>
 800a5f2:	e018      	b.n	800a626 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a5fa:	f023 0301 	bic.w	r3, r3, #1
 800a5fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a600:	f7fa f8bc 	bl	800477c <HAL_GetTick>
 800a604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a606:	e008      	b.n	800a61a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a608:	f7fa f8b8 	bl	800477c <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b02      	cmp	r3, #2
 800a614:	d901      	bls.n	800a61a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e200      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a61a:	4b15      	ldr	r3, [pc, #84]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a61c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f0      	bne.n	800a608 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d039      	beq.n	800a6a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01c      	beq.n	800a674 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a63a:	4b0d      	ldr	r3, [pc, #52]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a0c      	ldr	r2, [pc, #48]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a640:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a644:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a646:	f7fa f899 	bl	800477c <HAL_GetTick>
 800a64a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a64c:	e008      	b.n	800a660 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a64e:	f7fa f895 	bl	800477c <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d901      	bls.n	800a660 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e1dd      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a660:	4b03      	ldr	r3, [pc, #12]	@ (800a670 <HAL_RCC_OscConfig+0x4f8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0f0      	beq.n	800a64e <HAL_RCC_OscConfig+0x4d6>
 800a66c:	e01b      	b.n	800a6a6 <HAL_RCC_OscConfig+0x52e>
 800a66e:	bf00      	nop
 800a670:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a674:	4b9b      	ldr	r3, [pc, #620]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a9a      	ldr	r2, [pc, #616]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a67a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a67e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a680:	f7fa f87c 	bl	800477c <HAL_GetTick>
 800a684:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a686:	e008      	b.n	800a69a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a688:	f7fa f878 	bl	800477c <HAL_GetTick>
 800a68c:	4602      	mov	r2, r0
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	2b02      	cmp	r3, #2
 800a694:	d901      	bls.n	800a69a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e1c0      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a69a:	4b92      	ldr	r3, [pc, #584]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1f0      	bne.n	800a688 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 8081 	beq.w	800a7b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a6b4:	4b8c      	ldr	r3, [pc, #560]	@ (800a8e8 <HAL_RCC_OscConfig+0x770>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a8b      	ldr	r2, [pc, #556]	@ (800a8e8 <HAL_RCC_OscConfig+0x770>)
 800a6ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a6c0:	f7fa f85c 	bl	800477c <HAL_GetTick>
 800a6c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6c6:	e008      	b.n	800a6da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6c8:	f7fa f858 	bl	800477c <HAL_GetTick>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	2b64      	cmp	r3, #100	@ 0x64
 800a6d4:	d901      	bls.n	800a6da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e1a0      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6da:	4b83      	ldr	r3, [pc, #524]	@ (800a8e8 <HAL_RCC_OscConfig+0x770>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0f0      	beq.n	800a6c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d106      	bne.n	800a6fc <HAL_RCC_OscConfig+0x584>
 800a6ee:	4b7d      	ldr	r3, [pc, #500]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6f2:	4a7c      	ldr	r2, [pc, #496]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a6f4:	f043 0301 	orr.w	r3, r3, #1
 800a6f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6fa:	e02d      	b.n	800a758 <HAL_RCC_OscConfig+0x5e0>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10c      	bne.n	800a71e <HAL_RCC_OscConfig+0x5a6>
 800a704:	4b77      	ldr	r3, [pc, #476]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a708:	4a76      	ldr	r2, [pc, #472]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a70a:	f023 0301 	bic.w	r3, r3, #1
 800a70e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a710:	4b74      	ldr	r3, [pc, #464]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a714:	4a73      	ldr	r2, [pc, #460]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a716:	f023 0304 	bic.w	r3, r3, #4
 800a71a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a71c:	e01c      	b.n	800a758 <HAL_RCC_OscConfig+0x5e0>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	2b05      	cmp	r3, #5
 800a724:	d10c      	bne.n	800a740 <HAL_RCC_OscConfig+0x5c8>
 800a726:	4b6f      	ldr	r3, [pc, #444]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a72a:	4a6e      	ldr	r2, [pc, #440]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a72c:	f043 0304 	orr.w	r3, r3, #4
 800a730:	6713      	str	r3, [r2, #112]	@ 0x70
 800a732:	4b6c      	ldr	r3, [pc, #432]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a736:	4a6b      	ldr	r2, [pc, #428]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a738:	f043 0301 	orr.w	r3, r3, #1
 800a73c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a73e:	e00b      	b.n	800a758 <HAL_RCC_OscConfig+0x5e0>
 800a740:	4b68      	ldr	r3, [pc, #416]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a744:	4a67      	ldr	r2, [pc, #412]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a746:	f023 0301 	bic.w	r3, r3, #1
 800a74a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a74c:	4b65      	ldr	r3, [pc, #404]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a74e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a750:	4a64      	ldr	r2, [pc, #400]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a752:	f023 0304 	bic.w	r3, r3, #4
 800a756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d015      	beq.n	800a78c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a760:	f7fa f80c 	bl	800477c <HAL_GetTick>
 800a764:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a766:	e00a      	b.n	800a77e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a768:	f7fa f808 	bl	800477c <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a776:	4293      	cmp	r3, r2
 800a778:	d901      	bls.n	800a77e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e14e      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a77e:	4b59      	ldr	r3, [pc, #356]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a782:	f003 0302 	and.w	r3, r3, #2
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0ee      	beq.n	800a768 <HAL_RCC_OscConfig+0x5f0>
 800a78a:	e014      	b.n	800a7b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a78c:	f7f9 fff6 	bl	800477c <HAL_GetTick>
 800a790:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a792:	e00a      	b.n	800a7aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a794:	f7f9 fff2 	bl	800477c <HAL_GetTick>
 800a798:	4602      	mov	r2, r0
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d901      	bls.n	800a7aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e138      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7aa:	4b4e      	ldr	r3, [pc, #312]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a7ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1ee      	bne.n	800a794 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 812d 	beq.w	800aa1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a7c0:	4b48      	ldr	r3, [pc, #288]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7c8:	2b18      	cmp	r3, #24
 800a7ca:	f000 80bd 	beq.w	800a948 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	f040 809e 	bne.w	800a914 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7d8:	4b42      	ldr	r3, [pc, #264]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a41      	ldr	r2, [pc, #260]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a7de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e4:	f7f9 ffca 	bl	800477c <HAL_GetTick>
 800a7e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7ea:	e008      	b.n	800a7fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7ec:	f7f9 ffc6 	bl	800477c <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d901      	bls.n	800a7fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e10e      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7fe:	4b39      	ldr	r3, [pc, #228]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1f0      	bne.n	800a7ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a80a:	4b36      	ldr	r3, [pc, #216]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a80c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a80e:	4b37      	ldr	r3, [pc, #220]	@ (800a8ec <HAL_RCC_OscConfig+0x774>)
 800a810:	4013      	ands	r3, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a81a:	0112      	lsls	r2, r2, #4
 800a81c:	430a      	orrs	r2, r1
 800a81e:	4931      	ldr	r1, [pc, #196]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a820:	4313      	orrs	r3, r2
 800a822:	628b      	str	r3, [r1, #40]	@ 0x28
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a828:	3b01      	subs	r3, #1
 800a82a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a832:	3b01      	subs	r3, #1
 800a834:	025b      	lsls	r3, r3, #9
 800a836:	b29b      	uxth	r3, r3
 800a838:	431a      	orrs	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a83e:	3b01      	subs	r3, #1
 800a840:	041b      	lsls	r3, r3, #16
 800a842:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a846:	431a      	orrs	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a84c:	3b01      	subs	r3, #1
 800a84e:	061b      	lsls	r3, r3, #24
 800a850:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a854:	4923      	ldr	r1, [pc, #140]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a856:	4313      	orrs	r3, r2
 800a858:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a85a:	4b22      	ldr	r3, [pc, #136]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85e:	4a21      	ldr	r2, [pc, #132]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a860:	f023 0301 	bic.w	r3, r3, #1
 800a864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a866:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a86a:	4b21      	ldr	r3, [pc, #132]	@ (800a8f0 <HAL_RCC_OscConfig+0x778>)
 800a86c:	4013      	ands	r3, r2
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a872:	00d2      	lsls	r2, r2, #3
 800a874:	491b      	ldr	r1, [pc, #108]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a876:	4313      	orrs	r3, r2
 800a878:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a87a:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87e:	f023 020c 	bic.w	r2, r3, #12
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	4917      	ldr	r1, [pc, #92]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a88c:	4b15      	ldr	r3, [pc, #84]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a890:	f023 0202 	bic.w	r2, r3, #2
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a898:	4912      	ldr	r1, [pc, #72]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a89a:	4313      	orrs	r3, r2
 800a89c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a89e:	4b11      	ldr	r3, [pc, #68]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a2:	4a10      	ldr	r2, [pc, #64]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ae:	4a0d      	ldr	r2, [pc, #52]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a8c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a8c2:	4b08      	ldr	r3, [pc, #32]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c6:	4a07      	ldr	r2, [pc, #28]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8c8:	f043 0301 	orr.w	r3, r3, #1
 800a8cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a8ce:	4b05      	ldr	r3, [pc, #20]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a04      	ldr	r2, [pc, #16]	@ (800a8e4 <HAL_RCC_OscConfig+0x76c>)
 800a8d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a8d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8da:	f7f9 ff4f 	bl	800477c <HAL_GetTick>
 800a8de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8e0:	e011      	b.n	800a906 <HAL_RCC_OscConfig+0x78e>
 800a8e2:	bf00      	nop
 800a8e4:	58024400 	.word	0x58024400
 800a8e8:	58024800 	.word	0x58024800
 800a8ec:	fffffc0c 	.word	0xfffffc0c
 800a8f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8f4:	f7f9 ff42 	bl	800477c <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e08a      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a906:	4b47      	ldr	r3, [pc, #284]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f0      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x77c>
 800a912:	e082      	b.n	800aa1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a914:	4b43      	ldr	r3, [pc, #268]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a42      	ldr	r2, [pc, #264]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a91a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a91e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a920:	f7f9 ff2c 	bl	800477c <HAL_GetTick>
 800a924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a926:	e008      	b.n	800a93a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a928:	f7f9 ff28 	bl	800477c <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d901      	bls.n	800a93a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e070      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a93a:	4b3a      	ldr	r3, [pc, #232]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1f0      	bne.n	800a928 <HAL_RCC_OscConfig+0x7b0>
 800a946:	e068      	b.n	800aa1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a948:	4b36      	ldr	r3, [pc, #216]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a94e:	4b35      	ldr	r3, [pc, #212]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a952:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d031      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f003 0203 	and.w	r2, r3, #3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a966:	429a      	cmp	r2, r3
 800a968:	d12a      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	091b      	lsrs	r3, r3, #4
 800a96e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a976:	429a      	cmp	r2, r3
 800a978:	d122      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a984:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a986:	429a      	cmp	r2, r3
 800a988:	d11a      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	0a5b      	lsrs	r3, r3, #9
 800a98e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a996:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a998:	429a      	cmp	r2, r3
 800a99a:	d111      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	0c1b      	lsrs	r3, r3, #16
 800a9a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d108      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	0e1b      	lsrs	r3, r3, #24
 800a9b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d001      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e02b      	b.n	800aa1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a9c4:	4b17      	ldr	r3, [pc, #92]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c8:	08db      	lsrs	r3, r3, #3
 800a9ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d01f      	beq.n	800aa1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a9da:	4b12      	ldr	r3, [pc, #72]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9de:	4a11      	ldr	r2, [pc, #68]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a9e0:	f023 0301 	bic.w	r3, r3, #1
 800a9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a9e6:	f7f9 fec9 	bl	800477c <HAL_GetTick>
 800a9ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a9ec:	bf00      	nop
 800a9ee:	f7f9 fec5 	bl	800477c <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d0f9      	beq.n	800a9ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800a9fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <HAL_RCC_OscConfig+0x8b0>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aa06:	00d2      	lsls	r2, r2, #3
 800aa08:	4906      	ldr	r1, [pc, #24]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aa0e:	4b05      	ldr	r3, [pc, #20]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa12:	4a04      	ldr	r2, [pc, #16]	@ (800aa24 <HAL_RCC_OscConfig+0x8ac>)
 800aa14:	f043 0301 	orr.w	r3, r3, #1
 800aa18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3730      	adds	r7, #48	@ 0x30
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	58024400 	.word	0x58024400
 800aa28:	ffff0007 	.word	0xffff0007

0800aa2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e19c      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa40:	4b8a      	ldr	r3, [pc, #552]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 030f 	and.w	r3, r3, #15
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d910      	bls.n	800aa70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa4e:	4b87      	ldr	r3, [pc, #540]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f023 020f 	bic.w	r2, r3, #15
 800aa56:	4985      	ldr	r1, [pc, #532]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa5e:	4b83      	ldr	r3, [pc, #524]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 030f 	and.w	r3, r3, #15
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d001      	beq.n	800aa70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e184      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d010      	beq.n	800aa9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	691a      	ldr	r2, [r3, #16]
 800aa80:	4b7b      	ldr	r3, [pc, #492]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d908      	bls.n	800aa9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa8c:	4b78      	ldr	r3, [pc, #480]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	4975      	ldr	r1, [pc, #468]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0308 	and.w	r3, r3, #8
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d010      	beq.n	800aacc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	695a      	ldr	r2, [r3, #20]
 800aaae:	4b70      	ldr	r3, [pc, #448]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d908      	bls.n	800aacc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aaba:	4b6d      	ldr	r3, [pc, #436]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	496a      	ldr	r1, [pc, #424]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0310 	and.w	r3, r3, #16
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d010      	beq.n	800aafa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	699a      	ldr	r2, [r3, #24]
 800aadc:	4b64      	ldr	r3, [pc, #400]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d908      	bls.n	800aafa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aae8:	4b61      	ldr	r3, [pc, #388]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	495e      	ldr	r1, [pc, #376]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d010      	beq.n	800ab28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69da      	ldr	r2, [r3, #28]
 800ab0a:	4b59      	ldr	r3, [pc, #356]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d908      	bls.n	800ab28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab16:	4b56      	ldr	r3, [pc, #344]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	4953      	ldr	r1, [pc, #332]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0302 	and.w	r3, r3, #2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d010      	beq.n	800ab56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68da      	ldr	r2, [r3, #12]
 800ab38:	4b4d      	ldr	r3, [pc, #308]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	f003 030f 	and.w	r3, r3, #15
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d908      	bls.n	800ab56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab44:	4b4a      	ldr	r3, [pc, #296]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	f023 020f 	bic.w	r2, r3, #15
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	4947      	ldr	r1, [pc, #284]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab52:	4313      	orrs	r3, r2
 800ab54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d055      	beq.n	800ac0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ab62:	4b43      	ldr	r3, [pc, #268]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	4940      	ldr	r1, [pc, #256]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d107      	bne.n	800ab8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab7c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d121      	bne.n	800abcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e0f6      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d107      	bne.n	800aba4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab94:	4b36      	ldr	r3, [pc, #216]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d115      	bne.n	800abcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e0ea      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d107      	bne.n	800abbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abac:	4b30      	ldr	r3, [pc, #192]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e0de      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abbc:	4b2c      	ldr	r3, [pc, #176]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e0d6      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800abcc:	4b28      	ldr	r3, [pc, #160]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	f023 0207 	bic.w	r2, r3, #7
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4925      	ldr	r1, [pc, #148]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abde:	f7f9 fdcd 	bl	800477c <HAL_GetTick>
 800abe2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abe4:	e00a      	b.n	800abfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abe6:	f7f9 fdc9 	bl	800477c <HAL_GetTick>
 800abea:	4602      	mov	r2, r0
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d901      	bls.n	800abfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e0be      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abfc:	4b1c      	ldr	r3, [pc, #112]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	00db      	lsls	r3, r3, #3
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d1eb      	bne.n	800abe6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d010      	beq.n	800ac3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68da      	ldr	r2, [r3, #12]
 800ac1e:	4b14      	ldr	r3, [pc, #80]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	f003 030f 	and.w	r3, r3, #15
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d208      	bcs.n	800ac3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac2a:	4b11      	ldr	r3, [pc, #68]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	f023 020f 	bic.w	r2, r3, #15
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	490e      	ldr	r1, [pc, #56]	@ (800ac70 <HAL_RCC_ClockConfig+0x244>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 030f 	and.w	r3, r3, #15
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d214      	bcs.n	800ac74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac4a:	4b08      	ldr	r3, [pc, #32]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f023 020f 	bic.w	r2, r3, #15
 800ac52:	4906      	ldr	r1, [pc, #24]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac5a:	4b04      	ldr	r3, [pc, #16]	@ (800ac6c <HAL_RCC_ClockConfig+0x240>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 030f 	and.w	r3, r3, #15
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d005      	beq.n	800ac74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e086      	b.n	800ad7a <HAL_RCC_ClockConfig+0x34e>
 800ac6c:	52002000 	.word	0x52002000
 800ac70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d010      	beq.n	800aca2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	691a      	ldr	r2, [r3, #16]
 800ac84:	4b3f      	ldr	r3, [pc, #252]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d208      	bcs.n	800aca2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ac90:	4b3c      	ldr	r3, [pc, #240]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	4939      	ldr	r1, [pc, #228]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d010      	beq.n	800acd0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695a      	ldr	r2, [r3, #20]
 800acb2:	4b34      	ldr	r3, [pc, #208]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800acba:	429a      	cmp	r2, r3
 800acbc:	d208      	bcs.n	800acd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800acbe:	4b31      	ldr	r3, [pc, #196]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	492e      	ldr	r1, [pc, #184]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800accc:	4313      	orrs	r3, r2
 800acce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0310 	and.w	r3, r3, #16
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d010      	beq.n	800acfe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	4b28      	ldr	r3, [pc, #160]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ace8:	429a      	cmp	r2, r3
 800acea:	d208      	bcs.n	800acfe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800acec:	4b25      	ldr	r3, [pc, #148]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	4922      	ldr	r1, [pc, #136]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0320 	and.w	r3, r3, #32
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d010      	beq.n	800ad2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69da      	ldr	r2, [r3, #28]
 800ad0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d208      	bcs.n	800ad2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	4917      	ldr	r1, [pc, #92]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ad2c:	f000 f834 	bl	800ad98 <HAL_RCC_GetSysClockFreq>
 800ad30:	4602      	mov	r2, r0
 800ad32:	4b14      	ldr	r3, [pc, #80]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	0a1b      	lsrs	r3, r3, #8
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	4912      	ldr	r1, [pc, #72]	@ (800ad88 <HAL_RCC_ClockConfig+0x35c>)
 800ad3e:	5ccb      	ldrb	r3, [r1, r3]
 800ad40:	f003 031f 	and.w	r3, r3, #31
 800ad44:	fa22 f303 	lsr.w	r3, r2, r3
 800ad48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ad84 <HAL_RCC_ClockConfig+0x358>)
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	4a0d      	ldr	r2, [pc, #52]	@ (800ad88 <HAL_RCC_ClockConfig+0x35c>)
 800ad54:	5cd3      	ldrb	r3, [r2, r3]
 800ad56:	f003 031f 	and.w	r3, r3, #31
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad60:	4a0a      	ldr	r2, [pc, #40]	@ (800ad8c <HAL_RCC_ClockConfig+0x360>)
 800ad62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad64:	4a0a      	ldr	r2, [pc, #40]	@ (800ad90 <HAL_RCC_ClockConfig+0x364>)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ad6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad94 <HAL_RCC_ClockConfig+0x368>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7f7 fb94 	bl	800249c <HAL_InitTick>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	58024400 	.word	0x58024400
 800ad88:	08018280 	.word	0x08018280
 800ad8c:	2400000c 	.word	0x2400000c
 800ad90:	24000008 	.word	0x24000008
 800ad94:	24000010 	.word	0x24000010

0800ad98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b089      	sub	sp, #36	@ 0x24
 800ad9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad9e:	4bb3      	ldr	r3, [pc, #716]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ada6:	2b18      	cmp	r3, #24
 800ada8:	f200 8155 	bhi.w	800b056 <HAL_RCC_GetSysClockFreq+0x2be>
 800adac:	a201      	add	r2, pc, #4	@ (adr r2, 800adb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800adae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb2:	bf00      	nop
 800adb4:	0800ae19 	.word	0x0800ae19
 800adb8:	0800b057 	.word	0x0800b057
 800adbc:	0800b057 	.word	0x0800b057
 800adc0:	0800b057 	.word	0x0800b057
 800adc4:	0800b057 	.word	0x0800b057
 800adc8:	0800b057 	.word	0x0800b057
 800adcc:	0800b057 	.word	0x0800b057
 800add0:	0800b057 	.word	0x0800b057
 800add4:	0800ae3f 	.word	0x0800ae3f
 800add8:	0800b057 	.word	0x0800b057
 800addc:	0800b057 	.word	0x0800b057
 800ade0:	0800b057 	.word	0x0800b057
 800ade4:	0800b057 	.word	0x0800b057
 800ade8:	0800b057 	.word	0x0800b057
 800adec:	0800b057 	.word	0x0800b057
 800adf0:	0800b057 	.word	0x0800b057
 800adf4:	0800ae45 	.word	0x0800ae45
 800adf8:	0800b057 	.word	0x0800b057
 800adfc:	0800b057 	.word	0x0800b057
 800ae00:	0800b057 	.word	0x0800b057
 800ae04:	0800b057 	.word	0x0800b057
 800ae08:	0800b057 	.word	0x0800b057
 800ae0c:	0800b057 	.word	0x0800b057
 800ae10:	0800b057 	.word	0x0800b057
 800ae14:	0800ae4b 	.word	0x0800ae4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae18:	4b94      	ldr	r3, [pc, #592]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0320 	and.w	r3, r3, #32
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d009      	beq.n	800ae38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae24:	4b91      	ldr	r3, [pc, #580]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	08db      	lsrs	r3, r3, #3
 800ae2a:	f003 0303 	and.w	r3, r3, #3
 800ae2e:	4a90      	ldr	r2, [pc, #576]	@ (800b070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae30:	fa22 f303 	lsr.w	r3, r2, r3
 800ae34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ae36:	e111      	b.n	800b05c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ae38:	4b8d      	ldr	r3, [pc, #564]	@ (800b070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae3a:	61bb      	str	r3, [r7, #24]
      break;
 800ae3c:	e10e      	b.n	800b05c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ae3e:	4b8d      	ldr	r3, [pc, #564]	@ (800b074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae40:	61bb      	str	r3, [r7, #24]
      break;
 800ae42:	e10b      	b.n	800b05c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ae44:	4b8c      	ldr	r3, [pc, #560]	@ (800b078 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ae46:	61bb      	str	r3, [r7, #24]
      break;
 800ae48:	e108      	b.n	800b05c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae4a:	4b88      	ldr	r3, [pc, #544]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4e:	f003 0303 	and.w	r3, r3, #3
 800ae52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ae54:	4b85      	ldr	r3, [pc, #532]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae58:	091b      	lsrs	r3, r3, #4
 800ae5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ae60:	4b82      	ldr	r3, [pc, #520]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae64:	f003 0301 	and.w	r3, r3, #1
 800ae68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae6a:	4b80      	ldr	r3, [pc, #512]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae6e:	08db      	lsrs	r3, r3, #3
 800ae70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	fb02 f303 	mul.w	r3, r2, r3
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 80e1 	beq.w	800b050 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	f000 8083 	beq.w	800af9c <HAL_RCC_GetSysClockFreq+0x204>
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	f200 80a1 	bhi.w	800afe0 <HAL_RCC_GetSysClockFreq+0x248>
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <HAL_RCC_GetSysClockFreq+0x114>
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d056      	beq.n	800af58 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aeaa:	e099      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeac:	4b6f      	ldr	r3, [pc, #444]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0320 	and.w	r3, r3, #32
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d02d      	beq.n	800af14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeb8:	4b6c      	ldr	r3, [pc, #432]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	08db      	lsrs	r3, r3, #3
 800aebe:	f003 0303 	and.w	r3, r3, #3
 800aec2:	4a6b      	ldr	r2, [pc, #428]	@ (800b070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aec4:	fa22 f303 	lsr.w	r3, r2, r3
 800aec8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	ee07 3a90 	vmov	s15, r3
 800aed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee2:	4b62      	ldr	r3, [pc, #392]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aef6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b07c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800af12:	e087      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b080 <HAL_RCC_GetSysClockFreq+0x2e8>
 800af22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af26:	4b51      	ldr	r3, [pc, #324]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af36:	ed97 6a02 	vldr	s12, [r7, #8]
 800af3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b07c <HAL_RCC_GetSysClockFreq+0x2e4>
 800af3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af56:	e065      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b084 <HAL_RCC_GetSysClockFreq+0x2ec>
 800af66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6a:	4b40      	ldr	r3, [pc, #256]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af72:	ee07 3a90 	vmov	s15, r3
 800af76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800af7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b07c <HAL_RCC_GetSysClockFreq+0x2e4>
 800af82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af9a:	e043      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b088 <HAL_RCC_GetSysClockFreq+0x2f0>
 800afaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afae:	4b2f      	ldr	r3, [pc, #188]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800afc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b07c <HAL_RCC_GetSysClockFreq+0x2e4>
 800afc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afde:	e021      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b084 <HAL_RCC_GetSysClockFreq+0x2ec>
 800afee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff2:	4b1e      	ldr	r3, [pc, #120]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b002:	ed97 6a02 	vldr	s12, [r7, #8]
 800b006:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b07c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b022:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b024:	4b11      	ldr	r3, [pc, #68]	@ (800b06c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b028:	0a5b      	lsrs	r3, r3, #9
 800b02a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02e:	3301      	adds	r3, #1
 800b030:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b03c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b048:	ee17 3a90 	vmov	r3, s15
 800b04c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b04e:	e005      	b.n	800b05c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	61bb      	str	r3, [r7, #24]
      break;
 800b054:	e002      	b.n	800b05c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b056:	4b07      	ldr	r3, [pc, #28]	@ (800b074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b058:	61bb      	str	r3, [r7, #24]
      break;
 800b05a:	bf00      	nop
  }

  return sysclockfreq;
 800b05c:	69bb      	ldr	r3, [r7, #24]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3724      	adds	r7, #36	@ 0x24
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	58024400 	.word	0x58024400
 800b070:	03d09000 	.word	0x03d09000
 800b074:	003d0900 	.word	0x003d0900
 800b078:	017d7840 	.word	0x017d7840
 800b07c:	46000000 	.word	0x46000000
 800b080:	4c742400 	.word	0x4c742400
 800b084:	4a742400 	.word	0x4a742400
 800b088:	4bbebc20 	.word	0x4bbebc20

0800b08c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b092:	f7ff fe81 	bl	800ad98 <HAL_RCC_GetSysClockFreq>
 800b096:	4602      	mov	r2, r0
 800b098:	4b10      	ldr	r3, [pc, #64]	@ (800b0dc <HAL_RCC_GetHCLKFreq+0x50>)
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	0a1b      	lsrs	r3, r3, #8
 800b09e:	f003 030f 	and.w	r3, r3, #15
 800b0a2:	490f      	ldr	r1, [pc, #60]	@ (800b0e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b0a4:	5ccb      	ldrb	r3, [r1, r3]
 800b0a6:	f003 031f 	and.w	r3, r3, #31
 800b0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0dc <HAL_RCC_GetHCLKFreq+0x50>)
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f003 030f 	and.w	r3, r3, #15
 800b0b8:	4a09      	ldr	r2, [pc, #36]	@ (800b0e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b0ba:	5cd3      	ldrb	r3, [r2, r3]
 800b0bc:	f003 031f 	and.w	r3, r3, #31
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c6:	4a07      	ldr	r2, [pc, #28]	@ (800b0e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b0c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0ca:	4a07      	ldr	r2, [pc, #28]	@ (800b0e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b0d0:	4b04      	ldr	r3, [pc, #16]	@ (800b0e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	58024400 	.word	0x58024400
 800b0e0:	08018280 	.word	0x08018280
 800b0e4:	2400000c 	.word	0x2400000c
 800b0e8:	24000008 	.word	0x24000008

0800b0ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b0f0:	f7ff ffcc 	bl	800b08c <HAL_RCC_GetHCLKFreq>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	091b      	lsrs	r3, r3, #4
 800b0fc:	f003 0307 	and.w	r3, r3, #7
 800b100:	4904      	ldr	r1, [pc, #16]	@ (800b114 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b102:	5ccb      	ldrb	r3, [r1, r3]
 800b104:	f003 031f 	and.w	r3, r3, #31
 800b108:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	58024400 	.word	0x58024400
 800b114:	08018280 	.word	0x08018280

0800b118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b11c:	f7ff ffb6 	bl	800b08c <HAL_RCC_GetHCLKFreq>
 800b120:	4602      	mov	r2, r0
 800b122:	4b06      	ldr	r3, [pc, #24]	@ (800b13c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	0a1b      	lsrs	r3, r3, #8
 800b128:	f003 0307 	and.w	r3, r3, #7
 800b12c:	4904      	ldr	r1, [pc, #16]	@ (800b140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b12e:	5ccb      	ldrb	r3, [r1, r3]
 800b130:	f003 031f 	and.w	r3, r3, #31
 800b134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b138:	4618      	mov	r0, r3
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	58024400 	.word	0x58024400
 800b140:	08018280 	.word	0x08018280

0800b144 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	223f      	movs	r2, #63	@ 0x3f
 800b152:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b154:	4b1a      	ldr	r3, [pc, #104]	@ (800b1c0 <HAL_RCC_GetClockConfig+0x7c>)
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	f003 0207 	and.w	r2, r3, #7
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b160:	4b17      	ldr	r3, [pc, #92]	@ (800b1c0 <HAL_RCC_GetClockConfig+0x7c>)
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b16c:	4b14      	ldr	r3, [pc, #80]	@ (800b1c0 <HAL_RCC_GetClockConfig+0x7c>)
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	f003 020f 	and.w	r2, r3, #15
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b178:	4b11      	ldr	r3, [pc, #68]	@ (800b1c0 <HAL_RCC_GetClockConfig+0x7c>)
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b184:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c0 <HAL_RCC_GetClockConfig+0x7c>)
 800b186:	69db      	ldr	r3, [r3, #28]
 800b188:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b190:	4b0b      	ldr	r3, [pc, #44]	@ (800b1c0 <HAL_RCC_GetClockConfig+0x7c>)
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b19c:	4b08      	ldr	r3, [pc, #32]	@ (800b1c0 <HAL_RCC_GetClockConfig+0x7c>)
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b1a8:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <HAL_RCC_GetClockConfig+0x80>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 020f 	and.w	r2, r3, #15
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	601a      	str	r2, [r3, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	58024400 	.word	0x58024400
 800b1c4:	52002000 	.word	0x52002000

0800b1c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1cc:	b0ca      	sub	sp, #296	@ 0x128
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b1ec:	2500      	movs	r5, #0
 800b1ee:	ea54 0305 	orrs.w	r3, r4, r5
 800b1f2:	d049      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1fe:	d02f      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b200:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b204:	d828      	bhi.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b206:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b20a:	d01a      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b20c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b210:	d822      	bhi.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b21a:	d007      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b21c:	e01c      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b21e:	4bb8      	ldr	r3, [pc, #736]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b222:	4ab7      	ldr	r2, [pc, #732]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b228:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b22a:	e01a      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b230:	3308      	adds	r3, #8
 800b232:	2102      	movs	r1, #2
 800b234:	4618      	mov	r0, r3
 800b236:	f002 fb61 	bl	800d8fc <RCCEx_PLL2_Config>
 800b23a:	4603      	mov	r3, r0
 800b23c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b240:	e00f      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b246:	3328      	adds	r3, #40	@ 0x28
 800b248:	2102      	movs	r1, #2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f002 fc08 	bl	800da60 <RCCEx_PLL3_Config>
 800b250:	4603      	mov	r3, r0
 800b252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b256:	e004      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b25e:	e000      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b26a:	4ba5      	ldr	r3, [pc, #660]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b26e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b278:	4aa1      	ldr	r2, [pc, #644]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b27a:	430b      	orrs	r3, r1
 800b27c:	6513      	str	r3, [r2, #80]	@ 0x50
 800b27e:	e003      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b294:	f04f 0900 	mov.w	r9, #0
 800b298:	ea58 0309 	orrs.w	r3, r8, r9
 800b29c:	d047      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2a4:	2b04      	cmp	r3, #4
 800b2a6:	d82a      	bhi.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ae:	bf00      	nop
 800b2b0:	0800b2c5 	.word	0x0800b2c5
 800b2b4:	0800b2d3 	.word	0x0800b2d3
 800b2b8:	0800b2e9 	.word	0x0800b2e9
 800b2bc:	0800b307 	.word	0x0800b307
 800b2c0:	0800b307 	.word	0x0800b307
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2c4:	4b8e      	ldr	r3, [pc, #568]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c8:	4a8d      	ldr	r2, [pc, #564]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2d0:	e01a      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f002 fb0e 	bl	800d8fc <RCCEx_PLL2_Config>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2e6:	e00f      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2ec:	3328      	adds	r3, #40	@ 0x28
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f002 fbb5 	bl	800da60 <RCCEx_PLL3_Config>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2fc:	e004      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b304:	e000      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b306:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10a      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b310:	4b7b      	ldr	r3, [pc, #492]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b314:	f023 0107 	bic.w	r1, r3, #7
 800b318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b31c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b31e:	4a78      	ldr	r2, [pc, #480]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b320:	430b      	orrs	r3, r1
 800b322:	6513      	str	r3, [r2, #80]	@ 0x50
 800b324:	e003      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b32a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b33a:	f04f 0b00 	mov.w	fp, #0
 800b33e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b342:	d04c      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b34a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b34e:	d030      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b354:	d829      	bhi.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b356:	2bc0      	cmp	r3, #192	@ 0xc0
 800b358:	d02d      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b35a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b35c:	d825      	bhi.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b35e:	2b80      	cmp	r3, #128	@ 0x80
 800b360:	d018      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b362:	2b80      	cmp	r3, #128	@ 0x80
 800b364:	d821      	bhi.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b36a:	2b40      	cmp	r3, #64	@ 0x40
 800b36c:	d007      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b36e:	e01c      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b370:	4b63      	ldr	r3, [pc, #396]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b374:	4a62      	ldr	r2, [pc, #392]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b37a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b37c:	e01c      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b382:	3308      	adds	r3, #8
 800b384:	2100      	movs	r1, #0
 800b386:	4618      	mov	r0, r3
 800b388:	f002 fab8 	bl	800d8fc <RCCEx_PLL2_Config>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b392:	e011      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b398:	3328      	adds	r3, #40	@ 0x28
 800b39a:	2100      	movs	r1, #0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f002 fb5f 	bl	800da60 <RCCEx_PLL3_Config>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b3a8:	e006      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b3b0:	e002      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b3b2:	bf00      	nop
 800b3b4:	e000      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b3b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10a      	bne.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b3c0:	4b4f      	ldr	r3, [pc, #316]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3ce:	4a4c      	ldr	r2, [pc, #304]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b3d4:	e003      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b3ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800b3f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	d053      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b402:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b406:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b40a:	d035      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b40c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b410:	d82e      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b412:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b416:	d031      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b418:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b41c:	d828      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b41e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b422:	d01a      	beq.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b428:	d822      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b42e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b432:	d007      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b434:	e01c      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b436:	4b32      	ldr	r3, [pc, #200]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43a:	4a31      	ldr	r2, [pc, #196]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b43c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b442:	e01c      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b448:	3308      	adds	r3, #8
 800b44a:	2100      	movs	r1, #0
 800b44c:	4618      	mov	r0, r3
 800b44e:	f002 fa55 	bl	800d8fc <RCCEx_PLL2_Config>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b458:	e011      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b45e:	3328      	adds	r3, #40	@ 0x28
 800b460:	2100      	movs	r1, #0
 800b462:	4618      	mov	r0, r3
 800b464:	f002 fafc 	bl	800da60 <RCCEx_PLL3_Config>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b46e:	e006      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b476:	e002      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b478:	bf00      	nop
 800b47a:	e000      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10b      	bne.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b486:	4b1e      	ldr	r3, [pc, #120]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b48a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b492:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b496:	4a1a      	ldr	r2, [pc, #104]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b498:	430b      	orrs	r3, r1
 800b49a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b49c:	e003      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b4b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b4bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	d056      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b4ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4d2:	d038      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b4d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4d8:	d831      	bhi.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b4da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b4de:	d034      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b4e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b4e4:	d82b      	bhi.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b4e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4ea:	d01d      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b4ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4f0:	d825      	bhi.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d006      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b4f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4fa:	d00a      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b4fc:	e01f      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b4fe:	bf00      	nop
 800b500:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b504:	4ba2      	ldr	r3, [pc, #648]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	4aa1      	ldr	r2, [pc, #644]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b50a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b50e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b510:	e01c      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b516:	3308      	adds	r3, #8
 800b518:	2100      	movs	r1, #0
 800b51a:	4618      	mov	r0, r3
 800b51c:	f002 f9ee 	bl	800d8fc <RCCEx_PLL2_Config>
 800b520:	4603      	mov	r3, r0
 800b522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b526:	e011      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b52c:	3328      	adds	r3, #40	@ 0x28
 800b52e:	2100      	movs	r1, #0
 800b530:	4618      	mov	r0, r3
 800b532:	f002 fa95 	bl	800da60 <RCCEx_PLL3_Config>
 800b536:	4603      	mov	r3, r0
 800b538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b53c:	e006      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b544:	e002      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b546:	bf00      	nop
 800b548:	e000      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b54a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b54c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10b      	bne.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b554:	4b8e      	ldr	r3, [pc, #568]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b558:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b560:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b564:	4a8a      	ldr	r2, [pc, #552]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b566:	430b      	orrs	r3, r1
 800b568:	6593      	str	r3, [r2, #88]	@ 0x58
 800b56a:	e003      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b580:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b584:	2300      	movs	r3, #0
 800b586:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b58a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b58e:	460b      	mov	r3, r1
 800b590:	4313      	orrs	r3, r2
 800b592:	d03a      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b59a:	2b30      	cmp	r3, #48	@ 0x30
 800b59c:	d01f      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b59e:	2b30      	cmp	r3, #48	@ 0x30
 800b5a0:	d819      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b5a2:	2b20      	cmp	r3, #32
 800b5a4:	d00c      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b5a6:	2b20      	cmp	r3, #32
 800b5a8:	d815      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d019      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b5ae:	2b10      	cmp	r3, #16
 800b5b0:	d111      	bne.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5b2:	4b77      	ldr	r3, [pc, #476]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b6:	4a76      	ldr	r2, [pc, #472]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b5be:	e011      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	2102      	movs	r1, #2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f002 f997 	bl	800d8fc <RCCEx_PLL2_Config>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b5d4:	e006      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b5dc:	e002      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b5de:	bf00      	nop
 800b5e0:	e000      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b5e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b5ec:	4b68      	ldr	r3, [pc, #416]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5fa:	4a65      	ldr	r2, [pc, #404]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b600:	e003      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b616:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b61a:	2300      	movs	r3, #0
 800b61c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b620:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b624:	460b      	mov	r3, r1
 800b626:	4313      	orrs	r3, r2
 800b628:	d051      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b62e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b634:	d035      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b63a:	d82e      	bhi.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b63c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b640:	d031      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b642:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b646:	d828      	bhi.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b64c:	d01a      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b64e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b652:	d822      	bhi.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b65c:	d007      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b65e:	e01c      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b660:	4b4b      	ldr	r3, [pc, #300]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b664:	4a4a      	ldr	r2, [pc, #296]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b66a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b66c:	e01c      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b672:	3308      	adds	r3, #8
 800b674:	2100      	movs	r1, #0
 800b676:	4618      	mov	r0, r3
 800b678:	f002 f940 	bl	800d8fc <RCCEx_PLL2_Config>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b682:	e011      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b688:	3328      	adds	r3, #40	@ 0x28
 800b68a:	2100      	movs	r1, #0
 800b68c:	4618      	mov	r0, r3
 800b68e:	f002 f9e7 	bl	800da60 <RCCEx_PLL3_Config>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b698:	e006      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b6a0:	e002      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b6a2:	bf00      	nop
 800b6a4:	e000      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b6a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b6b0:	4b37      	ldr	r3, [pc, #220]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6be:	4a34      	ldr	r2, [pc, #208]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b6c4:	e003      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b6ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b6da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b6e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	d056      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b6f8:	d033      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b6fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b6fe:	d82c      	bhi.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b700:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b704:	d02f      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b706:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b70a:	d826      	bhi.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b70c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b710:	d02b      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b712:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b716:	d820      	bhi.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b71c:	d012      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b71e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b722:	d81a      	bhi.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b724:	2b00      	cmp	r3, #0
 800b726:	d022      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b72c:	d115      	bne.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b732:	3308      	adds	r3, #8
 800b734:	2101      	movs	r1, #1
 800b736:	4618      	mov	r0, r3
 800b738:	f002 f8e0 	bl	800d8fc <RCCEx_PLL2_Config>
 800b73c:	4603      	mov	r3, r0
 800b73e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b742:	e015      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b748:	3328      	adds	r3, #40	@ 0x28
 800b74a:	2101      	movs	r1, #1
 800b74c:	4618      	mov	r0, r3
 800b74e:	f002 f987 	bl	800da60 <RCCEx_PLL3_Config>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b758:	e00a      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b760:	e006      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b762:	bf00      	nop
 800b764:	e004      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b766:	bf00      	nop
 800b768:	e002      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b76a:	bf00      	nop
 800b76c:	e000      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b76e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10d      	bne.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b778:	4b05      	ldr	r3, [pc, #20]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b77a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b77c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b786:	4a02      	ldr	r2, [pc, #8]	@ (800b790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b788:	430b      	orrs	r3, r1
 800b78a:	6513      	str	r3, [r2, #80]	@ 0x50
 800b78c:	e006      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b78e:	bf00      	nop
 800b790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b7a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b7b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	d055      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b7c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7c8:	d033      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b7ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7ce:	d82c      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7d4:	d02f      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7da:	d826      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b7dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7e0:	d02b      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b7e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7e6:	d820      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b7e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7ec:	d012      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b7ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7f2:	d81a      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d022      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b7f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7fc:	d115      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b802:	3308      	adds	r3, #8
 800b804:	2101      	movs	r1, #1
 800b806:	4618      	mov	r0, r3
 800b808:	f002 f878 	bl	800d8fc <RCCEx_PLL2_Config>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b812:	e015      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b818:	3328      	adds	r3, #40	@ 0x28
 800b81a:	2101      	movs	r1, #1
 800b81c:	4618      	mov	r0, r3
 800b81e:	f002 f91f 	bl	800da60 <RCCEx_PLL3_Config>
 800b822:	4603      	mov	r3, r0
 800b824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b828:	e00a      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b830:	e006      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b832:	bf00      	nop
 800b834:	e004      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b836:	bf00      	nop
 800b838:	e002      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b83a:	bf00      	nop
 800b83c:	e000      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b83e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10b      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b848:	4ba3      	ldr	r3, [pc, #652]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b84a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b84c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b858:	4a9f      	ldr	r2, [pc, #636]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b85a:	430b      	orrs	r3, r1
 800b85c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b85e:	e003      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b87e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	d037      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b88c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b88e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b892:	d00e      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b898:	d816      	bhi.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d018      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b89e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a2:	d111      	bne.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a4:	4b8c      	ldr	r3, [pc, #560]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a8:	4a8b      	ldr	r2, [pc, #556]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b8b0:	e00f      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f002 f81e 	bl	800d8fc <RCCEx_PLL2_Config>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b8c6:	e004      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b8ce:	e000      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10a      	bne.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b8da:	4b7f      	ldr	r3, [pc, #508]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8e8:	4a7b      	ldr	r2, [pc, #492]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ea:	430b      	orrs	r3, r1
 800b8ec:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8ee:	e003      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b908:	2300      	movs	r3, #0
 800b90a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b90e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b912:	460b      	mov	r3, r1
 800b914:	4313      	orrs	r3, r2
 800b916:	d039      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b91c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d81c      	bhi.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b922:	a201      	add	r2, pc, #4	@ (adr r2, 800b928 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b965 	.word	0x0800b965
 800b92c:	0800b939 	.word	0x0800b939
 800b930:	0800b947 	.word	0x0800b947
 800b934:	0800b965 	.word	0x0800b965
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b938:	4b67      	ldr	r3, [pc, #412]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93c:	4a66      	ldr	r2, [pc, #408]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b93e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b944:	e00f      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b94a:	3308      	adds	r3, #8
 800b94c:	2102      	movs	r1, #2
 800b94e:	4618      	mov	r0, r3
 800b950:	f001 ffd4 	bl	800d8fc <RCCEx_PLL2_Config>
 800b954:	4603      	mov	r3, r0
 800b956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b95a:	e004      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b962:	e000      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b964:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10a      	bne.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b96e:	4b5a      	ldr	r3, [pc, #360]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b972:	f023 0103 	bic.w	r1, r3, #3
 800b976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b97a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b97c:	4a56      	ldr	r2, [pc, #344]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b97e:	430b      	orrs	r3, r1
 800b980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b982:	e003      	b.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b99c:	2300      	movs	r3, #0
 800b99e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b9a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	f000 809f 	beq.w	800baec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9ae:	4b4b      	ldr	r3, [pc, #300]	@ (800badc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a4a      	ldr	r2, [pc, #296]	@ (800badc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b9b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b9ba:	f7f8 fedf 	bl	800477c <HAL_GetTick>
 800b9be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9c2:	e00b      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9c4:	f7f8 feda 	bl	800477c <HAL_GetTick>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	2b64      	cmp	r3, #100	@ 0x64
 800b9d2:	d903      	bls.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b9da:	e005      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9dc:	4b3f      	ldr	r3, [pc, #252]	@ (800badc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0ed      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b9e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d179      	bne.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b9f0:	4b39      	ldr	r3, [pc, #228]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b9fc:	4053      	eors	r3, r2
 800b9fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d015      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba06:	4b34      	ldr	r3, [pc, #208]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba12:	4b31      	ldr	r3, [pc, #196]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba16:	4a30      	ldr	r2, [pc, #192]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba1e:	4b2e      	ldr	r3, [pc, #184]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba22:	4a2d      	ldr	r2, [pc, #180]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ba2a:	4a2b      	ldr	r2, [pc, #172]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ba30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ba32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba3e:	d118      	bne.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba40:	f7f8 fe9c 	bl	800477c <HAL_GetTick>
 800ba44:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba48:	e00d      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba4a:	f7f8 fe97 	bl	800477c <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ba54:	1ad2      	subs	r2, r2, r3
 800ba56:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d903      	bls.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ba64:	e005      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba66:	4b1c      	ldr	r3, [pc, #112]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba6a:	f003 0302 	and.w	r3, r3, #2
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d0eb      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ba72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d129      	bne.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba8a:	d10e      	bne.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ba8c:	4b12      	ldr	r3, [pc, #72]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ba94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba9c:	091a      	lsrs	r2, r3, #4
 800ba9e:	4b10      	ldr	r3, [pc, #64]	@ (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800baa0:	4013      	ands	r3, r2
 800baa2:	4a0d      	ldr	r2, [pc, #52]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baa4:	430b      	orrs	r3, r1
 800baa6:	6113      	str	r3, [r2, #16]
 800baa8:	e005      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800baaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	4a0a      	ldr	r2, [pc, #40]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bab0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bab4:	6113      	str	r3, [r2, #16]
 800bab6:	4b08      	ldr	r3, [pc, #32]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bab8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800baba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800babe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bac6:	4a04      	ldr	r2, [pc, #16]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bac8:	430b      	orrs	r3, r1
 800baca:	6713      	str	r3, [r2, #112]	@ 0x70
 800bacc:	e00e      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800bad6:	e009      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bad8:	58024400 	.word	0x58024400
 800badc:	58024800 	.word	0x58024800
 800bae0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800baec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f002 0301 	and.w	r3, r2, #1
 800baf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bafc:	2300      	movs	r3, #0
 800bafe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bb02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bb06:	460b      	mov	r3, r1
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	f000 8089 	beq.w	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb14:	2b28      	cmp	r3, #40	@ 0x28
 800bb16:	d86b      	bhi.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bb18:	a201      	add	r2, pc, #4	@ (adr r2, 800bb20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1e:	bf00      	nop
 800bb20:	0800bbf9 	.word	0x0800bbf9
 800bb24:	0800bbf1 	.word	0x0800bbf1
 800bb28:	0800bbf1 	.word	0x0800bbf1
 800bb2c:	0800bbf1 	.word	0x0800bbf1
 800bb30:	0800bbf1 	.word	0x0800bbf1
 800bb34:	0800bbf1 	.word	0x0800bbf1
 800bb38:	0800bbf1 	.word	0x0800bbf1
 800bb3c:	0800bbf1 	.word	0x0800bbf1
 800bb40:	0800bbc5 	.word	0x0800bbc5
 800bb44:	0800bbf1 	.word	0x0800bbf1
 800bb48:	0800bbf1 	.word	0x0800bbf1
 800bb4c:	0800bbf1 	.word	0x0800bbf1
 800bb50:	0800bbf1 	.word	0x0800bbf1
 800bb54:	0800bbf1 	.word	0x0800bbf1
 800bb58:	0800bbf1 	.word	0x0800bbf1
 800bb5c:	0800bbf1 	.word	0x0800bbf1
 800bb60:	0800bbdb 	.word	0x0800bbdb
 800bb64:	0800bbf1 	.word	0x0800bbf1
 800bb68:	0800bbf1 	.word	0x0800bbf1
 800bb6c:	0800bbf1 	.word	0x0800bbf1
 800bb70:	0800bbf1 	.word	0x0800bbf1
 800bb74:	0800bbf1 	.word	0x0800bbf1
 800bb78:	0800bbf1 	.word	0x0800bbf1
 800bb7c:	0800bbf1 	.word	0x0800bbf1
 800bb80:	0800bbf9 	.word	0x0800bbf9
 800bb84:	0800bbf1 	.word	0x0800bbf1
 800bb88:	0800bbf1 	.word	0x0800bbf1
 800bb8c:	0800bbf1 	.word	0x0800bbf1
 800bb90:	0800bbf1 	.word	0x0800bbf1
 800bb94:	0800bbf1 	.word	0x0800bbf1
 800bb98:	0800bbf1 	.word	0x0800bbf1
 800bb9c:	0800bbf1 	.word	0x0800bbf1
 800bba0:	0800bbf9 	.word	0x0800bbf9
 800bba4:	0800bbf1 	.word	0x0800bbf1
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bbf1 	.word	0x0800bbf1
 800bbb0:	0800bbf1 	.word	0x0800bbf1
 800bbb4:	0800bbf1 	.word	0x0800bbf1
 800bbb8:	0800bbf1 	.word	0x0800bbf1
 800bbbc:	0800bbf1 	.word	0x0800bbf1
 800bbc0:	0800bbf9 	.word	0x0800bbf9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbc8:	3308      	adds	r3, #8
 800bbca:	2101      	movs	r1, #1
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f001 fe95 	bl	800d8fc <RCCEx_PLL2_Config>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bbd8:	e00f      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbde:	3328      	adds	r3, #40	@ 0x28
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 ff3c 	bl	800da60 <RCCEx_PLL3_Config>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bbee:	e004      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bbf6:	e000      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bbf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10a      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bc02:	4bbf      	ldr	r3, [pc, #764]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc10:	4abb      	ldr	r2, [pc, #748]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc12:	430b      	orrs	r3, r1
 800bc14:	6553      	str	r3, [r2, #84]	@ 0x54
 800bc16:	e003      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f002 0302 	and.w	r3, r2, #2
 800bc2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc30:	2300      	movs	r3, #0
 800bc32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bc36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	d041      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc46:	2b05      	cmp	r3, #5
 800bc48:	d824      	bhi.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc50:	0800bc9d 	.word	0x0800bc9d
 800bc54:	0800bc69 	.word	0x0800bc69
 800bc58:	0800bc7f 	.word	0x0800bc7f
 800bc5c:	0800bc9d 	.word	0x0800bc9d
 800bc60:	0800bc9d 	.word	0x0800bc9d
 800bc64:	0800bc9d 	.word	0x0800bc9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	2101      	movs	r1, #1
 800bc70:	4618      	mov	r0, r3
 800bc72:	f001 fe43 	bl	800d8fc <RCCEx_PLL2_Config>
 800bc76:	4603      	mov	r3, r0
 800bc78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bc7c:	e00f      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc82:	3328      	adds	r3, #40	@ 0x28
 800bc84:	2101      	movs	r1, #1
 800bc86:	4618      	mov	r0, r3
 800bc88:	f001 feea 	bl	800da60 <RCCEx_PLL3_Config>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bc92:	e004      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bc9a:	e000      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bc9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bca6:	4b96      	ldr	r3, [pc, #600]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcaa:	f023 0107 	bic.w	r1, r3, #7
 800bcae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcb4:	4a92      	ldr	r2, [pc, #584]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	6553      	str	r3, [r2, #84]	@ 0x54
 800bcba:	e003      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bcc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f002 0304 	and.w	r3, r2, #4
 800bcd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bcda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4313      	orrs	r3, r2
 800bce2:	d044      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bcec:	2b05      	cmp	r3, #5
 800bcee:	d825      	bhi.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bcf0:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bd45 	.word	0x0800bd45
 800bcfc:	0800bd11 	.word	0x0800bd11
 800bd00:	0800bd27 	.word	0x0800bd27
 800bd04:	0800bd45 	.word	0x0800bd45
 800bd08:	0800bd45 	.word	0x0800bd45
 800bd0c:	0800bd45 	.word	0x0800bd45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd14:	3308      	adds	r3, #8
 800bd16:	2101      	movs	r1, #1
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f001 fdef 	bl	800d8fc <RCCEx_PLL2_Config>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd24:	e00f      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd2a:	3328      	adds	r3, #40	@ 0x28
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f001 fe96 	bl	800da60 <RCCEx_PLL3_Config>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd3a:	e004      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bd42:	e000      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bd44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10b      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd4e:	4b6c      	ldr	r3, [pc, #432]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd52:	f023 0107 	bic.w	r1, r3, #7
 800bd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd5e:	4a68      	ldr	r2, [pc, #416]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd60:	430b      	orrs	r3, r1
 800bd62:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd64:	e003      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	f002 0320 	and.w	r3, r2, #32
 800bd7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	d055      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd9a:	d033      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bd9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bda0:	d82c      	bhi.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda6:	d02f      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bda8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdac:	d826      	bhi.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bdae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bdb2:	d02b      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bdb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bdb8:	d820      	bhi.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bdba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdbe:	d012      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bdc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdc4:	d81a      	bhi.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d022      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bdca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdce:	d115      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 fd8f 	bl	800d8fc <RCCEx_PLL2_Config>
 800bdde:	4603      	mov	r3, r0
 800bde0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bde4:	e015      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdea:	3328      	adds	r3, #40	@ 0x28
 800bdec:	2102      	movs	r1, #2
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f001 fe36 	bl	800da60 <RCCEx_PLL3_Config>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bdfa:	e00a      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800be02:	e006      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be04:	bf00      	nop
 800be06:	e004      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be08:	bf00      	nop
 800be0a:	e002      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be0c:	bf00      	nop
 800be0e:	e000      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10b      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be1a:	4b39      	ldr	r3, [pc, #228]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be1e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800be22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be2a:	4a35      	ldr	r2, [pc, #212]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be2c:	430b      	orrs	r3, r1
 800be2e:	6553      	str	r3, [r2, #84]	@ 0x54
 800be30:	e003      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800be46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be4a:	2300      	movs	r3, #0
 800be4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800be50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800be54:	460b      	mov	r3, r1
 800be56:	4313      	orrs	r3, r2
 800be58:	d058      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800be5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800be62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800be66:	d033      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800be68:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800be6c:	d82c      	bhi.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be72:	d02f      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800be74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be78:	d826      	bhi.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800be7e:	d02b      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800be80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800be84:	d820      	bhi.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be8a:	d012      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800be8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be90:	d81a      	bhi.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d022      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800be96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be9a:	d115      	bne.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bea0:	3308      	adds	r3, #8
 800bea2:	2100      	movs	r1, #0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f001 fd29 	bl	800d8fc <RCCEx_PLL2_Config>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800beb0:	e015      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800beb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800beb6:	3328      	adds	r3, #40	@ 0x28
 800beb8:	2102      	movs	r1, #2
 800beba:	4618      	mov	r0, r3
 800bebc:	f001 fdd0 	bl	800da60 <RCCEx_PLL3_Config>
 800bec0:	4603      	mov	r3, r0
 800bec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bec6:	e00a      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bece:	e006      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bed0:	bf00      	nop
 800bed2:	e004      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bed4:	bf00      	nop
 800bed6:	e002      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bed8:	bf00      	nop
 800beda:	e000      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bedc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10e      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bee6:	4b06      	ldr	r3, [pc, #24]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800beea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800beee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bef6:	4a02      	ldr	r2, [pc, #8]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bef8:	430b      	orrs	r3, r1
 800befa:	6593      	str	r3, [r2, #88]	@ 0x58
 800befc:	e006      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800befe:	bf00      	nop
 800bf00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bf18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bf26:	460b      	mov	r3, r1
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	d055      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bf34:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bf38:	d033      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bf3a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bf3e:	d82c      	bhi.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf44:	d02f      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bf46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf4a:	d826      	bhi.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf4c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bf50:	d02b      	beq.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bf52:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bf56:	d820      	bhi.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf5c:	d012      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bf5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf62:	d81a      	bhi.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d022      	beq.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bf68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf6c:	d115      	bne.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf72:	3308      	adds	r3, #8
 800bf74:	2100      	movs	r1, #0
 800bf76:	4618      	mov	r0, r3
 800bf78:	f001 fcc0 	bl	800d8fc <RCCEx_PLL2_Config>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bf82:	e015      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf88:	3328      	adds	r3, #40	@ 0x28
 800bf8a:	2102      	movs	r1, #2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 fd67 	bl	800da60 <RCCEx_PLL3_Config>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bf98:	e00a      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bfa0:	e006      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bfa2:	bf00      	nop
 800bfa4:	e004      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bfa6:	bf00      	nop
 800bfa8:	e002      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bfaa:	bf00      	nop
 800bfac:	e000      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bfae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10b      	bne.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bfb8:	4ba1      	ldr	r3, [pc, #644]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfbc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800bfc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bfc8:	4a9d      	ldr	r2, [pc, #628]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bfce:	e003      	b.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bfd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bfd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f002 0308 	and.w	r3, r2, #8
 800bfe4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bfee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bff2:	460b      	mov	r3, r1
 800bff4:	4313      	orrs	r3, r2
 800bff6:	d01e      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c004:	d10c      	bne.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c00a:	3328      	adds	r3, #40	@ 0x28
 800c00c:	2102      	movs	r1, #2
 800c00e:	4618      	mov	r0, r3
 800c010:	f001 fd26 	bl	800da60 <RCCEx_PLL3_Config>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c020:	4b87      	ldr	r3, [pc, #540]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c024:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c030:	4a83      	ldr	r2, [pc, #524]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c032:	430b      	orrs	r3, r1
 800c034:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03e:	f002 0310 	and.w	r3, r2, #16
 800c042:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c046:	2300      	movs	r3, #0
 800c048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c04c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c050:	460b      	mov	r3, r1
 800c052:	4313      	orrs	r3, r2
 800c054:	d01e      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c05a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c062:	d10c      	bne.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c068:	3328      	adds	r3, #40	@ 0x28
 800c06a:	2102      	movs	r1, #2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 fcf7 	bl	800da60 <RCCEx_PLL3_Config>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c07e:	4b70      	ldr	r3, [pc, #448]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c082:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c08a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c08e:	4a6c      	ldr	r2, [pc, #432]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c090:	430b      	orrs	r3, r1
 800c092:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c0a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	d03e      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c0bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0c0:	d022      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c0c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0c6:	d81b      	bhi.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d003      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c0cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0d0:	d00b      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c0d2:	e015      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0d8:	3308      	adds	r3, #8
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 fc0d 	bl	800d8fc <RCCEx_PLL2_Config>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c0e8:	e00f      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0ee:	3328      	adds	r3, #40	@ 0x28
 800c0f0:	2102      	movs	r1, #2
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f001 fcb4 	bl	800da60 <RCCEx_PLL3_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c0fe:	e004      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c106:	e000      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c10a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c112:	4b4b      	ldr	r3, [pc, #300]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c116:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c11e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c122:	4a47      	ldr	r2, [pc, #284]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c124:	430b      	orrs	r3, r1
 800c126:	6593      	str	r3, [r2, #88]	@ 0x58
 800c128:	e003      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c12e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c13e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c140:	2300      	movs	r3, #0
 800c142:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c144:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c148:	460b      	mov	r3, r1
 800c14a:	4313      	orrs	r3, r2
 800c14c:	d03b      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c156:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c15a:	d01f      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c15c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c160:	d818      	bhi.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c166:	d003      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c16c:	d007      	beq.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c16e:	e011      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c170:	4b33      	ldr	r3, [pc, #204]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c174:	4a32      	ldr	r2, [pc, #200]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c17a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c17c:	e00f      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c182:	3328      	adds	r3, #40	@ 0x28
 800c184:	2101      	movs	r1, #1
 800c186:	4618      	mov	r0, r3
 800c188:	f001 fc6a 	bl	800da60 <RCCEx_PLL3_Config>
 800c18c:	4603      	mov	r3, r0
 800c18e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c192:	e004      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c19a:	e000      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c19c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c19e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10b      	bne.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1a6:	4b26      	ldr	r3, [pc, #152]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1b6:	4a22      	ldr	r2, [pc, #136]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1b8:	430b      	orrs	r3, r1
 800c1ba:	6553      	str	r3, [r2, #84]	@ 0x54
 800c1bc:	e003      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c1c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c1d2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	d034      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c1ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1f0:	d007      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c1f2:	e011      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1f4:	4b12      	ldr	r3, [pc, #72]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f8:	4a11      	ldr	r2, [pc, #68]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c200:	e00e      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c206:	3308      	adds	r3, #8
 800c208:	2102      	movs	r1, #2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 fb76 	bl	800d8fc <RCCEx_PLL2_Config>
 800c210:	4603      	mov	r3, r0
 800c212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c216:	e003      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c21e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10d      	bne.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c228:	4b05      	ldr	r3, [pc, #20]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c22a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c22c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c236:	4a02      	ldr	r2, [pc, #8]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c238:	430b      	orrs	r3, r1
 800c23a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c23c:	e006      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c23e:	bf00      	nop
 800c240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c25a:	2300      	movs	r3, #0
 800c25c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c25e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c262:	460b      	mov	r3, r1
 800c264:	4313      	orrs	r3, r2
 800c266:	d00c      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c26c:	3328      	adds	r3, #40	@ 0x28
 800c26e:	2102      	movs	r1, #2
 800c270:	4618      	mov	r0, r3
 800c272:	f001 fbf5 	bl	800da60 <RCCEx_PLL3_Config>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c28e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c290:	2300      	movs	r3, #0
 800c292:	667b      	str	r3, [r7, #100]	@ 0x64
 800c294:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c298:	460b      	mov	r3, r1
 800c29a:	4313      	orrs	r3, r2
 800c29c:	d038      	beq.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2aa:	d018      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c2ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2b0:	d811      	bhi.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c2b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2b6:	d014      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c2b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2bc:	d80b      	bhi.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d011      	beq.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c2c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2c6:	d106      	bne.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2c8:	4bc3      	ldr	r3, [pc, #780]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2cc:	4ac2      	ldr	r2, [pc, #776]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c2d4:	e008      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c2dc:	e004      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c2de:	bf00      	nop
 800c2e0:	e002      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c2e2:	bf00      	nop
 800c2e4:	e000      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c2e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10b      	bne.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c2f0:	4bb9      	ldr	r3, [pc, #740]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c300:	4ab5      	ldr	r2, [pc, #724]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c302:	430b      	orrs	r3, r1
 800c304:	6553      	str	r3, [r2, #84]	@ 0x54
 800c306:	e003      	b.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c30c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c31c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c31e:	2300      	movs	r3, #0
 800c320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c322:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c326:	460b      	mov	r3, r1
 800c328:	4313      	orrs	r3, r2
 800c32a:	d009      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c32c:	4baa      	ldr	r3, [pc, #680]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c32e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c33a:	4aa7      	ldr	r2, [pc, #668]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c34c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c34e:	2300      	movs	r3, #0
 800c350:	657b      	str	r3, [r7, #84]	@ 0x54
 800c352:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c356:	460b      	mov	r3, r1
 800c358:	4313      	orrs	r3, r2
 800c35a:	d00a      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c35c:	4b9e      	ldr	r3, [pc, #632]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c368:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c36c:	4a9a      	ldr	r2, [pc, #616]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c36e:	430b      	orrs	r3, r1
 800c370:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c37e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c380:	2300      	movs	r3, #0
 800c382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c384:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c388:	460b      	mov	r3, r1
 800c38a:	4313      	orrs	r3, r2
 800c38c:	d009      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c38e:	4b92      	ldr	r3, [pc, #584]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c392:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c39a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c39c:	4a8e      	ldr	r2, [pc, #568]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c3ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	d00e      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3be:	4b86      	ldr	r3, [pc, #536]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	4a85      	ldr	r2, [pc, #532]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c3c8:	6113      	str	r3, [r2, #16]
 800c3ca:	4b83      	ldr	r3, [pc, #524]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3cc:	6919      	ldr	r1, [r3, #16]
 800c3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c3d6:	4a80      	ldr	r2, [pc, #512]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3d8:	430b      	orrs	r3, r1
 800c3da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	d009      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c3f8:	4b77      	ldr	r3, [pc, #476]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c406:	4a74      	ldr	r2, [pc, #464]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c408:	430b      	orrs	r3, r1
 800c40a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c418:	633b      	str	r3, [r7, #48]	@ 0x30
 800c41a:	2300      	movs	r3, #0
 800c41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c41e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c422:	460b      	mov	r3, r1
 800c424:	4313      	orrs	r3, r2
 800c426:	d00a      	beq.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c428:	4b6b      	ldr	r3, [pc, #428]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c42a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c42c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c438:	4a67      	ldr	r2, [pc, #412]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c43a:	430b      	orrs	r3, r1
 800c43c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	2100      	movs	r1, #0
 800c448:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c450:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c454:	460b      	mov	r3, r1
 800c456:	4313      	orrs	r3, r2
 800c458:	d011      	beq.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c45e:	3308      	adds	r3, #8
 800c460:	2100      	movs	r1, #0
 800c462:	4618      	mov	r0, r3
 800c464:	f001 fa4a 	bl	800d8fc <RCCEx_PLL2_Config>
 800c468:	4603      	mov	r3, r0
 800c46a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c46e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c47a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	2100      	movs	r1, #0
 800c488:	6239      	str	r1, [r7, #32]
 800c48a:	f003 0302 	and.w	r3, r3, #2
 800c48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c490:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c494:	460b      	mov	r3, r1
 800c496:	4313      	orrs	r3, r2
 800c498:	d011      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c49e:	3308      	adds	r3, #8
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f001 fa2a 	bl	800d8fc <RCCEx_PLL2_Config>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c4ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	61b9      	str	r1, [r7, #24]
 800c4ca:	f003 0304 	and.w	r3, r3, #4
 800c4ce:	61fb      	str	r3, [r7, #28]
 800c4d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	d011      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4de:	3308      	adds	r3, #8
 800c4e0:	2102      	movs	r1, #2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f001 fa0a 	bl	800d8fc <RCCEx_PLL2_Config>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c4fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	2100      	movs	r1, #0
 800c508:	6139      	str	r1, [r7, #16]
 800c50a:	f003 0308 	and.w	r3, r3, #8
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c514:	460b      	mov	r3, r1
 800c516:	4313      	orrs	r3, r2
 800c518:	d011      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c51e:	3328      	adds	r3, #40	@ 0x28
 800c520:	2100      	movs	r1, #0
 800c522:	4618      	mov	r0, r3
 800c524:	f001 fa9c 	bl	800da60 <RCCEx_PLL3_Config>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800c52e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c53a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	2100      	movs	r1, #0
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	f003 0310 	and.w	r3, r3, #16
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c554:	460b      	mov	r3, r1
 800c556:	4313      	orrs	r3, r2
 800c558:	d011      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c55e:	3328      	adds	r3, #40	@ 0x28
 800c560:	2101      	movs	r1, #1
 800c562:	4618      	mov	r0, r3
 800c564:	f001 fa7c 	bl	800da60 <RCCEx_PLL3_Config>
 800c568:	4603      	mov	r3, r0
 800c56a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c56e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c57a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	2100      	movs	r1, #0
 800c588:	6039      	str	r1, [r7, #0]
 800c58a:	f003 0320 	and.w	r3, r3, #32
 800c58e:	607b      	str	r3, [r7, #4]
 800c590:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c594:	460b      	mov	r3, r1
 800c596:	4313      	orrs	r3, r2
 800c598:	d011      	beq.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c59e:	3328      	adds	r3, #40	@ 0x28
 800c5a0:	2102      	movs	r1, #2
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f001 fa5c 	bl	800da60 <RCCEx_PLL3_Config>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d003      	beq.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c5ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800c5be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d101      	bne.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e000      	b.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5d8:	58024400 	.word	0x58024400

0800c5dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b090      	sub	sp, #64	@ 0x40
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c5e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c5ee:	430b      	orrs	r3, r1
 800c5f0:	f040 8094 	bne.w	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c5f4:	4b9e      	ldr	r3, [pc, #632]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5f8:	f003 0307 	and.w	r3, r3, #7
 800c5fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c600:	2b04      	cmp	r3, #4
 800c602:	f200 8087 	bhi.w	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c606:	a201      	add	r2, pc, #4	@ (adr r2, 800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60c:	0800c621 	.word	0x0800c621
 800c610:	0800c649 	.word	0x0800c649
 800c614:	0800c671 	.word	0x0800c671
 800c618:	0800c70d 	.word	0x0800c70d
 800c61c:	0800c699 	.word	0x0800c699
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c620:	4b93      	ldr	r3, [pc, #588]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c62c:	d108      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c62e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c632:	4618      	mov	r0, r3
 800c634:	f001 f810 	bl	800d658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c63c:	f000 bd45 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c644:	f000 bd41 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c648:	4b89      	ldr	r3, [pc, #548]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c654:	d108      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c656:	f107 0318 	add.w	r3, r7, #24
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fd54 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c664:	f000 bd31 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c668:	2300      	movs	r3, #0
 800c66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c66c:	f000 bd2d 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c670:	4b7f      	ldr	r3, [pc, #508]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c67c:	d108      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c67e:	f107 030c 	add.w	r3, r7, #12
 800c682:	4618      	mov	r0, r3
 800c684:	f000 fe94 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c68c:	f000 bd1d 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c694:	f000 bd19 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c698:	4b75      	ldr	r3, [pc, #468]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c69a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c69c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c6a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6a2:	4b73      	ldr	r3, [pc, #460]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 0304 	and.w	r3, r3, #4
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d10c      	bne.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d109      	bne.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6b4:	4b6e      	ldr	r3, [pc, #440]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	08db      	lsrs	r3, r3, #3
 800c6ba:	f003 0303 	and.w	r3, r3, #3
 800c6be:	4a6d      	ldr	r2, [pc, #436]	@ (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6c6:	e01f      	b.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6c8:	4b69      	ldr	r3, [pc, #420]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6d4:	d106      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6dc:	d102      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6de:	4b66      	ldr	r3, [pc, #408]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6e2:	e011      	b.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6e4:	4b62      	ldr	r3, [pc, #392]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6f0:	d106      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6f8:	d102      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6fa:	4b60      	ldr	r3, [pc, #384]	@ (800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6fe:	e003      	b.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c704:	f000 bce1 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c708:	f000 bcdf 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c70c:	4b5c      	ldr	r3, [pc, #368]	@ (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c710:	f000 bcdb 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c718:	f000 bcd7 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c71c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c720:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800c724:	430b      	orrs	r3, r1
 800c726:	f040 80ad 	bne.w	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c72a:	4b51      	ldr	r3, [pc, #324]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c72c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c72e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800c732:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c73a:	d056      	beq.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c742:	f200 8090 	bhi.w	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c748:	2bc0      	cmp	r3, #192	@ 0xc0
 800c74a:	f000 8088 	beq.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c750:	2bc0      	cmp	r3, #192	@ 0xc0
 800c752:	f200 8088 	bhi.w	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c758:	2b80      	cmp	r3, #128	@ 0x80
 800c75a:	d032      	beq.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75e:	2b80      	cmp	r3, #128	@ 0x80
 800c760:	f200 8081 	bhi.w	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c766:	2b00      	cmp	r3, #0
 800c768:	d003      	beq.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	2b40      	cmp	r3, #64	@ 0x40
 800c76e:	d014      	beq.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c770:	e079      	b.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c772:	4b3f      	ldr	r3, [pc, #252]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c77a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c77e:	d108      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c784:	4618      	mov	r0, r3
 800c786:	f000 ff67 	bl	800d658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78e:	f000 bc9c 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c796:	f000 bc98 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c79a:	4b35      	ldr	r3, [pc, #212]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7a6:	d108      	bne.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7a8:	f107 0318 	add.w	r3, r7, #24
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fcab 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b6:	f000 bc88 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7be:	f000 bc84 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7c2:	4b2b      	ldr	r3, [pc, #172]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7ce:	d108      	bne.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7d0:	f107 030c 	add.w	r3, r7, #12
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 fdeb 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7de:	f000 bc74 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7e6:	f000 bc70 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7ea:	4b21      	ldr	r3, [pc, #132]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c7f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7f4:	4b1e      	ldr	r3, [pc, #120]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b04      	cmp	r3, #4
 800c7fe:	d10c      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c802:	2b00      	cmp	r3, #0
 800c804:	d109      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c806:	4b1a      	ldr	r3, [pc, #104]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	08db      	lsrs	r3, r3, #3
 800c80c:	f003 0303 	and.w	r3, r3, #3
 800c810:	4a18      	ldr	r2, [pc, #96]	@ (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c812:	fa22 f303 	lsr.w	r3, r2, r3
 800c816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c818:	e01f      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c81a:	4b15      	ldr	r3, [pc, #84]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c826:	d106      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c82e:	d102      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c830:	4b11      	ldr	r3, [pc, #68]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c834:	e011      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c836:	4b0e      	ldr	r3, [pc, #56]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c83e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c842:	d106      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c84a:	d102      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c84c:	4b0b      	ldr	r3, [pc, #44]	@ (800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c850:	e003      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c856:	f000 bc38 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c85a:	f000 bc36 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c85e:	4b08      	ldr	r3, [pc, #32]	@ (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c862:	f000 bc32 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86a:	f000 bc2e 	b.w	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c86e:	bf00      	nop
 800c870:	58024400 	.word	0x58024400
 800c874:	03d09000 	.word	0x03d09000
 800c878:	003d0900 	.word	0x003d0900
 800c87c:	017d7840 	.word	0x017d7840
 800c880:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c888:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c88c:	430b      	orrs	r3, r1
 800c88e:	f040 809c 	bne.w	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c892:	4b9e      	ldr	r3, [pc, #632]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c896:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c89a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8a2:	d054      	beq.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8aa:	f200 808b 	bhi.w	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c8b4:	f000 8083 	beq.w	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c8be:	f200 8081 	bhi.w	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c8c8:	d02f      	beq.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c8d0:	d878      	bhi.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d004      	beq.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c8de:	d012      	beq.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c8e0:	e070      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8e2:	4b8a      	ldr	r3, [pc, #552]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8ee:	d107      	bne.n	800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 feaf 	bl	800d658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8fe:	e3e4      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c904:	e3e1      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c906:	4b81      	ldr	r3, [pc, #516]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c90e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c912:	d107      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c914:	f107 0318 	add.w	r3, r7, #24
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 fbf5 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c922:	e3d2      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c928:	e3cf      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c92a:	4b78      	ldr	r3, [pc, #480]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c936:	d107      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c938:	f107 030c 	add.w	r3, r7, #12
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 fd37 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c946:	e3c0      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c94c:	e3bd      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c94e:	4b6f      	ldr	r3, [pc, #444]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c956:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c958:	4b6c      	ldr	r3, [pc, #432]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0304 	and.w	r3, r3, #4
 800c960:	2b04      	cmp	r3, #4
 800c962:	d10c      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c966:	2b00      	cmp	r3, #0
 800c968:	d109      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c96a:	4b68      	ldr	r3, [pc, #416]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	08db      	lsrs	r3, r3, #3
 800c970:	f003 0303 	and.w	r3, r3, #3
 800c974:	4a66      	ldr	r2, [pc, #408]	@ (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c976:	fa22 f303 	lsr.w	r3, r2, r3
 800c97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c97c:	e01e      	b.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c97e:	4b63      	ldr	r3, [pc, #396]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c98a:	d106      	bne.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c98e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c992:	d102      	bne.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c994:	4b5f      	ldr	r3, [pc, #380]	@ (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c998:	e010      	b.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c99a:	4b5c      	ldr	r3, [pc, #368]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9a6:	d106      	bne.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9ae:	d102      	bne.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9b0:	4b59      	ldr	r3, [pc, #356]	@ (800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9b4:	e002      	b.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c9ba:	e386      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9bc:	e385      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9be:	4b57      	ldr	r3, [pc, #348]	@ (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c2:	e382      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c8:	e37f      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c9ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ce:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c9d2:	430b      	orrs	r3, r1
 800c9d4:	f040 80a7 	bne.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c9d8:	4b4c      	ldr	r3, [pc, #304]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c9e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c9e8:	d055      	beq.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c9f0:	f200 8096 	bhi.w	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c9fa:	f000 8084 	beq.w	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ca04:	f200 808c 	bhi.w	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca0e:	d030      	beq.n	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ca10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca16:	f200 8083 	bhi.w	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d004      	beq.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ca20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ca26:	d012      	beq.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ca28:	e07a      	b.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca2a:	4b38      	ldr	r3, [pc, #224]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca36:	d107      	bne.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 fe0b 	bl	800d658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca46:	e340      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca4c:	e33d      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca4e:	4b2f      	ldr	r3, [pc, #188]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca5a:	d107      	bne.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca5c:	f107 0318 	add.w	r3, r7, #24
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 fb51 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca6a:	e32e      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca70:	e32b      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca72:	4b26      	ldr	r3, [pc, #152]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca7e:	d107      	bne.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca80:	f107 030c 	add.w	r3, r7, #12
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 fc93 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca8e:	e31c      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca94:	e319      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca96:	4b1d      	ldr	r3, [pc, #116]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ca9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caa0:	4b1a      	ldr	r3, [pc, #104]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b04      	cmp	r3, #4
 800caaa:	d10c      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800caac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d109      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cab2:	4b16      	ldr	r3, [pc, #88]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	08db      	lsrs	r3, r3, #3
 800cab8:	f003 0303 	and.w	r3, r3, #3
 800cabc:	4a14      	ldr	r2, [pc, #80]	@ (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cabe:	fa22 f303 	lsr.w	r3, r2, r3
 800cac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cac4:	e01e      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cac6:	4b11      	ldr	r3, [pc, #68]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cad2:	d106      	bne.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cada:	d102      	bne.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cadc:	4b0d      	ldr	r3, [pc, #52]	@ (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cae0:	e010      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cae2:	4b0a      	ldr	r3, [pc, #40]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800caea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800caee:	d106      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800caf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800caf6:	d102      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800caf8:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cafc:	e002      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cafe:	2300      	movs	r3, #0
 800cb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb02:	e2e2      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb04:	e2e1      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb06:	4b05      	ldr	r3, [pc, #20]	@ (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cb08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb0a:	e2de      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb0c:	58024400 	.word	0x58024400
 800cb10:	03d09000 	.word	0x03d09000
 800cb14:	003d0900 	.word	0x003d0900
 800cb18:	017d7840 	.word	0x017d7840
 800cb1c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb24:	e2d1      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb2a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cb2e:	430b      	orrs	r3, r1
 800cb30:	f040 809c 	bne.w	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cb34:	4b93      	ldr	r3, [pc, #588]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb38:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cb3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb44:	d054      	beq.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb4c:	f200 808b 	bhi.w	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cb56:	f000 8083 	beq.w	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cb60:	f200 8081 	bhi.w	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb6a:	d02f      	beq.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb72:	d878      	bhi.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d004      	beq.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb80:	d012      	beq.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cb82:	e070      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb84:	4b7f      	ldr	r3, [pc, #508]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb90:	d107      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 fd5e 	bl	800d658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cba0:	e293      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba6:	e290      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cba8:	4b76      	ldr	r3, [pc, #472]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbb4:	d107      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbb6:	f107 0318 	add.w	r3, r7, #24
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 faa4 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbc4:	e281      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbca:	e27e      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbcc:	4b6d      	ldr	r3, [pc, #436]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbd8:	d107      	bne.n	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbda:	f107 030c 	add.w	r3, r7, #12
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fbe6 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbe8:	e26f      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbee:	e26c      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbf0:	4b64      	ldr	r3, [pc, #400]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cbf8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbfa:	4b62      	ldr	r3, [pc, #392]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 0304 	and.w	r3, r3, #4
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d10c      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cc06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d109      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc0c:	4b5d      	ldr	r3, [pc, #372]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	08db      	lsrs	r3, r3, #3
 800cc12:	f003 0303 	and.w	r3, r3, #3
 800cc16:	4a5c      	ldr	r2, [pc, #368]	@ (800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc18:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc1e:	e01e      	b.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc20:	4b58      	ldr	r3, [pc, #352]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc2c:	d106      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc34:	d102      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc36:	4b55      	ldr	r3, [pc, #340]	@ (800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc3a:	e010      	b.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc3c:	4b51      	ldr	r3, [pc, #324]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc48:	d106      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc50:	d102      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc52:	4b4f      	ldr	r3, [pc, #316]	@ (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc56:	e002      	b.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cc5c:	e235      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc5e:	e234      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc60:	4b4c      	ldr	r3, [pc, #304]	@ (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc64:	e231      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc6a:	e22e      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cc6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc70:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800cc74:	430b      	orrs	r3, r1
 800cc76:	f040 808f 	bne.w	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cc7a:	4b42      	ldr	r3, [pc, #264]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc7e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cc82:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800cc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cc8a:	d06b      	beq.n	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cc92:	d874      	bhi.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cc9a:	d056      	beq.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cca2:	d86c      	bhi.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ccaa:	d03b      	beq.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ccac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ccb2:	d864      	bhi.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccba:	d021      	beq.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccc2:	d85c      	bhi.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d004      	beq.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ccca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccd0:	d004      	beq.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ccd2:	e054      	b.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ccd4:	f7fe fa0a 	bl	800b0ec <HAL_RCC_GetPCLK1Freq>
 800ccd8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ccda:	e1f6      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccdc:	4b29      	ldr	r3, [pc, #164]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cce8:	d107      	bne.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccea:	f107 0318 	add.w	r3, r7, #24
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fa0a 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf8:	e1e7      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccfe:	e1e4      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd00:	4b20      	ldr	r3, [pc, #128]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd0c:	d107      	bne.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd0e:	f107 030c 	add.w	r3, r7, #12
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fb4c 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd1c:	e1d5      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd22:	e1d2      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd24:	4b17      	ldr	r3, [pc, #92]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0304 	and.w	r3, r3, #4
 800cd2c:	2b04      	cmp	r3, #4
 800cd2e:	d109      	bne.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd30:	4b14      	ldr	r3, [pc, #80]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	08db      	lsrs	r3, r3, #3
 800cd36:	f003 0303 	and.w	r3, r3, #3
 800cd3a:	4a13      	ldr	r2, [pc, #76]	@ (800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cd3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd42:	e1c2      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd48:	e1bf      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd4a:	4b0e      	ldr	r3, [pc, #56]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd56:	d102      	bne.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cd58:	4b0c      	ldr	r3, [pc, #48]	@ (800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd5c:	e1b5      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd62:	e1b2      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd64:	4b07      	ldr	r3, [pc, #28]	@ (800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd70:	d102      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cd72:	4b07      	ldr	r3, [pc, #28]	@ (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd76:	e1a8      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd7c:	e1a5      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd82:	e1a2      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd84:	58024400 	.word	0x58024400
 800cd88:	03d09000 	.word	0x03d09000
 800cd8c:	003d0900 	.word	0x003d0900
 800cd90:	017d7840 	.word	0x017d7840
 800cd94:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cd98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd9c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cda0:	430b      	orrs	r3, r1
 800cda2:	d173      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cda4:	4b9c      	ldr	r3, [pc, #624]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cda6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cda8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cdac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdb4:	d02f      	beq.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdbc:	d863      	bhi.n	800ce86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d004      	beq.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdca:	d012      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cdcc:	e05b      	b.n	800ce86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdce:	4b92      	ldr	r3, [pc, #584]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cdda:	d107      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cddc:	f107 0318 	add.w	r3, r7, #24
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 f991 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdea:	e16e      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdf0:	e16b      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdf2:	4b89      	ldr	r3, [pc, #548]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cdfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdfe:	d107      	bne.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce00:	f107 030c 	add.w	r3, r7, #12
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fad3 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce0e:	e15c      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce14:	e159      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce16:	4b80      	ldr	r3, [pc, #512]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce20:	4b7d      	ldr	r3, [pc, #500]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b04      	cmp	r3, #4
 800ce2a:	d10c      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ce2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d109      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce32:	4b79      	ldr	r3, [pc, #484]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	08db      	lsrs	r3, r3, #3
 800ce38:	f003 0303 	and.w	r3, r3, #3
 800ce3c:	4a77      	ldr	r2, [pc, #476]	@ (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ce3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce44:	e01e      	b.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce46:	4b74      	ldr	r3, [pc, #464]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce52:	d106      	bne.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ce54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce5a:	d102      	bne.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce5c:	4b70      	ldr	r3, [pc, #448]	@ (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce60:	e010      	b.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce62:	4b6d      	ldr	r3, [pc, #436]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce6e:	d106      	bne.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ce70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce76:	d102      	bne.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce78:	4b6a      	ldr	r3, [pc, #424]	@ (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ce7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce7c:	e002      	b.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ce82:	e122      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce84:	e121      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce8a:	e11e      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ce8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce90:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ce94:	430b      	orrs	r3, r1
 800ce96:	d133      	bne.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ce98:	4b5f      	ldr	r3, [pc, #380]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cea0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d004      	beq.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ceae:	d012      	beq.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ceb0:	e023      	b.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ceb2:	4b59      	ldr	r3, [pc, #356]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ceba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cebe:	d107      	bne.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cec4:	4618      	mov	r0, r3
 800cec6:	f000 fbc7 	bl	800d658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ceca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cece:	e0fc      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ced0:	2300      	movs	r3, #0
 800ced2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ced4:	e0f9      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ced6:	4b50      	ldr	r3, [pc, #320]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cee2:	d107      	bne.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cee4:	f107 0318 	add.w	r3, r7, #24
 800cee8:	4618      	mov	r0, r3
 800ceea:	f000 f90d 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cef2:	e0ea      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef8:	e0e7      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cefe:	e0e4      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cf00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf04:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800cf08:	430b      	orrs	r3, r1
 800cf0a:	f040 808d 	bne.w	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cf0e:	4b42      	ldr	r3, [pc, #264]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf12:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800cf16:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf1e:	d06b      	beq.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf26:	d874      	bhi.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf2e:	d056      	beq.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cf30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf36:	d86c      	bhi.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cf3e:	d03b      	beq.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cf46:	d864      	bhi.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf4e:	d021      	beq.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf56:	d85c      	bhi.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d004      	beq.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf64:	d004      	beq.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cf66:	e054      	b.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cf68:	f000 f8b8 	bl	800d0dc <HAL_RCCEx_GetD3PCLK1Freq>
 800cf6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cf6e:	e0ac      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf70:	4b29      	ldr	r3, [pc, #164]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf7c:	d107      	bne.n	800cf8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf7e:	f107 0318 	add.w	r3, r7, #24
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 f8c0 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf8c:	e09d      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf92:	e09a      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf94:	4b20      	ldr	r3, [pc, #128]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfa0:	d107      	bne.n	800cfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfa2:	f107 030c 	add.w	r3, r7, #12
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 fa02 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb0:	e08b      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfb6:	e088      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cfb8:	4b17      	ldr	r3, [pc, #92]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	d109      	bne.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfc4:	4b14      	ldr	r3, [pc, #80]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	08db      	lsrs	r3, r3, #3
 800cfca:	f003 0303 	and.w	r3, r3, #3
 800cfce:	4a13      	ldr	r2, [pc, #76]	@ (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cfd0:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfd6:	e078      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfdc:	e075      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cfde:	4b0e      	ldr	r3, [pc, #56]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfea:	d102      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cfec:	4b0c      	ldr	r3, [pc, #48]	@ (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cff0:	e06b      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff6:	e068      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cff8:	4b07      	ldr	r3, [pc, #28]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d004:	d102      	bne.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d006:	4b07      	ldr	r3, [pc, #28]	@ (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d00a:	e05e      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d010:	e05b      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d016:	e058      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d018:	58024400 	.word	0x58024400
 800d01c:	03d09000 	.word	0x03d09000
 800d020:	003d0900 	.word	0x003d0900
 800d024:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d02c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d030:	430b      	orrs	r3, r1
 800d032:	d148      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d034:	4b27      	ldr	r3, [pc, #156]	@ (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d038:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d03c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d044:	d02a      	beq.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d04c:	d838      	bhi.n	800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d050:	2b00      	cmp	r3, #0
 800d052:	d004      	beq.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d05a:	d00d      	beq.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d05c:	e030      	b.n	800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d05e:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d06a:	d102      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d06c:	4b1a      	ldr	r3, [pc, #104]	@ (800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d070:	e02b      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d076:	e028      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d078:	4b16      	ldr	r3, [pc, #88]	@ (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d084:	d107      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 fae4 	bl	800d658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d094:	e019      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d09a:	e016      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d09c:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0a8:	d107      	bne.n	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0aa:	f107 0318 	add.w	r3, r7, #24
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 f82a 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0b8:	e007      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0be:	e004      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0c4:	e001      	b.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3740      	adds	r7, #64	@ 0x40
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	58024400 	.word	0x58024400
 800d0d8:	017d7840 	.word	0x017d7840

0800d0dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d0e0:	f7fd ffd4 	bl	800b08c <HAL_RCC_GetHCLKFreq>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	4b06      	ldr	r3, [pc, #24]	@ (800d100 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	091b      	lsrs	r3, r3, #4
 800d0ec:	f003 0307 	and.w	r3, r3, #7
 800d0f0:	4904      	ldr	r1, [pc, #16]	@ (800d104 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d0f2:	5ccb      	ldrb	r3, [r1, r3]
 800d0f4:	f003 031f 	and.w	r3, r3, #31
 800d0f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	58024400 	.word	0x58024400
 800d104:	08018280 	.word	0x08018280

0800d108 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d108:	b480      	push	{r7}
 800d10a:	b089      	sub	sp, #36	@ 0x24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d110:	4ba1      	ldr	r3, [pc, #644]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d114:	f003 0303 	and.w	r3, r3, #3
 800d118:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d11a:	4b9f      	ldr	r3, [pc, #636]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d11e:	0b1b      	lsrs	r3, r3, #12
 800d120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d124:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d126:	4b9c      	ldr	r3, [pc, #624]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d12a:	091b      	lsrs	r3, r3, #4
 800d12c:	f003 0301 	and.w	r3, r3, #1
 800d130:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d132:	4b99      	ldr	r3, [pc, #612]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d136:	08db      	lsrs	r3, r3, #3
 800d138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	fb02 f303 	mul.w	r3, r2, r3
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 8111 	beq.w	800d378 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	2b02      	cmp	r3, #2
 800d15a:	f000 8083 	beq.w	800d264 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b02      	cmp	r3, #2
 800d162:	f200 80a1 	bhi.w	800d2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d003      	beq.n	800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d056      	beq.n	800d220 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d172:	e099      	b.n	800d2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d174:	4b88      	ldr	r3, [pc, #544]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 0320 	and.w	r3, r3, #32
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d02d      	beq.n	800d1dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d180:	4b85      	ldr	r3, [pc, #532]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	08db      	lsrs	r3, r3, #3
 800d186:	f003 0303 	and.w	r3, r3, #3
 800d18a:	4a84      	ldr	r2, [pc, #528]	@ (800d39c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d18c:	fa22 f303 	lsr.w	r3, r2, r3
 800d190:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	ee07 3a90 	vmov	s15, r3
 800d198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1aa:	4b7b      	ldr	r3, [pc, #492]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b2:	ee07 3a90 	vmov	s15, r3
 800d1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d1da:	e087      	b.n	800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	ee07 3a90 	vmov	s15, r3
 800d1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ee:	4b6a      	ldr	r3, [pc, #424]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f6:	ee07 3a90 	vmov	s15, r3
 800d1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d202:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d20e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d21e:	e065      	b.n	800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d232:	4b59      	ldr	r3, [pc, #356]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d23a:	ee07 3a90 	vmov	s15, r3
 800d23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d242:	ed97 6a03 	vldr	s12, [r7, #12]
 800d246:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d262:	e043      	b.n	800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	ee07 3a90 	vmov	s15, r3
 800d26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d3ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d276:	4b48      	ldr	r3, [pc, #288]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d286:	ed97 6a03 	vldr	s12, [r7, #12]
 800d28a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2a6:	e021      	b.n	800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	ee07 3a90 	vmov	s15, r3
 800d2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ba:	4b37      	ldr	r3, [pc, #220]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c2:	ee07 3a90 	vmov	s15, r3
 800d2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d2ec:	4b2a      	ldr	r3, [pc, #168]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f0:	0a5b      	lsrs	r3, r3, #9
 800d2f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2f6:	ee07 3a90 	vmov	s15, r3
 800d2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d302:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d306:	edd7 6a07 	vldr	s13, [r7, #28]
 800d30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d30e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d312:	ee17 2a90 	vmov	r2, s15
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d31a:	4b1f      	ldr	r3, [pc, #124]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d31e:	0c1b      	lsrs	r3, r3, #16
 800d320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d324:	ee07 3a90 	vmov	s15, r3
 800d328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d330:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d334:	edd7 6a07 	vldr	s13, [r7, #28]
 800d338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d340:	ee17 2a90 	vmov	r2, s15
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d348:	4b13      	ldr	r3, [pc, #76]	@ (800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34c:	0e1b      	lsrs	r3, r3, #24
 800d34e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d352:	ee07 3a90 	vmov	s15, r3
 800d356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d362:	edd7 6a07 	vldr	s13, [r7, #28]
 800d366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d36a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d36e:	ee17 2a90 	vmov	r2, s15
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d376:	e008      	b.n	800d38a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	609a      	str	r2, [r3, #8]
}
 800d38a:	bf00      	nop
 800d38c:	3724      	adds	r7, #36	@ 0x24
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	58024400 	.word	0x58024400
 800d39c:	03d09000 	.word	0x03d09000
 800d3a0:	46000000 	.word	0x46000000
 800d3a4:	4c742400 	.word	0x4c742400
 800d3a8:	4a742400 	.word	0x4a742400
 800d3ac:	4bbebc20 	.word	0x4bbebc20

0800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b089      	sub	sp, #36	@ 0x24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3b8:	4ba1      	ldr	r3, [pc, #644]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3bc:	f003 0303 	and.w	r3, r3, #3
 800d3c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d3c2:	4b9f      	ldr	r3, [pc, #636]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c6:	0d1b      	lsrs	r3, r3, #20
 800d3c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d3cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d3ce:	4b9c      	ldr	r3, [pc, #624]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d2:	0a1b      	lsrs	r3, r3, #8
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d3da:	4b99      	ldr	r3, [pc, #612]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3de:	08db      	lsrs	r3, r3, #3
 800d3e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 8111 	beq.w	800d620 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	2b02      	cmp	r3, #2
 800d402:	f000 8083 	beq.w	800d50c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	2b02      	cmp	r3, #2
 800d40a:	f200 80a1 	bhi.w	800d550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d003      	beq.n	800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d056      	beq.n	800d4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d41a:	e099      	b.n	800d550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d41c:	4b88      	ldr	r3, [pc, #544]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0320 	and.w	r3, r3, #32
 800d424:	2b00      	cmp	r3, #0
 800d426:	d02d      	beq.n	800d484 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d428:	4b85      	ldr	r3, [pc, #532]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	08db      	lsrs	r3, r3, #3
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	4a84      	ldr	r2, [pc, #528]	@ (800d644 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d434:	fa22 f303 	lsr.w	r3, r2, r3
 800d438:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	ee07 3a90 	vmov	s15, r3
 800d440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d452:	4b7b      	ldr	r3, [pc, #492]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d462:	ed97 6a03 	vldr	s12, [r7, #12]
 800d466:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d47e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d482:	e087      	b.n	800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	ee07 3a90 	vmov	s15, r3
 800d48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d48e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d64c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d496:	4b6a      	ldr	r3, [pc, #424]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d49e:	ee07 3a90 	vmov	s15, r3
 800d4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4c6:	e065      	b.n	800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4da:	4b59      	ldr	r3, [pc, #356]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d50a:	e043      	b.n	800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	ee07 3a90 	vmov	s15, r3
 800d512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d516:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d51e:	4b48      	ldr	r3, [pc, #288]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d526:	ee07 3a90 	vmov	s15, r3
 800d52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d532:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d54e:	e021      	b.n	800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	ee07 3a90 	vmov	s15, r3
 800d556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d562:	4b37      	ldr	r3, [pc, #220]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d56a:	ee07 3a90 	vmov	s15, r3
 800d56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d572:	ed97 6a03 	vldr	s12, [r7, #12]
 800d576:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d592:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d594:	4b2a      	ldr	r3, [pc, #168]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d598:	0a5b      	lsrs	r3, r3, #9
 800d59a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d59e:	ee07 3a90 	vmov	s15, r3
 800d5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ba:	ee17 2a90 	vmov	r2, s15
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d5c2:	4b1f      	ldr	r3, [pc, #124]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5c6:	0c1b      	lsrs	r3, r3, #16
 800d5c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5cc:	ee07 3a90 	vmov	s15, r3
 800d5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5e8:	ee17 2a90 	vmov	r2, s15
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d5f0:	4b13      	ldr	r3, [pc, #76]	@ (800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5f4:	0e1b      	lsrs	r3, r3, #24
 800d5f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d60a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d60e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d616:	ee17 2a90 	vmov	r2, s15
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d61e:	e008      	b.n	800d632 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	609a      	str	r2, [r3, #8]
}
 800d632:	bf00      	nop
 800d634:	3724      	adds	r7, #36	@ 0x24
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	58024400 	.word	0x58024400
 800d644:	03d09000 	.word	0x03d09000
 800d648:	46000000 	.word	0x46000000
 800d64c:	4c742400 	.word	0x4c742400
 800d650:	4a742400 	.word	0x4a742400
 800d654:	4bbebc20 	.word	0x4bbebc20

0800d658 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d658:	b480      	push	{r7}
 800d65a:	b089      	sub	sp, #36	@ 0x24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d660:	4ba0      	ldr	r3, [pc, #640]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d664:	f003 0303 	and.w	r3, r3, #3
 800d668:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d66a:	4b9e      	ldr	r3, [pc, #632]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d66e:	091b      	lsrs	r3, r3, #4
 800d670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d674:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d676:	4b9b      	ldr	r3, [pc, #620]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d680:	4b98      	ldr	r3, [pc, #608]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d684:	08db      	lsrs	r3, r3, #3
 800d686:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	fb02 f303 	mul.w	r3, r2, r3
 800d690:	ee07 3a90 	vmov	s15, r3
 800d694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d698:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 8111 	beq.w	800d8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	f000 8083 	beq.w	800d7b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	f200 80a1 	bhi.w	800d7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d003      	beq.n	800d6c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d056      	beq.n	800d76e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d6c0:	e099      	b.n	800d7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6c2:	4b88      	ldr	r3, [pc, #544]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 0320 	and.w	r3, r3, #32
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d02d      	beq.n	800d72a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6ce:	4b85      	ldr	r3, [pc, #532]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	08db      	lsrs	r3, r3, #3
 800d6d4:	f003 0303 	and.w	r3, r3, #3
 800d6d8:	4a83      	ldr	r2, [pc, #524]	@ (800d8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d6da:	fa22 f303 	lsr.w	r3, r2, r3
 800d6de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	ee07 3a90 	vmov	s15, r3
 800d6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	ee07 3a90 	vmov	s15, r3
 800d6f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6f8:	4b7a      	ldr	r3, [pc, #488]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d700:	ee07 3a90 	vmov	s15, r3
 800d704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d708:	ed97 6a03 	vldr	s12, [r7, #12]
 800d70c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d724:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d728:	e087      	b.n	800d83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	ee07 3a90 	vmov	s15, r3
 800d730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d734:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d73c:	4b69      	ldr	r3, [pc, #420]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d744:	ee07 3a90 	vmov	s15, r3
 800d748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d74c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d750:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d75c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d76c:	e065      	b.n	800d83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	ee07 3a90 	vmov	s15, r3
 800d774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d778:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d780:	4b58      	ldr	r3, [pc, #352]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d788:	ee07 3a90 	vmov	s15, r3
 800d78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d790:	ed97 6a03 	vldr	s12, [r7, #12]
 800d794:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7b0:	e043      	b.n	800d83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	ee07 3a90 	vmov	s15, r3
 800d7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d8f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c4:	4b47      	ldr	r3, [pc, #284]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7cc:	ee07 3a90 	vmov	s15, r3
 800d7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7f4:	e021      	b.n	800d83a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	ee07 3a90 	vmov	s15, r3
 800d7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d800:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d808:	4b36      	ldr	r3, [pc, #216]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d810:	ee07 3a90 	vmov	s15, r3
 800d814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d818:	ed97 6a03 	vldr	s12, [r7, #12]
 800d81c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d8ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d838:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d83a:	4b2a      	ldr	r3, [pc, #168]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d83e:	0a5b      	lsrs	r3, r3, #9
 800d840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d844:	ee07 3a90 	vmov	s15, r3
 800d848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d84c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d850:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d854:	edd7 6a07 	vldr	s13, [r7, #28]
 800d858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d860:	ee17 2a90 	vmov	r2, s15
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d868:	4b1e      	ldr	r3, [pc, #120]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d86c:	0c1b      	lsrs	r3, r3, #16
 800d86e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d872:	ee07 3a90 	vmov	s15, r3
 800d876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d87a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d87e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d882:	edd7 6a07 	vldr	s13, [r7, #28]
 800d886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d88e:	ee17 2a90 	vmov	r2, s15
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d896:	4b13      	ldr	r3, [pc, #76]	@ (800d8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d89a:	0e1b      	lsrs	r3, r3, #24
 800d89c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8a0:	ee07 3a90 	vmov	s15, r3
 800d8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d8ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8bc:	ee17 2a90 	vmov	r2, s15
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d8c4:	e008      	b.n	800d8d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	609a      	str	r2, [r3, #8]
}
 800d8d8:	bf00      	nop
 800d8da:	3724      	adds	r7, #36	@ 0x24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	58024400 	.word	0x58024400
 800d8e8:	03d09000 	.word	0x03d09000
 800d8ec:	46000000 	.word	0x46000000
 800d8f0:	4c742400 	.word	0x4c742400
 800d8f4:	4a742400 	.word	0x4a742400
 800d8f8:	4bbebc20 	.word	0x4bbebc20

0800d8fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d90a:	4b53      	ldr	r3, [pc, #332]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d90e:	f003 0303 	and.w	r3, r3, #3
 800d912:	2b03      	cmp	r3, #3
 800d914:	d101      	bne.n	800d91a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d916:	2301      	movs	r3, #1
 800d918:	e099      	b.n	800da4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d91a:	4b4f      	ldr	r3, [pc, #316]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a4e      	ldr	r2, [pc, #312]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d920:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d926:	f7f6 ff29 	bl	800477c <HAL_GetTick>
 800d92a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d92c:	e008      	b.n	800d940 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d92e:	f7f6 ff25 	bl	800477c <HAL_GetTick>
 800d932:	4602      	mov	r2, r0
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	1ad3      	subs	r3, r2, r3
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d901      	bls.n	800d940 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d93c:	2303      	movs	r3, #3
 800d93e:	e086      	b.n	800da4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d940:	4b45      	ldr	r3, [pc, #276]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1f0      	bne.n	800d92e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d94c:	4b42      	ldr	r3, [pc, #264]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d950:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	031b      	lsls	r3, r3, #12
 800d95a:	493f      	ldr	r1, [pc, #252]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	3b01      	subs	r3, #1
 800d966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	3b01      	subs	r3, #1
 800d970:	025b      	lsls	r3, r3, #9
 800d972:	b29b      	uxth	r3, r3
 800d974:	431a      	orrs	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	3b01      	subs	r3, #1
 800d97c:	041b      	lsls	r3, r3, #16
 800d97e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d982:	431a      	orrs	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	3b01      	subs	r3, #1
 800d98a:	061b      	lsls	r3, r3, #24
 800d98c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d990:	4931      	ldr	r1, [pc, #196]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d992:	4313      	orrs	r3, r2
 800d994:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d996:	4b30      	ldr	r3, [pc, #192]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d99a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	695b      	ldr	r3, [r3, #20]
 800d9a2:	492d      	ldr	r1, [pc, #180]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d9a8:	4b2b      	ldr	r3, [pc, #172]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ac:	f023 0220 	bic.w	r2, r3, #32
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	699b      	ldr	r3, [r3, #24]
 800d9b4:	4928      	ldr	r1, [pc, #160]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d9ba:	4b27      	ldr	r3, [pc, #156]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9be:	4a26      	ldr	r2, [pc, #152]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9c0:	f023 0310 	bic.w	r3, r3, #16
 800d9c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d9c6:	4b24      	ldr	r3, [pc, #144]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9ca:	4b24      	ldr	r3, [pc, #144]	@ (800da5c <RCCEx_PLL2_Config+0x160>)
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	69d2      	ldr	r2, [r2, #28]
 800d9d2:	00d2      	lsls	r2, r2, #3
 800d9d4:	4920      	ldr	r1, [pc, #128]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d9da:	4b1f      	ldr	r3, [pc, #124]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9de:	4a1e      	ldr	r2, [pc, #120]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9e0:	f043 0310 	orr.w	r3, r3, #16
 800d9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d106      	bne.n	800d9fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d9ec:	4b1a      	ldr	r3, [pc, #104]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f0:	4a19      	ldr	r2, [pc, #100]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800d9f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d9f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d9f8:	e00f      	b.n	800da1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d106      	bne.n	800da0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800da00:	4b15      	ldr	r3, [pc, #84]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800da02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da04:	4a14      	ldr	r2, [pc, #80]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800da06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800da0c:	e005      	b.n	800da1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800da0e:	4b12      	ldr	r3, [pc, #72]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800da10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da12:	4a11      	ldr	r2, [pc, #68]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800da14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800da18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800da1a:	4b0f      	ldr	r3, [pc, #60]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a0e      	ldr	r2, [pc, #56]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800da20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800da24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da26:	f7f6 fea9 	bl	800477c <HAL_GetTick>
 800da2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da2c:	e008      	b.n	800da40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da2e:	f7f6 fea5 	bl	800477c <HAL_GetTick>
 800da32:	4602      	mov	r2, r0
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d901      	bls.n	800da40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da3c:	2303      	movs	r3, #3
 800da3e:	e006      	b.n	800da4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da40:	4b05      	ldr	r3, [pc, #20]	@ (800da58 <RCCEx_PLL2_Config+0x15c>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d0f0      	beq.n	800da2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	58024400 	.word	0x58024400
 800da5c:	ffff0007 	.word	0xffff0007

0800da60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800da6e:	4b53      	ldr	r3, [pc, #332]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800da70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da72:	f003 0303 	and.w	r3, r3, #3
 800da76:	2b03      	cmp	r3, #3
 800da78:	d101      	bne.n	800da7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	e099      	b.n	800dbb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800da7e:	4b4f      	ldr	r3, [pc, #316]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a4e      	ldr	r2, [pc, #312]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800da84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da8a:	f7f6 fe77 	bl	800477c <HAL_GetTick>
 800da8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da90:	e008      	b.n	800daa4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da92:	f7f6 fe73 	bl	800477c <HAL_GetTick>
 800da96:	4602      	mov	r2, r0
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	d901      	bls.n	800daa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e086      	b.n	800dbb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800daa4:	4b45      	ldr	r3, [pc, #276]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1f0      	bne.n	800da92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dab0:	4b42      	ldr	r3, [pc, #264]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800dab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dab4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	051b      	lsls	r3, r3, #20
 800dabe:	493f      	ldr	r1, [pc, #252]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800dac0:	4313      	orrs	r3, r2
 800dac2:	628b      	str	r3, [r1, #40]	@ 0x28
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	3b01      	subs	r3, #1
 800daca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	3b01      	subs	r3, #1
 800dad4:	025b      	lsls	r3, r3, #9
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	431a      	orrs	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	3b01      	subs	r3, #1
 800dae0:	041b      	lsls	r3, r3, #16
 800dae2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dae6:	431a      	orrs	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	3b01      	subs	r3, #1
 800daee:	061b      	lsls	r3, r3, #24
 800daf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800daf4:	4931      	ldr	r1, [pc, #196]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800daf6:	4313      	orrs	r3, r2
 800daf8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dafa:	4b30      	ldr	r3, [pc, #192]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800dafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dafe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	492d      	ldr	r1, [pc, #180]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db08:	4313      	orrs	r3, r2
 800db0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800db0c:	4b2b      	ldr	r3, [pc, #172]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	4928      	ldr	r1, [pc, #160]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db1a:	4313      	orrs	r3, r2
 800db1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800db1e:	4b27      	ldr	r3, [pc, #156]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db22:	4a26      	ldr	r2, [pc, #152]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800db2a:	4b24      	ldr	r3, [pc, #144]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db2e:	4b24      	ldr	r3, [pc, #144]	@ (800dbc0 <RCCEx_PLL3_Config+0x160>)
 800db30:	4013      	ands	r3, r2
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	69d2      	ldr	r2, [r2, #28]
 800db36:	00d2      	lsls	r2, r2, #3
 800db38:	4920      	ldr	r1, [pc, #128]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db3a:	4313      	orrs	r3, r2
 800db3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800db3e:	4b1f      	ldr	r3, [pc, #124]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db42:	4a1e      	ldr	r2, [pc, #120]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d106      	bne.n	800db5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800db50:	4b1a      	ldr	r3, [pc, #104]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db54:	4a19      	ldr	r2, [pc, #100]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800db5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800db5c:	e00f      	b.n	800db7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2b01      	cmp	r3, #1
 800db62:	d106      	bne.n	800db72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800db64:	4b15      	ldr	r3, [pc, #84]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db68:	4a14      	ldr	r2, [pc, #80]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800db6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800db70:	e005      	b.n	800db7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800db72:	4b12      	ldr	r3, [pc, #72]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db76:	4a11      	ldr	r2, [pc, #68]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800db7e:	4b0f      	ldr	r3, [pc, #60]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a0e      	ldr	r2, [pc, #56]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800db84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db8a:	f7f6 fdf7 	bl	800477c <HAL_GetTick>
 800db8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db90:	e008      	b.n	800dba4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db92:	f7f6 fdf3 	bl	800477c <HAL_GetTick>
 800db96:	4602      	mov	r2, r0
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d901      	bls.n	800dba4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dba0:	2303      	movs	r3, #3
 800dba2:	e006      	b.n	800dbb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dba4:	4b05      	ldr	r3, [pc, #20]	@ (800dbbc <RCCEx_PLL3_Config+0x15c>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d0f0      	beq.n	800db92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	58024400 	.word	0x58024400
 800dbc0:	ffff0007 	.word	0xffff0007

0800dbc4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e10f      	b.n	800ddf6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a87      	ldr	r2, [pc, #540]	@ (800de00 <HAL_SPI_Init+0x23c>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d00f      	beq.n	800dc06 <HAL_SPI_Init+0x42>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a86      	ldr	r2, [pc, #536]	@ (800de04 <HAL_SPI_Init+0x240>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d00a      	beq.n	800dc06 <HAL_SPI_Init+0x42>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a84      	ldr	r2, [pc, #528]	@ (800de08 <HAL_SPI_Init+0x244>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d005      	beq.n	800dc06 <HAL_SPI_Init+0x42>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	2b0f      	cmp	r3, #15
 800dc00:	d901      	bls.n	800dc06 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e0f7      	b.n	800ddf6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fd08 	bl	800e61c <SPI_GetPacketSize>
 800dc0c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a7b      	ldr	r2, [pc, #492]	@ (800de00 <HAL_SPI_Init+0x23c>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d00c      	beq.n	800dc32 <HAL_SPI_Init+0x6e>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a79      	ldr	r2, [pc, #484]	@ (800de04 <HAL_SPI_Init+0x240>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d007      	beq.n	800dc32 <HAL_SPI_Init+0x6e>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a78      	ldr	r2, [pc, #480]	@ (800de08 <HAL_SPI_Init+0x244>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d002      	beq.n	800dc32 <HAL_SPI_Init+0x6e>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b08      	cmp	r3, #8
 800dc30:	d811      	bhi.n	800dc56 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dc36:	4a72      	ldr	r2, [pc, #456]	@ (800de00 <HAL_SPI_Init+0x23c>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d009      	beq.n	800dc50 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a70      	ldr	r2, [pc, #448]	@ (800de04 <HAL_SPI_Init+0x240>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d004      	beq.n	800dc50 <HAL_SPI_Init+0x8c>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a6f      	ldr	r2, [pc, #444]	@ (800de08 <HAL_SPI_Init+0x244>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d104      	bne.n	800dc5a <HAL_SPI_Init+0x96>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2b10      	cmp	r3, #16
 800dc54:	d901      	bls.n	800dc5a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e0cd      	b.n	800ddf6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d106      	bne.n	800dc74 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7f4 faa2 	bl	80021b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2202      	movs	r2, #2
 800dc78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f022 0201 	bic.w	r2, r2, #1
 800dc8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800dc96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dca0:	d119      	bne.n	800dcd6 <HAL_SPI_Init+0x112>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dcaa:	d103      	bne.n	800dcb4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d008      	beq.n	800dcc6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10c      	bne.n	800dcd6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dcc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcc4:	d107      	bne.n	800dcd6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dcd4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00f      	beq.n	800dd02 <HAL_SPI_Init+0x13e>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	2b06      	cmp	r3, #6
 800dce8:	d90b      	bls.n	800dd02 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	430a      	orrs	r2, r1
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	e007      	b.n	800dd12 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dd10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	69da      	ldr	r2, [r3, #28]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	431a      	orrs	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd24:	ea42 0103 	orr.w	r1, r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	430a      	orrs	r2, r1
 800dd32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd3c:	431a      	orrs	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd42:	431a      	orrs	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	699b      	ldr	r3, [r3, #24]
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
 800dd4e:	431a      	orrs	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	695b      	ldr	r3, [r3, #20]
 800dd54:	431a      	orrs	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a1b      	ldr	r3, [r3, #32]
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	431a      	orrs	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd66:	431a      	orrs	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	431a      	orrs	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd72:	ea42 0103 	orr.w	r1, r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	430a      	orrs	r2, r1
 800dd80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d113      	bne.n	800ddb2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ddb0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f022 0201 	bic.w	r2, r2, #1
 800ddc0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00a      	beq.n	800dde4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	430a      	orrs	r2, r1
 800dde2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	40013000 	.word	0x40013000
 800de04:	40003800 	.word	0x40003800
 800de08:	40003c00 	.word	0x40003c00

0800de0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b08e      	sub	sp, #56	@ 0x38
 800de10:	af02      	add	r7, sp, #8
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3320      	adds	r3, #32
 800de20:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3330      	adds	r3, #48	@ 0x30
 800de28:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de2e:	095b      	lsrs	r3, r3, #5
 800de30:	b29b      	uxth	r3, r3
 800de32:	3301      	adds	r3, #1
 800de34:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de36:	f7f6 fca1 	bl	800477c <HAL_GetTick>
 800de3a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800de3c:	887b      	ldrh	r3, [r7, #2]
 800de3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800de40:	887b      	ldrh	r3, [r7, #2]
 800de42:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d001      	beq.n	800de54 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800de50:	2302      	movs	r3, #2
 800de52:	e310      	b.n	800e476 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d005      	beq.n	800de66 <HAL_SPI_TransmitReceive+0x5a>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <HAL_SPI_TransmitReceive+0x5a>
 800de60:	887b      	ldrh	r3, [r7, #2]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d101      	bne.n	800de6a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	e305      	b.n	800e476 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800de70:	2b01      	cmp	r3, #1
 800de72:	d101      	bne.n	800de78 <HAL_SPI_TransmitReceive+0x6c>
 800de74:	2302      	movs	r3, #2
 800de76:	e2fe      	b.n	800e476 <HAL_SPI_TransmitReceive+0x66a>
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2205      	movs	r2, #5
 800de84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2200      	movs	r2, #0
 800de8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	887a      	ldrh	r2, [r7, #2]
 800de9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	887a      	ldrh	r2, [r7, #2]
 800dea2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	887a      	ldrh	r2, [r7, #2]
 800deb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	887a      	ldrh	r2, [r7, #2]
 800deb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800ded6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a70      	ldr	r2, [pc, #448]	@ (800e0a0 <HAL_SPI_TransmitReceive+0x294>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d009      	beq.n	800def6 <HAL_SPI_TransmitReceive+0xea>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a6f      	ldr	r2, [pc, #444]	@ (800e0a4 <HAL_SPI_TransmitReceive+0x298>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d004      	beq.n	800def6 <HAL_SPI_TransmitReceive+0xea>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a6d      	ldr	r2, [pc, #436]	@ (800e0a8 <HAL_SPI_TransmitReceive+0x29c>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d102      	bne.n	800defc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800def6:	2310      	movs	r3, #16
 800def8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800defa:	e001      	b.n	800df00 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800defc:	2308      	movs	r3, #8
 800defe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	4b69      	ldr	r3, [pc, #420]	@ (800e0ac <HAL_SPI_TransmitReceive+0x2a0>)
 800df08:	4013      	ands	r3, r2
 800df0a:	8879      	ldrh	r1, [r7, #2]
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	6812      	ldr	r2, [r2, #0]
 800df10:	430b      	orrs	r3, r1
 800df12:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f042 0201 	orr.w	r2, r2, #1
 800df22:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800df2c:	d107      	bne.n	800df3e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	2b0f      	cmp	r3, #15
 800df44:	f240 80a2 	bls.w	800e08c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800df48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4a:	089b      	lsrs	r3, r3, #2
 800df4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df4e:	e094      	b.n	800e07a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	f003 0302 	and.w	r3, r3, #2
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d120      	bne.n	800dfa0 <HAL_SPI_TransmitReceive+0x194>
 800df5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800df60:	2b00      	cmp	r3, #0
 800df62:	d01d      	beq.n	800dfa0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800df64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800df66:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800df68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d217      	bcs.n	800dfa0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6812      	ldr	r2, [r2, #0]
 800df7a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df80:	1d1a      	adds	r2, r3, #4
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	3b01      	subs	r3, #1
 800df90:	b29a      	uxth	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	695b      	ldr	r3, [r3, #20]
 800dfa6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800dfa8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d065      	beq.n	800e07a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	695b      	ldr	r3, [r3, #20]
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d118      	bne.n	800dfee <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800dfc6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfcc:	1d1a      	adds	r2, r3, #4
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dfea:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dfec:	e045      	b.n	800e07a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dfee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dff0:	8bfb      	ldrh	r3, [r7, #30]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d21d      	bcs.n	800e032 <HAL_SPI_TransmitReceive+0x226>
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d018      	beq.n	800e032 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e008:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e00a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e010:	1d1a      	adds	r2, r3, #4
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	3b01      	subs	r3, #1
 800e020:	b29a      	uxth	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e02e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e030:	e023      	b.n	800e07a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e032:	f7f6 fba3 	bl	800477c <HAL_GetTick>
 800e036:	4602      	mov	r2, r0
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e03e:	429a      	cmp	r2, r3
 800e040:	d803      	bhi.n	800e04a <HAL_SPI_TransmitReceive+0x23e>
 800e042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e048:	d102      	bne.n	800e050 <HAL_SPI_TransmitReceive+0x244>
 800e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d114      	bne.n	800e07a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 fa15 	bl	800e480 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e05c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e076:	2303      	movs	r3, #3
 800e078:	e1fd      	b.n	800e476 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e07a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f47f af67 	bne.w	800df50 <HAL_SPI_TransmitReceive+0x144>
 800e082:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e084:	2b00      	cmp	r3, #0
 800e086:	f47f af63 	bne.w	800df50 <HAL_SPI_TransmitReceive+0x144>
 800e08a:	e1ce      	b.n	800e42a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	2b07      	cmp	r3, #7
 800e092:	f240 81c2 	bls.w	800e41a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800e096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e098:	085b      	lsrs	r3, r3, #1
 800e09a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e09c:	e0c9      	b.n	800e232 <HAL_SPI_TransmitReceive+0x426>
 800e09e:	bf00      	nop
 800e0a0:	40013000 	.word	0x40013000
 800e0a4:	40003800 	.word	0x40003800
 800e0a8:	40003c00 	.word	0x40003c00
 800e0ac:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	695b      	ldr	r3, [r3, #20]
 800e0b6:	f003 0302 	and.w	r3, r3, #2
 800e0ba:	2b02      	cmp	r3, #2
 800e0bc:	d11f      	bne.n	800e0fe <HAL_SPI_TransmitReceive+0x2f2>
 800e0be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d01c      	beq.n	800e0fe <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e0c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e0c6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d216      	bcs.n	800e0fe <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0d4:	881a      	ldrh	r2, [r3, #0]
 800e0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0de:	1c9a      	adds	r2, r3, #2
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e0fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e106:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 8092 	beq.w	800e232 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	695b      	ldr	r3, [r3, #20]
 800e114:	f003 0301 	and.w	r3, r3, #1
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d118      	bne.n	800e14e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e120:	6a3a      	ldr	r2, [r7, #32]
 800e122:	8812      	ldrh	r2, [r2, #0]
 800e124:	b292      	uxth	r2, r2
 800e126:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e12c:	1c9a      	adds	r2, r3, #2
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e138:	b29b      	uxth	r3, r3
 800e13a:	3b01      	subs	r3, #1
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e14a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e14c:	e071      	b.n	800e232 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e14e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e150:	8bfb      	ldrh	r3, [r7, #30]
 800e152:	429a      	cmp	r2, r3
 800e154:	d228      	bcs.n	800e1a8 <HAL_SPI_TransmitReceive+0x39c>
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d023      	beq.n	800e1a8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e164:	6a3a      	ldr	r2, [r7, #32]
 800e166:	8812      	ldrh	r2, [r2, #0]
 800e168:	b292      	uxth	r2, r2
 800e16a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e170:	1c9a      	adds	r2, r3, #2
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e17a:	6a3a      	ldr	r2, [r7, #32]
 800e17c:	8812      	ldrh	r2, [r2, #0]
 800e17e:	b292      	uxth	r2, r2
 800e180:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e186:	1c9a      	adds	r2, r3, #2
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e192:	b29b      	uxth	r3, r3
 800e194:	3b02      	subs	r3, #2
 800e196:	b29a      	uxth	r2, r3
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1a4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e1a6:	e044      	b.n	800e232 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e1a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d11d      	bne.n	800e1ea <HAL_SPI_TransmitReceive+0x3de>
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d018      	beq.n	800e1ea <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1bc:	6a3a      	ldr	r2, [r7, #32]
 800e1be:	8812      	ldrh	r2, [r2, #0]
 800e1c0:	b292      	uxth	r2, r2
 800e1c2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1c8:	1c9a      	adds	r2, r3, #2
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e1e8:	e023      	b.n	800e232 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1ea:	f7f6 fac7 	bl	800477c <HAL_GetTick>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d803      	bhi.n	800e202 <HAL_SPI_TransmitReceive+0x3f6>
 800e1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e200:	d102      	bne.n	800e208 <HAL_SPI_TransmitReceive+0x3fc>
 800e202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e204:	2b00      	cmp	r3, #0
 800e206:	d114      	bne.n	800e232 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f000 f939 	bl	800e480 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e214:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e22e:	2303      	movs	r3, #3
 800e230:	e121      	b.n	800e476 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e232:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e234:	2b00      	cmp	r3, #0
 800e236:	f47f af3b 	bne.w	800e0b0 <HAL_SPI_TransmitReceive+0x2a4>
 800e23a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f47f af37 	bne.w	800e0b0 <HAL_SPI_TransmitReceive+0x2a4>
 800e242:	e0f2      	b.n	800e42a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	695b      	ldr	r3, [r3, #20]
 800e24a:	f003 0302 	and.w	r3, r3, #2
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d121      	bne.n	800e296 <HAL_SPI_TransmitReceive+0x48a>
 800e252:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e254:	2b00      	cmp	r3, #0
 800e256:	d01e      	beq.n	800e296 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e258:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e25a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e260:	429a      	cmp	r2, r3
 800e262:	d218      	bcs.n	800e296 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3320      	adds	r3, #32
 800e26e:	7812      	ldrb	r2, [r2, #0]
 800e270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e276:	1c5a      	adds	r2, r3, #1
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e282:	b29b      	uxth	r3, r3
 800e284:	3b01      	subs	r3, #1
 800e286:	b29a      	uxth	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e294:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	695b      	ldr	r3, [r3, #20]
 800e29c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e29e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80ba 	beq.w	800e41a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	695b      	ldr	r3, [r3, #20]
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d11b      	bne.n	800e2ec <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	b2d2      	uxtb	r2, r2
 800e2c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e2ea:	e096      	b.n	800e41a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e2ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e2ee:	8bfb      	ldrh	r3, [r7, #30]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d24a      	bcs.n	800e38a <HAL_SPI_TransmitReceive+0x57e>
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d045      	beq.n	800e38a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e30a:	7812      	ldrb	r2, [r2, #0]
 800e30c:	b2d2      	uxtb	r2, r2
 800e30e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e326:	7812      	ldrb	r2, [r2, #0]
 800e328:	b2d2      	uxtb	r2, r2
 800e32a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e342:	7812      	ldrb	r2, [r2, #0]
 800e344:	b2d2      	uxtb	r2, r2
 800e346:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e35e:	7812      	ldrb	r2, [r2, #0]
 800e360:	b2d2      	uxtb	r2, r2
 800e362:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e368:	1c5a      	adds	r2, r3, #1
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e374:	b29b      	uxth	r3, r3
 800e376:	3b04      	subs	r3, #4
 800e378:	b29a      	uxth	r2, r3
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e386:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e388:	e047      	b.n	800e41a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e38a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e38c:	2b03      	cmp	r3, #3
 800e38e:	d820      	bhi.n	800e3d2 <HAL_SPI_TransmitReceive+0x5c6>
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800e396:	2b00      	cmp	r3, #0
 800e398:	d01b      	beq.n	800e3d2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3a6:	7812      	ldrb	r2, [r2, #0]
 800e3a8:	b2d2      	uxtb	r2, r2
 800e3aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e3d0:	e023      	b.n	800e41a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3d2:	f7f6 f9d3 	bl	800477c <HAL_GetTick>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d803      	bhi.n	800e3ea <HAL_SPI_TransmitReceive+0x5de>
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e8:	d102      	bne.n	800e3f0 <HAL_SPI_TransmitReceive+0x5e4>
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d114      	bne.n	800e41a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 f845 	bl	800e480 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2201      	movs	r2, #1
 800e40a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e416:	2303      	movs	r3, #3
 800e418:	e02d      	b.n	800e476 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e41a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f47f af11 	bne.w	800e244 <HAL_SPI_TransmitReceive+0x438>
 800e422:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e424:	2b00      	cmp	r3, #0
 800e426:	f47f af0d 	bne.w	800e244 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e430:	2200      	movs	r2, #0
 800e432:	2108      	movs	r1, #8
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f000 f8c3 	bl	800e5c0 <SPI_WaitOnFlagUntilTimeout>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d007      	beq.n	800e450 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e446:	f043 0220 	orr.w	r2, r3, #32
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 f815 	bl	800e480 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2201      	movs	r2, #1
 800e45a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2200      	movs	r2, #0
 800e462:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	e000      	b.n	800e476 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800e474:	2300      	movs	r3, #0
  }
}
 800e476:	4618      	mov	r0, r3
 800e478:	3730      	adds	r7, #48	@ 0x30
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop

0800e480 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	699a      	ldr	r2, [r3, #24]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f042 0208 	orr.w	r2, r2, #8
 800e49e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f042 0210 	orr.w	r2, r2, #16
 800e4ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f022 0201 	bic.w	r2, r2, #1
 800e4be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6919      	ldr	r1, [r3, #16]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	4b3c      	ldr	r3, [pc, #240]	@ (800e5bc <SPI_CloseTransfer+0x13c>)
 800e4cc:	400b      	ands	r3, r1
 800e4ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	689a      	ldr	r2, [r3, #8]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e4de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	2b04      	cmp	r3, #4
 800e4ea:	d014      	beq.n	800e516 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f003 0320 	and.w	r3, r3, #32
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00f      	beq.n	800e516 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	699a      	ldr	r2, [r3, #24]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f042 0220 	orr.w	r2, r2, #32
 800e514:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	2b03      	cmp	r3, #3
 800e520:	d014      	beq.n	800e54c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00f      	beq.n	800e54c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e532:	f043 0204 	orr.w	r2, r3, #4
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	699a      	ldr	r2, [r3, #24]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e54a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00f      	beq.n	800e576 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e55c:	f043 0201 	orr.w	r2, r3, #1
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	699a      	ldr	r2, [r3, #24]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e574:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00f      	beq.n	800e5a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e586:	f043 0208 	orr.w	r2, r3, #8
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	699a      	ldr	r2, [r3, #24]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e59e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e5b0:	bf00      	nop
 800e5b2:	3714      	adds	r7, #20
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	fffffc90 	.word	0xfffffc90

0800e5c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	603b      	str	r3, [r7, #0]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e5d0:	e010      	b.n	800e5f4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5d2:	f7f6 f8d3 	bl	800477c <HAL_GetTick>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	683a      	ldr	r2, [r7, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d803      	bhi.n	800e5ea <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e8:	d102      	bne.n	800e5f0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d101      	bne.n	800e5f4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e5f0:	2303      	movs	r3, #3
 800e5f2:	e00f      	b.n	800e614 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	695a      	ldr	r2, [r3, #20]
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	429a      	cmp	r2, r3
 800e602:	bf0c      	ite	eq
 800e604:	2301      	moveq	r3, #1
 800e606:	2300      	movne	r3, #0
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	461a      	mov	r2, r3
 800e60c:	79fb      	ldrb	r3, [r7, #7]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d0df      	beq.n	800e5d2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e628:	095b      	lsrs	r3, r3, #5
 800e62a:	3301      	adds	r3, #1
 800e62c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	3301      	adds	r3, #1
 800e634:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	3307      	adds	r3, #7
 800e63a:	08db      	lsrs	r3, r3, #3
 800e63c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	fb02 f303 	mul.w	r3, r2, r3
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b082      	sub	sp, #8
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e049      	b.n	800e6f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d106      	bne.n	800e67e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7f4 fbbd 	bl	8002df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2202      	movs	r2, #2
 800e682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3304      	adds	r3, #4
 800e68e:	4619      	mov	r1, r3
 800e690:	4610      	mov	r0, r2
 800e692:	f000 febb 	bl	800f40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	2b01      	cmp	r3, #1
 800e712:	d001      	beq.n	800e718 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	e04c      	b.n	800e7b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2202      	movs	r2, #2
 800e71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a26      	ldr	r2, [pc, #152]	@ (800e7c0 <HAL_TIM_Base_Start+0xc0>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d022      	beq.n	800e770 <HAL_TIM_Base_Start+0x70>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e732:	d01d      	beq.n	800e770 <HAL_TIM_Base_Start+0x70>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a22      	ldr	r2, [pc, #136]	@ (800e7c4 <HAL_TIM_Base_Start+0xc4>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d018      	beq.n	800e770 <HAL_TIM_Base_Start+0x70>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a21      	ldr	r2, [pc, #132]	@ (800e7c8 <HAL_TIM_Base_Start+0xc8>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d013      	beq.n	800e770 <HAL_TIM_Base_Start+0x70>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a1f      	ldr	r2, [pc, #124]	@ (800e7cc <HAL_TIM_Base_Start+0xcc>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d00e      	beq.n	800e770 <HAL_TIM_Base_Start+0x70>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a1e      	ldr	r2, [pc, #120]	@ (800e7d0 <HAL_TIM_Base_Start+0xd0>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d009      	beq.n	800e770 <HAL_TIM_Base_Start+0x70>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a1c      	ldr	r2, [pc, #112]	@ (800e7d4 <HAL_TIM_Base_Start+0xd4>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d004      	beq.n	800e770 <HAL_TIM_Base_Start+0x70>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a1b      	ldr	r2, [pc, #108]	@ (800e7d8 <HAL_TIM_Base_Start+0xd8>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d115      	bne.n	800e79c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	689a      	ldr	r2, [r3, #8]
 800e776:	4b19      	ldr	r3, [pc, #100]	@ (800e7dc <HAL_TIM_Base_Start+0xdc>)
 800e778:	4013      	ands	r3, r2
 800e77a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2b06      	cmp	r3, #6
 800e780:	d015      	beq.n	800e7ae <HAL_TIM_Base_Start+0xae>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e788:	d011      	beq.n	800e7ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f042 0201 	orr.w	r2, r2, #1
 800e798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e79a:	e008      	b.n	800e7ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f042 0201 	orr.w	r2, r2, #1
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	e000      	b.n	800e7b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3714      	adds	r7, #20
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	40010000 	.word	0x40010000
 800e7c4:	40000400 	.word	0x40000400
 800e7c8:	40000800 	.word	0x40000800
 800e7cc:	40000c00 	.word	0x40000c00
 800e7d0:	40010400 	.word	0x40010400
 800e7d4:	40001800 	.word	0x40001800
 800e7d8:	40014000 	.word	0x40014000
 800e7dc:	00010007 	.word	0x00010007

0800e7e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d001      	beq.n	800e7f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e054      	b.n	800e8a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2202      	movs	r2, #2
 800e7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68da      	ldr	r2, [r3, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f042 0201 	orr.w	r2, r2, #1
 800e80e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a26      	ldr	r2, [pc, #152]	@ (800e8b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d022      	beq.n	800e860 <HAL_TIM_Base_Start_IT+0x80>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e822:	d01d      	beq.n	800e860 <HAL_TIM_Base_Start_IT+0x80>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a22      	ldr	r2, [pc, #136]	@ (800e8b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d018      	beq.n	800e860 <HAL_TIM_Base_Start_IT+0x80>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a21      	ldr	r2, [pc, #132]	@ (800e8b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d013      	beq.n	800e860 <HAL_TIM_Base_Start_IT+0x80>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a1f      	ldr	r2, [pc, #124]	@ (800e8bc <HAL_TIM_Base_Start_IT+0xdc>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d00e      	beq.n	800e860 <HAL_TIM_Base_Start_IT+0x80>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a1e      	ldr	r2, [pc, #120]	@ (800e8c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d009      	beq.n	800e860 <HAL_TIM_Base_Start_IT+0x80>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a1c      	ldr	r2, [pc, #112]	@ (800e8c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d004      	beq.n	800e860 <HAL_TIM_Base_Start_IT+0x80>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a1b      	ldr	r2, [pc, #108]	@ (800e8c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d115      	bne.n	800e88c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	689a      	ldr	r2, [r3, #8]
 800e866:	4b19      	ldr	r3, [pc, #100]	@ (800e8cc <HAL_TIM_Base_Start_IT+0xec>)
 800e868:	4013      	ands	r3, r2
 800e86a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b06      	cmp	r3, #6
 800e870:	d015      	beq.n	800e89e <HAL_TIM_Base_Start_IT+0xbe>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e878:	d011      	beq.n	800e89e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f042 0201 	orr.w	r2, r2, #1
 800e888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e88a:	e008      	b.n	800e89e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f042 0201 	orr.w	r2, r2, #1
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	e000      	b.n	800e8a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e89e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3714      	adds	r7, #20
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	40010000 	.word	0x40010000
 800e8b4:	40000400 	.word	0x40000400
 800e8b8:	40000800 	.word	0x40000800
 800e8bc:	40000c00 	.word	0x40000c00
 800e8c0:	40010400 	.word	0x40010400
 800e8c4:	40001800 	.word	0x40001800
 800e8c8:	40014000 	.word	0x40014000
 800e8cc:	00010007 	.word	0x00010007

0800e8d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e049      	b.n	800e976 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d106      	bne.n	800e8fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7f4 f98c 	bl	8002c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2202      	movs	r2, #2
 800e900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3304      	adds	r3, #4
 800e90c:	4619      	mov	r1, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	f000 fd7c 	bl	800f40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
	...

0800e980 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b086      	sub	sp, #24
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
 800e98c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800e98e:	2300      	movs	r3, #0
 800e990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d109      	bne.n	800e9ac <HAL_TIM_PWM_Start_DMA+0x2c>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b02      	cmp	r3, #2
 800e9a2:	bf0c      	ite	eq
 800e9a4:	2301      	moveq	r3, #1
 800e9a6:	2300      	movne	r3, #0
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	e03c      	b.n	800ea26 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	2b04      	cmp	r3, #4
 800e9b0:	d109      	bne.n	800e9c6 <HAL_TIM_PWM_Start_DMA+0x46>
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	bf0c      	ite	eq
 800e9be:	2301      	moveq	r3, #1
 800e9c0:	2300      	movne	r3, #0
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	e02f      	b.n	800ea26 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b08      	cmp	r3, #8
 800e9ca:	d109      	bne.n	800e9e0 <HAL_TIM_PWM_Start_DMA+0x60>
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	bf0c      	ite	eq
 800e9d8:	2301      	moveq	r3, #1
 800e9da:	2300      	movne	r3, #0
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	e022      	b.n	800ea26 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	2b0c      	cmp	r3, #12
 800e9e4:	d109      	bne.n	800e9fa <HAL_TIM_PWM_Start_DMA+0x7a>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	bf0c      	ite	eq
 800e9f2:	2301      	moveq	r3, #1
 800e9f4:	2300      	movne	r3, #0
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	e015      	b.n	800ea26 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b10      	cmp	r3, #16
 800e9fe:	d109      	bne.n	800ea14 <HAL_TIM_PWM_Start_DMA+0x94>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	bf0c      	ite	eq
 800ea0c:	2301      	moveq	r3, #1
 800ea0e:	2300      	movne	r3, #0
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	e008      	b.n	800ea26 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	bf0c      	ite	eq
 800ea20:	2301      	moveq	r3, #1
 800ea22:	2300      	movne	r3, #0
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d001      	beq.n	800ea2e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800ea2a:	2302      	movs	r3, #2
 800ea2c:	e1b0      	b.n	800ed90 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d109      	bne.n	800ea48 <HAL_TIM_PWM_Start_DMA+0xc8>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	bf0c      	ite	eq
 800ea40:	2301      	moveq	r3, #1
 800ea42:	2300      	movne	r3, #0
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	e03c      	b.n	800eac2 <HAL_TIM_PWM_Start_DMA+0x142>
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	2b04      	cmp	r3, #4
 800ea4c:	d109      	bne.n	800ea62 <HAL_TIM_PWM_Start_DMA+0xe2>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	bf0c      	ite	eq
 800ea5a:	2301      	moveq	r3, #1
 800ea5c:	2300      	movne	r3, #0
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	e02f      	b.n	800eac2 <HAL_TIM_PWM_Start_DMA+0x142>
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	2b08      	cmp	r3, #8
 800ea66:	d109      	bne.n	800ea7c <HAL_TIM_PWM_Start_DMA+0xfc>
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	bf0c      	ite	eq
 800ea74:	2301      	moveq	r3, #1
 800ea76:	2300      	movne	r3, #0
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	e022      	b.n	800eac2 <HAL_TIM_PWM_Start_DMA+0x142>
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	2b0c      	cmp	r3, #12
 800ea80:	d109      	bne.n	800ea96 <HAL_TIM_PWM_Start_DMA+0x116>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	bf0c      	ite	eq
 800ea8e:	2301      	moveq	r3, #1
 800ea90:	2300      	movne	r3, #0
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	e015      	b.n	800eac2 <HAL_TIM_PWM_Start_DMA+0x142>
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	2b10      	cmp	r3, #16
 800ea9a:	d109      	bne.n	800eab0 <HAL_TIM_PWM_Start_DMA+0x130>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	bf0c      	ite	eq
 800eaa8:	2301      	moveq	r3, #1
 800eaaa:	2300      	movne	r3, #0
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	e008      	b.n	800eac2 <HAL_TIM_PWM_Start_DMA+0x142>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	bf0c      	ite	eq
 800eabc:	2301      	moveq	r3, #1
 800eabe:	2300      	movne	r3, #0
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d034      	beq.n	800eb30 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d002      	beq.n	800ead2 <HAL_TIM_PWM_Start_DMA+0x152>
 800eacc:	887b      	ldrh	r3, [r7, #2]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d101      	bne.n	800ead6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	e15c      	b.n	800ed90 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d104      	bne.n	800eae6 <HAL_TIM_PWM_Start_DMA+0x166>
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2202      	movs	r2, #2
 800eae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eae4:	e026      	b.n	800eb34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b04      	cmp	r3, #4
 800eaea:	d104      	bne.n	800eaf6 <HAL_TIM_PWM_Start_DMA+0x176>
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2202      	movs	r2, #2
 800eaf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eaf4:	e01e      	b.n	800eb34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b08      	cmp	r3, #8
 800eafa:	d104      	bne.n	800eb06 <HAL_TIM_PWM_Start_DMA+0x186>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2202      	movs	r2, #2
 800eb00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb04:	e016      	b.n	800eb34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2b0c      	cmp	r3, #12
 800eb0a:	d104      	bne.n	800eb16 <HAL_TIM_PWM_Start_DMA+0x196>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2202      	movs	r2, #2
 800eb10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eb14:	e00e      	b.n	800eb34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	2b10      	cmp	r3, #16
 800eb1a:	d104      	bne.n	800eb26 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2202      	movs	r2, #2
 800eb20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eb24:	e006      	b.n	800eb34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2202      	movs	r2, #2
 800eb2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eb2e:	e001      	b.n	800eb34 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800eb30:	2301      	movs	r3, #1
 800eb32:	e12d      	b.n	800ed90 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b0c      	cmp	r3, #12
 800eb38:	f200 80ae 	bhi.w	800ec98 <HAL_TIM_PWM_Start_DMA+0x318>
 800eb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800eb44 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800eb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb42:	bf00      	nop
 800eb44:	0800eb79 	.word	0x0800eb79
 800eb48:	0800ec99 	.word	0x0800ec99
 800eb4c:	0800ec99 	.word	0x0800ec99
 800eb50:	0800ec99 	.word	0x0800ec99
 800eb54:	0800ebc1 	.word	0x0800ebc1
 800eb58:	0800ec99 	.word	0x0800ec99
 800eb5c:	0800ec99 	.word	0x0800ec99
 800eb60:	0800ec99 	.word	0x0800ec99
 800eb64:	0800ec09 	.word	0x0800ec09
 800eb68:	0800ec99 	.word	0x0800ec99
 800eb6c:	0800ec99 	.word	0x0800ec99
 800eb70:	0800ec99 	.word	0x0800ec99
 800eb74:	0800ec51 	.word	0x0800ec51
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb7c:	4a86      	ldr	r2, [pc, #536]	@ (800ed98 <HAL_TIM_PWM_Start_DMA+0x418>)
 800eb7e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb84:	4a85      	ldr	r2, [pc, #532]	@ (800ed9c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800eb86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb8c:	4a84      	ldr	r2, [pc, #528]	@ (800eda0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800eb8e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800eb94:	6879      	ldr	r1, [r7, #4]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	3334      	adds	r3, #52	@ 0x34
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	887b      	ldrh	r3, [r7, #2]
 800eba0:	f7f8 f930 	bl	8006e04 <HAL_DMA_Start_IT>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e0f0      	b.n	800ed90 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68da      	ldr	r2, [r3, #12]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ebbc:	60da      	str	r2, [r3, #12]
      break;
 800ebbe:	e06e      	b.n	800ec9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebc4:	4a74      	ldr	r2, [pc, #464]	@ (800ed98 <HAL_TIM_PWM_Start_DMA+0x418>)
 800ebc6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebcc:	4a73      	ldr	r2, [pc, #460]	@ (800ed9c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ebce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebd4:	4a72      	ldr	r2, [pc, #456]	@ (800eda0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800ebd6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ebdc:	6879      	ldr	r1, [r7, #4]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	3338      	adds	r3, #56	@ 0x38
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	887b      	ldrh	r3, [r7, #2]
 800ebe8:	f7f8 f90c 	bl	8006e04 <HAL_DMA_Start_IT>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e0cc      	b.n	800ed90 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68da      	ldr	r2, [r3, #12]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ec04:	60da      	str	r2, [r3, #12]
      break;
 800ec06:	e04a      	b.n	800ec9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec0c:	4a62      	ldr	r2, [pc, #392]	@ (800ed98 <HAL_TIM_PWM_Start_DMA+0x418>)
 800ec0e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec14:	4a61      	ldr	r2, [pc, #388]	@ (800ed9c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ec16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec1c:	4a60      	ldr	r2, [pc, #384]	@ (800eda0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800ec1e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ec24:	6879      	ldr	r1, [r7, #4]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	333c      	adds	r3, #60	@ 0x3c
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	887b      	ldrh	r3, [r7, #2]
 800ec30:	f7f8 f8e8 	bl	8006e04 <HAL_DMA_Start_IT>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e0a8      	b.n	800ed90 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	68da      	ldr	r2, [r3, #12]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec4c:	60da      	str	r2, [r3, #12]
      break;
 800ec4e:	e026      	b.n	800ec9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec54:	4a50      	ldr	r2, [pc, #320]	@ (800ed98 <HAL_TIM_PWM_Start_DMA+0x418>)
 800ec56:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec5c:	4a4f      	ldr	r2, [pc, #316]	@ (800ed9c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ec5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec64:	4a4e      	ldr	r2, [pc, #312]	@ (800eda0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800ec66:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ec6c:	6879      	ldr	r1, [r7, #4]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	3340      	adds	r3, #64	@ 0x40
 800ec74:	461a      	mov	r2, r3
 800ec76:	887b      	ldrh	r3, [r7, #2]
 800ec78:	f7f8 f8c4 	bl	8006e04 <HAL_DMA_Start_IT>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ec82:	2301      	movs	r3, #1
 800ec84:	e084      	b.n	800ed90 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68da      	ldr	r2, [r3, #12]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ec94:	60da      	str	r2, [r3, #12]
      break;
 800ec96:	e002      	b.n	800ec9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ec9c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d174      	bne.n	800ed8e <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	68b9      	ldr	r1, [r7, #8]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f000 ff23 	bl	800faf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a3b      	ldr	r2, [pc, #236]	@ (800eda4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d013      	beq.n	800ece4 <HAL_TIM_PWM_Start_DMA+0x364>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a39      	ldr	r2, [pc, #228]	@ (800eda8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d00e      	beq.n	800ece4 <HAL_TIM_PWM_Start_DMA+0x364>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a38      	ldr	r2, [pc, #224]	@ (800edac <HAL_TIM_PWM_Start_DMA+0x42c>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d009      	beq.n	800ece4 <HAL_TIM_PWM_Start_DMA+0x364>
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a36      	ldr	r2, [pc, #216]	@ (800edb0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d004      	beq.n	800ece4 <HAL_TIM_PWM_Start_DMA+0x364>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a35      	ldr	r2, [pc, #212]	@ (800edb4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d101      	bne.n	800ece8 <HAL_TIM_PWM_Start_DMA+0x368>
 800ece4:	2301      	movs	r3, #1
 800ece6:	e000      	b.n	800ecea <HAL_TIM_PWM_Start_DMA+0x36a>
 800ece8:	2300      	movs	r3, #0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d007      	beq.n	800ecfe <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ecfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4a28      	ldr	r2, [pc, #160]	@ (800eda4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d022      	beq.n	800ed4e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed10:	d01d      	beq.n	800ed4e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4a28      	ldr	r2, [pc, #160]	@ (800edb8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d018      	beq.n	800ed4e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a26      	ldr	r2, [pc, #152]	@ (800edbc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d013      	beq.n	800ed4e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a25      	ldr	r2, [pc, #148]	@ (800edc0 <HAL_TIM_PWM_Start_DMA+0x440>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d00e      	beq.n	800ed4e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a1c      	ldr	r2, [pc, #112]	@ (800eda8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d009      	beq.n	800ed4e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a21      	ldr	r2, [pc, #132]	@ (800edc4 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d004      	beq.n	800ed4e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a18      	ldr	r2, [pc, #96]	@ (800edac <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d115      	bne.n	800ed7a <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	689a      	ldr	r2, [r3, #8]
 800ed54:	4b1c      	ldr	r3, [pc, #112]	@ (800edc8 <HAL_TIM_PWM_Start_DMA+0x448>)
 800ed56:	4013      	ands	r3, r2
 800ed58:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	2b06      	cmp	r3, #6
 800ed5e:	d015      	beq.n	800ed8c <HAL_TIM_PWM_Start_DMA+0x40c>
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed66:	d011      	beq.n	800ed8c <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f042 0201 	orr.w	r2, r2, #1
 800ed76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed78:	e008      	b.n	800ed8c <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f042 0201 	orr.w	r2, r2, #1
 800ed88:	601a      	str	r2, [r3, #0]
 800ed8a:	e000      	b.n	800ed8e <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed8c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ed8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3718      	adds	r7, #24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	0800f2fb 	.word	0x0800f2fb
 800ed9c:	0800f3a3 	.word	0x0800f3a3
 800eda0:	0800f269 	.word	0x0800f269
 800eda4:	40010000 	.word	0x40010000
 800eda8:	40010400 	.word	0x40010400
 800edac:	40014000 	.word	0x40014000
 800edb0:	40014400 	.word	0x40014400
 800edb4:	40014800 	.word	0x40014800
 800edb8:	40000400 	.word	0x40000400
 800edbc:	40000800 	.word	0x40000800
 800edc0:	40000c00 	.word	0x40000c00
 800edc4:	40001800 	.word	0x40001800
 800edc8:	00010007 	.word	0x00010007

0800edcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	f003 0302 	and.w	r3, r3, #2
 800edea:	2b00      	cmp	r3, #0
 800edec:	d020      	beq.n	800ee30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d01b      	beq.n	800ee30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f06f 0202 	mvn.w	r2, #2
 800ee00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2201      	movs	r2, #1
 800ee06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	f003 0303 	and.w	r3, r3, #3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d003      	beq.n	800ee1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 f9fe 	bl	800f218 <HAL_TIM_IC_CaptureCallback>
 800ee1c:	e005      	b.n	800ee2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 f9f0 	bl	800f204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7f2 fb21 	bl	800146c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	f003 0304 	and.w	r3, r3, #4
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d020      	beq.n	800ee7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f003 0304 	and.w	r3, r3, #4
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d01b      	beq.n	800ee7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f06f 0204 	mvn.w	r2, #4
 800ee4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2202      	movs	r2, #2
 800ee52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d003      	beq.n	800ee6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f9d8 	bl	800f218 <HAL_TIM_IC_CaptureCallback>
 800ee68:	e005      	b.n	800ee76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f9ca 	bl	800f204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7f2 fafb 	bl	800146c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	f003 0308 	and.w	r3, r3, #8
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d020      	beq.n	800eec8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f003 0308 	and.w	r3, r3, #8
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d01b      	beq.n	800eec8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f06f 0208 	mvn.w	r2, #8
 800ee98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2204      	movs	r2, #4
 800ee9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	69db      	ldr	r3, [r3, #28]
 800eea6:	f003 0303 	and.w	r3, r3, #3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f9b2 	bl	800f218 <HAL_TIM_IC_CaptureCallback>
 800eeb4:	e005      	b.n	800eec2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f9a4 	bl	800f204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7f2 fad5 	bl	800146c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f003 0310 	and.w	r3, r3, #16
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d020      	beq.n	800ef14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	f003 0310 	and.w	r3, r3, #16
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d01b      	beq.n	800ef14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f06f 0210 	mvn.w	r2, #16
 800eee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2208      	movs	r2, #8
 800eeea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	69db      	ldr	r3, [r3, #28]
 800eef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d003      	beq.n	800ef02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f98c 	bl	800f218 <HAL_TIM_IC_CaptureCallback>
 800ef00:	e005      	b.n	800ef0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 f97e 	bl	800f204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7f2 faaf 	bl	800146c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2200      	movs	r2, #0
 800ef12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	f003 0301 	and.w	r3, r3, #1
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00c      	beq.n	800ef38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d007      	beq.n	800ef38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f06f 0201 	mvn.w	r2, #1
 800ef30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7f3 f80a 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d104      	bne.n	800ef4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00c      	beq.n	800ef66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d007      	beq.n	800ef66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ef5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 ff05 	bl	800fd70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00c      	beq.n	800ef8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d007      	beq.n	800ef8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ef82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fefd 	bl	800fd84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00c      	beq.n	800efae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d007      	beq.n	800efae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800efa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f000 f949 	bl	800f240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	f003 0320 	and.w	r3, r3, #32
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00c      	beq.n	800efd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f003 0320 	and.w	r3, r3, #32
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d007      	beq.n	800efd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f06f 0220 	mvn.w	r2, #32
 800efca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 fec5 	bl	800fd5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800efd2:	bf00      	nop
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
	...

0800efdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efe8:	2300      	movs	r3, #0
 800efea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d101      	bne.n	800effa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eff6:	2302      	movs	r3, #2
 800eff8:	e0ff      	b.n	800f1fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2201      	movs	r2, #1
 800effe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b14      	cmp	r3, #20
 800f006:	f200 80f0 	bhi.w	800f1ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f00a:	a201      	add	r2, pc, #4	@ (adr r2, 800f010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f010:	0800f065 	.word	0x0800f065
 800f014:	0800f1eb 	.word	0x0800f1eb
 800f018:	0800f1eb 	.word	0x0800f1eb
 800f01c:	0800f1eb 	.word	0x0800f1eb
 800f020:	0800f0a5 	.word	0x0800f0a5
 800f024:	0800f1eb 	.word	0x0800f1eb
 800f028:	0800f1eb 	.word	0x0800f1eb
 800f02c:	0800f1eb 	.word	0x0800f1eb
 800f030:	0800f0e7 	.word	0x0800f0e7
 800f034:	0800f1eb 	.word	0x0800f1eb
 800f038:	0800f1eb 	.word	0x0800f1eb
 800f03c:	0800f1eb 	.word	0x0800f1eb
 800f040:	0800f127 	.word	0x0800f127
 800f044:	0800f1eb 	.word	0x0800f1eb
 800f048:	0800f1eb 	.word	0x0800f1eb
 800f04c:	0800f1eb 	.word	0x0800f1eb
 800f050:	0800f169 	.word	0x0800f169
 800f054:	0800f1eb 	.word	0x0800f1eb
 800f058:	0800f1eb 	.word	0x0800f1eb
 800f05c:	0800f1eb 	.word	0x0800f1eb
 800f060:	0800f1a9 	.word	0x0800f1a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	68b9      	ldr	r1, [r7, #8]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f000 fa6e 	bl	800f54c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	699a      	ldr	r2, [r3, #24]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f042 0208 	orr.w	r2, r2, #8
 800f07e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	699a      	ldr	r2, [r3, #24]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f022 0204 	bic.w	r2, r2, #4
 800f08e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	6999      	ldr	r1, [r3, #24]
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	691a      	ldr	r2, [r3, #16]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	619a      	str	r2, [r3, #24]
      break;
 800f0a2:	e0a5      	b.n	800f1f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	68b9      	ldr	r1, [r7, #8]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f000 fade 	bl	800f66c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	699a      	ldr	r2, [r3, #24]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f0be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	699a      	ldr	r2, [r3, #24]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f0ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	6999      	ldr	r1, [r3, #24]
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	021a      	lsls	r2, r3, #8
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	430a      	orrs	r2, r1
 800f0e2:	619a      	str	r2, [r3, #24]
      break;
 800f0e4:	e084      	b.n	800f1f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68b9      	ldr	r1, [r7, #8]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f000 fb47 	bl	800f780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	69da      	ldr	r2, [r3, #28]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f042 0208 	orr.w	r2, r2, #8
 800f100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	69da      	ldr	r2, [r3, #28]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f022 0204 	bic.w	r2, r2, #4
 800f110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	69d9      	ldr	r1, [r3, #28]
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	691a      	ldr	r2, [r3, #16]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	430a      	orrs	r2, r1
 800f122:	61da      	str	r2, [r3, #28]
      break;
 800f124:	e064      	b.n	800f1f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68b9      	ldr	r1, [r7, #8]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fbaf 	bl	800f890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	69da      	ldr	r2, [r3, #28]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	69da      	ldr	r2, [r3, #28]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	69d9      	ldr	r1, [r3, #28]
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	691b      	ldr	r3, [r3, #16]
 800f15c:	021a      	lsls	r2, r3, #8
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	430a      	orrs	r2, r1
 800f164:	61da      	str	r2, [r3, #28]
      break;
 800f166:	e043      	b.n	800f1f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 fbf8 	bl	800f964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f042 0208 	orr.w	r2, r2, #8
 800f182:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f022 0204 	bic.w	r2, r2, #4
 800f192:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	691a      	ldr	r2, [r3, #16]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	430a      	orrs	r2, r1
 800f1a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f1a6:	e023      	b.n	800f1f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	68b9      	ldr	r1, [r7, #8]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 fc3c 	bl	800fa2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	021a      	lsls	r2, r3, #8
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	430a      	orrs	r2, r1
 800f1e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f1e8:	e002      	b.n	800f1f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	75fb      	strb	r3, [r7, #23]
      break;
 800f1ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3718      	adds	r7, #24
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop

0800f204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f20c:	bf00      	nop
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f248:	bf00      	nop
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f25c:	bf00      	nop
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f274:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d107      	bne.n	800f290 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2201      	movs	r2, #1
 800f284:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2201      	movs	r2, #1
 800f28a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f28e:	e02a      	b.n	800f2e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	429a      	cmp	r2, r3
 800f298:	d107      	bne.n	800f2aa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2202      	movs	r2, #2
 800f29e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f2a8:	e01d      	b.n	800f2e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d107      	bne.n	800f2c4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2204      	movs	r2, #4
 800f2b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f2c2:	e010      	b.n	800f2e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d107      	bne.n	800f2de <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2208      	movs	r2, #8
 800f2d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f2dc:	e003      	b.n	800f2e6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7ff ffb4 	bl	800f254 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	771a      	strb	r2, [r3, #28]
}
 800f2f2:	bf00      	nop
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b084      	sub	sp, #16
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f306:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d10b      	bne.n	800f32a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2201      	movs	r2, #1
 800f316:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	69db      	ldr	r3, [r3, #28]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d136      	bne.n	800f38e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2201      	movs	r2, #1
 800f324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f328:	e031      	b.n	800f38e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	429a      	cmp	r2, r3
 800f332:	d10b      	bne.n	800f34c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2202      	movs	r2, #2
 800f338:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	69db      	ldr	r3, [r3, #28]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d125      	bne.n	800f38e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2201      	movs	r2, #1
 800f346:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f34a:	e020      	b.n	800f38e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	429a      	cmp	r2, r3
 800f354:	d10b      	bne.n	800f36e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2204      	movs	r2, #4
 800f35a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d114      	bne.n	800f38e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2201      	movs	r2, #1
 800f368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f36c:	e00f      	b.n	800f38e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	429a      	cmp	r2, r3
 800f376:	d10a      	bne.n	800f38e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2208      	movs	r2, #8
 800f37c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	69db      	ldr	r3, [r3, #28]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d103      	bne.n	800f38e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2201      	movs	r2, #1
 800f38a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7f2 f86c 	bl	800146c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2200      	movs	r2, #0
 800f398:	771a      	strb	r2, [r3, #28]
}
 800f39a:	bf00      	nop
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d103      	bne.n	800f3c2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	771a      	strb	r2, [r3, #28]
 800f3c0:	e019      	b.n	800f3f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d103      	bne.n	800f3d4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2202      	movs	r2, #2
 800f3d0:	771a      	strb	r2, [r3, #28]
 800f3d2:	e010      	b.n	800f3f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d103      	bne.n	800f3e6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2204      	movs	r2, #4
 800f3e2:	771a      	strb	r2, [r3, #28]
 800f3e4:	e007      	b.n	800f3f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d102      	bne.n	800f3f6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2208      	movs	r2, #8
 800f3f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f7ff ff18 	bl	800f22c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2200      	movs	r2, #0
 800f400:	771a      	strb	r2, [r3, #28]
}
 800f402:	bf00      	nop
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
	...

0800f40c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b085      	sub	sp, #20
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a43      	ldr	r2, [pc, #268]	@ (800f52c <TIM_Base_SetConfig+0x120>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d013      	beq.n	800f44c <TIM_Base_SetConfig+0x40>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f42a:	d00f      	beq.n	800f44c <TIM_Base_SetConfig+0x40>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a40      	ldr	r2, [pc, #256]	@ (800f530 <TIM_Base_SetConfig+0x124>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d00b      	beq.n	800f44c <TIM_Base_SetConfig+0x40>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a3f      	ldr	r2, [pc, #252]	@ (800f534 <TIM_Base_SetConfig+0x128>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d007      	beq.n	800f44c <TIM_Base_SetConfig+0x40>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a3e      	ldr	r2, [pc, #248]	@ (800f538 <TIM_Base_SetConfig+0x12c>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d003      	beq.n	800f44c <TIM_Base_SetConfig+0x40>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a3d      	ldr	r2, [pc, #244]	@ (800f53c <TIM_Base_SetConfig+0x130>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d108      	bne.n	800f45e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a32      	ldr	r2, [pc, #200]	@ (800f52c <TIM_Base_SetConfig+0x120>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d01f      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f46c:	d01b      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a2f      	ldr	r2, [pc, #188]	@ (800f530 <TIM_Base_SetConfig+0x124>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d017      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a2e      	ldr	r2, [pc, #184]	@ (800f534 <TIM_Base_SetConfig+0x128>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d013      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a2d      	ldr	r2, [pc, #180]	@ (800f538 <TIM_Base_SetConfig+0x12c>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d00f      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a2c      	ldr	r2, [pc, #176]	@ (800f53c <TIM_Base_SetConfig+0x130>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d00b      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a2b      	ldr	r2, [pc, #172]	@ (800f540 <TIM_Base_SetConfig+0x134>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d007      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a2a      	ldr	r2, [pc, #168]	@ (800f544 <TIM_Base_SetConfig+0x138>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d003      	beq.n	800f4a6 <TIM_Base_SetConfig+0x9a>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4a29      	ldr	r2, [pc, #164]	@ (800f548 <TIM_Base_SetConfig+0x13c>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d108      	bne.n	800f4b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	695b      	ldr	r3, [r3, #20]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	689a      	ldr	r2, [r3, #8]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4a14      	ldr	r2, [pc, #80]	@ (800f52c <TIM_Base_SetConfig+0x120>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d00f      	beq.n	800f4fe <TIM_Base_SetConfig+0xf2>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4a16      	ldr	r2, [pc, #88]	@ (800f53c <TIM_Base_SetConfig+0x130>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d00b      	beq.n	800f4fe <TIM_Base_SetConfig+0xf2>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a15      	ldr	r2, [pc, #84]	@ (800f540 <TIM_Base_SetConfig+0x134>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d007      	beq.n	800f4fe <TIM_Base_SetConfig+0xf2>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4a14      	ldr	r2, [pc, #80]	@ (800f544 <TIM_Base_SetConfig+0x138>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d003      	beq.n	800f4fe <TIM_Base_SetConfig+0xf2>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4a13      	ldr	r2, [pc, #76]	@ (800f548 <TIM_Base_SetConfig+0x13c>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d103      	bne.n	800f506 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	691a      	ldr	r2, [r3, #16]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f043 0204 	orr.w	r2, r3, #4
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2201      	movs	r2, #1
 800f516:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	601a      	str	r2, [r3, #0]
}
 800f51e:	bf00      	nop
 800f520:	3714      	adds	r7, #20
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	40010000 	.word	0x40010000
 800f530:	40000400 	.word	0x40000400
 800f534:	40000800 	.word	0x40000800
 800f538:	40000c00 	.word	0x40000c00
 800f53c:	40010400 	.word	0x40010400
 800f540:	40014000 	.word	0x40014000
 800f544:	40014400 	.word	0x40014400
 800f548:	40014800 	.word	0x40014800

0800f54c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b087      	sub	sp, #28
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a1b      	ldr	r3, [r3, #32]
 800f55a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6a1b      	ldr	r3, [r3, #32]
 800f560:	f023 0201 	bic.w	r2, r3, #1
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	699b      	ldr	r3, [r3, #24]
 800f572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	4b37      	ldr	r3, [pc, #220]	@ (800f654 <TIM_OC1_SetConfig+0x108>)
 800f578:	4013      	ands	r3, r2
 800f57a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f023 0303 	bic.w	r3, r3, #3
 800f582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	4313      	orrs	r3, r2
 800f58c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f023 0302 	bic.w	r3, r3, #2
 800f594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	689b      	ldr	r3, [r3, #8]
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a2d      	ldr	r2, [pc, #180]	@ (800f658 <TIM_OC1_SetConfig+0x10c>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d00f      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x7c>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a2c      	ldr	r2, [pc, #176]	@ (800f65c <TIM_OC1_SetConfig+0x110>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d00b      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x7c>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a2b      	ldr	r2, [pc, #172]	@ (800f660 <TIM_OC1_SetConfig+0x114>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d007      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x7c>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a2a      	ldr	r2, [pc, #168]	@ (800f664 <TIM_OC1_SetConfig+0x118>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d003      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x7c>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a29      	ldr	r2, [pc, #164]	@ (800f668 <TIM_OC1_SetConfig+0x11c>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d10c      	bne.n	800f5e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	f023 0308 	bic.w	r3, r3, #8
 800f5ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	f023 0304 	bic.w	r3, r3, #4
 800f5e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a1c      	ldr	r2, [pc, #112]	@ (800f658 <TIM_OC1_SetConfig+0x10c>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d00f      	beq.n	800f60a <TIM_OC1_SetConfig+0xbe>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a1b      	ldr	r2, [pc, #108]	@ (800f65c <TIM_OC1_SetConfig+0x110>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d00b      	beq.n	800f60a <TIM_OC1_SetConfig+0xbe>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a1a      	ldr	r2, [pc, #104]	@ (800f660 <TIM_OC1_SetConfig+0x114>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d007      	beq.n	800f60a <TIM_OC1_SetConfig+0xbe>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a19      	ldr	r2, [pc, #100]	@ (800f664 <TIM_OC1_SetConfig+0x118>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d003      	beq.n	800f60a <TIM_OC1_SetConfig+0xbe>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a18      	ldr	r2, [pc, #96]	@ (800f668 <TIM_OC1_SetConfig+0x11c>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d111      	bne.n	800f62e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	695b      	ldr	r3, [r3, #20]
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	4313      	orrs	r3, r2
 800f622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	699b      	ldr	r3, [r3, #24]
 800f628:	693a      	ldr	r2, [r7, #16]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	693a      	ldr	r2, [r7, #16]
 800f632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	68fa      	ldr	r2, [r7, #12]
 800f638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	697a      	ldr	r2, [r7, #20]
 800f646:	621a      	str	r2, [r3, #32]
}
 800f648:	bf00      	nop
 800f64a:	371c      	adds	r7, #28
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	fffeff8f 	.word	0xfffeff8f
 800f658:	40010000 	.word	0x40010000
 800f65c:	40010400 	.word	0x40010400
 800f660:	40014000 	.word	0x40014000
 800f664:	40014400 	.word	0x40014400
 800f668:	40014800 	.word	0x40014800

0800f66c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6a1b      	ldr	r3, [r3, #32]
 800f680:	f023 0210 	bic.w	r2, r3, #16
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	4b34      	ldr	r3, [pc, #208]	@ (800f768 <TIM_OC2_SetConfig+0xfc>)
 800f698:	4013      	ands	r3, r2
 800f69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f6a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	021b      	lsls	r3, r3, #8
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	f023 0320 	bic.w	r3, r3, #32
 800f6b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	011b      	lsls	r3, r3, #4
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a29      	ldr	r2, [pc, #164]	@ (800f76c <TIM_OC2_SetConfig+0x100>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d003      	beq.n	800f6d4 <TIM_OC2_SetConfig+0x68>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a28      	ldr	r2, [pc, #160]	@ (800f770 <TIM_OC2_SetConfig+0x104>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d10d      	bne.n	800f6f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	011b      	lsls	r3, r3, #4
 800f6e2:	697a      	ldr	r2, [r7, #20]
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	4a1e      	ldr	r2, [pc, #120]	@ (800f76c <TIM_OC2_SetConfig+0x100>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d00f      	beq.n	800f718 <TIM_OC2_SetConfig+0xac>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a1d      	ldr	r2, [pc, #116]	@ (800f770 <TIM_OC2_SetConfig+0x104>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d00b      	beq.n	800f718 <TIM_OC2_SetConfig+0xac>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a1c      	ldr	r2, [pc, #112]	@ (800f774 <TIM_OC2_SetConfig+0x108>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d007      	beq.n	800f718 <TIM_OC2_SetConfig+0xac>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a1b      	ldr	r2, [pc, #108]	@ (800f778 <TIM_OC2_SetConfig+0x10c>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d003      	beq.n	800f718 <TIM_OC2_SetConfig+0xac>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a1a      	ldr	r2, [pc, #104]	@ (800f77c <TIM_OC2_SetConfig+0x110>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d113      	bne.n	800f740 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f71e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	695b      	ldr	r3, [r3, #20]
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	4313      	orrs	r3, r2
 800f732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	699b      	ldr	r3, [r3, #24]
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	693a      	ldr	r2, [r7, #16]
 800f73c:	4313      	orrs	r3, r2
 800f73e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	685a      	ldr	r2, [r3, #4]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	621a      	str	r2, [r3, #32]
}
 800f75a:	bf00      	nop
 800f75c:	371c      	adds	r7, #28
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	feff8fff 	.word	0xfeff8fff
 800f76c:	40010000 	.word	0x40010000
 800f770:	40010400 	.word	0x40010400
 800f774:	40014000 	.word	0x40014000
 800f778:	40014400 	.word	0x40014400
 800f77c:	40014800 	.word	0x40014800

0800f780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f780:	b480      	push	{r7}
 800f782:	b087      	sub	sp, #28
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6a1b      	ldr	r3, [r3, #32]
 800f78e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6a1b      	ldr	r3, [r3, #32]
 800f794:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	69db      	ldr	r3, [r3, #28]
 800f7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	4b33      	ldr	r3, [pc, #204]	@ (800f878 <TIM_OC3_SetConfig+0xf8>)
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f023 0303 	bic.w	r3, r3, #3
 800f7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f7c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	021b      	lsls	r3, r3, #8
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4a28      	ldr	r2, [pc, #160]	@ (800f87c <TIM_OC3_SetConfig+0xfc>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d003      	beq.n	800f7e6 <TIM_OC3_SetConfig+0x66>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4a27      	ldr	r2, [pc, #156]	@ (800f880 <TIM_OC3_SetConfig+0x100>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d10d      	bne.n	800f802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f7ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	021b      	lsls	r3, r3, #8
 800f7f4:	697a      	ldr	r2, [r7, #20]
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4a1d      	ldr	r2, [pc, #116]	@ (800f87c <TIM_OC3_SetConfig+0xfc>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d00f      	beq.n	800f82a <TIM_OC3_SetConfig+0xaa>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a1c      	ldr	r2, [pc, #112]	@ (800f880 <TIM_OC3_SetConfig+0x100>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d00b      	beq.n	800f82a <TIM_OC3_SetConfig+0xaa>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a1b      	ldr	r2, [pc, #108]	@ (800f884 <TIM_OC3_SetConfig+0x104>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d007      	beq.n	800f82a <TIM_OC3_SetConfig+0xaa>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a1a      	ldr	r2, [pc, #104]	@ (800f888 <TIM_OC3_SetConfig+0x108>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d003      	beq.n	800f82a <TIM_OC3_SetConfig+0xaa>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a19      	ldr	r2, [pc, #100]	@ (800f88c <TIM_OC3_SetConfig+0x10c>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d113      	bne.n	800f852 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	695b      	ldr	r3, [r3, #20]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	693a      	ldr	r2, [r7, #16]
 800f842:	4313      	orrs	r3, r2
 800f844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	011b      	lsls	r3, r3, #4
 800f84c:	693a      	ldr	r2, [r7, #16]
 800f84e:	4313      	orrs	r3, r2
 800f850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	693a      	ldr	r2, [r7, #16]
 800f856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	685a      	ldr	r2, [r3, #4]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	621a      	str	r2, [r3, #32]
}
 800f86c:	bf00      	nop
 800f86e:	371c      	adds	r7, #28
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	fffeff8f 	.word	0xfffeff8f
 800f87c:	40010000 	.word	0x40010000
 800f880:	40010400 	.word	0x40010400
 800f884:	40014000 	.word	0x40014000
 800f888:	40014400 	.word	0x40014400
 800f88c:	40014800 	.word	0x40014800

0800f890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f890:	b480      	push	{r7}
 800f892:	b087      	sub	sp, #28
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
 800f89e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a1b      	ldr	r3, [r3, #32]
 800f8a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	4b24      	ldr	r3, [pc, #144]	@ (800f94c <TIM_OC4_SetConfig+0xbc>)
 800f8bc:	4013      	ands	r3, r2
 800f8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	021b      	lsls	r3, r3, #8
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f8da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	031b      	lsls	r3, r3, #12
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4a19      	ldr	r2, [pc, #100]	@ (800f950 <TIM_OC4_SetConfig+0xc0>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d00f      	beq.n	800f910 <TIM_OC4_SetConfig+0x80>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4a18      	ldr	r2, [pc, #96]	@ (800f954 <TIM_OC4_SetConfig+0xc4>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d00b      	beq.n	800f910 <TIM_OC4_SetConfig+0x80>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a17      	ldr	r2, [pc, #92]	@ (800f958 <TIM_OC4_SetConfig+0xc8>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d007      	beq.n	800f910 <TIM_OC4_SetConfig+0x80>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a16      	ldr	r2, [pc, #88]	@ (800f95c <TIM_OC4_SetConfig+0xcc>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d003      	beq.n	800f910 <TIM_OC4_SetConfig+0x80>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a15      	ldr	r2, [pc, #84]	@ (800f960 <TIM_OC4_SetConfig+0xd0>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d109      	bne.n	800f924 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	695b      	ldr	r3, [r3, #20]
 800f91c:	019b      	lsls	r3, r3, #6
 800f91e:	697a      	ldr	r2, [r7, #20]
 800f920:	4313      	orrs	r3, r2
 800f922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	697a      	ldr	r2, [r7, #20]
 800f928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	685a      	ldr	r2, [r3, #4]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	693a      	ldr	r2, [r7, #16]
 800f93c:	621a      	str	r2, [r3, #32]
}
 800f93e:	bf00      	nop
 800f940:	371c      	adds	r7, #28
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	feff8fff 	.word	0xfeff8fff
 800f950:	40010000 	.word	0x40010000
 800f954:	40010400 	.word	0x40010400
 800f958:	40014000 	.word	0x40014000
 800f95c:	40014400 	.word	0x40014400
 800f960:	40014800 	.word	0x40014800

0800f964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f964:	b480      	push	{r7}
 800f966:	b087      	sub	sp, #28
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a1b      	ldr	r3, [r3, #32]
 800f972:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a1b      	ldr	r3, [r3, #32]
 800f978:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	4b21      	ldr	r3, [pc, #132]	@ (800fa14 <TIM_OC5_SetConfig+0xb0>)
 800f990:	4013      	ands	r3, r2
 800f992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	4313      	orrs	r3, r2
 800f99c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f9a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	689b      	ldr	r3, [r3, #8]
 800f9aa:	041b      	lsls	r3, r3, #16
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4a18      	ldr	r2, [pc, #96]	@ (800fa18 <TIM_OC5_SetConfig+0xb4>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d00f      	beq.n	800f9da <TIM_OC5_SetConfig+0x76>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a17      	ldr	r2, [pc, #92]	@ (800fa1c <TIM_OC5_SetConfig+0xb8>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d00b      	beq.n	800f9da <TIM_OC5_SetConfig+0x76>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a16      	ldr	r2, [pc, #88]	@ (800fa20 <TIM_OC5_SetConfig+0xbc>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d007      	beq.n	800f9da <TIM_OC5_SetConfig+0x76>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a15      	ldr	r2, [pc, #84]	@ (800fa24 <TIM_OC5_SetConfig+0xc0>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d003      	beq.n	800f9da <TIM_OC5_SetConfig+0x76>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a14      	ldr	r2, [pc, #80]	@ (800fa28 <TIM_OC5_SetConfig+0xc4>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d109      	bne.n	800f9ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	695b      	ldr	r3, [r3, #20]
 800f9e6:	021b      	lsls	r3, r3, #8
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	685a      	ldr	r2, [r3, #4]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	621a      	str	r2, [r3, #32]
}
 800fa08:	bf00      	nop
 800fa0a:	371c      	adds	r7, #28
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	fffeff8f 	.word	0xfffeff8f
 800fa18:	40010000 	.word	0x40010000
 800fa1c:	40010400 	.word	0x40010400
 800fa20:	40014000 	.word	0x40014000
 800fa24:	40014400 	.word	0x40014400
 800fa28:	40014800 	.word	0x40014800

0800fa2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b087      	sub	sp, #28
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6a1b      	ldr	r3, [r3, #32]
 800fa40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	4b22      	ldr	r3, [pc, #136]	@ (800fae0 <TIM_OC6_SetConfig+0xb4>)
 800fa58:	4013      	ands	r3, r2
 800fa5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	021b      	lsls	r3, r3, #8
 800fa62:	68fa      	ldr	r2, [r7, #12]
 800fa64:	4313      	orrs	r3, r2
 800fa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fa6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	051b      	lsls	r3, r3, #20
 800fa76:	693a      	ldr	r2, [r7, #16]
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a19      	ldr	r2, [pc, #100]	@ (800fae4 <TIM_OC6_SetConfig+0xb8>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d00f      	beq.n	800faa4 <TIM_OC6_SetConfig+0x78>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a18      	ldr	r2, [pc, #96]	@ (800fae8 <TIM_OC6_SetConfig+0xbc>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d00b      	beq.n	800faa4 <TIM_OC6_SetConfig+0x78>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a17      	ldr	r2, [pc, #92]	@ (800faec <TIM_OC6_SetConfig+0xc0>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d007      	beq.n	800faa4 <TIM_OC6_SetConfig+0x78>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4a16      	ldr	r2, [pc, #88]	@ (800faf0 <TIM_OC6_SetConfig+0xc4>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d003      	beq.n	800faa4 <TIM_OC6_SetConfig+0x78>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4a15      	ldr	r2, [pc, #84]	@ (800faf4 <TIM_OC6_SetConfig+0xc8>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d109      	bne.n	800fab8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800faaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	029b      	lsls	r3, r3, #10
 800fab2:	697a      	ldr	r2, [r7, #20]
 800fab4:	4313      	orrs	r3, r2
 800fab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	685a      	ldr	r2, [r3, #4]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	693a      	ldr	r2, [r7, #16]
 800fad0:	621a      	str	r2, [r3, #32]
}
 800fad2:	bf00      	nop
 800fad4:	371c      	adds	r7, #28
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop
 800fae0:	feff8fff 	.word	0xfeff8fff
 800fae4:	40010000 	.word	0x40010000
 800fae8:	40010400 	.word	0x40010400
 800faec:	40014000 	.word	0x40014000
 800faf0:	40014400 	.word	0x40014400
 800faf4:	40014800 	.word	0x40014800

0800faf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b087      	sub	sp, #28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	f003 031f 	and.w	r3, r3, #31
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	6a1a      	ldr	r2, [r3, #32]
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	43db      	mvns	r3, r3
 800fb1a:	401a      	ands	r2, r3
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6a1a      	ldr	r2, [r3, #32]
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	f003 031f 	and.w	r3, r3, #31
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	fa01 f303 	lsl.w	r3, r1, r3
 800fb30:	431a      	orrs	r2, r3
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	621a      	str	r2, [r3, #32]
}
 800fb36:	bf00      	nop
 800fb38:	371c      	adds	r7, #28
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
	...

0800fb44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b085      	sub	sp, #20
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d101      	bne.n	800fb5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb58:	2302      	movs	r3, #2
 800fb5a:	e06d      	b.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2202      	movs	r2, #2
 800fb68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	689b      	ldr	r3, [r3, #8]
 800fb7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a30      	ldr	r2, [pc, #192]	@ (800fc44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d004      	beq.n	800fb90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4a2f      	ldr	r2, [pc, #188]	@ (800fc48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d108      	bne.n	800fba2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fb96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fba8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a20      	ldr	r2, [pc, #128]	@ (800fc44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d022      	beq.n	800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbce:	d01d      	beq.n	800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a1d      	ldr	r2, [pc, #116]	@ (800fc4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d018      	beq.n	800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	4a1c      	ldr	r2, [pc, #112]	@ (800fc50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d013      	beq.n	800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a1a      	ldr	r2, [pc, #104]	@ (800fc54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d00e      	beq.n	800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a15      	ldr	r2, [pc, #84]	@ (800fc48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d009      	beq.n	800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a16      	ldr	r2, [pc, #88]	@ (800fc58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d004      	beq.n	800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4a15      	ldr	r2, [pc, #84]	@ (800fc5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d10c      	bne.n	800fc26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	68ba      	ldr	r2, [r7, #8]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3714      	adds	r7, #20
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	40010000 	.word	0x40010000
 800fc48:	40010400 	.word	0x40010400
 800fc4c:	40000400 	.word	0x40000400
 800fc50:	40000800 	.word	0x40000800
 800fc54:	40000c00 	.word	0x40000c00
 800fc58:	40001800 	.word	0x40001800
 800fc5c:	40014000 	.word	0x40014000

0800fc60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d101      	bne.n	800fc7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fc78:	2302      	movs	r3, #2
 800fc7a:	e065      	b.n	800fd48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	4313      	orrs	r3, r2
 800fc9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	695b      	ldr	r3, [r3, #20]
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fce2:	4313      	orrs	r3, r2
 800fce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	041b      	lsls	r3, r3, #16
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a16      	ldr	r2, [pc, #88]	@ (800fd54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d004      	beq.n	800fd0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4a14      	ldr	r2, [pc, #80]	@ (800fd58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d115      	bne.n	800fd36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd14:	051b      	lsls	r3, r3, #20
 800fd16:	4313      	orrs	r3, r2
 800fd18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	69db      	ldr	r3, [r3, #28]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	4313      	orrs	r3, r2
 800fd34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3714      	adds	r7, #20
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr
 800fd54:	40010000 	.word	0x40010000
 800fd58:	40010400 	.word	0x40010400

0800fd5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd64:	bf00      	nop
 800fd66:	370c      	adds	r7, #12
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd78:	bf00      	nop
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fd8c:	bf00      	nop
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d101      	bne.n	800fdaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fda6:	2301      	movs	r3, #1
 800fda8:	e042      	b.n	800fe30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d106      	bne.n	800fdc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7f3 f92f 	bl	8003020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2224      	movs	r2, #36	@ 0x24
 800fdc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f022 0201 	bic.w	r2, r2, #1
 800fdd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d002      	beq.n	800fde8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f001 fa54 	bl	8011290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 fce9 	bl	80107c0 <UART_SetConfig>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d101      	bne.n	800fdf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e01b      	b.n	800fe30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fe06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	689a      	ldr	r2, [r3, #8]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fe16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f042 0201 	orr.w	r2, r2, #1
 800fe26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f001 fad3 	bl	80113d4 <UART_CheckIdleState>
 800fe2e:	4603      	mov	r3, r0
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08a      	sub	sp, #40	@ 0x28
 800fe3c:	af02      	add	r7, sp, #8
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	603b      	str	r3, [r7, #0]
 800fe44:	4613      	mov	r3, r2
 800fe46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe4e:	2b20      	cmp	r3, #32
 800fe50:	d17b      	bne.n	800ff4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d002      	beq.n	800fe5e <HAL_UART_Transmit+0x26>
 800fe58:	88fb      	ldrh	r3, [r7, #6]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d101      	bne.n	800fe62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e074      	b.n	800ff4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2200      	movs	r2, #0
 800fe66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2221      	movs	r2, #33	@ 0x21
 800fe6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe72:	f7f4 fc83 	bl	800477c <HAL_GetTick>
 800fe76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	88fa      	ldrh	r2, [r7, #6]
 800fe7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	88fa      	ldrh	r2, [r7, #6]
 800fe84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	689b      	ldr	r3, [r3, #8]
 800fe8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe90:	d108      	bne.n	800fea4 <HAL_UART_Transmit+0x6c>
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	691b      	ldr	r3, [r3, #16]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d104      	bne.n	800fea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	61bb      	str	r3, [r7, #24]
 800fea2:	e003      	b.n	800feac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fea8:	2300      	movs	r3, #0
 800feaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800feac:	e030      	b.n	800ff10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	2200      	movs	r2, #0
 800feb6:	2180      	movs	r1, #128	@ 0x80
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f001 fb35 	bl	8011528 <UART_WaitOnFlagUntilTimeout>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d005      	beq.n	800fed0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2220      	movs	r2, #32
 800fec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800fecc:	2303      	movs	r3, #3
 800fece:	e03d      	b.n	800ff4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10b      	bne.n	800feee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	881b      	ldrh	r3, [r3, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fee4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	3302      	adds	r3, #2
 800feea:	61bb      	str	r3, [r7, #24]
 800feec:	e007      	b.n	800fefe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	781a      	ldrb	r2, [r3, #0]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	3301      	adds	r3, #1
 800fefc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	3b01      	subs	r3, #1
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1c8      	bne.n	800feae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	9300      	str	r3, [sp, #0]
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2200      	movs	r2, #0
 800ff24:	2140      	movs	r1, #64	@ 0x40
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f001 fafe 	bl	8011528 <UART_WaitOnFlagUntilTimeout>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d005      	beq.n	800ff3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2220      	movs	r2, #32
 800ff36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ff3a:	2303      	movs	r3, #3
 800ff3c:	e006      	b.n	800ff4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2220      	movs	r2, #32
 800ff42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ff46:	2300      	movs	r3, #0
 800ff48:	e000      	b.n	800ff4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ff4a:	2302      	movs	r3, #2
  }
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3720      	adds	r7, #32
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b08a      	sub	sp, #40	@ 0x28
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff68:	2b20      	cmp	r3, #32
 800ff6a:	d137      	bne.n	800ffdc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d002      	beq.n	800ff78 <HAL_UART_Receive_IT+0x24>
 800ff72:	88fb      	ldrh	r3, [r7, #6]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d101      	bne.n	800ff7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e030      	b.n	800ffde <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4a18      	ldr	r2, [pc, #96]	@ (800ffe8 <HAL_UART_Receive_IT+0x94>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d01f      	beq.n	800ffcc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d018      	beq.n	800ffcc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	e853 3f00 	ldrex	r3, [r3]
 800ffa6:	613b      	str	r3, [r7, #16]
   return(result);
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ffae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb8:	623b      	str	r3, [r7, #32]
 800ffba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffbc:	69f9      	ldr	r1, [r7, #28]
 800ffbe:	6a3a      	ldr	r2, [r7, #32]
 800ffc0:	e841 2300 	strex	r3, r2, [r1]
 800ffc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1e6      	bne.n	800ff9a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ffcc:	88fb      	ldrh	r3, [r7, #6]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	68b9      	ldr	r1, [r7, #8]
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	f001 fb16 	bl	8011604 <UART_Start_Receive_IT>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	e000      	b.n	800ffde <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ffdc:	2302      	movs	r3, #2
  }
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3728      	adds	r7, #40	@ 0x28
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	58000c00 	.word	0x58000c00

0800ffec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b0ba      	sub	sp, #232	@ 0xe8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010016:	f640 030f 	movw	r3, #2063	@ 0x80f
 801001a:	4013      	ands	r3, r2
 801001c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010024:	2b00      	cmp	r3, #0
 8010026:	d11b      	bne.n	8010060 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801002c:	f003 0320 	and.w	r3, r3, #32
 8010030:	2b00      	cmp	r3, #0
 8010032:	d015      	beq.n	8010060 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010038:	f003 0320 	and.w	r3, r3, #32
 801003c:	2b00      	cmp	r3, #0
 801003e:	d105      	bne.n	801004c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010048:	2b00      	cmp	r3, #0
 801004a:	d009      	beq.n	8010060 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 8393 	beq.w	801077c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	4798      	blx	r3
      }
      return;
 801005e:	e38d      	b.n	801077c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010064:	2b00      	cmp	r3, #0
 8010066:	f000 8123 	beq.w	80102b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801006a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801006e:	4b8d      	ldr	r3, [pc, #564]	@ (80102a4 <HAL_UART_IRQHandler+0x2b8>)
 8010070:	4013      	ands	r3, r2
 8010072:	2b00      	cmp	r3, #0
 8010074:	d106      	bne.n	8010084 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801007a:	4b8b      	ldr	r3, [pc, #556]	@ (80102a8 <HAL_UART_IRQHandler+0x2bc>)
 801007c:	4013      	ands	r3, r2
 801007e:	2b00      	cmp	r3, #0
 8010080:	f000 8116 	beq.w	80102b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010088:	f003 0301 	and.w	r3, r3, #1
 801008c:	2b00      	cmp	r3, #0
 801008e:	d011      	beq.n	80100b4 <HAL_UART_IRQHandler+0xc8>
 8010090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00b      	beq.n	80100b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	2201      	movs	r2, #1
 80100a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100aa:	f043 0201 	orr.w	r2, r3, #1
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100b8:	f003 0302 	and.w	r3, r3, #2
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d011      	beq.n	80100e4 <HAL_UART_IRQHandler+0xf8>
 80100c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100c4:	f003 0301 	and.w	r3, r3, #1
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00b      	beq.n	80100e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2202      	movs	r2, #2
 80100d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100da:	f043 0204 	orr.w	r2, r3, #4
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100e8:	f003 0304 	and.w	r3, r3, #4
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d011      	beq.n	8010114 <HAL_UART_IRQHandler+0x128>
 80100f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100f4:	f003 0301 	and.w	r3, r3, #1
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00b      	beq.n	8010114 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2204      	movs	r2, #4
 8010102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801010a:	f043 0202 	orr.w	r2, r3, #2
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010118:	f003 0308 	and.w	r3, r3, #8
 801011c:	2b00      	cmp	r3, #0
 801011e:	d017      	beq.n	8010150 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010124:	f003 0320 	and.w	r3, r3, #32
 8010128:	2b00      	cmp	r3, #0
 801012a:	d105      	bne.n	8010138 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801012c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010130:	4b5c      	ldr	r3, [pc, #368]	@ (80102a4 <HAL_UART_IRQHandler+0x2b8>)
 8010132:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00b      	beq.n	8010150 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2208      	movs	r2, #8
 801013e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010146:	f043 0208 	orr.w	r2, r3, #8
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010158:	2b00      	cmp	r3, #0
 801015a:	d012      	beq.n	8010182 <HAL_UART_IRQHandler+0x196>
 801015c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00c      	beq.n	8010182 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010178:	f043 0220 	orr.w	r2, r3, #32
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 82f9 	beq.w	8010780 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801018e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010192:	f003 0320 	and.w	r3, r3, #32
 8010196:	2b00      	cmp	r3, #0
 8010198:	d013      	beq.n	80101c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801019a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801019e:	f003 0320 	and.w	r3, r3, #32
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d105      	bne.n	80101b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d007      	beq.n	80101c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d003      	beq.n	80101c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101d6:	2b40      	cmp	r3, #64	@ 0x40
 80101d8:	d005      	beq.n	80101e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80101da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80101de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d054      	beq.n	8010290 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f001 fb2e 	bl	8011848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101f6:	2b40      	cmp	r3, #64	@ 0x40
 80101f8:	d146      	bne.n	8010288 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	3308      	adds	r3, #8
 8010200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010208:	e853 3f00 	ldrex	r3, [r3]
 801020c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	3308      	adds	r3, #8
 8010222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010226:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801022a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801022e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010236:	e841 2300 	strex	r3, r2, [r1]
 801023a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801023e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010242:	2b00      	cmp	r3, #0
 8010244:	d1d9      	bne.n	80101fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801024c:	2b00      	cmp	r3, #0
 801024e:	d017      	beq.n	8010280 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010256:	4a15      	ldr	r2, [pc, #84]	@ (80102ac <HAL_UART_IRQHandler+0x2c0>)
 8010258:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010260:	4618      	mov	r0, r3
 8010262:	f7f7 fb57 	bl	8007914 <HAL_DMA_Abort_IT>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d019      	beq.n	80102a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801027a:	4610      	mov	r0, r2
 801027c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801027e:	e00f      	b.n	80102a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 fa93 	bl	80107ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010286:	e00b      	b.n	80102a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 fa8f 	bl	80107ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801028e:	e007      	b.n	80102a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 fa8b 	bl	80107ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801029e:	e26f      	b.n	8010780 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102a0:	bf00      	nop
    return;
 80102a2:	e26d      	b.n	8010780 <HAL_UART_IRQHandler+0x794>
 80102a4:	10000001 	.word	0x10000001
 80102a8:	04000120 	.word	0x04000120
 80102ac:	08011915 	.word	0x08011915

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	f040 8203 	bne.w	80106c0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80102ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102be:	f003 0310 	and.w	r3, r3, #16
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 81fc 	beq.w	80106c0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80102c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102cc:	f003 0310 	and.w	r3, r3, #16
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 81f5 	beq.w	80106c0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2210      	movs	r2, #16
 80102dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102e8:	2b40      	cmp	r3, #64	@ 0x40
 80102ea:	f040 816d 	bne.w	80105c8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4aa4      	ldr	r2, [pc, #656]	@ (8010588 <HAL_UART_IRQHandler+0x59c>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d068      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4aa1      	ldr	r2, [pc, #644]	@ (801058c <HAL_UART_IRQHandler+0x5a0>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d061      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4a9f      	ldr	r2, [pc, #636]	@ (8010590 <HAL_UART_IRQHandler+0x5a4>)
 8010314:	4293      	cmp	r3, r2
 8010316:	d05a      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4a9c      	ldr	r2, [pc, #624]	@ (8010594 <HAL_UART_IRQHandler+0x5a8>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d053      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4a9a      	ldr	r2, [pc, #616]	@ (8010598 <HAL_UART_IRQHandler+0x5ac>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d04c      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4a97      	ldr	r2, [pc, #604]	@ (801059c <HAL_UART_IRQHandler+0x5b0>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d045      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a95      	ldr	r2, [pc, #596]	@ (80105a0 <HAL_UART_IRQHandler+0x5b4>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d03e      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a92      	ldr	r2, [pc, #584]	@ (80105a4 <HAL_UART_IRQHandler+0x5b8>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d037      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	4a90      	ldr	r2, [pc, #576]	@ (80105a8 <HAL_UART_IRQHandler+0x5bc>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d030      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a8d      	ldr	r2, [pc, #564]	@ (80105ac <HAL_UART_IRQHandler+0x5c0>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d029      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a8b      	ldr	r2, [pc, #556]	@ (80105b0 <HAL_UART_IRQHandler+0x5c4>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d022      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a88      	ldr	r2, [pc, #544]	@ (80105b4 <HAL_UART_IRQHandler+0x5c8>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d01b      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4a86      	ldr	r2, [pc, #536]	@ (80105b8 <HAL_UART_IRQHandler+0x5cc>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d014      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a83      	ldr	r2, [pc, #524]	@ (80105bc <HAL_UART_IRQHandler+0x5d0>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d00d      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a81      	ldr	r2, [pc, #516]	@ (80105c0 <HAL_UART_IRQHandler+0x5d4>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d006      	beq.n	80103ce <HAL_UART_IRQHandler+0x3e2>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a7e      	ldr	r2, [pc, #504]	@ (80105c4 <HAL_UART_IRQHandler+0x5d8>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d106      	bne.n	80103dc <HAL_UART_IRQHandler+0x3f0>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	b29b      	uxth	r3, r3
 80103da:	e005      	b.n	80103e8 <HAL_UART_IRQHandler+0x3fc>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80103ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f000 80ad 	beq.w	8010550 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80103fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010400:	429a      	cmp	r2, r3
 8010402:	f080 80a5 	bcs.w	8010550 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801040c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010416:	69db      	ldr	r3, [r3, #28]
 8010418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801041c:	f000 8087 	beq.w	801052e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010428:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801042c:	e853 3f00 	ldrex	r3, [r3]
 8010430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801043c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	461a      	mov	r2, r3
 8010446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801044a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801044e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010452:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010456:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801045a:	e841 2300 	strex	r3, r2, [r1]
 801045e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1da      	bne.n	8010420 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	3308      	adds	r3, #8
 8010470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010474:	e853 3f00 	ldrex	r3, [r3]
 8010478:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801047a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801047c:	f023 0301 	bic.w	r3, r3, #1
 8010480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3308      	adds	r3, #8
 801048a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801048e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010492:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010494:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801049a:	e841 2300 	strex	r3, r2, [r1]
 801049e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80104a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1e1      	bne.n	801046a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	3308      	adds	r3, #8
 80104ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80104b0:	e853 3f00 	ldrex	r3, [r3]
 80104b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80104b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	3308      	adds	r3, #8
 80104c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80104ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80104cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80104d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80104d2:	e841 2300 	strex	r3, r2, [r1]
 80104d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80104d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d1e3      	bne.n	80104a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2220      	movs	r2, #32
 80104e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2200      	movs	r2, #0
 80104ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104f4:	e853 3f00 	ldrex	r3, [r3]
 80104f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80104fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104fc:	f023 0310 	bic.w	r3, r3, #16
 8010500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	461a      	mov	r2, r3
 801050a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801050e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010510:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010516:	e841 2300 	strex	r3, r2, [r1]
 801051a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801051c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801051e:	2b00      	cmp	r3, #0
 8010520:	d1e4      	bne.n	80104ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010528:	4618      	mov	r0, r3
 801052a:	f7f6 fed5 	bl	80072d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2202      	movs	r2, #2
 8010532:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010540:	b29b      	uxth	r3, r3
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	b29b      	uxth	r3, r3
 8010546:	4619      	mov	r1, r3
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f7f0 fffd 	bl	8001548 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801054e:	e119      	b.n	8010784 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801055a:	429a      	cmp	r2, r3
 801055c:	f040 8112 	bne.w	8010784 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010566:	69db      	ldr	r3, [r3, #28]
 8010568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801056c:	f040 810a 	bne.w	8010784 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2202      	movs	r2, #2
 8010574:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801057c:	4619      	mov	r1, r3
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7f0 ffe2 	bl	8001548 <HAL_UARTEx_RxEventCallback>
      return;
 8010584:	e0fe      	b.n	8010784 <HAL_UART_IRQHandler+0x798>
 8010586:	bf00      	nop
 8010588:	40020010 	.word	0x40020010
 801058c:	40020028 	.word	0x40020028
 8010590:	40020040 	.word	0x40020040
 8010594:	40020058 	.word	0x40020058
 8010598:	40020070 	.word	0x40020070
 801059c:	40020088 	.word	0x40020088
 80105a0:	400200a0 	.word	0x400200a0
 80105a4:	400200b8 	.word	0x400200b8
 80105a8:	40020410 	.word	0x40020410
 80105ac:	40020428 	.word	0x40020428
 80105b0:	40020440 	.word	0x40020440
 80105b4:	40020458 	.word	0x40020458
 80105b8:	40020470 	.word	0x40020470
 80105bc:	40020488 	.word	0x40020488
 80105c0:	400204a0 	.word	0x400204a0
 80105c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	1ad3      	subs	r3, r2, r3
 80105d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 80cf 	beq.w	8010788 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80105ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 80ca 	beq.w	8010788 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105fc:	e853 3f00 	ldrex	r3, [r3]
 8010600:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010608:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	461a      	mov	r2, r3
 8010612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010616:	647b      	str	r3, [r7, #68]	@ 0x44
 8010618:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801061c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e4      	bne.n	80105f4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	3308      	adds	r3, #8
 8010630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010634:	e853 3f00 	ldrex	r3, [r3]
 8010638:	623b      	str	r3, [r7, #32]
   return(result);
 801063a:	6a3a      	ldr	r2, [r7, #32]
 801063c:	4b55      	ldr	r3, [pc, #340]	@ (8010794 <HAL_UART_IRQHandler+0x7a8>)
 801063e:	4013      	ands	r3, r2
 8010640:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3308      	adds	r3, #8
 801064a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801064e:	633a      	str	r2, [r7, #48]	@ 0x30
 8010650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010656:	e841 2300 	strex	r3, r2, [r1]
 801065a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801065c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1e3      	bne.n	801062a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2220      	movs	r2, #32
 8010666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	e853 3f00 	ldrex	r3, [r3]
 8010682:	60fb      	str	r3, [r7, #12]
   return(result);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f023 0310 	bic.w	r3, r3, #16
 801068a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010698:	61fb      	str	r3, [r7, #28]
 801069a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069c:	69b9      	ldr	r1, [r7, #24]
 801069e:	69fa      	ldr	r2, [r7, #28]
 80106a0:	e841 2300 	strex	r3, r2, [r1]
 80106a4:	617b      	str	r3, [r7, #20]
   return(result);
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1e4      	bne.n	8010676 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2202      	movs	r2, #2
 80106b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80106b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80106b6:	4619      	mov	r1, r3
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7f0 ff45 	bl	8001548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80106be:	e063      	b.n	8010788 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80106c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d00e      	beq.n	80106ea <HAL_UART_IRQHandler+0x6fe>
 80106cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d008      	beq.n	80106ea <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80106e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f001 fe74 	bl	80123d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106e8:	e051      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d014      	beq.n	8010720 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d105      	bne.n	801070e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801070a:	2b00      	cmp	r3, #0
 801070c:	d008      	beq.n	8010720 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010712:	2b00      	cmp	r3, #0
 8010714:	d03a      	beq.n	801078c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	4798      	blx	r3
    }
    return;
 801071e:	e035      	b.n	801078c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010728:	2b00      	cmp	r3, #0
 801072a:	d009      	beq.n	8010740 <HAL_UART_IRQHandler+0x754>
 801072c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010734:	2b00      	cmp	r3, #0
 8010736:	d003      	beq.n	8010740 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f001 f8fd 	bl	8011938 <UART_EndTransmit_IT>
    return;
 801073e:	e026      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010748:	2b00      	cmp	r3, #0
 801074a:	d009      	beq.n	8010760 <HAL_UART_IRQHandler+0x774>
 801074c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010750:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010754:	2b00      	cmp	r3, #0
 8010756:	d003      	beq.n	8010760 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f001 fe4d 	bl	80123f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801075e:	e016      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010768:	2b00      	cmp	r3, #0
 801076a:	d010      	beq.n	801078e <HAL_UART_IRQHandler+0x7a2>
 801076c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010770:	2b00      	cmp	r3, #0
 8010772:	da0c      	bge.n	801078e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f001 fe35 	bl	80123e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801077a:	e008      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
      return;
 801077c:	bf00      	nop
 801077e:	e006      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
    return;
 8010780:	bf00      	nop
 8010782:	e004      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
      return;
 8010784:	bf00      	nop
 8010786:	e002      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
      return;
 8010788:	bf00      	nop
 801078a:	e000      	b.n	801078e <HAL_UART_IRQHandler+0x7a2>
    return;
 801078c:	bf00      	nop
  }
}
 801078e:	37e8      	adds	r7, #232	@ 0xe8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	effffffe 	.word	0xeffffffe

08010798 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80107a0:	bf00      	nop
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80107b4:	bf00      	nop
 80107b6:	370c      	adds	r7, #12
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107c4:	b092      	sub	sp, #72	@ 0x48
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107ca:	2300      	movs	r3, #0
 80107cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	689a      	ldr	r2, [r3, #8]
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	431a      	orrs	r2, r3
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	695b      	ldr	r3, [r3, #20]
 80107de:	431a      	orrs	r2, r3
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	69db      	ldr	r3, [r3, #28]
 80107e4:	4313      	orrs	r3, r2
 80107e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	4bbe      	ldr	r3, [pc, #760]	@ (8010ae8 <UART_SetConfig+0x328>)
 80107f0:	4013      	ands	r3, r2
 80107f2:	697a      	ldr	r2, [r7, #20]
 80107f4:	6812      	ldr	r2, [r2, #0]
 80107f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80107f8:	430b      	orrs	r3, r1
 80107fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	68da      	ldr	r2, [r3, #12]
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	430a      	orrs	r2, r1
 8010810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	4ab3      	ldr	r2, [pc, #716]	@ (8010aec <UART_SetConfig+0x32c>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d004      	beq.n	801082c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	6a1b      	ldr	r3, [r3, #32]
 8010826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010828:	4313      	orrs	r3, r2
 801082a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	689a      	ldr	r2, [r3, #8]
 8010832:	4baf      	ldr	r3, [pc, #700]	@ (8010af0 <UART_SetConfig+0x330>)
 8010834:	4013      	ands	r3, r2
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	6812      	ldr	r2, [r2, #0]
 801083a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801083c:	430b      	orrs	r3, r1
 801083e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010846:	f023 010f 	bic.w	r1, r3, #15
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	430a      	orrs	r2, r1
 8010854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4aa6      	ldr	r2, [pc, #664]	@ (8010af4 <UART_SetConfig+0x334>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d177      	bne.n	8010950 <UART_SetConfig+0x190>
 8010860:	4ba5      	ldr	r3, [pc, #660]	@ (8010af8 <UART_SetConfig+0x338>)
 8010862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010864:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010868:	2b28      	cmp	r3, #40	@ 0x28
 801086a:	d86d      	bhi.n	8010948 <UART_SetConfig+0x188>
 801086c:	a201      	add	r2, pc, #4	@ (adr r2, 8010874 <UART_SetConfig+0xb4>)
 801086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010872:	bf00      	nop
 8010874:	08010919 	.word	0x08010919
 8010878:	08010949 	.word	0x08010949
 801087c:	08010949 	.word	0x08010949
 8010880:	08010949 	.word	0x08010949
 8010884:	08010949 	.word	0x08010949
 8010888:	08010949 	.word	0x08010949
 801088c:	08010949 	.word	0x08010949
 8010890:	08010949 	.word	0x08010949
 8010894:	08010921 	.word	0x08010921
 8010898:	08010949 	.word	0x08010949
 801089c:	08010949 	.word	0x08010949
 80108a0:	08010949 	.word	0x08010949
 80108a4:	08010949 	.word	0x08010949
 80108a8:	08010949 	.word	0x08010949
 80108ac:	08010949 	.word	0x08010949
 80108b0:	08010949 	.word	0x08010949
 80108b4:	08010929 	.word	0x08010929
 80108b8:	08010949 	.word	0x08010949
 80108bc:	08010949 	.word	0x08010949
 80108c0:	08010949 	.word	0x08010949
 80108c4:	08010949 	.word	0x08010949
 80108c8:	08010949 	.word	0x08010949
 80108cc:	08010949 	.word	0x08010949
 80108d0:	08010949 	.word	0x08010949
 80108d4:	08010931 	.word	0x08010931
 80108d8:	08010949 	.word	0x08010949
 80108dc:	08010949 	.word	0x08010949
 80108e0:	08010949 	.word	0x08010949
 80108e4:	08010949 	.word	0x08010949
 80108e8:	08010949 	.word	0x08010949
 80108ec:	08010949 	.word	0x08010949
 80108f0:	08010949 	.word	0x08010949
 80108f4:	08010939 	.word	0x08010939
 80108f8:	08010949 	.word	0x08010949
 80108fc:	08010949 	.word	0x08010949
 8010900:	08010949 	.word	0x08010949
 8010904:	08010949 	.word	0x08010949
 8010908:	08010949 	.word	0x08010949
 801090c:	08010949 	.word	0x08010949
 8010910:	08010949 	.word	0x08010949
 8010914:	08010941 	.word	0x08010941
 8010918:	2301      	movs	r3, #1
 801091a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091e:	e222      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010920:	2304      	movs	r3, #4
 8010922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010926:	e21e      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010928:	2308      	movs	r3, #8
 801092a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801092e:	e21a      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010930:	2310      	movs	r3, #16
 8010932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010936:	e216      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010938:	2320      	movs	r3, #32
 801093a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093e:	e212      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010940:	2340      	movs	r3, #64	@ 0x40
 8010942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010946:	e20e      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010948:	2380      	movs	r3, #128	@ 0x80
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094e:	e20a      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4a69      	ldr	r2, [pc, #420]	@ (8010afc <UART_SetConfig+0x33c>)
 8010956:	4293      	cmp	r3, r2
 8010958:	d130      	bne.n	80109bc <UART_SetConfig+0x1fc>
 801095a:	4b67      	ldr	r3, [pc, #412]	@ (8010af8 <UART_SetConfig+0x338>)
 801095c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801095e:	f003 0307 	and.w	r3, r3, #7
 8010962:	2b05      	cmp	r3, #5
 8010964:	d826      	bhi.n	80109b4 <UART_SetConfig+0x1f4>
 8010966:	a201      	add	r2, pc, #4	@ (adr r2, 801096c <UART_SetConfig+0x1ac>)
 8010968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096c:	08010985 	.word	0x08010985
 8010970:	0801098d 	.word	0x0801098d
 8010974:	08010995 	.word	0x08010995
 8010978:	0801099d 	.word	0x0801099d
 801097c:	080109a5 	.word	0x080109a5
 8010980:	080109ad 	.word	0x080109ad
 8010984:	2300      	movs	r3, #0
 8010986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801098a:	e1ec      	b.n	8010d66 <UART_SetConfig+0x5a6>
 801098c:	2304      	movs	r3, #4
 801098e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010992:	e1e8      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010994:	2308      	movs	r3, #8
 8010996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801099a:	e1e4      	b.n	8010d66 <UART_SetConfig+0x5a6>
 801099c:	2310      	movs	r3, #16
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109a2:	e1e0      	b.n	8010d66 <UART_SetConfig+0x5a6>
 80109a4:	2320      	movs	r3, #32
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109aa:	e1dc      	b.n	8010d66 <UART_SetConfig+0x5a6>
 80109ac:	2340      	movs	r3, #64	@ 0x40
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109b2:	e1d8      	b.n	8010d66 <UART_SetConfig+0x5a6>
 80109b4:	2380      	movs	r3, #128	@ 0x80
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ba:	e1d4      	b.n	8010d66 <UART_SetConfig+0x5a6>
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a4f      	ldr	r2, [pc, #316]	@ (8010b00 <UART_SetConfig+0x340>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d130      	bne.n	8010a28 <UART_SetConfig+0x268>
 80109c6:	4b4c      	ldr	r3, [pc, #304]	@ (8010af8 <UART_SetConfig+0x338>)
 80109c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109ca:	f003 0307 	and.w	r3, r3, #7
 80109ce:	2b05      	cmp	r3, #5
 80109d0:	d826      	bhi.n	8010a20 <UART_SetConfig+0x260>
 80109d2:	a201      	add	r2, pc, #4	@ (adr r2, 80109d8 <UART_SetConfig+0x218>)
 80109d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d8:	080109f1 	.word	0x080109f1
 80109dc:	080109f9 	.word	0x080109f9
 80109e0:	08010a01 	.word	0x08010a01
 80109e4:	08010a09 	.word	0x08010a09
 80109e8:	08010a11 	.word	0x08010a11
 80109ec:	08010a19 	.word	0x08010a19
 80109f0:	2300      	movs	r3, #0
 80109f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109f6:	e1b6      	b.n	8010d66 <UART_SetConfig+0x5a6>
 80109f8:	2304      	movs	r3, #4
 80109fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109fe:	e1b2      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a00:	2308      	movs	r3, #8
 8010a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a06:	e1ae      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a08:	2310      	movs	r3, #16
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a0e:	e1aa      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a10:	2320      	movs	r3, #32
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a16:	e1a6      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a18:	2340      	movs	r3, #64	@ 0x40
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a1e:	e1a2      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a20:	2380      	movs	r3, #128	@ 0x80
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a26:	e19e      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a35      	ldr	r2, [pc, #212]	@ (8010b04 <UART_SetConfig+0x344>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d130      	bne.n	8010a94 <UART_SetConfig+0x2d4>
 8010a32:	4b31      	ldr	r3, [pc, #196]	@ (8010af8 <UART_SetConfig+0x338>)
 8010a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a36:	f003 0307 	and.w	r3, r3, #7
 8010a3a:	2b05      	cmp	r3, #5
 8010a3c:	d826      	bhi.n	8010a8c <UART_SetConfig+0x2cc>
 8010a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8010a44 <UART_SetConfig+0x284>)
 8010a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a44:	08010a5d 	.word	0x08010a5d
 8010a48:	08010a65 	.word	0x08010a65
 8010a4c:	08010a6d 	.word	0x08010a6d
 8010a50:	08010a75 	.word	0x08010a75
 8010a54:	08010a7d 	.word	0x08010a7d
 8010a58:	08010a85 	.word	0x08010a85
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a62:	e180      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a64:	2304      	movs	r3, #4
 8010a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a6a:	e17c      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a6c:	2308      	movs	r3, #8
 8010a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a72:	e178      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a74:	2310      	movs	r3, #16
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a7a:	e174      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a7c:	2320      	movs	r3, #32
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a82:	e170      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a84:	2340      	movs	r3, #64	@ 0x40
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a8a:	e16c      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a8c:	2380      	movs	r3, #128	@ 0x80
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a92:	e168      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4a1b      	ldr	r2, [pc, #108]	@ (8010b08 <UART_SetConfig+0x348>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d142      	bne.n	8010b24 <UART_SetConfig+0x364>
 8010a9e:	4b16      	ldr	r3, [pc, #88]	@ (8010af8 <UART_SetConfig+0x338>)
 8010aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010aa2:	f003 0307 	and.w	r3, r3, #7
 8010aa6:	2b05      	cmp	r3, #5
 8010aa8:	d838      	bhi.n	8010b1c <UART_SetConfig+0x35c>
 8010aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8010ab0 <UART_SetConfig+0x2f0>)
 8010aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab0:	08010ac9 	.word	0x08010ac9
 8010ab4:	08010ad1 	.word	0x08010ad1
 8010ab8:	08010ad9 	.word	0x08010ad9
 8010abc:	08010ae1 	.word	0x08010ae1
 8010ac0:	08010b0d 	.word	0x08010b0d
 8010ac4:	08010b15 	.word	0x08010b15
 8010ac8:	2300      	movs	r3, #0
 8010aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ace:	e14a      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010ad0:	2304      	movs	r3, #4
 8010ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ad6:	e146      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010ad8:	2308      	movs	r3, #8
 8010ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ade:	e142      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010ae0:	2310      	movs	r3, #16
 8010ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ae6:	e13e      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010ae8:	cfff69f3 	.word	0xcfff69f3
 8010aec:	58000c00 	.word	0x58000c00
 8010af0:	11fff4ff 	.word	0x11fff4ff
 8010af4:	40011000 	.word	0x40011000
 8010af8:	58024400 	.word	0x58024400
 8010afc:	40004400 	.word	0x40004400
 8010b00:	40004800 	.word	0x40004800
 8010b04:	40004c00 	.word	0x40004c00
 8010b08:	40005000 	.word	0x40005000
 8010b0c:	2320      	movs	r3, #32
 8010b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b12:	e128      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010b14:	2340      	movs	r3, #64	@ 0x40
 8010b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b1a:	e124      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010b1c:	2380      	movs	r3, #128	@ 0x80
 8010b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b22:	e120      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4acb      	ldr	r2, [pc, #812]	@ (8010e58 <UART_SetConfig+0x698>)
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d176      	bne.n	8010c1c <UART_SetConfig+0x45c>
 8010b2e:	4bcb      	ldr	r3, [pc, #812]	@ (8010e5c <UART_SetConfig+0x69c>)
 8010b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b36:	2b28      	cmp	r3, #40	@ 0x28
 8010b38:	d86c      	bhi.n	8010c14 <UART_SetConfig+0x454>
 8010b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8010b40 <UART_SetConfig+0x380>)
 8010b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b40:	08010be5 	.word	0x08010be5
 8010b44:	08010c15 	.word	0x08010c15
 8010b48:	08010c15 	.word	0x08010c15
 8010b4c:	08010c15 	.word	0x08010c15
 8010b50:	08010c15 	.word	0x08010c15
 8010b54:	08010c15 	.word	0x08010c15
 8010b58:	08010c15 	.word	0x08010c15
 8010b5c:	08010c15 	.word	0x08010c15
 8010b60:	08010bed 	.word	0x08010bed
 8010b64:	08010c15 	.word	0x08010c15
 8010b68:	08010c15 	.word	0x08010c15
 8010b6c:	08010c15 	.word	0x08010c15
 8010b70:	08010c15 	.word	0x08010c15
 8010b74:	08010c15 	.word	0x08010c15
 8010b78:	08010c15 	.word	0x08010c15
 8010b7c:	08010c15 	.word	0x08010c15
 8010b80:	08010bf5 	.word	0x08010bf5
 8010b84:	08010c15 	.word	0x08010c15
 8010b88:	08010c15 	.word	0x08010c15
 8010b8c:	08010c15 	.word	0x08010c15
 8010b90:	08010c15 	.word	0x08010c15
 8010b94:	08010c15 	.word	0x08010c15
 8010b98:	08010c15 	.word	0x08010c15
 8010b9c:	08010c15 	.word	0x08010c15
 8010ba0:	08010bfd 	.word	0x08010bfd
 8010ba4:	08010c15 	.word	0x08010c15
 8010ba8:	08010c15 	.word	0x08010c15
 8010bac:	08010c15 	.word	0x08010c15
 8010bb0:	08010c15 	.word	0x08010c15
 8010bb4:	08010c15 	.word	0x08010c15
 8010bb8:	08010c15 	.word	0x08010c15
 8010bbc:	08010c15 	.word	0x08010c15
 8010bc0:	08010c05 	.word	0x08010c05
 8010bc4:	08010c15 	.word	0x08010c15
 8010bc8:	08010c15 	.word	0x08010c15
 8010bcc:	08010c15 	.word	0x08010c15
 8010bd0:	08010c15 	.word	0x08010c15
 8010bd4:	08010c15 	.word	0x08010c15
 8010bd8:	08010c15 	.word	0x08010c15
 8010bdc:	08010c15 	.word	0x08010c15
 8010be0:	08010c0d 	.word	0x08010c0d
 8010be4:	2301      	movs	r3, #1
 8010be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bea:	e0bc      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010bec:	2304      	movs	r3, #4
 8010bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bf2:	e0b8      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010bf4:	2308      	movs	r3, #8
 8010bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bfa:	e0b4      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010bfc:	2310      	movs	r3, #16
 8010bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c02:	e0b0      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c04:	2320      	movs	r3, #32
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c0a:	e0ac      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c0c:	2340      	movs	r3, #64	@ 0x40
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c12:	e0a8      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c14:	2380      	movs	r3, #128	@ 0x80
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1a:	e0a4      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4a8f      	ldr	r2, [pc, #572]	@ (8010e60 <UART_SetConfig+0x6a0>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d130      	bne.n	8010c88 <UART_SetConfig+0x4c8>
 8010c26:	4b8d      	ldr	r3, [pc, #564]	@ (8010e5c <UART_SetConfig+0x69c>)
 8010c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c2a:	f003 0307 	and.w	r3, r3, #7
 8010c2e:	2b05      	cmp	r3, #5
 8010c30:	d826      	bhi.n	8010c80 <UART_SetConfig+0x4c0>
 8010c32:	a201      	add	r2, pc, #4	@ (adr r2, 8010c38 <UART_SetConfig+0x478>)
 8010c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c38:	08010c51 	.word	0x08010c51
 8010c3c:	08010c59 	.word	0x08010c59
 8010c40:	08010c61 	.word	0x08010c61
 8010c44:	08010c69 	.word	0x08010c69
 8010c48:	08010c71 	.word	0x08010c71
 8010c4c:	08010c79 	.word	0x08010c79
 8010c50:	2300      	movs	r3, #0
 8010c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c56:	e086      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c58:	2304      	movs	r3, #4
 8010c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c5e:	e082      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c60:	2308      	movs	r3, #8
 8010c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c66:	e07e      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c68:	2310      	movs	r3, #16
 8010c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c6e:	e07a      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c70:	2320      	movs	r3, #32
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c76:	e076      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c78:	2340      	movs	r3, #64	@ 0x40
 8010c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c7e:	e072      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c80:	2380      	movs	r3, #128	@ 0x80
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c86:	e06e      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a75      	ldr	r2, [pc, #468]	@ (8010e64 <UART_SetConfig+0x6a4>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d130      	bne.n	8010cf4 <UART_SetConfig+0x534>
 8010c92:	4b72      	ldr	r3, [pc, #456]	@ (8010e5c <UART_SetConfig+0x69c>)
 8010c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c96:	f003 0307 	and.w	r3, r3, #7
 8010c9a:	2b05      	cmp	r3, #5
 8010c9c:	d826      	bhi.n	8010cec <UART_SetConfig+0x52c>
 8010c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8010ca4 <UART_SetConfig+0x4e4>)
 8010ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca4:	08010cbd 	.word	0x08010cbd
 8010ca8:	08010cc5 	.word	0x08010cc5
 8010cac:	08010ccd 	.word	0x08010ccd
 8010cb0:	08010cd5 	.word	0x08010cd5
 8010cb4:	08010cdd 	.word	0x08010cdd
 8010cb8:	08010ce5 	.word	0x08010ce5
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cc2:	e050      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010cc4:	2304      	movs	r3, #4
 8010cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cca:	e04c      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010ccc:	2308      	movs	r3, #8
 8010cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cd2:	e048      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010cd4:	2310      	movs	r3, #16
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cda:	e044      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010cdc:	2320      	movs	r3, #32
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ce2:	e040      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010ce4:	2340      	movs	r3, #64	@ 0x40
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cea:	e03c      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010cec:	2380      	movs	r3, #128	@ 0x80
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cf2:	e038      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	4a5b      	ldr	r2, [pc, #364]	@ (8010e68 <UART_SetConfig+0x6a8>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d130      	bne.n	8010d60 <UART_SetConfig+0x5a0>
 8010cfe:	4b57      	ldr	r3, [pc, #348]	@ (8010e5c <UART_SetConfig+0x69c>)
 8010d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d02:	f003 0307 	and.w	r3, r3, #7
 8010d06:	2b05      	cmp	r3, #5
 8010d08:	d826      	bhi.n	8010d58 <UART_SetConfig+0x598>
 8010d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8010d10 <UART_SetConfig+0x550>)
 8010d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d10:	08010d29 	.word	0x08010d29
 8010d14:	08010d31 	.word	0x08010d31
 8010d18:	08010d39 	.word	0x08010d39
 8010d1c:	08010d41 	.word	0x08010d41
 8010d20:	08010d49 	.word	0x08010d49
 8010d24:	08010d51 	.word	0x08010d51
 8010d28:	2302      	movs	r3, #2
 8010d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d2e:	e01a      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010d30:	2304      	movs	r3, #4
 8010d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d36:	e016      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010d38:	2308      	movs	r3, #8
 8010d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d3e:	e012      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010d40:	2310      	movs	r3, #16
 8010d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d46:	e00e      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010d48:	2320      	movs	r3, #32
 8010d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d4e:	e00a      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010d50:	2340      	movs	r3, #64	@ 0x40
 8010d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d56:	e006      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010d58:	2380      	movs	r3, #128	@ 0x80
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d5e:	e002      	b.n	8010d66 <UART_SetConfig+0x5a6>
 8010d60:	2380      	movs	r3, #128	@ 0x80
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8010e68 <UART_SetConfig+0x6a8>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	f040 80f8 	bne.w	8010f62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010d72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010d76:	2b20      	cmp	r3, #32
 8010d78:	dc46      	bgt.n	8010e08 <UART_SetConfig+0x648>
 8010d7a:	2b02      	cmp	r3, #2
 8010d7c:	f2c0 8082 	blt.w	8010e84 <UART_SetConfig+0x6c4>
 8010d80:	3b02      	subs	r3, #2
 8010d82:	2b1e      	cmp	r3, #30
 8010d84:	d87e      	bhi.n	8010e84 <UART_SetConfig+0x6c4>
 8010d86:	a201      	add	r2, pc, #4	@ (adr r2, 8010d8c <UART_SetConfig+0x5cc>)
 8010d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d8c:	08010e0f 	.word	0x08010e0f
 8010d90:	08010e85 	.word	0x08010e85
 8010d94:	08010e17 	.word	0x08010e17
 8010d98:	08010e85 	.word	0x08010e85
 8010d9c:	08010e85 	.word	0x08010e85
 8010da0:	08010e85 	.word	0x08010e85
 8010da4:	08010e27 	.word	0x08010e27
 8010da8:	08010e85 	.word	0x08010e85
 8010dac:	08010e85 	.word	0x08010e85
 8010db0:	08010e85 	.word	0x08010e85
 8010db4:	08010e85 	.word	0x08010e85
 8010db8:	08010e85 	.word	0x08010e85
 8010dbc:	08010e85 	.word	0x08010e85
 8010dc0:	08010e85 	.word	0x08010e85
 8010dc4:	08010e37 	.word	0x08010e37
 8010dc8:	08010e85 	.word	0x08010e85
 8010dcc:	08010e85 	.word	0x08010e85
 8010dd0:	08010e85 	.word	0x08010e85
 8010dd4:	08010e85 	.word	0x08010e85
 8010dd8:	08010e85 	.word	0x08010e85
 8010ddc:	08010e85 	.word	0x08010e85
 8010de0:	08010e85 	.word	0x08010e85
 8010de4:	08010e85 	.word	0x08010e85
 8010de8:	08010e85 	.word	0x08010e85
 8010dec:	08010e85 	.word	0x08010e85
 8010df0:	08010e85 	.word	0x08010e85
 8010df4:	08010e85 	.word	0x08010e85
 8010df8:	08010e85 	.word	0x08010e85
 8010dfc:	08010e85 	.word	0x08010e85
 8010e00:	08010e85 	.word	0x08010e85
 8010e04:	08010e77 	.word	0x08010e77
 8010e08:	2b40      	cmp	r3, #64	@ 0x40
 8010e0a:	d037      	beq.n	8010e7c <UART_SetConfig+0x6bc>
 8010e0c:	e03a      	b.n	8010e84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010e0e:	f7fc f965 	bl	800d0dc <HAL_RCCEx_GetD3PCLK1Freq>
 8010e12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010e14:	e03c      	b.n	8010e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fc f974 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e24:	e034      	b.n	8010e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e26:	f107 0318 	add.w	r3, r7, #24
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fc fac0 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e34:	e02c      	b.n	8010e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e36:	4b09      	ldr	r3, [pc, #36]	@ (8010e5c <UART_SetConfig+0x69c>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f003 0320 	and.w	r3, r3, #32
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d016      	beq.n	8010e70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010e42:	4b06      	ldr	r3, [pc, #24]	@ (8010e5c <UART_SetConfig+0x69c>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	08db      	lsrs	r3, r3, #3
 8010e48:	f003 0303 	and.w	r3, r3, #3
 8010e4c:	4a07      	ldr	r2, [pc, #28]	@ (8010e6c <UART_SetConfig+0x6ac>)
 8010e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8010e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e54:	e01c      	b.n	8010e90 <UART_SetConfig+0x6d0>
 8010e56:	bf00      	nop
 8010e58:	40011400 	.word	0x40011400
 8010e5c:	58024400 	.word	0x58024400
 8010e60:	40007800 	.word	0x40007800
 8010e64:	40007c00 	.word	0x40007c00
 8010e68:	58000c00 	.word	0x58000c00
 8010e6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010e70:	4b9d      	ldr	r3, [pc, #628]	@ (80110e8 <UART_SetConfig+0x928>)
 8010e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e74:	e00c      	b.n	8010e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010e76:	4b9d      	ldr	r3, [pc, #628]	@ (80110ec <UART_SetConfig+0x92c>)
 8010e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e7a:	e009      	b.n	8010e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e82:	e005      	b.n	8010e90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010e84:	2300      	movs	r3, #0
 8010e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f000 81de 	beq.w	8011254 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e9c:	4a94      	ldr	r2, [pc, #592]	@ (80110f0 <UART_SetConfig+0x930>)
 8010e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eaa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	685a      	ldr	r2, [r3, #4]
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	4413      	add	r3, r2
 8010eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d305      	bcc.n	8010ec8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d903      	bls.n	8010ed0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010ec8:	2301      	movs	r3, #1
 8010eca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010ece:	e1c1      	b.n	8011254 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	60bb      	str	r3, [r7, #8]
 8010ed6:	60fa      	str	r2, [r7, #12]
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010edc:	4a84      	ldr	r2, [pc, #528]	@ (80110f0 <UART_SetConfig+0x930>)
 8010ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	603b      	str	r3, [r7, #0]
 8010ee8:	607a      	str	r2, [r7, #4]
 8010eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ef2:	f7ef fc09 	bl	8000708 <__aeabi_uldivmod>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	4610      	mov	r0, r2
 8010efc:	4619      	mov	r1, r3
 8010efe:	f04f 0200 	mov.w	r2, #0
 8010f02:	f04f 0300 	mov.w	r3, #0
 8010f06:	020b      	lsls	r3, r1, #8
 8010f08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010f0c:	0202      	lsls	r2, r0, #8
 8010f0e:	6979      	ldr	r1, [r7, #20]
 8010f10:	6849      	ldr	r1, [r1, #4]
 8010f12:	0849      	lsrs	r1, r1, #1
 8010f14:	2000      	movs	r0, #0
 8010f16:	460c      	mov	r4, r1
 8010f18:	4605      	mov	r5, r0
 8010f1a:	eb12 0804 	adds.w	r8, r2, r4
 8010f1e:	eb43 0905 	adc.w	r9, r3, r5
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	469a      	mov	sl, r3
 8010f2a:	4693      	mov	fp, r2
 8010f2c:	4652      	mov	r2, sl
 8010f2e:	465b      	mov	r3, fp
 8010f30:	4640      	mov	r0, r8
 8010f32:	4649      	mov	r1, r9
 8010f34:	f7ef fbe8 	bl	8000708 <__aeabi_uldivmod>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010f46:	d308      	bcc.n	8010f5a <UART_SetConfig+0x79a>
 8010f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010f4e:	d204      	bcs.n	8010f5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f56:	60da      	str	r2, [r3, #12]
 8010f58:	e17c      	b.n	8011254 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010f60:	e178      	b.n	8011254 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	69db      	ldr	r3, [r3, #28]
 8010f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010f6a:	f040 80c5 	bne.w	80110f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010f6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010f72:	2b20      	cmp	r3, #32
 8010f74:	dc48      	bgt.n	8011008 <UART_SetConfig+0x848>
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	db7b      	blt.n	8011072 <UART_SetConfig+0x8b2>
 8010f7a:	2b20      	cmp	r3, #32
 8010f7c:	d879      	bhi.n	8011072 <UART_SetConfig+0x8b2>
 8010f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f84 <UART_SetConfig+0x7c4>)
 8010f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f84:	0801100f 	.word	0x0801100f
 8010f88:	08011017 	.word	0x08011017
 8010f8c:	08011073 	.word	0x08011073
 8010f90:	08011073 	.word	0x08011073
 8010f94:	0801101f 	.word	0x0801101f
 8010f98:	08011073 	.word	0x08011073
 8010f9c:	08011073 	.word	0x08011073
 8010fa0:	08011073 	.word	0x08011073
 8010fa4:	0801102f 	.word	0x0801102f
 8010fa8:	08011073 	.word	0x08011073
 8010fac:	08011073 	.word	0x08011073
 8010fb0:	08011073 	.word	0x08011073
 8010fb4:	08011073 	.word	0x08011073
 8010fb8:	08011073 	.word	0x08011073
 8010fbc:	08011073 	.word	0x08011073
 8010fc0:	08011073 	.word	0x08011073
 8010fc4:	0801103f 	.word	0x0801103f
 8010fc8:	08011073 	.word	0x08011073
 8010fcc:	08011073 	.word	0x08011073
 8010fd0:	08011073 	.word	0x08011073
 8010fd4:	08011073 	.word	0x08011073
 8010fd8:	08011073 	.word	0x08011073
 8010fdc:	08011073 	.word	0x08011073
 8010fe0:	08011073 	.word	0x08011073
 8010fe4:	08011073 	.word	0x08011073
 8010fe8:	08011073 	.word	0x08011073
 8010fec:	08011073 	.word	0x08011073
 8010ff0:	08011073 	.word	0x08011073
 8010ff4:	08011073 	.word	0x08011073
 8010ff8:	08011073 	.word	0x08011073
 8010ffc:	08011073 	.word	0x08011073
 8011000:	08011073 	.word	0x08011073
 8011004:	08011065 	.word	0x08011065
 8011008:	2b40      	cmp	r3, #64	@ 0x40
 801100a:	d02e      	beq.n	801106a <UART_SetConfig+0x8aa>
 801100c:	e031      	b.n	8011072 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801100e:	f7fa f86d 	bl	800b0ec <HAL_RCC_GetPCLK1Freq>
 8011012:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011014:	e033      	b.n	801107e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011016:	f7fa f87f 	bl	800b118 <HAL_RCC_GetPCLK2Freq>
 801101a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801101c:	e02f      	b.n	801107e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801101e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011022:	4618      	mov	r0, r3
 8011024:	f7fc f870 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801102c:	e027      	b.n	801107e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801102e:	f107 0318 	add.w	r3, r7, #24
 8011032:	4618      	mov	r0, r3
 8011034:	f7fc f9bc 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801103c:	e01f      	b.n	801107e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801103e:	4b2d      	ldr	r3, [pc, #180]	@ (80110f4 <UART_SetConfig+0x934>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f003 0320 	and.w	r3, r3, #32
 8011046:	2b00      	cmp	r3, #0
 8011048:	d009      	beq.n	801105e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801104a:	4b2a      	ldr	r3, [pc, #168]	@ (80110f4 <UART_SetConfig+0x934>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	08db      	lsrs	r3, r3, #3
 8011050:	f003 0303 	and.w	r3, r3, #3
 8011054:	4a24      	ldr	r2, [pc, #144]	@ (80110e8 <UART_SetConfig+0x928>)
 8011056:	fa22 f303 	lsr.w	r3, r2, r3
 801105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801105c:	e00f      	b.n	801107e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801105e:	4b22      	ldr	r3, [pc, #136]	@ (80110e8 <UART_SetConfig+0x928>)
 8011060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011062:	e00c      	b.n	801107e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011064:	4b21      	ldr	r3, [pc, #132]	@ (80110ec <UART_SetConfig+0x92c>)
 8011066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011068:	e009      	b.n	801107e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801106a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011070:	e005      	b.n	801107e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011072:	2300      	movs	r3, #0
 8011074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011076:	2301      	movs	r3, #1
 8011078:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801107c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801107e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011080:	2b00      	cmp	r3, #0
 8011082:	f000 80e7 	beq.w	8011254 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801108a:	4a19      	ldr	r2, [pc, #100]	@ (80110f0 <UART_SetConfig+0x930>)
 801108c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011090:	461a      	mov	r2, r3
 8011092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011094:	fbb3 f3f2 	udiv	r3, r3, r2
 8011098:	005a      	lsls	r2, r3, #1
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	085b      	lsrs	r3, r3, #1
 80110a0:	441a      	add	r2, r3
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80110aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ae:	2b0f      	cmp	r3, #15
 80110b0:	d916      	bls.n	80110e0 <UART_SetConfig+0x920>
 80110b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110b8:	d212      	bcs.n	80110e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80110ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110bc:	b29b      	uxth	r3, r3
 80110be:	f023 030f 	bic.w	r3, r3, #15
 80110c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80110c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c6:	085b      	lsrs	r3, r3, #1
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	f003 0307 	and.w	r3, r3, #7
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80110d2:	4313      	orrs	r3, r2
 80110d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80110dc:	60da      	str	r2, [r3, #12]
 80110de:	e0b9      	b.n	8011254 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80110e0:	2301      	movs	r3, #1
 80110e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80110e6:	e0b5      	b.n	8011254 <UART_SetConfig+0xa94>
 80110e8:	03d09000 	.word	0x03d09000
 80110ec:	003d0900 	.word	0x003d0900
 80110f0:	08018298 	.word	0x08018298
 80110f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80110f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80110fc:	2b20      	cmp	r3, #32
 80110fe:	dc49      	bgt.n	8011194 <UART_SetConfig+0x9d4>
 8011100:	2b00      	cmp	r3, #0
 8011102:	db7c      	blt.n	80111fe <UART_SetConfig+0xa3e>
 8011104:	2b20      	cmp	r3, #32
 8011106:	d87a      	bhi.n	80111fe <UART_SetConfig+0xa3e>
 8011108:	a201      	add	r2, pc, #4	@ (adr r2, 8011110 <UART_SetConfig+0x950>)
 801110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801110e:	bf00      	nop
 8011110:	0801119b 	.word	0x0801119b
 8011114:	080111a3 	.word	0x080111a3
 8011118:	080111ff 	.word	0x080111ff
 801111c:	080111ff 	.word	0x080111ff
 8011120:	080111ab 	.word	0x080111ab
 8011124:	080111ff 	.word	0x080111ff
 8011128:	080111ff 	.word	0x080111ff
 801112c:	080111ff 	.word	0x080111ff
 8011130:	080111bb 	.word	0x080111bb
 8011134:	080111ff 	.word	0x080111ff
 8011138:	080111ff 	.word	0x080111ff
 801113c:	080111ff 	.word	0x080111ff
 8011140:	080111ff 	.word	0x080111ff
 8011144:	080111ff 	.word	0x080111ff
 8011148:	080111ff 	.word	0x080111ff
 801114c:	080111ff 	.word	0x080111ff
 8011150:	080111cb 	.word	0x080111cb
 8011154:	080111ff 	.word	0x080111ff
 8011158:	080111ff 	.word	0x080111ff
 801115c:	080111ff 	.word	0x080111ff
 8011160:	080111ff 	.word	0x080111ff
 8011164:	080111ff 	.word	0x080111ff
 8011168:	080111ff 	.word	0x080111ff
 801116c:	080111ff 	.word	0x080111ff
 8011170:	080111ff 	.word	0x080111ff
 8011174:	080111ff 	.word	0x080111ff
 8011178:	080111ff 	.word	0x080111ff
 801117c:	080111ff 	.word	0x080111ff
 8011180:	080111ff 	.word	0x080111ff
 8011184:	080111ff 	.word	0x080111ff
 8011188:	080111ff 	.word	0x080111ff
 801118c:	080111ff 	.word	0x080111ff
 8011190:	080111f1 	.word	0x080111f1
 8011194:	2b40      	cmp	r3, #64	@ 0x40
 8011196:	d02e      	beq.n	80111f6 <UART_SetConfig+0xa36>
 8011198:	e031      	b.n	80111fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801119a:	f7f9 ffa7 	bl	800b0ec <HAL_RCC_GetPCLK1Freq>
 801119e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80111a0:	e033      	b.n	801120a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111a2:	f7f9 ffb9 	bl	800b118 <HAL_RCC_GetPCLK2Freq>
 80111a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80111a8:	e02f      	b.n	801120a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fb ffaa 	bl	800d108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80111b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111b8:	e027      	b.n	801120a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111ba:	f107 0318 	add.w	r3, r7, #24
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fc f8f6 	bl	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111c8:	e01f      	b.n	801120a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111ca:	4b2d      	ldr	r3, [pc, #180]	@ (8011280 <UART_SetConfig+0xac0>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f003 0320 	and.w	r3, r3, #32
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d009      	beq.n	80111ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80111d6:	4b2a      	ldr	r3, [pc, #168]	@ (8011280 <UART_SetConfig+0xac0>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	08db      	lsrs	r3, r3, #3
 80111dc:	f003 0303 	and.w	r3, r3, #3
 80111e0:	4a28      	ldr	r2, [pc, #160]	@ (8011284 <UART_SetConfig+0xac4>)
 80111e2:	fa22 f303 	lsr.w	r3, r2, r3
 80111e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80111e8:	e00f      	b.n	801120a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80111ea:	4b26      	ldr	r3, [pc, #152]	@ (8011284 <UART_SetConfig+0xac4>)
 80111ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111ee:	e00c      	b.n	801120a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80111f0:	4b25      	ldr	r3, [pc, #148]	@ (8011288 <UART_SetConfig+0xac8>)
 80111f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111f4:	e009      	b.n	801120a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111fc:	e005      	b.n	801120a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80111fe:	2300      	movs	r3, #0
 8011200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011208:	bf00      	nop
    }

    if (pclk != 0U)
 801120a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801120c:	2b00      	cmp	r3, #0
 801120e:	d021      	beq.n	8011254 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011214:	4a1d      	ldr	r2, [pc, #116]	@ (801128c <UART_SetConfig+0xacc>)
 8011216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801121a:	461a      	mov	r2, r3
 801121c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801121e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	085b      	lsrs	r3, r3, #1
 8011228:	441a      	add	r2, r3
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011232:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011236:	2b0f      	cmp	r3, #15
 8011238:	d909      	bls.n	801124e <UART_SetConfig+0xa8e>
 801123a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011240:	d205      	bcs.n	801124e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011244:	b29a      	uxth	r2, r3
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	60da      	str	r2, [r3, #12]
 801124c:	e002      	b.n	8011254 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801124e:	2301      	movs	r3, #1
 8011250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	2201      	movs	r2, #1
 8011258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	2201      	movs	r2, #1
 8011260:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	2200      	movs	r2, #0
 8011268:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	2200      	movs	r2, #0
 801126e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011270:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011274:	4618      	mov	r0, r3
 8011276:	3748      	adds	r7, #72	@ 0x48
 8011278:	46bd      	mov	sp, r7
 801127a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801127e:	bf00      	nop
 8011280:	58024400 	.word	0x58024400
 8011284:	03d09000 	.word	0x03d09000
 8011288:	003d0900 	.word	0x003d0900
 801128c:	08018298 	.word	0x08018298

08011290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801129c:	f003 0308 	and.w	r3, r3, #8
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d00a      	beq.n	80112ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	430a      	orrs	r2, r1
 80112b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112be:	f003 0301 	and.w	r3, r3, #1
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d00a      	beq.n	80112dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	430a      	orrs	r2, r1
 80112da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112e0:	f003 0302 	and.w	r3, r3, #2
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d00a      	beq.n	80112fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	430a      	orrs	r2, r1
 80112fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011302:	f003 0304 	and.w	r3, r3, #4
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00a      	beq.n	8011320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	430a      	orrs	r2, r1
 801131e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011324:	f003 0310 	and.w	r3, r3, #16
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00a      	beq.n	8011342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	689b      	ldr	r3, [r3, #8]
 8011332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	430a      	orrs	r2, r1
 8011340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011346:	f003 0320 	and.w	r3, r3, #32
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00a      	beq.n	8011364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	689b      	ldr	r3, [r3, #8]
 8011354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	430a      	orrs	r2, r1
 8011362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01a      	beq.n	80113a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	430a      	orrs	r2, r1
 8011384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801138a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801138e:	d10a      	bne.n	80113a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	430a      	orrs	r2, r1
 80113a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d00a      	beq.n	80113c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	430a      	orrs	r2, r1
 80113c6:	605a      	str	r2, [r3, #4]
  }
}
 80113c8:	bf00      	nop
 80113ca:	370c      	adds	r7, #12
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr

080113d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b098      	sub	sp, #96	@ 0x60
 80113d8:	af02      	add	r7, sp, #8
 80113da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2200      	movs	r2, #0
 80113e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80113e4:	f7f3 f9ca 	bl	800477c <HAL_GetTick>
 80113e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f003 0308 	and.w	r3, r3, #8
 80113f4:	2b08      	cmp	r3, #8
 80113f6:	d12f      	bne.n	8011458 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011400:	2200      	movs	r2, #0
 8011402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 f88e 	bl	8011528 <UART_WaitOnFlagUntilTimeout>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d022      	beq.n	8011458 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141a:	e853 3f00 	ldrex	r3, [r3]
 801141e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011426:	653b      	str	r3, [r7, #80]	@ 0x50
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	461a      	mov	r2, r3
 801142e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011430:	647b      	str	r3, [r7, #68]	@ 0x44
 8011432:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011438:	e841 2300 	strex	r3, r2, [r1]
 801143c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801143e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011440:	2b00      	cmp	r3, #0
 8011442:	d1e6      	bne.n	8011412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2220      	movs	r2, #32
 8011448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2200      	movs	r2, #0
 8011450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011454:	2303      	movs	r3, #3
 8011456:	e063      	b.n	8011520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f003 0304 	and.w	r3, r3, #4
 8011462:	2b04      	cmp	r3, #4
 8011464:	d149      	bne.n	80114fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011466:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801146a:	9300      	str	r3, [sp, #0]
 801146c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801146e:	2200      	movs	r2, #0
 8011470:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 f857 	bl	8011528 <UART_WaitOnFlagUntilTimeout>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d03c      	beq.n	80114fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011488:	e853 3f00 	ldrex	r3, [r3]
 801148c:	623b      	str	r3, [r7, #32]
   return(result);
 801148e:	6a3b      	ldr	r3, [r7, #32]
 8011490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	461a      	mov	r2, r3
 801149c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801149e:	633b      	str	r3, [r7, #48]	@ 0x30
 80114a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80114a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114a6:	e841 2300 	strex	r3, r2, [r1]
 80114aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80114ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1e6      	bne.n	8011480 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	3308      	adds	r3, #8
 80114b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	e853 3f00 	ldrex	r3, [r3]
 80114c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f023 0301 	bic.w	r3, r3, #1
 80114c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	3308      	adds	r3, #8
 80114d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80114d2:	61fa      	str	r2, [r7, #28]
 80114d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d6:	69b9      	ldr	r1, [r7, #24]
 80114d8:	69fa      	ldr	r2, [r7, #28]
 80114da:	e841 2300 	strex	r3, r2, [r1]
 80114de:	617b      	str	r3, [r7, #20]
   return(result);
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d1e5      	bne.n	80114b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2220      	movs	r2, #32
 80114ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114f6:	2303      	movs	r3, #3
 80114f8:	e012      	b.n	8011520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2220      	movs	r2, #32
 80114fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2220      	movs	r2, #32
 8011506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2200      	movs	r2, #0
 801150e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2200      	movs	r2, #0
 8011514:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801151e:	2300      	movs	r3, #0
}
 8011520:	4618      	mov	r0, r3
 8011522:	3758      	adds	r7, #88	@ 0x58
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	603b      	str	r3, [r7, #0]
 8011534:	4613      	mov	r3, r2
 8011536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011538:	e04f      	b.n	80115da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801153a:	69bb      	ldr	r3, [r7, #24]
 801153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011540:	d04b      	beq.n	80115da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011542:	f7f3 f91b 	bl	800477c <HAL_GetTick>
 8011546:	4602      	mov	r2, r0
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	69ba      	ldr	r2, [r7, #24]
 801154e:	429a      	cmp	r2, r3
 8011550:	d302      	bcc.n	8011558 <UART_WaitOnFlagUntilTimeout+0x30>
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d101      	bne.n	801155c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011558:	2303      	movs	r3, #3
 801155a:	e04e      	b.n	80115fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f003 0304 	and.w	r3, r3, #4
 8011566:	2b00      	cmp	r3, #0
 8011568:	d037      	beq.n	80115da <UART_WaitOnFlagUntilTimeout+0xb2>
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	2b80      	cmp	r3, #128	@ 0x80
 801156e:	d034      	beq.n	80115da <UART_WaitOnFlagUntilTimeout+0xb2>
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	2b40      	cmp	r3, #64	@ 0x40
 8011574:	d031      	beq.n	80115da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	69db      	ldr	r3, [r3, #28]
 801157c:	f003 0308 	and.w	r3, r3, #8
 8011580:	2b08      	cmp	r3, #8
 8011582:	d110      	bne.n	80115a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2208      	movs	r2, #8
 801158a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801158c:	68f8      	ldr	r0, [r7, #12]
 801158e:	f000 f95b 	bl	8011848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2208      	movs	r2, #8
 8011596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2200      	movs	r2, #0
 801159e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80115a2:	2301      	movs	r3, #1
 80115a4:	e029      	b.n	80115fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	69db      	ldr	r3, [r3, #28]
 80115ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80115b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80115b4:	d111      	bne.n	80115da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80115be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f000 f941 	bl	8011848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2220      	movs	r2, #32
 80115ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2200      	movs	r2, #0
 80115d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80115d6:	2303      	movs	r3, #3
 80115d8:	e00f      	b.n	80115fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	69da      	ldr	r2, [r3, #28]
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	4013      	ands	r3, r2
 80115e4:	68ba      	ldr	r2, [r7, #8]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	bf0c      	ite	eq
 80115ea:	2301      	moveq	r3, #1
 80115ec:	2300      	movne	r3, #0
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	461a      	mov	r2, r3
 80115f2:	79fb      	ldrb	r3, [r7, #7]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d0a0      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
	...

08011604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011604:	b480      	push	{r7}
 8011606:	b0a3      	sub	sp, #140	@ 0x8c
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	4613      	mov	r3, r2
 8011610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	68ba      	ldr	r2, [r7, #8]
 8011616:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	88fa      	ldrh	r2, [r7, #6]
 801161c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	88fa      	ldrh	r2, [r7, #6]
 8011624:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2200      	movs	r2, #0
 801162c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	689b      	ldr	r3, [r3, #8]
 8011632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011636:	d10e      	bne.n	8011656 <UART_Start_Receive_IT+0x52>
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	691b      	ldr	r3, [r3, #16]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d105      	bne.n	801164c <UART_Start_Receive_IT+0x48>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011646:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801164a:	e02d      	b.n	80116a8 <UART_Start_Receive_IT+0xa4>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	22ff      	movs	r2, #255	@ 0xff
 8011650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011654:	e028      	b.n	80116a8 <UART_Start_Receive_IT+0xa4>
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	689b      	ldr	r3, [r3, #8]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d10d      	bne.n	801167a <UART_Start_Receive_IT+0x76>
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	691b      	ldr	r3, [r3, #16]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d104      	bne.n	8011670 <UART_Start_Receive_IT+0x6c>
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	22ff      	movs	r2, #255	@ 0xff
 801166a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801166e:	e01b      	b.n	80116a8 <UART_Start_Receive_IT+0xa4>
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	227f      	movs	r2, #127	@ 0x7f
 8011674:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011678:	e016      	b.n	80116a8 <UART_Start_Receive_IT+0xa4>
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	689b      	ldr	r3, [r3, #8]
 801167e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011682:	d10d      	bne.n	80116a0 <UART_Start_Receive_IT+0x9c>
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d104      	bne.n	8011696 <UART_Start_Receive_IT+0x92>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	227f      	movs	r2, #127	@ 0x7f
 8011690:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011694:	e008      	b.n	80116a8 <UART_Start_Receive_IT+0xa4>
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	223f      	movs	r2, #63	@ 0x3f
 801169a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801169e:	e003      	b.n	80116a8 <UART_Start_Receive_IT+0xa4>
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2200      	movs	r2, #0
 80116ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2222      	movs	r2, #34	@ 0x22
 80116b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3308      	adds	r3, #8
 80116be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80116c2:	e853 3f00 	ldrex	r3, [r3]
 80116c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80116c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80116ca:	f043 0301 	orr.w	r3, r3, #1
 80116ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	3308      	adds	r3, #8
 80116d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80116dc:	673a      	str	r2, [r7, #112]	@ 0x70
 80116de:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80116e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80116e4:	e841 2300 	strex	r3, r2, [r1]
 80116e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80116ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1e3      	bne.n	80116b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80116f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116f8:	d14f      	bne.n	801179a <UART_Start_Receive_IT+0x196>
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011700:	88fa      	ldrh	r2, [r7, #6]
 8011702:	429a      	cmp	r2, r3
 8011704:	d349      	bcc.n	801179a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801170e:	d107      	bne.n	8011720 <UART_Start_Receive_IT+0x11c>
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	691b      	ldr	r3, [r3, #16]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d103      	bne.n	8011720 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	4a47      	ldr	r2, [pc, #284]	@ (8011838 <UART_Start_Receive_IT+0x234>)
 801171c:	675a      	str	r2, [r3, #116]	@ 0x74
 801171e:	e002      	b.n	8011726 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	4a46      	ldr	r2, [pc, #280]	@ (801183c <UART_Start_Receive_IT+0x238>)
 8011724:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	691b      	ldr	r3, [r3, #16]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d01a      	beq.n	8011764 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011736:	e853 3f00 	ldrex	r3, [r3]
 801173a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801173e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	461a      	mov	r2, r3
 801174c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011752:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011754:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011756:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011758:	e841 2300 	strex	r3, r2, [r1]
 801175c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801175e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011760:	2b00      	cmp	r3, #0
 8011762:	d1e4      	bne.n	801172e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	3308      	adds	r3, #8
 801176a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801176e:	e853 3f00 	ldrex	r3, [r3]
 8011772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801177a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	3308      	adds	r3, #8
 8011782:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011784:	64ba      	str	r2, [r7, #72]	@ 0x48
 8011786:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011788:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801178a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801178c:	e841 2300 	strex	r3, r2, [r1]
 8011790:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1e5      	bne.n	8011764 <UART_Start_Receive_IT+0x160>
 8011798:	e046      	b.n	8011828 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80117a2:	d107      	bne.n	80117b4 <UART_Start_Receive_IT+0x1b0>
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	691b      	ldr	r3, [r3, #16]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d103      	bne.n	80117b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4a24      	ldr	r2, [pc, #144]	@ (8011840 <UART_Start_Receive_IT+0x23c>)
 80117b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80117b2:	e002      	b.n	80117ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	4a23      	ldr	r2, [pc, #140]	@ (8011844 <UART_Start_Receive_IT+0x240>)
 80117b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d019      	beq.n	80117f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ca:	e853 3f00 	ldrex	r3, [r3]
 80117ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80117d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80117d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	461a      	mov	r2, r3
 80117de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80117e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80117e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117e8:	e841 2300 	strex	r3, r2, [r1]
 80117ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80117ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1e6      	bne.n	80117c2 <UART_Start_Receive_IT+0x1be>
 80117f4:	e018      	b.n	8011828 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	e853 3f00 	ldrex	r3, [r3]
 8011802:	613b      	str	r3, [r7, #16]
   return(result);
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	f043 0320 	orr.w	r3, r3, #32
 801180a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	461a      	mov	r2, r3
 8011812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011814:	623b      	str	r3, [r7, #32]
 8011816:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011818:	69f9      	ldr	r1, [r7, #28]
 801181a:	6a3a      	ldr	r2, [r7, #32]
 801181c:	e841 2300 	strex	r3, r2, [r1]
 8011820:	61bb      	str	r3, [r7, #24]
   return(result);
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d1e6      	bne.n	80117f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	378c      	adds	r7, #140	@ 0x8c
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop
 8011838:	08012065 	.word	0x08012065
 801183c:	08011d01 	.word	0x08011d01
 8011840:	08011b49 	.word	0x08011b49
 8011844:	08011991 	.word	0x08011991

08011848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011848:	b480      	push	{r7}
 801184a:	b095      	sub	sp, #84	@ 0x54
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011858:	e853 3f00 	ldrex	r3, [r3]
 801185c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801185e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	461a      	mov	r2, r3
 801186c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801186e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011870:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011876:	e841 2300 	strex	r3, r2, [r1]
 801187a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801187c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1e6      	bne.n	8011850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3308      	adds	r3, #8
 8011888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188a:	6a3b      	ldr	r3, [r7, #32]
 801188c:	e853 3f00 	ldrex	r3, [r3]
 8011890:	61fb      	str	r3, [r7, #28]
   return(result);
 8011892:	69fa      	ldr	r2, [r7, #28]
 8011894:	4b1e      	ldr	r3, [pc, #120]	@ (8011910 <UART_EndRxTransfer+0xc8>)
 8011896:	4013      	ands	r3, r2
 8011898:	64bb      	str	r3, [r7, #72]	@ 0x48
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	3308      	adds	r3, #8
 80118a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80118a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80118a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80118a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118aa:	e841 2300 	strex	r3, r2, [r1]
 80118ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80118b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1e5      	bne.n	8011882 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d118      	bne.n	80118f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	e853 3f00 	ldrex	r3, [r3]
 80118ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	f023 0310 	bic.w	r3, r3, #16
 80118d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	461a      	mov	r2, r3
 80118da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118dc:	61bb      	str	r3, [r7, #24]
 80118de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e0:	6979      	ldr	r1, [r7, #20]
 80118e2:	69ba      	ldr	r2, [r7, #24]
 80118e4:	e841 2300 	strex	r3, r2, [r1]
 80118e8:	613b      	str	r3, [r7, #16]
   return(result);
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1e6      	bne.n	80118be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2220      	movs	r2, #32
 80118f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2200      	movs	r2, #0
 80118fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011904:	bf00      	nop
 8011906:	3754      	adds	r7, #84	@ 0x54
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr
 8011910:	effffffe 	.word	0xeffffffe

08011914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2200      	movs	r2, #0
 8011926:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f7fe ff3e 	bl	80107ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011930:	bf00      	nop
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b088      	sub	sp, #32
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	e853 3f00 	ldrex	r3, [r3]
 801194c:	60bb      	str	r3, [r7, #8]
   return(result);
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011954:	61fb      	str	r3, [r7, #28]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	61bb      	str	r3, [r7, #24]
 8011960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011962:	6979      	ldr	r1, [r7, #20]
 8011964:	69ba      	ldr	r2, [r7, #24]
 8011966:	e841 2300 	strex	r3, r2, [r1]
 801196a:	613b      	str	r3, [r7, #16]
   return(result);
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1e6      	bne.n	8011940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2220      	movs	r2, #32
 8011976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2200      	movs	r2, #0
 801197e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f7fe ff09 	bl	8010798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011986:	bf00      	nop
 8011988:	3720      	adds	r7, #32
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
	...

08011990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b09c      	sub	sp, #112	@ 0x70
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801199e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80119a8:	2b22      	cmp	r3, #34	@ 0x22
 80119aa:	f040 80be 	bne.w	8011b2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80119b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80119bc:	b2d9      	uxtb	r1, r3
 80119be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80119c2:	b2da      	uxtb	r2, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80119c8:	400a      	ands	r2, r1
 80119ca:	b2d2      	uxtb	r2, r2
 80119cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80119d2:	1c5a      	adds	r2, r3, #1
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80119de:	b29b      	uxth	r3, r3
 80119e0:	3b01      	subs	r3, #1
 80119e2:	b29a      	uxth	r2, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	f040 80a1 	bne.w	8011b3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a00:	e853 3f00 	ldrex	r3, [r3]
 8011a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	461a      	mov	r2, r3
 8011a14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011a18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011a1e:	e841 2300 	strex	r3, r2, [r1]
 8011a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1e6      	bne.n	80119f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	3308      	adds	r3, #8
 8011a30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a34:	e853 3f00 	ldrex	r3, [r3]
 8011a38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a3c:	f023 0301 	bic.w	r3, r3, #1
 8011a40:	667b      	str	r3, [r7, #100]	@ 0x64
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	3308      	adds	r3, #8
 8011a48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8011a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a52:	e841 2300 	strex	r3, r2, [r1]
 8011a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d1e5      	bne.n	8011a2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2220      	movs	r2, #32
 8011a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	4a33      	ldr	r2, [pc, #204]	@ (8011b44 <UART_RxISR_8BIT+0x1b4>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d01f      	beq.n	8011abc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d018      	beq.n	8011abc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a92:	e853 3f00 	ldrex	r3, [r3]
 8011a96:	623b      	str	r3, [r7, #32]
   return(result);
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ab0:	e841 2300 	strex	r3, r2, [r1]
 8011ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d1e6      	bne.n	8011a8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d12e      	bne.n	8011b22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	e853 3f00 	ldrex	r3, [r3]
 8011ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f023 0310 	bic.w	r3, r3, #16
 8011ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ae8:	61fb      	str	r3, [r7, #28]
 8011aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aec:	69b9      	ldr	r1, [r7, #24]
 8011aee:	69fa      	ldr	r2, [r7, #28]
 8011af0:	e841 2300 	strex	r3, r2, [r1]
 8011af4:	617b      	str	r3, [r7, #20]
   return(result);
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1e6      	bne.n	8011aca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	69db      	ldr	r3, [r3, #28]
 8011b02:	f003 0310 	and.w	r3, r3, #16
 8011b06:	2b10      	cmp	r3, #16
 8011b08:	d103      	bne.n	8011b12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2210      	movs	r2, #16
 8011b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011b18:	4619      	mov	r1, r3
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f7ef fd14 	bl	8001548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011b20:	e00b      	b.n	8011b3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7ef fb20 	bl	8001168 <HAL_UART_RxCpltCallback>
}
 8011b28:	e007      	b.n	8011b3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	699a      	ldr	r2, [r3, #24]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f042 0208 	orr.w	r2, r2, #8
 8011b38:	619a      	str	r2, [r3, #24]
}
 8011b3a:	bf00      	nop
 8011b3c:	3770      	adds	r7, #112	@ 0x70
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	58000c00 	.word	0x58000c00

08011b48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b09c      	sub	sp, #112	@ 0x70
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011b56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011b60:	2b22      	cmp	r3, #34	@ 0x22
 8011b62:	f040 80be 	bne.w	8011ce2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b74:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011b76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8011b7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011b7e:	4013      	ands	r3, r2
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b8a:	1c9a      	adds	r2, r3, #2
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	f040 80a1 	bne.w	8011cf2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bb8:	e853 3f00 	ldrex	r3, [r3]
 8011bbc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011bc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8011bd0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011bd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011bd6:	e841 2300 	strex	r3, r2, [r1]
 8011bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1e6      	bne.n	8011bb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	3308      	adds	r3, #8
 8011be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bec:	e853 3f00 	ldrex	r3, [r3]
 8011bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf4:	f023 0301 	bic.w	r3, r3, #1
 8011bf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	3308      	adds	r3, #8
 8011c00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011c02:	643a      	str	r2, [r7, #64]	@ 0x40
 8011c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c0a:	e841 2300 	strex	r3, r2, [r1]
 8011c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1e5      	bne.n	8011be2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2220      	movs	r2, #32
 8011c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2200      	movs	r2, #0
 8011c22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2200      	movs	r2, #0
 8011c28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	4a33      	ldr	r2, [pc, #204]	@ (8011cfc <UART_RxISR_16BIT+0x1b4>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d01f      	beq.n	8011c74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d018      	beq.n	8011c74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	e853 3f00 	ldrex	r3, [r3]
 8011c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c62:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c68:	e841 2300 	strex	r3, r2, [r1]
 8011c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d1e6      	bne.n	8011c42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d12e      	bne.n	8011cda <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	e853 3f00 	ldrex	r3, [r3]
 8011c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	f023 0310 	bic.w	r3, r3, #16
 8011c96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ca0:	61bb      	str	r3, [r7, #24]
 8011ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca4:	6979      	ldr	r1, [r7, #20]
 8011ca6:	69ba      	ldr	r2, [r7, #24]
 8011ca8:	e841 2300 	strex	r3, r2, [r1]
 8011cac:	613b      	str	r3, [r7, #16]
   return(result);
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1e6      	bne.n	8011c82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	69db      	ldr	r3, [r3, #28]
 8011cba:	f003 0310 	and.w	r3, r3, #16
 8011cbe:	2b10      	cmp	r3, #16
 8011cc0:	d103      	bne.n	8011cca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	2210      	movs	r2, #16
 8011cc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7ef fc38 	bl	8001548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011cd8:	e00b      	b.n	8011cf2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7ef fa44 	bl	8001168 <HAL_UART_RxCpltCallback>
}
 8011ce0:	e007      	b.n	8011cf2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	699a      	ldr	r2, [r3, #24]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f042 0208 	orr.w	r2, r2, #8
 8011cf0:	619a      	str	r2, [r3, #24]
}
 8011cf2:	bf00      	nop
 8011cf4:	3770      	adds	r7, #112	@ 0x70
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	58000c00 	.word	0x58000c00

08011d00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b0ac      	sub	sp, #176	@ 0xb0
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011d0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	69db      	ldr	r3, [r3, #28]
 8011d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	689b      	ldr	r3, [r3, #8]
 8011d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011d36:	2b22      	cmp	r3, #34	@ 0x22
 8011d38:	f040 8181 	bne.w	801203e <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011d42:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011d46:	e124      	b.n	8011f92 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d4e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011d52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011d56:	b2d9      	uxtb	r1, r3
 8011d58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d62:	400a      	ands	r2, r1
 8011d64:	b2d2      	uxtb	r2, r2
 8011d66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d6c:	1c5a      	adds	r2, r3, #1
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	3b01      	subs	r3, #1
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	69db      	ldr	r3, [r3, #28]
 8011d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d92:	f003 0307 	and.w	r3, r3, #7
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d053      	beq.n	8011e42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d9e:	f003 0301 	and.w	r3, r3, #1
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d011      	beq.n	8011dca <UART_RxISR_8BIT_FIFOEN+0xca>
 8011da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00b      	beq.n	8011dca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2201      	movs	r2, #1
 8011db8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011dc0:	f043 0201 	orr.w	r2, r3, #1
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011dce:	f003 0302 	and.w	r3, r3, #2
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d011      	beq.n	8011dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011dda:	f003 0301 	and.w	r3, r3, #1
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00b      	beq.n	8011dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2202      	movs	r2, #2
 8011de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011df0:	f043 0204 	orr.w	r2, r3, #4
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011dfe:	f003 0304 	and.w	r3, r3, #4
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d011      	beq.n	8011e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d00b      	beq.n	8011e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	2204      	movs	r2, #4
 8011e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e20:	f043 0202 	orr.w	r2, r3, #2
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d006      	beq.n	8011e42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7fe fcb9 	bl	80107ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f040 80a1 	bne.w	8011f92 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e58:	e853 3f00 	ldrex	r3, [r3]
 8011e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8011e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011e74:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011e78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011e7a:	e841 2300 	strex	r3, r2, [r1]
 8011e7e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8011e80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1e4      	bne.n	8011e50 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	3308      	adds	r3, #8
 8011e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e90:	e853 3f00 	ldrex	r3, [r3]
 8011e94:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8011e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011e98:	4b6f      	ldr	r3, [pc, #444]	@ (8012058 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011e9a:	4013      	ands	r3, r2
 8011e9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	3308      	adds	r3, #8
 8011ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011eaa:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011eac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011eb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011eb2:	e841 2300 	strex	r3, r2, [r1]
 8011eb6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011eb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1e3      	bne.n	8011e86 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2220      	movs	r2, #32
 8011ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	4a61      	ldr	r2, [pc, #388]	@ (801205c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d021      	beq.n	8011f20 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d01a      	beq.n	8011f20 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ef2:	e853 3f00 	ldrex	r3, [r3]
 8011ef6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	461a      	mov	r2, r3
 8011f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011f0e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011f12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011f14:	e841 2300 	strex	r3, r2, [r1]
 8011f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d1e4      	bne.n	8011eea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d130      	bne.n	8011f8a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f36:	e853 3f00 	ldrex	r3, [r3]
 8011f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f3e:	f023 0310 	bic.w	r3, r3, #16
 8011f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8011f52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011f58:	e841 2300 	strex	r3, r2, [r1]
 8011f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1e4      	bne.n	8011f2e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	69db      	ldr	r3, [r3, #28]
 8011f6a:	f003 0310 	and.w	r3, r3, #16
 8011f6e:	2b10      	cmp	r3, #16
 8011f70:	d103      	bne.n	8011f7a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2210      	movs	r2, #16
 8011f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011f80:	4619      	mov	r1, r3
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7ef fae0 	bl	8001548 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8011f88:	e00e      	b.n	8011fa8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7ef f8ec 	bl	8001168 <HAL_UART_RxCpltCallback>
        break;
 8011f90:	e00a      	b.n	8011fa8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011f92:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d006      	beq.n	8011fa8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8011f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f9e:	f003 0320 	and.w	r3, r3, #32
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f47f aed0 	bne.w	8011d48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011fae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011fb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d049      	beq.n	801204e <UART_RxISR_8BIT_FIFOEN+0x34e>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011fc0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d242      	bcs.n	801204e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	3308      	adds	r3, #8
 8011fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	e853 3f00 	ldrex	r3, [r3]
 8011fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011fde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ff4:	e841 2300 	strex	r3, r2, [r1]
 8011ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1e3      	bne.n	8011fc8 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4a17      	ldr	r2, [pc, #92]	@ (8012060 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8012004:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	e853 3f00 	ldrex	r3, [r3]
 8012012:	60bb      	str	r3, [r7, #8]
   return(result);
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	f043 0320 	orr.w	r3, r3, #32
 801201a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	461a      	mov	r2, r3
 8012024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012028:	61bb      	str	r3, [r7, #24]
 801202a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	6979      	ldr	r1, [r7, #20]
 801202e:	69ba      	ldr	r2, [r7, #24]
 8012030:	e841 2300 	strex	r3, r2, [r1]
 8012034:	613b      	str	r3, [r7, #16]
   return(result);
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1e4      	bne.n	8012006 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801203c:	e007      	b.n	801204e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	699a      	ldr	r2, [r3, #24]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f042 0208 	orr.w	r2, r2, #8
 801204c:	619a      	str	r2, [r3, #24]
}
 801204e:	bf00      	nop
 8012050:	37b0      	adds	r7, #176	@ 0xb0
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	effffffe 	.word	0xeffffffe
 801205c:	58000c00 	.word	0x58000c00
 8012060:	08011991 	.word	0x08011991

08012064 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b0ae      	sub	sp, #184	@ 0xb8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012072:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	69db      	ldr	r3, [r3, #28]
 801207c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	689b      	ldr	r3, [r3, #8]
 8012090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801209a:	2b22      	cmp	r3, #34	@ 0x22
 801209c:	f040 8185 	bne.w	80123aa <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80120a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80120aa:	e128      	b.n	80122fe <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80120be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80120c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80120c6:	4013      	ands	r3, r2
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80120ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120d4:	1c9a      	adds	r2, r3, #2
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	3b01      	subs	r3, #1
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	69db      	ldr	r3, [r3, #28]
 80120f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80120f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80120fa:	f003 0307 	and.w	r3, r3, #7
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d053      	beq.n	80121aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	d011      	beq.n	8012132 <UART_RxISR_16BIT_FIFOEN+0xce>
 801210e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012116:	2b00      	cmp	r3, #0
 8012118:	d00b      	beq.n	8012132 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2201      	movs	r2, #1
 8012120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012128:	f043 0201 	orr.w	r2, r3, #1
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012136:	f003 0302 	and.w	r3, r3, #2
 801213a:	2b00      	cmp	r3, #0
 801213c:	d011      	beq.n	8012162 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801213e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012142:	f003 0301 	and.w	r3, r3, #1
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00b      	beq.n	8012162 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	2202      	movs	r2, #2
 8012150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012158:	f043 0204 	orr.w	r2, r3, #4
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012166:	f003 0304 	and.w	r3, r3, #4
 801216a:	2b00      	cmp	r3, #0
 801216c:	d011      	beq.n	8012192 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801216e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012172:	f003 0301 	and.w	r3, r3, #1
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00b      	beq.n	8012192 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2204      	movs	r2, #4
 8012180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012188:	f043 0202 	orr.w	r2, r3, #2
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012198:	2b00      	cmp	r3, #0
 801219a:	d006      	beq.n	80121aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7fe fb05 	bl	80107ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2200      	movs	r2, #0
 80121a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	f040 80a3 	bne.w	80122fe <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80121c0:	e853 3f00 	ldrex	r3, [r3]
 80121c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80121c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80121c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80121cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	461a      	mov	r2, r3
 80121d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80121da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80121de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80121e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80121e6:	e841 2300 	strex	r3, r2, [r1]
 80121ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80121ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1e2      	bne.n	80121b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	3308      	adds	r3, #8
 80121f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80121fc:	e853 3f00 	ldrex	r3, [r3]
 8012200:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012202:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012204:	4b6f      	ldr	r3, [pc, #444]	@ (80123c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012206:	4013      	ands	r3, r2
 8012208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	3308      	adds	r3, #8
 8012212:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012216:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012218:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801221a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801221c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801221e:	e841 2300 	strex	r3, r2, [r1]
 8012222:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1e3      	bne.n	80121f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2220      	movs	r2, #32
 801222e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2200      	movs	r2, #0
 8012236:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2200      	movs	r2, #0
 801223c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	4a61      	ldr	r2, [pc, #388]	@ (80123c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012244:	4293      	cmp	r3, r2
 8012246:	d021      	beq.n	801228c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012252:	2b00      	cmp	r3, #0
 8012254:	d01a      	beq.n	801228c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801225c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801225e:	e853 3f00 	ldrex	r3, [r3]
 8012262:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012266:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801226a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	461a      	mov	r2, r3
 8012274:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012278:	65bb      	str	r3, [r7, #88]	@ 0x58
 801227a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801227c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801227e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012280:	e841 2300 	strex	r3, r2, [r1]
 8012284:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1e4      	bne.n	8012256 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012290:	2b01      	cmp	r3, #1
 8012292:	d130      	bne.n	80122f6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a2:	e853 3f00 	ldrex	r3, [r3]
 80122a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80122a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122aa:	f023 0310 	bic.w	r3, r3, #16
 80122ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	461a      	mov	r2, r3
 80122b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80122bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80122be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80122c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122c4:	e841 2300 	strex	r3, r2, [r1]
 80122c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80122ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1e4      	bne.n	801229a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	69db      	ldr	r3, [r3, #28]
 80122d6:	f003 0310 	and.w	r3, r3, #16
 80122da:	2b10      	cmp	r3, #16
 80122dc:	d103      	bne.n	80122e6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2210      	movs	r2, #16
 80122e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80122ec:	4619      	mov	r1, r3
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f7ef f92a 	bl	8001548 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80122f4:	e00e      	b.n	8012314 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7ee ff36 	bl	8001168 <HAL_UART_RxCpltCallback>
        break;
 80122fc:	e00a      	b.n	8012314 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80122fe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012302:	2b00      	cmp	r3, #0
 8012304:	d006      	beq.n	8012314 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8012306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801230a:	f003 0320 	and.w	r3, r3, #32
 801230e:	2b00      	cmp	r3, #0
 8012310:	f47f aecc 	bne.w	80120ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801231a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801231e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012322:	2b00      	cmp	r3, #0
 8012324:	d049      	beq.n	80123ba <UART_RxISR_16BIT_FIFOEN+0x356>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801232c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012330:	429a      	cmp	r2, r3
 8012332:	d242      	bcs.n	80123ba <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	3308      	adds	r3, #8
 801233a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233e:	e853 3f00 	ldrex	r3, [r3]
 8012342:	623b      	str	r3, [r7, #32]
   return(result);
 8012344:	6a3b      	ldr	r3, [r7, #32]
 8012346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801234a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	3308      	adds	r3, #8
 8012354:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012358:	633a      	str	r2, [r7, #48]	@ 0x30
 801235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801235c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801235e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012360:	e841 2300 	strex	r3, r2, [r1]
 8012364:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1e3      	bne.n	8012334 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4a17      	ldr	r2, [pc, #92]	@ (80123cc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8012370:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	e853 3f00 	ldrex	r3, [r3]
 801237e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f043 0320 	orr.w	r3, r3, #32
 8012386:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	461a      	mov	r2, r3
 8012390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012394:	61fb      	str	r3, [r7, #28]
 8012396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012398:	69b9      	ldr	r1, [r7, #24]
 801239a:	69fa      	ldr	r2, [r7, #28]
 801239c:	e841 2300 	strex	r3, r2, [r1]
 80123a0:	617b      	str	r3, [r7, #20]
   return(result);
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1e4      	bne.n	8012372 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123a8:	e007      	b.n	80123ba <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	699a      	ldr	r2, [r3, #24]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f042 0208 	orr.w	r2, r2, #8
 80123b8:	619a      	str	r2, [r3, #24]
}
 80123ba:	bf00      	nop
 80123bc:	37b8      	adds	r7, #184	@ 0xb8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	effffffe 	.word	0xeffffffe
 80123c8:	58000c00 	.word	0x58000c00
 80123cc:	08011b49 	.word	0x08011b49

080123d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80123d8:	bf00      	nop
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80123ec:	bf00      	nop
 80123ee:	370c      	adds	r7, #12
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012400:	bf00      	nop
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801240c:	b480      	push	{r7}
 801240e:	b085      	sub	sp, #20
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801241a:	2b01      	cmp	r3, #1
 801241c:	d101      	bne.n	8012422 <HAL_UARTEx_DisableFifoMode+0x16>
 801241e:	2302      	movs	r3, #2
 8012420:	e027      	b.n	8012472 <HAL_UARTEx_DisableFifoMode+0x66>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2201      	movs	r2, #1
 8012426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2224      	movs	r2, #36	@ 0x24
 801242e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f022 0201 	bic.w	r2, r2, #1
 8012448:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012450:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2200      	movs	r2, #0
 8012456:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	68fa      	ldr	r2, [r7, #12]
 801245e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2220      	movs	r2, #32
 8012464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012470:	2300      	movs	r3, #0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr

0801247e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801247e:	b580      	push	{r7, lr}
 8012480:	b084      	sub	sp, #16
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
 8012486:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801248e:	2b01      	cmp	r3, #1
 8012490:	d101      	bne.n	8012496 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012492:	2302      	movs	r3, #2
 8012494:	e02d      	b.n	80124f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2201      	movs	r2, #1
 801249a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2224      	movs	r2, #36	@ 0x24
 80124a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	681a      	ldr	r2, [r3, #0]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	f022 0201 	bic.w	r2, r2, #1
 80124bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	430a      	orrs	r2, r1
 80124d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f000 f850 	bl	8012578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	68fa      	ldr	r2, [r7, #12]
 80124de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2220      	movs	r2, #32
 80124e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b084      	sub	sp, #16
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801250a:	2b01      	cmp	r3, #1
 801250c:	d101      	bne.n	8012512 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801250e:	2302      	movs	r3, #2
 8012510:	e02d      	b.n	801256e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2201      	movs	r2, #1
 8012516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2224      	movs	r2, #36	@ 0x24
 801251e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f022 0201 	bic.w	r2, r2, #1
 8012538:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	683a      	ldr	r2, [r7, #0]
 801254a:	430a      	orrs	r2, r1
 801254c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 f812 	bl	8012578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2220      	movs	r2, #32
 8012560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2200      	movs	r2, #0
 8012568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801256c:	2300      	movs	r3, #0
}
 801256e:	4618      	mov	r0, r3
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
	...

08012578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012584:	2b00      	cmp	r3, #0
 8012586:	d108      	bne.n	801259a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2201      	movs	r2, #1
 801258c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2201      	movs	r2, #1
 8012594:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012598:	e031      	b.n	80125fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801259a:	2310      	movs	r3, #16
 801259c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801259e:	2310      	movs	r3, #16
 80125a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	0e5b      	lsrs	r3, r3, #25
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	f003 0307 	and.w	r3, r3, #7
 80125b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	689b      	ldr	r3, [r3, #8]
 80125b8:	0f5b      	lsrs	r3, r3, #29
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	f003 0307 	and.w	r3, r3, #7
 80125c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80125c2:	7bbb      	ldrb	r3, [r7, #14]
 80125c4:	7b3a      	ldrb	r2, [r7, #12]
 80125c6:	4911      	ldr	r1, [pc, #68]	@ (801260c <UARTEx_SetNbDataToProcess+0x94>)
 80125c8:	5c8a      	ldrb	r2, [r1, r2]
 80125ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80125ce:	7b3a      	ldrb	r2, [r7, #12]
 80125d0:	490f      	ldr	r1, [pc, #60]	@ (8012610 <UARTEx_SetNbDataToProcess+0x98>)
 80125d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80125d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80125d8:	b29a      	uxth	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80125e0:	7bfb      	ldrb	r3, [r7, #15]
 80125e2:	7b7a      	ldrb	r2, [r7, #13]
 80125e4:	4909      	ldr	r1, [pc, #36]	@ (801260c <UARTEx_SetNbDataToProcess+0x94>)
 80125e6:	5c8a      	ldrb	r2, [r1, r2]
 80125e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80125ec:	7b7a      	ldrb	r2, [r7, #13]
 80125ee:	4908      	ldr	r1, [pc, #32]	@ (8012610 <UARTEx_SetNbDataToProcess+0x98>)
 80125f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80125f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80125fe:	bf00      	nop
 8012600:	3714      	adds	r7, #20
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	080182b0 	.word	0x080182b0
 8012610:	080182b8 	.word	0x080182b8

08012614 <attitude_error_to_rates>:
quatf _qd;  // 期望姿态
vec3f _rates_sp;

/* ---------------- 新版 —— 不使用旋转矩阵误差，使用四元数误差 ---------------- */
void attitude_error_to_rates(void)
{
 8012614:	b480      	push	{r7}
 8012616:	b08b      	sub	sp, #44	@ 0x2c
 8012618:	af00      	add	r7, sp, #0
	    /* 1. 误差四元数 qe = q⁻¹ · qd */
	    quatf qe;
	    qe.w =  _q.w*_qd.w + _q.x*_qd.x + _q.y*_qd.y + _q.z*_qd.z;
 801261a:	4b9e      	ldr	r3, [pc, #632]	@ (8012894 <attitude_error_to_rates+0x280>)
 801261c:	ed93 7a00 	vldr	s14, [r3]
 8012620:	4b9d      	ldr	r3, [pc, #628]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012622:	edd3 7a00 	vldr	s15, [r3]
 8012626:	ee27 7a27 	vmul.f32	s14, s14, s15
 801262a:	4b9a      	ldr	r3, [pc, #616]	@ (8012894 <attitude_error_to_rates+0x280>)
 801262c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012630:	4b99      	ldr	r3, [pc, #612]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012632:	edd3 7a01 	vldr	s15, [r3, #4]
 8012636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801263a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801263e:	4b95      	ldr	r3, [pc, #596]	@ (8012894 <attitude_error_to_rates+0x280>)
 8012640:	edd3 6a02 	vldr	s13, [r3, #8]
 8012644:	4b94      	ldr	r3, [pc, #592]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012646:	edd3 7a02 	vldr	s15, [r3, #8]
 801264a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801264e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012652:	4b90      	ldr	r3, [pc, #576]	@ (8012894 <attitude_error_to_rates+0x280>)
 8012654:	edd3 6a03 	vldr	s13, [r3, #12]
 8012658:	4b8f      	ldr	r3, [pc, #572]	@ (8012898 <attitude_error_to_rates+0x284>)
 801265a:	edd3 7a03 	vldr	s15, [r3, #12]
 801265e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012666:	edc7 7a03 	vstr	s15, [r7, #12]
	    qe.x = -_q.x*_qd.w + _q.w*_qd.x + _q.y*_qd.z - _q.z*_qd.y;
 801266a:	4b8a      	ldr	r3, [pc, #552]	@ (8012894 <attitude_error_to_rates+0x280>)
 801266c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012670:	eeb1 7a67 	vneg.f32	s14, s15
 8012674:	4b88      	ldr	r3, [pc, #544]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012676:	edd3 7a00 	vldr	s15, [r3]
 801267a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801267e:	4b85      	ldr	r3, [pc, #532]	@ (8012894 <attitude_error_to_rates+0x280>)
 8012680:	edd3 6a00 	vldr	s13, [r3]
 8012684:	4b84      	ldr	r3, [pc, #528]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012686:	edd3 7a01 	vldr	s15, [r3, #4]
 801268a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801268e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012692:	4b80      	ldr	r3, [pc, #512]	@ (8012894 <attitude_error_to_rates+0x280>)
 8012694:	edd3 6a02 	vldr	s13, [r3, #8]
 8012698:	4b7f      	ldr	r3, [pc, #508]	@ (8012898 <attitude_error_to_rates+0x284>)
 801269a:	edd3 7a03 	vldr	s15, [r3, #12]
 801269e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126a6:	4b7b      	ldr	r3, [pc, #492]	@ (8012894 <attitude_error_to_rates+0x280>)
 80126a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80126ac:	4b7a      	ldr	r3, [pc, #488]	@ (8012898 <attitude_error_to_rates+0x284>)
 80126ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80126b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126ba:	edc7 7a04 	vstr	s15, [r7, #16]
	    qe.y = -_q.y*_qd.w - _q.x*_qd.z + _q.w*_qd.y + _q.z*_qd.x;
 80126be:	4b75      	ldr	r3, [pc, #468]	@ (8012894 <attitude_error_to_rates+0x280>)
 80126c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80126c4:	eeb1 7a67 	vneg.f32	s14, s15
 80126c8:	4b73      	ldr	r3, [pc, #460]	@ (8012898 <attitude_error_to_rates+0x284>)
 80126ca:	edd3 7a00 	vldr	s15, [r3]
 80126ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80126d2:	4b70      	ldr	r3, [pc, #448]	@ (8012894 <attitude_error_to_rates+0x280>)
 80126d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80126d8:	4b6f      	ldr	r3, [pc, #444]	@ (8012898 <attitude_error_to_rates+0x284>)
 80126da:	edd3 7a03 	vldr	s15, [r3, #12]
 80126de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80126e6:	4b6b      	ldr	r3, [pc, #428]	@ (8012894 <attitude_error_to_rates+0x280>)
 80126e8:	edd3 6a00 	vldr	s13, [r3]
 80126ec:	4b6a      	ldr	r3, [pc, #424]	@ (8012898 <attitude_error_to_rates+0x284>)
 80126ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80126f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126fa:	4b66      	ldr	r3, [pc, #408]	@ (8012894 <attitude_error_to_rates+0x280>)
 80126fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8012700:	4b65      	ldr	r3, [pc, #404]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012702:	edd3 7a01 	vldr	s15, [r3, #4]
 8012706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801270a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801270e:	edc7 7a05 	vstr	s15, [r7, #20]
	    qe.z = -_q.z*_qd.w + _q.x*_qd.y - _q.y*_qd.x + _q.w*_qd.z;
 8012712:	4b60      	ldr	r3, [pc, #384]	@ (8012894 <attitude_error_to_rates+0x280>)
 8012714:	edd3 7a03 	vldr	s15, [r3, #12]
 8012718:	eeb1 7a67 	vneg.f32	s14, s15
 801271c:	4b5e      	ldr	r3, [pc, #376]	@ (8012898 <attitude_error_to_rates+0x284>)
 801271e:	edd3 7a00 	vldr	s15, [r3]
 8012722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012726:	4b5b      	ldr	r3, [pc, #364]	@ (8012894 <attitude_error_to_rates+0x280>)
 8012728:	edd3 6a01 	vldr	s13, [r3, #4]
 801272c:	4b5a      	ldr	r3, [pc, #360]	@ (8012898 <attitude_error_to_rates+0x284>)
 801272e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012736:	ee37 7a27 	vadd.f32	s14, s14, s15
 801273a:	4b56      	ldr	r3, [pc, #344]	@ (8012894 <attitude_error_to_rates+0x280>)
 801273c:	edd3 6a02 	vldr	s13, [r3, #8]
 8012740:	4b55      	ldr	r3, [pc, #340]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012742:	edd3 7a01 	vldr	s15, [r3, #4]
 8012746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801274a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801274e:	4b51      	ldr	r3, [pc, #324]	@ (8012894 <attitude_error_to_rates+0x280>)
 8012750:	edd3 6a00 	vldr	s13, [r3]
 8012754:	4b50      	ldr	r3, [pc, #320]	@ (8012898 <attitude_error_to_rates+0x284>)
 8012756:	edd3 7a03 	vldr	s15, [r3, #12]
 801275a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801275e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012762:	edc7 7a06 	vstr	s15, [r7, #24]
//	            eq.x = theta * qe.x / qe_norm;
//	            eq.y = theta * qe.y / qe_norm;
//	            eq.z = theta * qe.z / qe_norm;
//	        }
	    /* 2. 轴角误差向量 eq = 2·sign(qe.w)·qe.imag()   （小角度近似） */
	    	    float sign = (qe.w >= 0.0f) ? 1.0f : -1.0f;
 8012766:	edd7 7a03 	vldr	s15, [r7, #12]
 801276a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012772:	db02      	blt.n	801277a <attitude_error_to_rates+0x166>
 8012774:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8012778:	e000      	b.n	801277c <attitude_error_to_rates+0x168>
 801277a:	4b48      	ldr	r3, [pc, #288]	@ (801289c <attitude_error_to_rates+0x288>)
 801277c:	623b      	str	r3, [r7, #32]
	    	    vec3f eq = {{{ 2.0f * sign * qe.x,
 801277e:	edd7 7a08 	vldr	s15, [r7, #32]
 8012782:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8012786:	edd7 7a04 	vldr	s15, [r7, #16]
 801278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801278e:	edc7 7a00 	vstr	s15, [r7]
	    	                  2.0f * sign * qe.y,
 8012792:	edd7 7a08 	vldr	s15, [r7, #32]
 8012796:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801279a:	edd7 7a05 	vldr	s15, [r7, #20]
 801279e:	ee67 7a27 	vmul.f32	s15, s14, s15
	    	    vec3f eq = {{{ 2.0f * sign * qe.x,
 80127a2:	edc7 7a01 	vstr	s15, [r7, #4]
	    	                  2.0f * sign * qe.z }}};
 80127a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80127aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80127ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80127b2:	ee67 7a27 	vmul.f32	s15, s14, s15
	    	    vec3f eq = {{{ 2.0f * sign * qe.x,
 80127b6:	edc7 7a02 	vstr	s15, [r7, #8]

	    /* 3. P 增益放大 → 期望角速度 */
	    _rates_sp.x = _att_p.x * eq.x;
 80127ba:	4b39      	ldr	r3, [pc, #228]	@ (80128a0 <attitude_error_to_rates+0x28c>)
 80127bc:	ed93 7a00 	vldr	s14, [r3]
 80127c0:	edd7 7a00 	vldr	s15, [r7]
 80127c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127c8:	4b36      	ldr	r3, [pc, #216]	@ (80128a4 <attitude_error_to_rates+0x290>)
 80127ca:	edc3 7a00 	vstr	s15, [r3]
	    _rates_sp.y = _att_p.y * eq.y;
 80127ce:	4b34      	ldr	r3, [pc, #208]	@ (80128a0 <attitude_error_to_rates+0x28c>)
 80127d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80127d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80127d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127dc:	4b31      	ldr	r3, [pc, #196]	@ (80128a4 <attitude_error_to_rates+0x290>)
 80127de:	edc3 7a01 	vstr	s15, [r3, #4]
	    _rates_sp.z = _att_p.z * eq.z;
 80127e2:	4b2f      	ldr	r3, [pc, #188]	@ (80128a0 <attitude_error_to_rates+0x28c>)
 80127e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80127e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80127ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127f0:	4b2c      	ldr	r3, [pc, #176]	@ (80128a4 <attitude_error_to_rates+0x290>)
 80127f2:	edc3 7a02 	vstr	s15, [r3, #8]

	    /* 4. 限幅 */
	    for (int i = 0; i < 3; ++i) {
 80127f6:	2300      	movs	r3, #0
 80127f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80127fa:	e041      	b.n	8012880 <attitude_error_to_rates+0x26c>
	        float *v = (float *)&_rates_sp;
 80127fc:	4b29      	ldr	r3, [pc, #164]	@ (80128a4 <attitude_error_to_rates+0x290>)
 80127fe:	61fb      	str	r3, [r7, #28]
	        if      (v[i] >  _rate_limit.v[i]) v[i] =  _rate_limit.v[i];
 8012800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	69fa      	ldr	r2, [r7, #28]
 8012806:	4413      	add	r3, r2
 8012808:	ed93 7a00 	vldr	s14, [r3]
 801280c:	4a26      	ldr	r2, [pc, #152]	@ (80128a8 <attitude_error_to_rates+0x294>)
 801280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	4413      	add	r3, r2
 8012814:	edd3 7a00 	vldr	s15, [r3]
 8012818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012820:	dd0a      	ble.n	8012838 <attitude_error_to_rates+0x224>
 8012822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	69fa      	ldr	r2, [r7, #28]
 8012828:	4413      	add	r3, r2
 801282a:	491f      	ldr	r1, [pc, #124]	@ (80128a8 <attitude_error_to_rates+0x294>)
 801282c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801282e:	0092      	lsls	r2, r2, #2
 8012830:	440a      	add	r2, r1
 8012832:	6812      	ldr	r2, [r2, #0]
 8012834:	601a      	str	r2, [r3, #0]
 8012836:	e020      	b.n	801287a <attitude_error_to_rates+0x266>
	        else if (v[i] < -_rate_limit.v[i]) v[i] = -_rate_limit.v[i];
 8012838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	69fa      	ldr	r2, [r7, #28]
 801283e:	4413      	add	r3, r2
 8012840:	ed93 7a00 	vldr	s14, [r3]
 8012844:	4a18      	ldr	r2, [pc, #96]	@ (80128a8 <attitude_error_to_rates+0x294>)
 8012846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012848:	009b      	lsls	r3, r3, #2
 801284a:	4413      	add	r3, r2
 801284c:	edd3 7a00 	vldr	s15, [r3]
 8012850:	eef1 7a67 	vneg.f32	s15, s15
 8012854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285c:	d50d      	bpl.n	801287a <attitude_error_to_rates+0x266>
 801285e:	4a12      	ldr	r2, [pc, #72]	@ (80128a8 <attitude_error_to_rates+0x294>)
 8012860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012862:	009b      	lsls	r3, r3, #2
 8012864:	4413      	add	r3, r2
 8012866:	edd3 7a00 	vldr	s15, [r3]
 801286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801286c:	009b      	lsls	r3, r3, #2
 801286e:	69fa      	ldr	r2, [r7, #28]
 8012870:	4413      	add	r3, r2
 8012872:	eef1 7a67 	vneg.f32	s15, s15
 8012876:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < 3; ++i) {
 801287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287c:	3301      	adds	r3, #1
 801287e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012882:	2b02      	cmp	r3, #2
 8012884:	ddba      	ble.n	80127fc <attitude_error_to_rates+0x1e8>
	    }

}
 8012886:	bf00      	nop
 8012888:	bf00      	nop
 801288a:	372c      	adds	r7, #44	@ 0x2c
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	24000058 	.word	0x24000058
 8012898:	24000fa4 	.word	0x24000fa4
 801289c:	bf800000 	.word	0xbf800000
 80128a0:	24000018 	.word	0x24000018
 80128a4:	24000fb4 	.word	0x24000fb4
 80128a8:	24000024 	.word	0x24000024

080128ac <constrain>:



/* ----------  工具函数 ---------- */
static inline float constrain(float val, float min, float max)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b085      	sub	sp, #20
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80128b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80128ba:	ed87 1a01 	vstr	s2, [r7, #4]
    return val < min ? min : (val > max ? max : val);
 80128be:	ed97 7a03 	vldr	s14, [r7, #12]
 80128c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80128c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ce:	d501      	bpl.n	80128d4 <constrain+0x28>
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	e00b      	b.n	80128ec <constrain+0x40>
 80128d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80128d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80128dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e4:	dd01      	ble.n	80128ea <constrain+0x3e>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	e000      	b.n	80128ec <constrain+0x40>
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	ee07 3a90 	vmov	s15, r3
}
 80128f0:	eeb0 0a67 	vmov.f32	s0, s15
 80128f4:	3714      	adds	r7, #20
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr
	...

08012900 <rate_error_to_torque>:
vec3f torque; // 力矩向量，由 rate_error_to_torque 函数计算得到

// 该函数用于根据期望角速度和当前角速度的误差，计算出需要施加的力矩
// 参数 dt 表示时间间隔，用于积分和微分计算
void rate_error_to_torque(float dt)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b08e      	sub	sp, #56	@ 0x38
 8012904:	af00      	add	r7, sp, #0
 8012906:	ed87 0a01 	vstr	s0, [r7, #4]
    // 计算期望角速度 _rates_sp 和当前角速度 _rates 之间的误差
    // 误差向量 err 的每个分量分别对应 roll、pitch 和 yaw 轴的误差
    vec3f err = {{{
        _rates_sp.v[0] - _rates.v[0],  // roll 轴的误差
 801290a:	4ba4      	ldr	r3, [pc, #656]	@ (8012b9c <rate_error_to_torque+0x29c>)
 801290c:	ed93 7a00 	vldr	s14, [r3]
 8012910:	4ba3      	ldr	r3, [pc, #652]	@ (8012ba0 <rate_error_to_torque+0x2a0>)
 8012912:	edd3 7a00 	vldr	s15, [r3]
 8012916:	ee77 7a67 	vsub.f32	s15, s14, s15
    vec3f err = {{{
 801291a:	edc7 7a06 	vstr	s15, [r7, #24]
        _rates_sp.v[1] - _rates.v[1],  // pitch 轴的误差
 801291e:	4b9f      	ldr	r3, [pc, #636]	@ (8012b9c <rate_error_to_torque+0x29c>)
 8012920:	ed93 7a01 	vldr	s14, [r3, #4]
 8012924:	4b9e      	ldr	r3, [pc, #632]	@ (8012ba0 <rate_error_to_torque+0x2a0>)
 8012926:	edd3 7a01 	vldr	s15, [r3, #4]
 801292a:	ee77 7a67 	vsub.f32	s15, s14, s15
    vec3f err = {{{
 801292e:	edc7 7a07 	vstr	s15, [r7, #28]
        _rates_sp.v[2] - _rates.v[2]   // yaw 轴的误差
 8012932:	4b9a      	ldr	r3, [pc, #616]	@ (8012b9c <rate_error_to_torque+0x29c>)
 8012934:	ed93 7a02 	vldr	s14, [r3, #8]
 8012938:	4b99      	ldr	r3, [pc, #612]	@ (8012ba0 <rate_error_to_torque+0x2a0>)
 801293a:	edd3 7a02 	vldr	s15, [r3, #8]
 801293e:	ee77 7a67 	vsub.f32	s15, s14, s15
    vec3f err = {{{
 8012942:	edc7 7a08 	vstr	s15, [r7, #32]

    /* 积分累加（需外部清零） */
    // 对误差进行积分操作，积分项用于消除稳态误差
    // 积分结果存储在 _rate_int 数组中，每个元素对应一个轴
    // 积分公式为：积分项 = 积分增益 * 误差 * 时间间隔
    for (int i = 0; i < 3; ++i)
 8012946:	2300      	movs	r3, #0
 8012948:	637b      	str	r3, [r7, #52]	@ 0x34
 801294a:	e041      	b.n	80129d0 <rate_error_to_torque+0xd0>
        {_rate_int[i] += _rate_i[i] * err.v[i] * dt;
 801294c:	4a95      	ldr	r2, [pc, #596]	@ (8012ba4 <rate_error_to_torque+0x2a4>)
 801294e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012950:	009b      	lsls	r3, r3, #2
 8012952:	4413      	add	r3, r2
 8012954:	ed93 7a00 	vldr	s14, [r3]
 8012958:	4a93      	ldr	r2, [pc, #588]	@ (8012ba8 <rate_error_to_torque+0x2a8>)
 801295a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	4413      	add	r3, r2
 8012960:	edd3 6a00 	vldr	s13, [r3]
 8012964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	3338      	adds	r3, #56	@ 0x38
 801296a:	443b      	add	r3, r7
 801296c:	3b20      	subs	r3, #32
 801296e:	edd3 7a00 	vldr	s15, [r3]
 8012972:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012976:	edd7 7a01 	vldr	s15, [r7, #4]
 801297a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012982:	4a88      	ldr	r2, [pc, #544]	@ (8012ba4 <rate_error_to_torque+0x2a4>)
 8012984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	edc3 7a00 	vstr	s15, [r3]
        _rate_int[i] = constrain(_rate_int[i], -max_int, max_int);
 801298e:	4a85      	ldr	r2, [pc, #532]	@ (8012ba4 <rate_error_to_torque+0x2a4>)
 8012990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	ed93 7a00 	vldr	s14, [r3]
 801299a:	4b84      	ldr	r3, [pc, #528]	@ (8012bac <rate_error_to_torque+0x2ac>)
 801299c:	edd3 7a00 	vldr	s15, [r3]
 80129a0:	eef1 7a67 	vneg.f32	s15, s15
 80129a4:	4b81      	ldr	r3, [pc, #516]	@ (8012bac <rate_error_to_torque+0x2ac>)
 80129a6:	edd3 6a00 	vldr	s13, [r3]
 80129aa:	eeb0 1a66 	vmov.f32	s2, s13
 80129ae:	eef0 0a67 	vmov.f32	s1, s15
 80129b2:	eeb0 0a47 	vmov.f32	s0, s14
 80129b6:	f7ff ff79 	bl	80128ac <constrain>
 80129ba:	eef0 7a40 	vmov.f32	s15, s0
 80129be:	4a79      	ldr	r2, [pc, #484]	@ (8012ba4 <rate_error_to_torque+0x2a4>)
 80129c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	4413      	add	r3, r2
 80129c6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; ++i)
 80129ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129cc:	3301      	adds	r3, #1
 80129ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80129d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129d2:	2b02      	cmp	r3, #2
 80129d4:	ddba      	ble.n	801294c <rate_error_to_torque+0x4c>
    /* 微分项 */
    // 计算当前角速度相对于上一周期角速度的变化率，即微分项
    // 微分项用于预测系统的变化趋势，提高系统的响应速度
    // 变化率向量 deriv 的每个分量分别对应 roll、pitch 和 yaw 轴的变化率
    vec3f deriv = {
        (_rates.v[0] - _rate_prev[0]) / dt,
 80129d6:	4b72      	ldr	r3, [pc, #456]	@ (8012ba0 <rate_error_to_torque+0x2a0>)
 80129d8:	ed93 7a00 	vldr	s14, [r3]
 80129dc:	4b74      	ldr	r3, [pc, #464]	@ (8012bb0 <rate_error_to_torque+0x2b0>)
 80129de:	edd3 7a00 	vldr	s15, [r3]
 80129e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80129e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80129ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
    vec3f deriv = {
 80129ee:	edc7 7a03 	vstr	s15, [r7, #12]
        (_rates.v[1] - _rate_prev[1]) / dt,
 80129f2:	4b6b      	ldr	r3, [pc, #428]	@ (8012ba0 <rate_error_to_torque+0x2a0>)
 80129f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80129f8:	4b6d      	ldr	r3, [pc, #436]	@ (8012bb0 <rate_error_to_torque+0x2b0>)
 80129fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80129fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012a02:	ed97 7a01 	vldr	s14, [r7, #4]
 8012a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
    vec3f deriv = {
 8012a0a:	edc7 7a04 	vstr	s15, [r7, #16]
        (_rates.v[2] - _rate_prev[2]) / dt
 8012a0e:	4b64      	ldr	r3, [pc, #400]	@ (8012ba0 <rate_error_to_torque+0x2a0>)
 8012a10:	ed93 7a02 	vldr	s14, [r3, #8]
 8012a14:	4b66      	ldr	r3, [pc, #408]	@ (8012bb0 <rate_error_to_torque+0x2b0>)
 8012a16:	edd3 7a02 	vldr	s15, [r3, #8]
 8012a1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012a1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8012a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
    vec3f deriv = {
 8012a26:	edc7 7a05 	vstr	s15, [r7, #20]
    };

                                /* 给微分项（D 项）再套一个 80 Hz 一阶低通，防止高频噪声被放大成抖振 */
    const float dterm_lpf_tau = 1.0f / (2.0f * M_PI * 80.0f);   // τ = 1/(2πf)
 8012a2a:	4b62      	ldr	r3, [pc, #392]	@ (8012bb4 <rate_error_to_torque+0x2b4>)
 8012a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const float alpha_d = dt / (dterm_lpf_tau + dt);
 8012a2e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8012a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8012a36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a3a:	edd7 6a01 	vldr	s13, [r7, #4]
 8012a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    for (int i = 0; i < 3; ++i) {
 8012a46:	2300      	movs	r3, #0
 8012a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a4a:	e023      	b.n	8012a94 <rate_error_to_torque+0x194>
        _d_term_lpf.v[i] += alpha_d * (deriv.v[i] - _d_term_lpf.v[i]);
 8012a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8012bb8 <rate_error_to_torque+0x2b8>)
 8012a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a50:	009b      	lsls	r3, r3, #2
 8012a52:	4413      	add	r3, r2
 8012a54:	ed93 7a00 	vldr	s14, [r3]
 8012a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	3338      	adds	r3, #56	@ 0x38
 8012a5e:	443b      	add	r3, r7
 8012a60:	3b2c      	subs	r3, #44	@ 0x2c
 8012a62:	edd3 6a00 	vldr	s13, [r3]
 8012a66:	4a54      	ldr	r2, [pc, #336]	@ (8012bb8 <rate_error_to_torque+0x2b8>)
 8012a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	4413      	add	r3, r2
 8012a6e:	edd3 7a00 	vldr	s15, [r3]
 8012a72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012a76:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8012a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a82:	4a4d      	ldr	r2, [pc, #308]	@ (8012bb8 <rate_error_to_torque+0x2b8>)
 8012a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a86:	009b      	lsls	r3, r3, #2
 8012a88:	4413      	add	r3, r2
 8012a8a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; ++i) {
 8012a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a90:	3301      	adds	r3, #1
 8012a92:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a96:	2b02      	cmp	r3, #2
 8012a98:	ddd8      	ble.n	8012a4c <rate_error_to_torque+0x14c>
    }

    // 更新上一周期的角速度，为下一次微分计算做准备
    for (int i = 0; i < 3; ++i)
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012a9e:	e00c      	b.n	8012aba <rate_error_to_torque+0x1ba>
        _rate_prev[i] = _rates.v[i];
 8012aa0:	4a3f      	ldr	r2, [pc, #252]	@ (8012ba0 <rate_error_to_torque+0x2a0>)
 8012aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	4413      	add	r3, r2
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	4941      	ldr	r1, [pc, #260]	@ (8012bb0 <rate_error_to_torque+0x2b0>)
 8012aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	440b      	add	r3, r1
 8012ab2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; ++i)
 8012ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012abc:	2b02      	cmp	r3, #2
 8012abe:	ddef      	ble.n	8012aa0 <rate_error_to_torque+0x1a0>
    // 微分项：变化率乘以微分增益
    // 前馈项：期望角速度乘以馈增益
    // 最终的力矩向量 torque 的每个分量分别对应 roll、pitch 和 yaw 轴的力矩

    /* ---------- 合成力矩（使用滤波后的 D 项） ---------- */
    torque.v[0] = _rate_p[0] * err.v[0] + _rate_int[0] + _rate_d[0] * _d_term_lpf.v[0] + _rate_ff[0] * _rates_sp.v[0];
 8012ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8012bbc <rate_error_to_torque+0x2bc>)
 8012ac2:	ed93 7a00 	vldr	s14, [r3]
 8012ac6:	edd7 7a06 	vldr	s15, [r7, #24]
 8012aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ace:	4b35      	ldr	r3, [pc, #212]	@ (8012ba4 <rate_error_to_torque+0x2a4>)
 8012ad0:	edd3 7a00 	vldr	s15, [r3]
 8012ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ad8:	4b39      	ldr	r3, [pc, #228]	@ (8012bc0 <rate_error_to_torque+0x2c0>)
 8012ada:	edd3 6a00 	vldr	s13, [r3]
 8012ade:	4b36      	ldr	r3, [pc, #216]	@ (8012bb8 <rate_error_to_torque+0x2b8>)
 8012ae0:	edd3 7a00 	vldr	s15, [r3]
 8012ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012aec:	4b35      	ldr	r3, [pc, #212]	@ (8012bc4 <rate_error_to_torque+0x2c4>)
 8012aee:	edd3 6a00 	vldr	s13, [r3]
 8012af2:	4b2a      	ldr	r3, [pc, #168]	@ (8012b9c <rate_error_to_torque+0x29c>)
 8012af4:	edd3 7a00 	vldr	s15, [r3]
 8012af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b00:	4b31      	ldr	r3, [pc, #196]	@ (8012bc8 <rate_error_to_torque+0x2c8>)
 8012b02:	edc3 7a00 	vstr	s15, [r3]

    torque.v[1] = _rate_p[1] * err.v[1] + _rate_int[1] + _rate_d[1] * _d_term_lpf.v[1] + _rate_ff[1] * _rates_sp.v[1];
 8012b06:	4b2d      	ldr	r3, [pc, #180]	@ (8012bbc <rate_error_to_torque+0x2bc>)
 8012b08:	ed93 7a01 	vldr	s14, [r3, #4]
 8012b0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8012b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b14:	4b23      	ldr	r3, [pc, #140]	@ (8012ba4 <rate_error_to_torque+0x2a4>)
 8012b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b1e:	4b28      	ldr	r3, [pc, #160]	@ (8012bc0 <rate_error_to_torque+0x2c0>)
 8012b20:	edd3 6a01 	vldr	s13, [r3, #4]
 8012b24:	4b24      	ldr	r3, [pc, #144]	@ (8012bb8 <rate_error_to_torque+0x2b8>)
 8012b26:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b32:	4b24      	ldr	r3, [pc, #144]	@ (8012bc4 <rate_error_to_torque+0x2c4>)
 8012b34:	edd3 6a01 	vldr	s13, [r3, #4]
 8012b38:	4b18      	ldr	r3, [pc, #96]	@ (8012b9c <rate_error_to_torque+0x29c>)
 8012b3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b46:	4b20      	ldr	r3, [pc, #128]	@ (8012bc8 <rate_error_to_torque+0x2c8>)
 8012b48:	edc3 7a01 	vstr	s15, [r3, #4]

    torque.v[2] = _rate_p[2] * err.v[2] + _rate_int[2] + _rate_d[2] * _d_term_lpf.v[2] + _rate_ff[2] * _rates_sp.v[2];
 8012b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8012bbc <rate_error_to_torque+0x2bc>)
 8012b4e:	ed93 7a02 	vldr	s14, [r3, #8]
 8012b52:	edd7 7a08 	vldr	s15, [r7, #32]
 8012b56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b5a:	4b12      	ldr	r3, [pc, #72]	@ (8012ba4 <rate_error_to_torque+0x2a4>)
 8012b5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b64:	4b16      	ldr	r3, [pc, #88]	@ (8012bc0 <rate_error_to_torque+0x2c0>)
 8012b66:	edd3 6a02 	vldr	s13, [r3, #8]
 8012b6a:	4b13      	ldr	r3, [pc, #76]	@ (8012bb8 <rate_error_to_torque+0x2b8>)
 8012b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b78:	4b12      	ldr	r3, [pc, #72]	@ (8012bc4 <rate_error_to_torque+0x2c4>)
 8012b7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8012b7e:	4b07      	ldr	r3, [pc, #28]	@ (8012b9c <rate_error_to_torque+0x29c>)
 8012b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8012bc8 <rate_error_to_torque+0x2c8>)
 8012b8e:	edc3 7a02 	vstr	s15, [r3, #8]

    /* 保存结果供混控使用 */
    /* torque.v[0/1/2] 即为 roll/pitch/yaw 轴的力矩指令（Nm） */
}
 8012b92:	bf00      	nop
 8012b94:	3738      	adds	r7, #56	@ 0x38
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	24000fb4 	.word	0x24000fb4
 8012ba0:	24000f98 	.word	0x24000f98
 8012ba4:	24000fd8 	.word	0x24000fd8
 8012ba8:	2400003c 	.word	0x2400003c
 8012bac:	24000054 	.word	0x24000054
 8012bb0:	24000fe4 	.word	0x24000fe4
 8012bb4:	3b026136 	.word	0x3b026136
 8012bb8:	24000fc0 	.word	0x24000fc0
 8012bbc:	24000030 	.word	0x24000030
 8012bc0:	24000048 	.word	0x24000048
 8012bc4:	24000fcc 	.word	0x24000fcc
 8012bc8:	24000ff0 	.word	0x24000ff0

08012bcc <torque_to_motor>:
// 该函数的作用是将输入的力矩和推力转换为四个电机的输出值
// 参数 torque 是一个指向 vec3f 结构体的指针，包含 roll、pitch 和 yaw 轴的力矩
// 参数 thrust 是一个浮点数，表示总的推力，extern att_sp_t att_sp.thrust;
// 参数 out 是一个指向 motor_out_t 结构体的指针，用于存储计算得到的四个电机的输出值
void torque_to_motor(const vec3f *torque, float thrust, motor_out_t *out)
{
 8012bcc:	b5b0      	push	{r4, r5, r7, lr}
 8012bce:	b092      	sub	sp, #72	@ 0x48
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8012bd8:	6079      	str	r1, [r7, #4]

	const float mix[4][3] = {
 8012bda:	4b35      	ldr	r3, [pc, #212]	@ (8012cb0 <torque_to_motor+0xe4>)
 8012bdc:	f107 0414 	add.w	r4, r7, #20
 8012be0:	461d      	mov	r5, r3
 8012be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012bea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    { -1.0f, -1.0f,  1.0f },   // 右下 1（逆时针）
	    { -1.0f,  1.0f, -1.0f }    // 左下 2（顺时针）
	};

    /* 计算四个电机输出（顺序与 mix 行号一致） */
    for (int i = 0; i < 4; ++i)
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bf6:	e053      	b.n	8012ca0 <torque_to_motor+0xd4>
    {
        out->m[i] = thrust
                  + mix[i][0] * torque->v[0]  // roll
 8012bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	3348      	adds	r3, #72	@ 0x48
 8012c04:	443b      	add	r3, r7
 8012c06:	3b34      	subs	r3, #52	@ 0x34
 8012c08:	ed93 7a00 	vldr	s14, [r3]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	edd3 7a00 	vldr	s15, [r3]
 8012c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c16:	edd7 7a02 	vldr	s15, [r7, #8]
 8012c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
                  + mix[i][1] * torque->v[1]  // pitch
 8012c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012c20:	4613      	mov	r3, r2
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	4413      	add	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	3348      	adds	r3, #72	@ 0x48
 8012c2a:	443b      	add	r3, r7
 8012c2c:	3b30      	subs	r3, #48	@ 0x30
 8012c2e:	edd3 6a00 	vldr	s13, [r3]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  + mix[i][2] * torque->v[2]; // yaw
 8012c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012c42:	4613      	mov	r3, r2
 8012c44:	005b      	lsls	r3, r3, #1
 8012c46:	4413      	add	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	3348      	adds	r3, #72	@ 0x48
 8012c4c:	443b      	add	r3, r7
 8012c4e:	3b2c      	subs	r3, #44	@ 0x2c
 8012c50:	edd3 6a00 	vldr	s13, [r3]
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
        out->m[i] = thrust
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	4413      	add	r3, r2
 8012c6a:	edc3 7a00 	vstr	s15, [r3]

        /* 如需限幅，在此完成 */
        out->m[i] = constrain(out->m[i], 8.6f, 11.0f);  // 例子：0-100% 油门
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	4413      	add	r3, r2
 8012c76:	edd3 7a00 	vldr	s15, [r3]
 8012c7a:	eeb2 1a06 	vmov.f32	s2, #38	@ 0x41300000  11.0
 8012c7e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8012cb4 <torque_to_motor+0xe8>
 8012c82:	eeb0 0a67 	vmov.f32	s0, s15
 8012c86:	f7ff fe11 	bl	80128ac <constrain>
 8012c8a:	eef0 7a40 	vmov.f32	s15, s0
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	4413      	add	r3, r2
 8012c96:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; ++i)
 8012c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	dda8      	ble.n	8012bf8 <torque_to_motor+0x2c>
    }
}
 8012ca6:	bf00      	nop
 8012ca8:	bf00      	nop
 8012caa:	3748      	adds	r7, #72	@ 0x48
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bdb0      	pop	{r4, r5, r7, pc}
 8012cb0:	08018240 	.word	0x08018240
 8012cb4:	4109999a 	.word	0x4109999a

08012cb8 <attitude_get_quat>:
#include "BMI088.h"

 quatf _q     = {{ {1, 0, 0, 0} }};   // 当前姿态四元数
 vec3f _gbias = {{ {0, 0, 0} }};      // 陀螺零偏

quatf attitude_get_quat(void) {
 8012cb8:	b490      	push	{r4, r7}
 8012cba:	b088      	sub	sp, #32
 8012cbc:	af00      	add	r7, sp, #0
    return _q;
 8012cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8012cfc <attitude_get_quat+0x44>)
 8012cc0:	f107 0410 	add.w	r4, r7, #16
 8012cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012cca:	6938      	ldr	r0, [r7, #16]
 8012ccc:	6979      	ldr	r1, [r7, #20]
 8012cce:	69ba      	ldr	r2, [r7, #24]
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	ee06 0a10 	vmov	s12, r0
 8012cd6:	ee06 1a90 	vmov	s13, r1
 8012cda:	ee07 2a10 	vmov	s14, r2
 8012cde:	ee07 3a90 	vmov	s15, r3
}
 8012ce2:	eeb0 0a46 	vmov.f32	s0, s12
 8012ce6:	eef0 0a66 	vmov.f32	s1, s13
 8012cea:	eeb0 1a47 	vmov.f32	s2, s14
 8012cee:	eef0 1a67 	vmov.f32	s3, s15
 8012cf2:	3720      	adds	r7, #32
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bc90      	pop	{r4, r7}
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop
 8012cfc:	24000058 	.word	0x24000058

08012d00 <vec3f_norm>:

float _R[3][3];  // 当前姿态旋转矩阵
#define GRAVITY 9.80665f
static inline float vec3f_norm(const vec3f *v)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
    return sqrtf(v->x * v->x + v->y * v->y + v->z * v->z);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	ed93 7a00 	vldr	s14, [r3]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	edd3 7a00 	vldr	s15, [r3]
 8012d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d40:	eeb0 0a67 	vmov.f32	s0, s15
 8012d44:	f003 fda0 	bl	8016888 <sqrtf>
 8012d48:	eef0 7a40 	vmov.f32	s15, s0
}
 8012d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8012d50:	3708      	adds	r7, #8
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
	...

08012d58 <is_gyro_stationary>:
static float gyro_prev[3] = {0};
static float delta2_buf[ZUPT_WINDOW_LEN] = {0};   // 滑动窗口
static uint8_t buf_idx = 0;

bool is_gyro_stationary(const vec3f *gyro)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b08b      	sub	sp, #44	@ 0x2c
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
    /* 1. 计算差分能量 */
    float dx = gyro->x - gyro_prev[0];
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	ed93 7a00 	vldr	s14, [r3]
 8012d66:	4b43      	ldr	r3, [pc, #268]	@ (8012e74 <is_gyro_stationary+0x11c>)
 8012d68:	edd3 7a00 	vldr	s15, [r3]
 8012d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d70:	edc7 7a07 	vstr	s15, [r7, #28]
    float dy = gyro->y - gyro_prev[1];
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	ed93 7a01 	vldr	s14, [r3, #4]
 8012d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8012e74 <is_gyro_stationary+0x11c>)
 8012d7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d84:	edc7 7a06 	vstr	s15, [r7, #24]
    float dz = gyro->z - gyro_prev[2];
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8012d8e:	4b39      	ldr	r3, [pc, #228]	@ (8012e74 <is_gyro_stationary+0x11c>)
 8012d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d98:	edc7 7a05 	vstr	s15, [r7, #20]
    float delta2 = dx*dx + dy*dy + dz*dz;
 8012d9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8012da0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012da4:	edd7 7a06 	vldr	s15, [r7, #24]
 8012da8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012db0:	edd7 7a05 	vldr	s15, [r7, #20]
 8012db4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012dbc:	edc7 7a04 	vstr	s15, [r7, #16]

    /* 2. 存入滑动窗口 */
    delta2_buf[buf_idx] = delta2;
 8012dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8012e78 <is_gyro_stationary+0x120>)
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8012e7c <is_gyro_stationary+0x124>)
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	4413      	add	r3, r2
 8012dca:	693a      	ldr	r2, [r7, #16]
 8012dcc:	601a      	str	r2, [r3, #0]
    buf_idx = (buf_idx + 1) % ZUPT_WINDOW_LEN;
 8012dce:	4b2a      	ldr	r3, [pc, #168]	@ (8012e78 <is_gyro_stationary+0x120>)
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8012e80 <is_gyro_stationary+0x128>)
 8012dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8012dda:	1151      	asrs	r1, r2, #5
 8012ddc:	17da      	asrs	r2, r3, #31
 8012dde:	1a8a      	subs	r2, r1, r2
 8012de0:	2164      	movs	r1, #100	@ 0x64
 8012de2:	fb01 f202 	mul.w	r2, r1, r2
 8012de6:	1a9a      	subs	r2, r3, r2
 8012de8:	b2d2      	uxtb	r2, r2
 8012dea:	4b23      	ldr	r3, [pc, #140]	@ (8012e78 <is_gyro_stationary+0x120>)
 8012dec:	701a      	strb	r2, [r3, #0]

    /* 3. 更新上一帧 */
    gyro_prev[0] = gyro->x;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4a20      	ldr	r2, [pc, #128]	@ (8012e74 <is_gyro_stationary+0x11c>)
 8012df4:	6013      	str	r3, [r2, #0]
    gyro_prev[1] = gyro->y;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8012e74 <is_gyro_stationary+0x11c>)
 8012dfc:	6053      	str	r3, [r2, #4]
    gyro_prev[2] = gyro->z;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	689b      	ldr	r3, [r3, #8]
 8012e02:	4a1c      	ldr	r2, [pc, #112]	@ (8012e74 <is_gyro_stationary+0x11c>)
 8012e04:	6093      	str	r3, [r2, #8]

    /* 4. 计算窗口方差（简单平均） */
    float sum = 0;
 8012e06:	f04f 0300 	mov.w	r3, #0
 8012e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint8_t i = 0; i < 100; ++i) sum += delta2_buf[i];
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012e12:	e011      	b.n	8012e38 <is_gyro_stationary+0xe0>
 8012e14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012e18:	4a18      	ldr	r2, [pc, #96]	@ (8012e7c <is_gyro_stationary+0x124>)
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	4413      	add	r3, r2
 8012e1e:	edd3 7a00 	vldr	s15, [r3]
 8012e22:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8012e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8012e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012e32:	3301      	adds	r3, #1
 8012e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012e38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012e3c:	2b63      	cmp	r3, #99	@ 0x63
 8012e3e:	d9e9      	bls.n	8012e14 <is_gyro_stationary+0xbc>
    float sigma2 = sum / (float)ZUPT_WINDOW_LEN;
 8012e40:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8012e44:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8012e84 <is_gyro_stationary+0x12c>
 8012e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012e4c:	edc7 7a03 	vstr	s15, [r7, #12]

    /* 5. 返回判断结果 */
    return sigma2 < 0.5f;  // 阈值可调
 8012e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8012e54:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e60:	bf4c      	ite	mi
 8012e62:	2301      	movmi	r3, #1
 8012e64:	2300      	movpl	r3, #0
 8012e66:	b2db      	uxtb	r3, r3
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	372c      	adds	r7, #44	@ 0x2c
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr
 8012e74:	24001008 	.word	0x24001008
 8012e78:	240011a4 	.word	0x240011a4
 8012e7c:	24001014 	.word	0x24001014
 8012e80:	51eb851f 	.word	0x51eb851f
 8012e84:	42c80000 	.word	0x42c80000

08012e88 <vec3f_normalize>:

/* 把任意向量 v 就地归一化到单位长度，返回归一化后的长度（0 表示失败） */
static inline float vec3f_normalize(vec3f *v)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
    float len = sqrtf(v->x * v->x + v->y * v->y + v->z * v->z);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	ed93 7a00 	vldr	s14, [r3]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	edd3 7a00 	vldr	s15, [r3]
 8012e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	edd3 6a01 	vldr	s13, [r3, #4]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	edd3 7a01 	vldr	s15, [r3, #4]
 8012eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	edd3 7a02 	vldr	s15, [r3, #8]
 8012ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8012ecc:	f003 fcdc 	bl	8016888 <sqrtf>
 8012ed0:	ed87 0a03 	vstr	s0, [r7, #12]
    if (len > 1e-6f) {
 8012ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8012ed8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8012f64 <vec3f_normalize+0xdc>
 8012edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee4:	dd26      	ble.n	8012f34 <vec3f_normalize+0xac>
        float inv = 1.0f / len;
 8012ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012eea:	ed97 7a03 	vldr	s14, [r7, #12]
 8012eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ef2:	edc7 7a02 	vstr	s15, [r7, #8]
        v->x *= inv;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	ed93 7a00 	vldr	s14, [r3]
 8012efc:	edd7 7a02 	vldr	s15, [r7, #8]
 8012f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	edc3 7a00 	vstr	s15, [r3]
        v->y *= inv;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8012f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	edc3 7a01 	vstr	s15, [r3, #4]
        v->z *= inv;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	ed93 7a02 	vldr	s14, [r3, #8]
 8012f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8012f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	edc3 7a02 	vstr	s15, [r3, #8]
 8012f32:	e00e      	b.n	8012f52 <vec3f_normalize+0xca>
    } else {
        /* 长度过小，保持原值或给一个默认方向，防止除零 */
        v->x = 0.0f;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f04f 0200 	mov.w	r2, #0
 8012f3a:	601a      	str	r2, [r3, #0]
        v->y = 0.0f;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f04f 0200 	mov.w	r2, #0
 8012f42:	605a      	str	r2, [r3, #4]
        v->z = 1.0f;   // 默认指地
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8012f4a:	609a      	str	r2, [r3, #8]
        len = 0.0f;
 8012f4c:	f04f 0300 	mov.w	r3, #0
 8012f50:	60fb      	str	r3, [r7, #12]
    }
    return len;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	ee07 3a90 	vmov	s15, r3
}
 8012f58:	eeb0 0a67 	vmov.f32	s0, s15
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
 8012f62:	bf00      	nop
 8012f64:	358637bd 	.word	0x358637bd

08012f68 <attitude_update>:
 */
void attitude_update(float dt,  // 时间间隔，单位为秒，用于积分计算
                     const vec3f *accel,  // 指向加速度计数据的指针，单位为 m/s²
                     const vec3f *gyro )  // 指向陀螺仪数据的指针，单位为 rad/s

{
 8012f68:	b590      	push	{r4, r7, lr}
 8012f6a:	b09d      	sub	sp, #116	@ 0x74
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8012f72:	60b8      	str	r0, [r7, #8]
 8012f74:	6079      	str	r1, [r7, #4]
     * 使用一阶龙格 - 库塔方法对陀螺仪数据进行积分，以更新姿态四元数。
     * 首先需要对陀螺仪数据进行零偏校正。
     */
    // 对陀螺仪数据进行零偏校正，得到校正后的陀螺仪数据
	vec3f gcorr = {{{
	    gyro->x - _gbias.x,
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	ed93 7a00 	vldr	s14, [r3]
 8012f7c:	4be0      	ldr	r3, [pc, #896]	@ (8013300 <attitude_update+0x398>)
 8012f7e:	edd3 7a00 	vldr	s15, [r3]
 8012f82:	ee77 7a67 	vsub.f32	s15, s14, s15
	vec3f gcorr = {{{
 8012f86:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	    gyro->y - _gbias.y,
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012f90:	4bdb      	ldr	r3, [pc, #876]	@ (8013300 <attitude_update+0x398>)
 8012f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f96:	ee77 7a67 	vsub.f32	s15, s14, s15
	vec3f gcorr = {{{
 8012f9a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	    gyro->z - _gbias.z
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8012fa4:	4bd6      	ldr	r3, [pc, #856]	@ (8013300 <attitude_update+0x398>)
 8012fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8012faa:	ee77 7a67 	vsub.f32	s15, s14, s15
	vec3f gcorr = {{{
 8012fae:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	}}};

    // 保存上一时刻的姿态四元数
    quatf q_prev = _q;
 8012fb2:	4bd4      	ldr	r3, [pc, #848]	@ (8013304 <attitude_update+0x39c>)
 8012fb4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8012fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // 根据四元数运动学方程，使用一阶龙格 - 库塔方法更新四元数的 w 分量
    _q.w += 0.5f * (-gcorr.x*q_prev.x - gcorr.y*q_prev.y - gcorr.z*q_prev.z) * dt;
 8012fbe:	4bd1      	ldr	r3, [pc, #836]	@ (8013304 <attitude_update+0x39c>)
 8012fc0:	ed93 7a00 	vldr	s14, [r3]
 8012fc4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8012fc8:	eef1 6a67 	vneg.f32	s13, s15
 8012fcc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8012fd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012fd4:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8012fd8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8012fdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012fe0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012fe4:	ed97 6a14 	vldr	s12, [r7, #80]	@ 0x50
 8012fe8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8012fec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012ff0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012ff4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8012ff8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8012ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8013000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013008:	4bbe      	ldr	r3, [pc, #760]	@ (8013304 <attitude_update+0x39c>)
 801300a:	edc3 7a00 	vstr	s15, [r3]
    // 更新四元数的 x 分量
    _q.x += 0.5f * ( gcorr.x*q_prev.w + gcorr.z*q_prev.y - gcorr.y*q_prev.z) * dt;
 801300e:	4bbd      	ldr	r3, [pc, #756]	@ (8013304 <attitude_update+0x39c>)
 8013010:	ed93 7a01 	vldr	s14, [r3, #4]
 8013014:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8013018:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801301c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013020:	ed97 6a14 	vldr	s12, [r7, #80]	@ 0x50
 8013024:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8013028:	ee66 7a27 	vmul.f32	s15, s12, s15
 801302c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013030:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8013034:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013038:	ee66 7a27 	vmul.f32	s15, s12, s15
 801303c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013040:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8013044:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013048:	edd7 7a03 	vldr	s15, [r7, #12]
 801304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013054:	4bab      	ldr	r3, [pc, #684]	@ (8013304 <attitude_update+0x39c>)
 8013056:	edc3 7a01 	vstr	s15, [r3, #4]
    // 更新四元数的 y 分量
    _q.y += 0.5f * ( gcorr.y*q_prev.w - gcorr.z*q_prev.x + gcorr.x*q_prev.z) * dt;
 801305a:	4baa      	ldr	r3, [pc, #680]	@ (8013304 <attitude_update+0x39c>)
 801305c:	ed93 7a02 	vldr	s14, [r3, #8]
 8013060:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8013064:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013068:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801306c:	ed97 6a14 	vldr	s12, [r7, #80]	@ 0x50
 8013070:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013074:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013078:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801307c:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 8013080:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013084:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801308c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8013090:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013094:	edd7 7a03 	vldr	s15, [r7, #12]
 8013098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801309c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130a0:	4b98      	ldr	r3, [pc, #608]	@ (8013304 <attitude_update+0x39c>)
 80130a2:	edc3 7a02 	vstr	s15, [r3, #8]
    // 更新四元数的 z 分量
    _q.z += 0.5f * ( gcorr.z*q_prev.w + gcorr.y*q_prev.x - gcorr.x*q_prev.y) * dt;
 80130a6:	4b97      	ldr	r3, [pc, #604]	@ (8013304 <attitude_update+0x39c>)
 80130a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80130ac:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80130b0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80130b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80130b8:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 80130bc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80130c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80130c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80130c8:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 80130cc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80130d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80130d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80130d8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80130dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80130e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80130e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130ec:	4b85      	ldr	r3, [pc, #532]	@ (8013304 <attitude_update+0x39c>)
 80130ee:	edc3 7a03 	vstr	s15, [r3, #12]
    /* 2. 归一化
     * 由于四元数表示姿态时需要满足模长为 1 的条件，
     * 但在积分过程中可能会引入误差导致模长不为 1，因此需要进行归一化处理。
     */
    // 计算四元数的模长
    float len = sqrtf(_q.w*_q.w + _q.x*_q.x + _q.y*_q.y + _q.z*_q.z);
 80130f2:	4b84      	ldr	r3, [pc, #528]	@ (8013304 <attitude_update+0x39c>)
 80130f4:	ed93 7a00 	vldr	s14, [r3]
 80130f8:	4b82      	ldr	r3, [pc, #520]	@ (8013304 <attitude_update+0x39c>)
 80130fa:	edd3 7a00 	vldr	s15, [r3]
 80130fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013102:	4b80      	ldr	r3, [pc, #512]	@ (8013304 <attitude_update+0x39c>)
 8013104:	edd3 6a01 	vldr	s13, [r3, #4]
 8013108:	4b7e      	ldr	r3, [pc, #504]	@ (8013304 <attitude_update+0x39c>)
 801310a:	edd3 7a01 	vldr	s15, [r3, #4]
 801310e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013116:	4b7b      	ldr	r3, [pc, #492]	@ (8013304 <attitude_update+0x39c>)
 8013118:	edd3 6a02 	vldr	s13, [r3, #8]
 801311c:	4b79      	ldr	r3, [pc, #484]	@ (8013304 <attitude_update+0x39c>)
 801311e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013126:	ee37 7a27 	vadd.f32	s14, s14, s15
 801312a:	4b76      	ldr	r3, [pc, #472]	@ (8013304 <attitude_update+0x39c>)
 801312c:	edd3 6a03 	vldr	s13, [r3, #12]
 8013130:	4b74      	ldr	r3, [pc, #464]	@ (8013304 <attitude_update+0x39c>)
 8013132:	edd3 7a03 	vldr	s15, [r3, #12]
 8013136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801313e:	eeb0 0a67 	vmov.f32	s0, s15
 8013142:	f003 fba1 	bl	8016888 <sqrtf>
 8013146:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
    // 如果模长大于 0，则进行归一化处理
    if (len > 0.0f) {
 801314a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801314e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013156:	dd27      	ble.n	80131a8 <attitude_update+0x240>
        _q.w /= len;  // 归一化 w 分量
 8013158:	4b6a      	ldr	r3, [pc, #424]	@ (8013304 <attitude_update+0x39c>)
 801315a:	edd3 6a00 	vldr	s13, [r3]
 801315e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8013162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013166:	4b67      	ldr	r3, [pc, #412]	@ (8013304 <attitude_update+0x39c>)
 8013168:	edc3 7a00 	vstr	s15, [r3]
        _q.x /= len;  // 归一化 x 分量
 801316c:	4b65      	ldr	r3, [pc, #404]	@ (8013304 <attitude_update+0x39c>)
 801316e:	edd3 6a01 	vldr	s13, [r3, #4]
 8013172:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8013176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801317a:	4b62      	ldr	r3, [pc, #392]	@ (8013304 <attitude_update+0x39c>)
 801317c:	edc3 7a01 	vstr	s15, [r3, #4]
        _q.y /= len;  // 归一化 y 分量
 8013180:	4b60      	ldr	r3, [pc, #384]	@ (8013304 <attitude_update+0x39c>)
 8013182:	edd3 6a02 	vldr	s13, [r3, #8]
 8013186:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 801318a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801318e:	4b5d      	ldr	r3, [pc, #372]	@ (8013304 <attitude_update+0x39c>)
 8013190:	edc3 7a02 	vstr	s15, [r3, #8]
        _q.z /= len;  // 归一化 z 分量
 8013194:	4b5b      	ldr	r3, [pc, #364]	@ (8013304 <attitude_update+0x39c>)
 8013196:	edd3 6a03 	vldr	s13, [r3, #12]
 801319a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 801319e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131a2:	4b58      	ldr	r3, [pc, #352]	@ (8013304 <attitude_update+0x39c>)
 80131a4:	edc3 7a03 	vstr	s15, [r3, #12]
     */
    /* 重力方向估计
     * 根据当前的姿态四元数估计重力在机体坐标系下的方向。
     */
    vec3f g_est = {{{
    		2.0f * (_q.x*_q.z - _q.w*_q.y),
 80131a8:	4b56      	ldr	r3, [pc, #344]	@ (8013304 <attitude_update+0x39c>)
 80131aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80131ae:	4b55      	ldr	r3, [pc, #340]	@ (8013304 <attitude_update+0x39c>)
 80131b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80131b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80131b8:	4b52      	ldr	r3, [pc, #328]	@ (8013304 <attitude_update+0x39c>)
 80131ba:	edd3 6a00 	vldr	s13, [r3]
 80131be:	4b51      	ldr	r3, [pc, #324]	@ (8013304 <attitude_update+0x39c>)
 80131c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80131c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
    vec3f g_est = {{{
 80131d0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    		2.0f * (_q.y*_q.z + _q.w*_q.x),
 80131d4:	4b4b      	ldr	r3, [pc, #300]	@ (8013304 <attitude_update+0x39c>)
 80131d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80131da:	4b4a      	ldr	r3, [pc, #296]	@ (8013304 <attitude_update+0x39c>)
 80131dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80131e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80131e4:	4b47      	ldr	r3, [pc, #284]	@ (8013304 <attitude_update+0x39c>)
 80131e6:	edd3 6a00 	vldr	s13, [r3]
 80131ea:	4b46      	ldr	r3, [pc, #280]	@ (8013304 <attitude_update+0x39c>)
 80131ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80131f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    vec3f g_est = {{{
 80131fc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    		-(_q.w*_q.w - _q.x*_q.x - _q.y*_q.y + _q.z*_q.z)
 8013200:	4b40      	ldr	r3, [pc, #256]	@ (8013304 <attitude_update+0x39c>)
 8013202:	ed93 7a00 	vldr	s14, [r3]
 8013206:	4b3f      	ldr	r3, [pc, #252]	@ (8013304 <attitude_update+0x39c>)
 8013208:	edd3 7a00 	vldr	s15, [r3]
 801320c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013210:	4b3c      	ldr	r3, [pc, #240]	@ (8013304 <attitude_update+0x39c>)
 8013212:	edd3 6a01 	vldr	s13, [r3, #4]
 8013216:	4b3b      	ldr	r3, [pc, #236]	@ (8013304 <attitude_update+0x39c>)
 8013218:	edd3 7a01 	vldr	s15, [r3, #4]
 801321c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013220:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013224:	4b37      	ldr	r3, [pc, #220]	@ (8013304 <attitude_update+0x39c>)
 8013226:	edd3 6a02 	vldr	s13, [r3, #8]
 801322a:	4b36      	ldr	r3, [pc, #216]	@ (8013304 <attitude_update+0x39c>)
 801322c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013238:	4b32      	ldr	r3, [pc, #200]	@ (8013304 <attitude_update+0x39c>)
 801323a:	edd3 6a03 	vldr	s13, [r3, #12]
 801323e:	4b31      	ldr	r3, [pc, #196]	@ (8013304 <attitude_update+0x39c>)
 8013240:	edd3 7a03 	vldr	s15, [r3, #12]
 8013244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013248:	ee77 7a27 	vadd.f32	s15, s14, s15
 801324c:	eef1 7a67 	vneg.f32	s15, s15
    vec3f g_est = {{{
 8013250:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }}};
    /* 归一化理论重力向量 */
    vec3f_normalize(&g_est);
 8013254:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff fe15 	bl	8012e88 <vec3f_normalize>

    /* 归一化加速度计读数 */
    vec3f acc_norm = *accel;
 801325e:	68ba      	ldr	r2, [r7, #8]
 8013260:	f107 0320 	add.w	r3, r7, #32
 8013264:	ca07      	ldmia	r2, {r0, r1, r2}
 8013266:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    vec3f_normalize(&acc_norm);
 801326a:	f107 0320 	add.w	r3, r7, #32
 801326e:	4618      	mov	r0, r3
 8013270:	f7ff fe0a 	bl	8012e88 <vec3f_normalize>

    /* 然后再用 acc_norm × g_est 计算误差 */
    vec3f acc_err = {
        acc_norm.y * g_est.z - acc_norm.z * g_est.y,
 8013274:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8013278:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801327c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013280:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8013284:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801328c:	ee77 7a67 	vsub.f32	s15, s14, s15
    vec3f acc_err = {
 8013290:	edc7 7a05 	vstr	s15, [r7, #20]
        acc_norm.z * g_est.x - acc_norm.x * g_est.z,
 8013294:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8013298:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801329c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80132a0:	edd7 6a08 	vldr	s13, [r7, #32]
 80132a4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80132a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132ac:	ee77 7a67 	vsub.f32	s15, s14, s15
    vec3f acc_err = {
 80132b0:	edc7 7a06 	vstr	s15, [r7, #24]
        acc_norm.x * g_est.y - acc_norm.y * g_est.x
 80132b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80132b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80132bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80132c0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80132c4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80132c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132cc:	ee77 7a67 	vsub.f32	s15, s14, s15
    vec3f acc_err = {
 80132d0:	edc7 7a07 	vstr	s15, [r7, #28]
    };

    /* 1. 计算静态判别因子 */
    float acc_mag = vec3f_norm(accel);      // √(ax²+ay²+az²)  ////////////////和PX4一一对应
 80132d4:	68b8      	ldr	r0, [r7, #8]
 80132d6:	f7ff fd13 	bl	8012d00 <vec3f_norm>
 80132da:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    float gyr_mag = vec3f_norm(gyro);       // √(gx²+gy²+gz²)
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7ff fd0e 	bl	8012d00 <vec3f_norm>
 80132e4:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60

    /* 2. 动态/静态阈值 */
    bool is_static = (fabsf(acc_mag ) < 0.2f) && is_gyro_stationary(gyro);
 80132e8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80132ec:	eef0 7ae7 	vabs.f32	s15, s15
 80132f0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8013308 <attitude_update+0x3a0>
 80132f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fc:	d50e      	bpl.n	801331c <attitude_update+0x3b4>
 80132fe:	e005      	b.n	801330c <attitude_update+0x3a4>
 8013300:	24000ffc 	.word	0x24000ffc
 8013304:	24000058 	.word	0x24000058
 8013308:	3e4ccccd 	.word	0x3e4ccccd
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f7ff fd23 	bl	8012d58 <is_gyro_stationary>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d001      	beq.n	801331c <attitude_update+0x3b4>
 8013318:	2301      	movs	r3, #1
 801331a:	e000      	b.n	801331e <attitude_update+0x3b6>
 801331c:	2300      	movs	r3, #0
 801331e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013322:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013326:	f003 0301 	and.w	r3, r3, #1
 801332a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

    /* 3. 分段 kp/ki */
    float use_kp = is_static ? 2.5f  : 1.5f;   // 静止快，机动稳
 801332e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013332:	2b00      	cmp	r3, #0
 8013334:	d001      	beq.n	801333a <attitude_update+0x3d2>
 8013336:	4b86      	ldr	r3, [pc, #536]	@ (8013550 <attitude_update+0x5e8>)
 8013338:	e001      	b.n	801333e <attitude_update+0x3d6>
 801333a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801333e:	65bb      	str	r3, [r7, #88]	@ 0x58
    float use_ki = is_static ? 0.002f : 0.00f;   // 静止收敛，机动冻结
 8013340:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <attitude_update+0x3e4>
 8013348:	4b82      	ldr	r3, [pc, #520]	@ (8013554 <attitude_update+0x5ec>)
 801334a:	e001      	b.n	8013350 <attitude_update+0x3e8>
 801334c:	f04f 0300 	mov.w	r3, #0
 8013350:	657b      	str	r3, [r7, #84]	@ 0x54
//                _gbias.v[i] = bias_lpf.v[i];
//            }
//        }

    /* 4. 融合修正 */
    for (int i = 0; i < 3; ++i) {
 8013352:	2300      	movs	r3, #0
 8013354:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013356:	e0f2      	b.n	801353e <attitude_update+0x5d6>
    	if(i==0)//x轴，roll
 8013358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801335a:	2b00      	cmp	r3, #0
 801335c:	d13f      	bne.n	80133de <attitude_update+0x476>
    	{
    		_gbias.v[i] +=  use_ki * acc_err.v[i] * dt;
 801335e:	4a7e      	ldr	r2, [pc, #504]	@ (8013558 <attitude_update+0x5f0>)
 8013360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013362:	009b      	lsls	r3, r3, #2
 8013364:	4413      	add	r3, r2
 8013366:	ed93 7a00 	vldr	s14, [r3]
 801336a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	3370      	adds	r3, #112	@ 0x70
 8013370:	443b      	add	r3, r7
 8013372:	3b5c      	subs	r3, #92	@ 0x5c
 8013374:	edd3 6a00 	vldr	s13, [r3]
 8013378:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801337c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013380:	edd7 7a03 	vldr	s15, [r7, #12]
 8013384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013388:	ee77 7a27 	vadd.f32	s15, s14, s15
 801338c:	4a72      	ldr	r2, [pc, #456]	@ (8013558 <attitude_update+0x5f0>)
 801338e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	4413      	add	r3, r2
 8013394:	edc3 7a00 	vstr	s15, [r3]
            gcorr.v[i]  +=  use_kp * acc_err.v[i] + _gbias.v[i];
 8013398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	3370      	adds	r3, #112	@ 0x70
 801339e:	443b      	add	r3, r7
 80133a0:	3b28      	subs	r3, #40	@ 0x28
 80133a2:	ed93 7a00 	vldr	s14, [r3]
 80133a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	3370      	adds	r3, #112	@ 0x70
 80133ac:	443b      	add	r3, r7
 80133ae:	3b5c      	subs	r3, #92	@ 0x5c
 80133b0:	edd3 6a00 	vldr	s13, [r3]
 80133b4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80133b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80133bc:	4a66      	ldr	r2, [pc, #408]	@ (8013558 <attitude_update+0x5f0>)
 80133be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80133c0:	009b      	lsls	r3, r3, #2
 80133c2:	4413      	add	r3, r2
 80133c4:	edd3 7a00 	vldr	s15, [r3]
 80133c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	3370      	adds	r3, #112	@ 0x70
 80133d6:	443b      	add	r3, r7
 80133d8:	3b28      	subs	r3, #40	@ 0x28
 80133da:	edc3 7a00 	vstr	s15, [r3]
    	}
    	if(i==2)//z轴，yaw
 80133de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80133e0:	2b02      	cmp	r3, #2
 80133e2:	d13f      	bne.n	8013464 <attitude_update+0x4fc>
    	{
            _gbias.v[i] +=  use_ki * acc_err.v[i] * dt;
 80133e4:	4a5c      	ldr	r2, [pc, #368]	@ (8013558 <attitude_update+0x5f0>)
 80133e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80133e8:	009b      	lsls	r3, r3, #2
 80133ea:	4413      	add	r3, r2
 80133ec:	ed93 7a00 	vldr	s14, [r3]
 80133f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	3370      	adds	r3, #112	@ 0x70
 80133f6:	443b      	add	r3, r7
 80133f8:	3b5c      	subs	r3, #92	@ 0x5c
 80133fa:	edd3 6a00 	vldr	s13, [r3]
 80133fe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013402:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013406:	edd7 7a03 	vldr	s15, [r7, #12]
 801340a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013412:	4a51      	ldr	r2, [pc, #324]	@ (8013558 <attitude_update+0x5f0>)
 8013414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013416:	009b      	lsls	r3, r3, #2
 8013418:	4413      	add	r3, r2
 801341a:	edc3 7a00 	vstr	s15, [r3]
//            gcorr.v[i]  += 0.8 * use_kp * acc_err.v[i];
            gcorr.v[i]  +=  use_kp * acc_err.v[i] + _gbias.v[i];
 801341e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	3370      	adds	r3, #112	@ 0x70
 8013424:	443b      	add	r3, r7
 8013426:	3b28      	subs	r3, #40	@ 0x28
 8013428:	ed93 7a00 	vldr	s14, [r3]
 801342c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	3370      	adds	r3, #112	@ 0x70
 8013432:	443b      	add	r3, r7
 8013434:	3b5c      	subs	r3, #92	@ 0x5c
 8013436:	edd3 6a00 	vldr	s13, [r3]
 801343a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 801343e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013442:	4a45      	ldr	r2, [pc, #276]	@ (8013558 <attitude_update+0x5f0>)
 8013444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013446:	009b      	lsls	r3, r3, #2
 8013448:	4413      	add	r3, r2
 801344a:	edd3 7a00 	vldr	s15, [r3]
 801344e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013458:	009b      	lsls	r3, r3, #2
 801345a:	3370      	adds	r3, #112	@ 0x70
 801345c:	443b      	add	r3, r7
 801345e:	3b28      	subs	r3, #40	@ 0x28
 8013460:	edc3 7a00 	vstr	s15, [r3]
    	}
    	if(i==1)//y轴零偏比较严重
 8013464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013466:	2b01      	cmp	r3, #1
 8013468:	d13f      	bne.n	80134ea <attitude_update+0x582>
    	{
            _gbias.v[i] +=  use_ki * acc_err.v[i] * dt;
 801346a:	4a3b      	ldr	r2, [pc, #236]	@ (8013558 <attitude_update+0x5f0>)
 801346c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	4413      	add	r3, r2
 8013472:	ed93 7a00 	vldr	s14, [r3]
 8013476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	3370      	adds	r3, #112	@ 0x70
 801347c:	443b      	add	r3, r7
 801347e:	3b5c      	subs	r3, #92	@ 0x5c
 8013480:	edd3 6a00 	vldr	s13, [r3]
 8013484:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013488:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801348c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013498:	4a2f      	ldr	r2, [pc, #188]	@ (8013558 <attitude_update+0x5f0>)
 801349a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801349c:	009b      	lsls	r3, r3, #2
 801349e:	4413      	add	r3, r2
 80134a0:	edc3 7a00 	vstr	s15, [r3]
//            gcorr.v[i]  += 0.6 * use_kp * acc_err.v[i];
            gcorr.v[i]  +=  use_kp * acc_err.v[i] + _gbias.v[i];
 80134a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80134a6:	009b      	lsls	r3, r3, #2
 80134a8:	3370      	adds	r3, #112	@ 0x70
 80134aa:	443b      	add	r3, r7
 80134ac:	3b28      	subs	r3, #40	@ 0x28
 80134ae:	ed93 7a00 	vldr	s14, [r3]
 80134b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	3370      	adds	r3, #112	@ 0x70
 80134b8:	443b      	add	r3, r7
 80134ba:	3b5c      	subs	r3, #92	@ 0x5c
 80134bc:	edd3 6a00 	vldr	s13, [r3]
 80134c0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80134c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80134c8:	4a23      	ldr	r2, [pc, #140]	@ (8013558 <attitude_update+0x5f0>)
 80134ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	4413      	add	r3, r2
 80134d0:	edd3 7a00 	vldr	s15, [r3]
 80134d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80134d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80134de:	009b      	lsls	r3, r3, #2
 80134e0:	3370      	adds	r3, #112	@ 0x70
 80134e2:	443b      	add	r3, r7
 80134e4:	3b28      	subs	r3, #40	@ 0x28
 80134e6:	edc3 7a00 	vstr	s15, [r3]
    	}

    	// 🔒 积分限幅
    	    if (_gbias.v[i] > GYRO_BIAS_LIMIT) {
 80134ea:	4a1b      	ldr	r2, [pc, #108]	@ (8013558 <attitude_update+0x5f0>)
 80134ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4413      	add	r3, r2
 80134f2:	edd3 7a00 	vldr	s15, [r3]
 80134f6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80134fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80134fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013502:	dd06      	ble.n	8013512 <attitude_update+0x5aa>
    	        _gbias.v[i] = GYRO_BIAS_LIMIT;
 8013504:	4a14      	ldr	r2, [pc, #80]	@ (8013558 <attitude_update+0x5f0>)
 8013506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	4413      	add	r3, r2
 801350c:	4a13      	ldr	r2, [pc, #76]	@ (801355c <attitude_update+0x5f4>)
 801350e:	601a      	str	r2, [r3, #0]
 8013510:	e012      	b.n	8013538 <attitude_update+0x5d0>
    	    } else if (_gbias.v[i] < -GYRO_BIAS_LIMIT) {
 8013512:	4a11      	ldr	r2, [pc, #68]	@ (8013558 <attitude_update+0x5f0>)
 8013514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013516:	009b      	lsls	r3, r3, #2
 8013518:	4413      	add	r3, r2
 801351a:	edd3 7a00 	vldr	s15, [r3]
 801351e:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8013522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352a:	d505      	bpl.n	8013538 <attitude_update+0x5d0>
    	        _gbias.v[i] = -GYRO_BIAS_LIMIT;
 801352c:	4a0a      	ldr	r2, [pc, #40]	@ (8013558 <attitude_update+0x5f0>)
 801352e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013530:	009b      	lsls	r3, r3, #2
 8013532:	4413      	add	r3, r2
 8013534:	4a0a      	ldr	r2, [pc, #40]	@ (8013560 <attitude_update+0x5f8>)
 8013536:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 8013538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801353a:	3301      	adds	r3, #1
 801353c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801353e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013540:	2b02      	cmp	r3, #2
 8013542:	f77f af09 	ble.w	8013358 <attitude_update+0x3f0>
    //     // 积分部分：更新陀螺仪零偏
    //     _gbias.v[i] += ki * (acc_err.v[i] + mag_corr.v[i]) * dt;
    //     // 比例部分：更新校正后的陀螺仪数据
    //     gcorr.v[i]  += kp * (acc_err.v[i] + mag_corr.v[i]);
    // }
}
 8013546:	bf00      	nop
 8013548:	bf00      	nop
 801354a:	3774      	adds	r7, #116	@ 0x74
 801354c:	46bd      	mov	sp, r7
 801354e:	bd90      	pop	{r4, r7, pc}
 8013550:	40200000 	.word	0x40200000
 8013554:	3b03126f 	.word	0x3b03126f
 8013558:	24000ffc 	.word	0x24000ffc
 801355c:	40a00000 	.word	0x40a00000
 8013560:	c0a00000 	.word	0xc0a00000
 8013564:	00000000 	.word	0x00000000

08013568 <attitude_get_euler>:
 */
extern float _vel[3];
extern float dt;

#define PI 3.1415926
euler_t attitude_get_euler(void){
 8013568:	b580      	push	{r7, lr}
 801356a:	b08e      	sub	sp, #56	@ 0x38
 801356c:	af00      	add	r7, sp, #0
	// 声明一个 euler_t 类型的变量 e，用于存储转换后的欧拉角
    euler_t e;


    float w = _q.w ;
 801356e:	4b94      	ldr	r3, [pc, #592]	@ (80137c0 <attitude_get_euler+0x258>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	637b      	str	r3, [r7, #52]	@ 0x34
    float x = _q.x ;
 8013574:	4b92      	ldr	r3, [pc, #584]	@ (80137c0 <attitude_get_euler+0x258>)
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	633b      	str	r3, [r7, #48]	@ 0x30
    float y = _q.y ;
 801357a:	4b91      	ldr	r3, [pc, #580]	@ (80137c0 <attitude_get_euler+0x258>)
 801357c:	689b      	ldr	r3, [r3, #8]
 801357e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float z = _q.z ;
 8013580:	4b8f      	ldr	r3, [pc, #572]	@ (80137c0 <attitude_get_euler+0x258>)
 8013582:	68db      	ldr	r3, [r3, #12]
 8013584:	62bb      	str	r3, [r7, #40]	@ 0x28



        /* 2. 用 PX4 的 Z-Y-X（yaw-pitch-roll）公式（FRD 坐标系） */
            e.roll  = atan2f( 2.0f*(w*x + y*z), 1.0f - 2.0f*(x*x + y*y) );   // 绕 x 轴
 8013586:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801358a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801358e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013592:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8013596:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801359a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801359e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80135a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80135aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80135ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80135b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80135be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80135c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135c6:	eef0 0a67 	vmov.f32	s1, s15
 80135ca:	eeb0 0a66 	vmov.f32	s0, s13
 80135ce:	f003 f959 	bl	8016884 <atan2f>
 80135d2:	eef0 7a40 	vmov.f32	s15, s0
 80135d6:	edc7 7a04 	vstr	s15, [r7, #16]
            e.pitch = asinf ( 2.0f*(w*y - z*x) );                            // 绕 y 轴
 80135da:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80135de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80135e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80135e6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80135ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80135ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80135fa:	eeb0 0a67 	vmov.f32	s0, s15
 80135fe:	f003 f915 	bl	801682c <asinf>
 8013602:	eef0 7a40 	vmov.f32	s15, s0
 8013606:	edc7 7a05 	vstr	s15, [r7, #20]
            e.yaw   = -atan2f( 2.0f*(w*z + x*y), 1.0f - 2.0f*(x*x + z*z) );   // 绕 z 轴
 801360a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801360e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8013612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013616:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 801361a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801361e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013626:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801362a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801362e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013632:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8013636:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801363a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801363e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013642:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013646:	ee77 7a67 	vsub.f32	s15, s14, s15
 801364a:	eef0 0a67 	vmov.f32	s1, s15
 801364e:	eeb0 0a66 	vmov.f32	s0, s13
 8013652:	f003 f917 	bl	8016884 <atan2f>
 8013656:	eef0 7a40 	vmov.f32	s15, s0
 801365a:	eef1 7a67 	vneg.f32	s15, s15
 801365e:	edc7 7a06 	vstr	s15, [r7, #24]
            /* 3. 万向节锁：PX4 不强制 yaw=0，而是沿用上面的 atan2，保持连续性
               因此直接删掉你原来的 if (test>0.99) / if (test<-0.99) 分支 */


        /* 4. 把角度归一到 (-π, π] */
            if (e.roll  >  PI) e.roll  -= 2.0f*PI;
 8013662:	edd7 7a04 	vldr	s15, [r7, #16]
 8013666:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801366a:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 80137a8 <attitude_get_euler+0x240>
 801366e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013676:	dd0b      	ble.n	8013690 <attitude_get_euler+0x128>
 8013678:	edd7 7a04 	vldr	s15, [r7, #16]
 801367c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013680:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80137b0 <attitude_get_euler+0x248>
 8013684:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013688:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801368c:	edc7 7a04 	vstr	s15, [r7, #16]
            if (e.roll  < -PI) e.roll  += 2.0f*PI;
 8013690:	edd7 7a04 	vldr	s15, [r7, #16]
 8013694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013698:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 80137b8 <attitude_get_euler+0x250>
 801369c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80136a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136a4:	d50b      	bpl.n	80136be <attitude_get_euler+0x156>
 80136a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80136aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80136ae:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80137b0 <attitude_get_euler+0x248>
 80136b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80136b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80136ba:	edc7 7a04 	vstr	s15, [r7, #16]
            if (e.pitch >  PI) e.pitch -= 2.0f*PI;
 80136be:	edd7 7a05 	vldr	s15, [r7, #20]
 80136c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80136c6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 80137a8 <attitude_get_euler+0x240>
 80136ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80136ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d2:	dd0b      	ble.n	80136ec <attitude_get_euler+0x184>
 80136d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80136d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80136dc:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 80137b0 <attitude_get_euler+0x248>
 80136e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80136e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80136e8:	edc7 7a05 	vstr	s15, [r7, #20]
            if (e.pitch < -PI) e.pitch += 2.0f*PI;
 80136ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80136f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80136f4:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 80137b8 <attitude_get_euler+0x250>
 80136f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80136fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013700:	d50b      	bpl.n	801371a <attitude_get_euler+0x1b2>
 8013702:	edd7 7a05 	vldr	s15, [r7, #20]
 8013706:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801370a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80137b0 <attitude_get_euler+0x248>
 801370e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013712:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013716:	edc7 7a05 	vstr	s15, [r7, #20]
            if (e.yaw   >  PI) e.yaw   -= 2.0f*PI;
 801371a:	edd7 7a06 	vldr	s15, [r7, #24]
 801371e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013722:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 80137a8 <attitude_get_euler+0x240>
 8013726:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801372e:	dd0b      	ble.n	8013748 <attitude_get_euler+0x1e0>
 8013730:	edd7 7a06 	vldr	s15, [r7, #24]
 8013734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013738:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80137b0 <attitude_get_euler+0x248>
 801373c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013740:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013744:	edc7 7a06 	vstr	s15, [r7, #24]
            if (e.yaw   < -PI) e.yaw   += 2.0f*PI;
 8013748:	edd7 7a06 	vldr	s15, [r7, #24]
 801374c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013750:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 80137b8 <attitude_get_euler+0x250>
 8013754:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801375c:	d50b      	bpl.n	8013776 <attitude_get_euler+0x20e>
 801375e:	edd7 7a06 	vldr	s15, [r7, #24]
 8013762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013766:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80137b0 <attitude_get_euler+0x248>
 801376a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801376e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013772:	edc7 7a06 	vstr	s15, [r7, #24]

    return e;
 8013776:	f107 031c 	add.w	r3, r7, #28
 801377a:	f107 0210 	add.w	r2, r7, #16
 801377e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013780:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013784:	69f9      	ldr	r1, [r7, #28]
 8013786:	6a3a      	ldr	r2, [r7, #32]
 8013788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801378a:	ee06 1a90 	vmov	s13, r1
 801378e:	ee07 2a10 	vmov	s14, r2
 8013792:	ee07 3a90 	vmov	s15, r3
}
 8013796:	eeb0 0a66 	vmov.f32	s0, s13
 801379a:	eef0 0a47 	vmov.f32	s1, s14
 801379e:	eeb0 1a67 	vmov.f32	s2, s15
 80137a2:	3738      	adds	r7, #56	@ 0x38
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	4d12d84a 	.word	0x4d12d84a
 80137ac:	400921fb 	.word	0x400921fb
 80137b0:	4d12d84a 	.word	0x4d12d84a
 80137b4:	401921fb 	.word	0x401921fb
 80137b8:	4d12d84a 	.word	0x4d12d84a
 80137bc:	c00921fb 	.word	0xc00921fb
 80137c0:	24000058 	.word	0x24000058

080137c4 <get_accel>:
    _pos_est.vel.v[1] = fk.X[3];
}

//
// 这些函数用于获取传感器数据
void get_accel(float a, float b, float c) {
 80137c4:	b480      	push	{r7}
 80137c6:	b085      	sub	sp, #20
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80137ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80137d2:	ed87 1a01 	vstr	s2, [r7, #4]
    _accel.x = a; // 加速度数据
 80137d6:	4a07      	ldr	r2, [pc, #28]	@ (80137f4 <get_accel+0x30>)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	6013      	str	r3, [r2, #0]
    _accel.y = b;
 80137dc:	4a05      	ldr	r2, [pc, #20]	@ (80137f4 <get_accel+0x30>)
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	6053      	str	r3, [r2, #4]
    _accel.z = c;
 80137e2:	4a04      	ldr	r2, [pc, #16]	@ (80137f4 <get_accel+0x30>)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6093      	str	r3, [r2, #8]
}
 80137e8:	bf00      	nop
 80137ea:	3714      	adds	r7, #20
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr
 80137f4:	240011b8 	.word	0x240011b8

080137f8 <get_gyro>:

void get_gyro(float a, float b, float c) {
 80137f8:	b480      	push	{r7}
 80137fa:	b085      	sub	sp, #20
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8013802:	edc7 0a02 	vstr	s1, [r7, #8]
 8013806:	ed87 1a01 	vstr	s2, [r7, #4]
    _gyro.x = a; // 陀螺仪数据
 801380a:	4a07      	ldr	r2, [pc, #28]	@ (8013828 <get_gyro+0x30>)
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	6013      	str	r3, [r2, #0]
    _gyro.y = b;
 8013810:	4a05      	ldr	r2, [pc, #20]	@ (8013828 <get_gyro+0x30>)
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	6053      	str	r3, [r2, #4]
    _gyro.z = c;
 8013816:	4a04      	ldr	r2, [pc, #16]	@ (8013828 <get_gyro+0x30>)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6093      	str	r3, [r2, #8]
}
 801381c:	bf00      	nop
 801381e:	3714      	adds	r7, #20
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr
 8013828:	240011c4 	.word	0x240011c4

0801382c <process_main>:

//const float DEG2RAD = 1.0f;


void process_main(void)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b098      	sub	sp, #96	@ 0x60
 8013830:	af04      	add	r7, sp, #16
	static vec3f acc_sum   = {0};

	static vec3f gyro_bias = {0};
	static vec3f gyro_sum  = {0};

	if (!calib_done) {
 8013832:	4b57      	ldr	r3, [pc, #348]	@ (8013990 <process_main+0x164>)
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	f083 0301 	eor.w	r3, r3, #1
 801383a:	b2db      	uxtb	r3, r3
 801383c:	2b00      	cmp	r3, #0
 801383e:	f000 80b5 	beq.w	80139ac <process_main+0x180>
	    /* 累积原始数据 */
	    acc_sum.x  += BMI088.acc.m_s_2[xx];
 8013842:	4b54      	ldr	r3, [pc, #336]	@ (8013994 <process_main+0x168>)
 8013844:	ed93 7a00 	vldr	s14, [r3]
 8013848:	4b53      	ldr	r3, [pc, #332]	@ (8013998 <process_main+0x16c>)
 801384a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 801384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013852:	4b50      	ldr	r3, [pc, #320]	@ (8013994 <process_main+0x168>)
 8013854:	edc3 7a00 	vstr	s15, [r3]
	    acc_sum.y  += BMI088.acc.m_s_2[yy];
 8013858:	4b4e      	ldr	r3, [pc, #312]	@ (8013994 <process_main+0x168>)
 801385a:	ed93 7a01 	vldr	s14, [r3, #4]
 801385e:	4b4e      	ldr	r3, [pc, #312]	@ (8013998 <process_main+0x16c>)
 8013860:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8013864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013868:	4b4a      	ldr	r3, [pc, #296]	@ (8013994 <process_main+0x168>)
 801386a:	edc3 7a01 	vstr	s15, [r3, #4]
	    acc_sum.z  += BMI088.acc.m_s_2[zz];
 801386e:	4b49      	ldr	r3, [pc, #292]	@ (8013994 <process_main+0x168>)
 8013870:	ed93 7a02 	vldr	s14, [r3, #8]
 8013874:	4b48      	ldr	r3, [pc, #288]	@ (8013998 <process_main+0x16c>)
 8013876:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801387a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801387e:	4b45      	ldr	r3, [pc, #276]	@ (8013994 <process_main+0x168>)
 8013880:	edc3 7a02 	vstr	s15, [r3, #8]

	    gyro_sum.x += BMI088.gyro.dps[xx];
 8013884:	4b45      	ldr	r3, [pc, #276]	@ (801399c <process_main+0x170>)
 8013886:	ed93 7a00 	vldr	s14, [r3]
 801388a:	4b43      	ldr	r3, [pc, #268]	@ (8013998 <process_main+0x16c>)
 801388c:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8013890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013894:	4b41      	ldr	r3, [pc, #260]	@ (801399c <process_main+0x170>)
 8013896:	edc3 7a00 	vstr	s15, [r3]
	    gyro_sum.y += BMI088.gyro.dps[yy];
 801389a:	4b40      	ldr	r3, [pc, #256]	@ (801399c <process_main+0x170>)
 801389c:	ed93 7a01 	vldr	s14, [r3, #4]
 80138a0:	4b3d      	ldr	r3, [pc, #244]	@ (8013998 <process_main+0x16c>)
 80138a2:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 80138a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138aa:	4b3c      	ldr	r3, [pc, #240]	@ (801399c <process_main+0x170>)
 80138ac:	edc3 7a01 	vstr	s15, [r3, #4]
	    gyro_sum.z += BMI088.gyro.dps[zz];
 80138b0:	4b3a      	ldr	r3, [pc, #232]	@ (801399c <process_main+0x170>)
 80138b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80138b6:	4b38      	ldr	r3, [pc, #224]	@ (8013998 <process_main+0x16c>)
 80138b8:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80138bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138c0:	4b36      	ldr	r3, [pc, #216]	@ (801399c <process_main+0x170>)
 80138c2:	edc3 7a02 	vstr	s15, [r3, #8]

	    if (++calib_cnt >= 3000) {              // 5 s @1 kHz
 80138c6:	4b36      	ldr	r3, [pc, #216]	@ (80139a0 <process_main+0x174>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	3301      	adds	r3, #1
 80138cc:	4a34      	ldr	r2, [pc, #208]	@ (80139a0 <process_main+0x174>)
 80138ce:	6013      	str	r3, [r2, #0]
 80138d0:	4b33      	ldr	r3, [pc, #204]	@ (80139a0 <process_main+0x174>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80138d8:	4293      	cmp	r3, r2
 80138da:	f340 81f9 	ble.w	8013cd0 <process_main+0x4a4>
	        /* 计算平均值作为零偏 */
	        acc_bias.x  = acc_sum.x  / calib_cnt;
 80138de:	4b2d      	ldr	r3, [pc, #180]	@ (8013994 <process_main+0x168>)
 80138e0:	edd3 6a00 	vldr	s13, [r3]
 80138e4:	4b2e      	ldr	r3, [pc, #184]	@ (80139a0 <process_main+0x174>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	ee07 3a90 	vmov	s15, r3
 80138ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80138f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80138f4:	4b2b      	ldr	r3, [pc, #172]	@ (80139a4 <process_main+0x178>)
 80138f6:	edc3 7a00 	vstr	s15, [r3]
	        acc_bias.y  = acc_sum.y  / calib_cnt;
 80138fa:	4b26      	ldr	r3, [pc, #152]	@ (8013994 <process_main+0x168>)
 80138fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8013900:	4b27      	ldr	r3, [pc, #156]	@ (80139a0 <process_main+0x174>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	ee07 3a90 	vmov	s15, r3
 8013908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801390c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013910:	4b24      	ldr	r3, [pc, #144]	@ (80139a4 <process_main+0x178>)
 8013912:	edc3 7a01 	vstr	s15, [r3, #4]
	        acc_bias.z  = acc_sum.z  / calib_cnt;
 8013916:	4b1f      	ldr	r3, [pc, #124]	@ (8013994 <process_main+0x168>)
 8013918:	edd3 6a02 	vldr	s13, [r3, #8]
 801391c:	4b20      	ldr	r3, [pc, #128]	@ (80139a0 <process_main+0x174>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	ee07 3a90 	vmov	s15, r3
 8013924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801392c:	4b1d      	ldr	r3, [pc, #116]	@ (80139a4 <process_main+0x178>)
 801392e:	edc3 7a02 	vstr	s15, [r3, #8]

	        gyro_bias.x = gyro_sum.x / calib_cnt;
 8013932:	4b1a      	ldr	r3, [pc, #104]	@ (801399c <process_main+0x170>)
 8013934:	edd3 6a00 	vldr	s13, [r3]
 8013938:	4b19      	ldr	r3, [pc, #100]	@ (80139a0 <process_main+0x174>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	ee07 3a90 	vmov	s15, r3
 8013940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013948:	4b17      	ldr	r3, [pc, #92]	@ (80139a8 <process_main+0x17c>)
 801394a:	edc3 7a00 	vstr	s15, [r3]
	        gyro_bias.y = gyro_sum.y / calib_cnt;
 801394e:	4b13      	ldr	r3, [pc, #76]	@ (801399c <process_main+0x170>)
 8013950:	edd3 6a01 	vldr	s13, [r3, #4]
 8013954:	4b12      	ldr	r3, [pc, #72]	@ (80139a0 <process_main+0x174>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	ee07 3a90 	vmov	s15, r3
 801395c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013964:	4b10      	ldr	r3, [pc, #64]	@ (80139a8 <process_main+0x17c>)
 8013966:	edc3 7a01 	vstr	s15, [r3, #4]
	        gyro_bias.z = gyro_sum.z / calib_cnt;
 801396a:	4b0c      	ldr	r3, [pc, #48]	@ (801399c <process_main+0x170>)
 801396c:	edd3 6a02 	vldr	s13, [r3, #8]
 8013970:	4b0b      	ldr	r3, [pc, #44]	@ (80139a0 <process_main+0x174>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	ee07 3a90 	vmov	s15, r3
 8013978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801397c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013980:	4b09      	ldr	r3, [pc, #36]	@ (80139a8 <process_main+0x17c>)
 8013982:	edc3 7a02 	vstr	s15, [r3, #8]

	        calib_done = true;
 8013986:	4b02      	ldr	r3, [pc, #8]	@ (8013990 <process_main+0x164>)
 8013988:	2201      	movs	r2, #1
 801398a:	701a      	strb	r2, [r3, #0]
 801398c:	e1a1      	b.n	8013cd2 <process_main+0x4a6>
 801398e:	bf00      	nop
 8013990:	240011e0 	.word	0x240011e0
 8013994:	240011e4 	.word	0x240011e4
 8013998:	24000b2c 	.word	0x24000b2c
 801399c:	240011f0 	.word	0x240011f0
 80139a0:	240011fc 	.word	0x240011fc
 80139a4:	24001200 	.word	0x24001200
 80139a8:	2400120c 	.word	0x2400120c
	    }
	    return;          // 校准未完，直接退出主流程
	}

  // 0. 更新数据到position_estimator模块
	get_accel(BMI088.acc.m_s_2[xx] - acc_bias.x,
 80139ac:	4bca      	ldr	r3, [pc, #808]	@ (8013cd8 <process_main+0x4ac>)
 80139ae:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80139b2:	4bca      	ldr	r3, [pc, #808]	@ (8013cdc <process_main+0x4b0>)
 80139b4:	edd3 7a00 	vldr	s15, [r3]
 80139b8:	ee77 6a67 	vsub.f32	s13, s14, s15
	          BMI088.acc.m_s_2[yy] - acc_bias.y,
 80139bc:	4bc6      	ldr	r3, [pc, #792]	@ (8013cd8 <process_main+0x4ac>)
 80139be:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80139c2:	4bc6      	ldr	r3, [pc, #792]	@ (8013cdc <process_main+0x4b0>)
 80139c4:	edd3 7a01 	vldr	s15, [r3, #4]
	get_accel(BMI088.acc.m_s_2[xx] - acc_bias.x,
 80139c8:	ee37 6a67 	vsub.f32	s12, s14, s15
	          BMI088.acc.m_s_2[zz] - acc_bias.z);
 80139cc:	4bc2      	ldr	r3, [pc, #776]	@ (8013cd8 <process_main+0x4ac>)
 80139ce:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80139d2:	4bc2      	ldr	r3, [pc, #776]	@ (8013cdc <process_main+0x4b0>)
 80139d4:	edd3 7a02 	vldr	s15, [r3, #8]
	get_accel(BMI088.acc.m_s_2[xx] - acc_bias.x,
 80139d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139dc:	eeb0 1a67 	vmov.f32	s2, s15
 80139e0:	eef0 0a46 	vmov.f32	s1, s12
 80139e4:	eeb0 0a66 	vmov.f32	s0, s13
 80139e8:	f7ff feec 	bl	80137c4 <get_accel>
   get_gyro((BMI088.gyro.dps[xx] - gyro_bias.x) ,
 80139ec:	4bba      	ldr	r3, [pc, #744]	@ (8013cd8 <process_main+0x4ac>)
 80139ee:	ed93 7a25 	vldr	s14, [r3, #148]	@ 0x94
 80139f2:	4bbb      	ldr	r3, [pc, #748]	@ (8013ce0 <process_main+0x4b4>)
 80139f4:	edd3 7a00 	vldr	s15, [r3]
 80139f8:	ee77 6a67 	vsub.f32	s13, s14, s15
           (BMI088.gyro.dps[yy] - gyro_bias.y) ,
 80139fc:	4bb6      	ldr	r3, [pc, #728]	@ (8013cd8 <process_main+0x4ac>)
 80139fe:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 8013a02:	4bb7      	ldr	r3, [pc, #732]	@ (8013ce0 <process_main+0x4b4>)
 8013a04:	edd3 7a01 	vldr	s15, [r3, #4]
   get_gyro((BMI088.gyro.dps[xx] - gyro_bias.x) ,
 8013a08:	ee37 6a67 	vsub.f32	s12, s14, s15
           (BMI088.gyro.dps[zz] - gyro_bias.z) );
 8013a0c:	4bb2      	ldr	r3, [pc, #712]	@ (8013cd8 <process_main+0x4ac>)
 8013a0e:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 8013a12:	4bb3      	ldr	r3, [pc, #716]	@ (8013ce0 <process_main+0x4b4>)
 8013a14:	edd3 7a02 	vldr	s15, [r3, #8]
   get_gyro((BMI088.gyro.dps[xx] - gyro_bias.x) ,
 8013a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a1c:	eeb0 1a67 	vmov.f32	s2, s15
 8013a20:	eef0 0a46 	vmov.f32	s1, s12
 8013a24:	eeb0 0a66 	vmov.f32	s0, s13
 8013a28:	f7ff fee6 	bl	80137f8 <get_gyro>



   vec3f accel = {{{BMI088.acc.m_s_2[xx] - acc_bias.x,
 8013a2c:	4baa      	ldr	r3, [pc, #680]	@ (8013cd8 <process_main+0x4ac>)
 8013a2e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8013a32:	4baa      	ldr	r3, [pc, #680]	@ (8013cdc <process_main+0x4b0>)
 8013a34:	edd3 7a00 	vldr	s15, [r3]
 8013a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	                BMI088.acc.m_s_2[yy] - acc_bias.y,
 8013a40:	4ba5      	ldr	r3, [pc, #660]	@ (8013cd8 <process_main+0x4ac>)
 8013a42:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8013a46:	4ba5      	ldr	r3, [pc, #660]	@ (8013cdc <process_main+0x4b0>)
 8013a48:	edd3 7a01 	vldr	s15, [r3, #4]
 8013a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
   vec3f accel = {{{BMI088.acc.m_s_2[xx] - acc_bias.x,
 8013a50:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	                BMI088.acc.m_s_2[zz] - acc_bias.z}}};
 8013a54:	4ba0      	ldr	r3, [pc, #640]	@ (8013cd8 <process_main+0x4ac>)
 8013a56:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8013a5a:	4ba0      	ldr	r3, [pc, #640]	@ (8013cdc <process_main+0x4b0>)
 8013a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013a60:	ee77 7a67 	vsub.f32	s15, s14, s15
   vec3f accel = {{{BMI088.acc.m_s_2[xx] - acc_bias.x,
 8013a64:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
   vec3f gyro = {{{
		   (BMI088.gyro.dps[xx] - gyro_bias.x)   ,
 8013a68:	4b9b      	ldr	r3, [pc, #620]	@ (8013cd8 <process_main+0x4ac>)
 8013a6a:	ed93 7a25 	vldr	s14, [r3, #148]	@ 0x94
 8013a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8013ce0 <process_main+0x4b4>)
 8013a70:	edd3 7a00 	vldr	s15, [r3]
 8013a74:	ee77 7a67 	vsub.f32	s15, s14, s15
   vec3f gyro = {{{
 8013a78:	edc7 7a08 	vstr	s15, [r7, #32]
			 (BMI088.gyro.dps[yy] - gyro_bias.y) ,
 8013a7c:	4b96      	ldr	r3, [pc, #600]	@ (8013cd8 <process_main+0x4ac>)
 8013a7e:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 8013a82:	4b97      	ldr	r3, [pc, #604]	@ (8013ce0 <process_main+0x4b4>)
 8013a84:	edd3 7a01 	vldr	s15, [r3, #4]
 8013a88:	ee77 7a67 	vsub.f32	s15, s14, s15
   vec3f gyro = {{{
 8013a8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			 (BMI088.gyro.dps[zz] - gyro_bias.z)
 8013a90:	4b91      	ldr	r3, [pc, #580]	@ (8013cd8 <process_main+0x4ac>)
 8013a92:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 8013a96:	4b92      	ldr	r3, [pc, #584]	@ (8013ce0 <process_main+0x4b4>)
 8013a98:	edd3 7a02 	vldr	s15, [r3, #8]
 8013a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
   vec3f gyro = {{{
 8013aa0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
//          accel.x, accel.y, accel.z);
//   printf("RAW: gyro=%.3f,%.3f,%.3f\n",
//          gyro.x, gyro.y, gyro.z);

    // 1. 姿态估计
    attitude_update(dt, &accel, &gyro);       // 旧
 8013aa4:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 8013ce4 <process_main+0x4b8>
 8013aa8:	f107 0220 	add.w	r2, r7, #32
 8013aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8013ab8:	f7ff fa56 	bl	8012f68 <attitude_update>
//   attitude_update_ekf(dt, &accel, &gyro);     // 新

    quatf current_quat = attitude_get_quat();//获取四元数
 8013abc:	f7ff f8fc 	bl	8012cb8 <attitude_get_quat>
 8013ac0:	eeb0 6a40 	vmov.f32	s12, s0
 8013ac4:	eef0 6a60 	vmov.f32	s13, s1
 8013ac8:	eeb0 7a41 	vmov.f32	s14, s2
 8013acc:	eef0 7a61 	vmov.f32	s15, s3
 8013ad0:	ed87 6a04 	vstr	s12, [r7, #16]
 8013ad4:	edc7 6a05 	vstr	s13, [r7, #20]
 8013ad8:	ed87 7a06 	vstr	s14, [r7, #24]
 8013adc:	edc7 7a07 	vstr	s15, [r7, #28]
    euler_t current_euler = attitude_get_euler();//获取欧拉角
 8013ae0:	f7ff fd42 	bl	8013568 <attitude_get_euler>
 8013ae4:	eef0 6a40 	vmov.f32	s13, s0
 8013ae8:	eeb0 7a60 	vmov.f32	s14, s1
 8013aec:	eef0 7a41 	vmov.f32	s15, s2
 8013af0:	edc7 6a01 	vstr	s13, [r7, #4]
 8013af4:	ed87 7a02 	vstr	s14, [r7, #8]
 8013af8:	edc7 7a03 	vstr	s15, [r7, #12]
////
////    printf("%f,%f,%f\n\r\n", att_sp.roll, att_sp.pitch, att_sp.yaw);
//

    //调试姿态环 手动设定姿态（关闭位置环）/////////////////////////////////////////////////
        att_sp.roll = 0.0f;
 8013afc:	4b7a      	ldr	r3, [pc, #488]	@ (8013ce8 <process_main+0x4bc>)
 8013afe:	f04f 0200 	mov.w	r2, #0
 8013b02:	601a      	str	r2, [r3, #0]
        att_sp.pitch = 0.0f;
 8013b04:	4b78      	ldr	r3, [pc, #480]	@ (8013ce8 <process_main+0x4bc>)
 8013b06:	f04f 0200 	mov.w	r2, #0
 8013b0a:	605a      	str	r2, [r3, #4]
        att_sp.yaw = current_euler.yaw;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	4a76      	ldr	r2, [pc, #472]	@ (8013ce8 <process_main+0x4bc>)
 8013b10:	6093      	str	r3, [r2, #8]
        att_sp.thrust = 9.8f;
 8013b12:	4b75      	ldr	r3, [pc, #468]	@ (8013ce8 <process_main+0x4bc>)
 8013b14:	4a75      	ldr	r2, [pc, #468]	@ (8013cec <process_main+0x4c0>)
 8013b16:	60da      	str	r2, [r3, #12]

        float cr = cosf(att_sp.roll  * 0.5f);    //直接计算期望四元数
 8013b18:	4b73      	ldr	r3, [pc, #460]	@ (8013ce8 <process_main+0x4bc>)
 8013b1a:	edd3 7a00 	vldr	s15, [r3]
 8013b1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b26:	eeb0 0a67 	vmov.f32	s0, s15
 8013b2a:	f003 fa79 	bl	8017020 <cosf>
 8013b2e:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
        float sr = sinf(att_sp.roll  * 0.5f);
 8013b32:	4b6d      	ldr	r3, [pc, #436]	@ (8013ce8 <process_main+0x4bc>)
 8013b34:	edd3 7a00 	vldr	s15, [r3]
 8013b38:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b40:	eeb0 0a67 	vmov.f32	s0, s15
 8013b44:	f003 f9a8 	bl	8016e98 <sinf>
 8013b48:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
        float cp = cosf(att_sp.pitch * 0.5f);
 8013b4c:	4b66      	ldr	r3, [pc, #408]	@ (8013ce8 <process_main+0x4bc>)
 8013b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013b52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8013b5e:	f003 fa5f 	bl	8017020 <cosf>
 8013b62:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
        float sp = sinf(att_sp.pitch * 0.5f);
 8013b66:	4b60      	ldr	r3, [pc, #384]	@ (8013ce8 <process_main+0x4bc>)
 8013b68:	edd3 7a01 	vldr	s15, [r3, #4]
 8013b6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b74:	eeb0 0a67 	vmov.f32	s0, s15
 8013b78:	f003 f98e 	bl	8016e98 <sinf>
 8013b7c:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
        float cy = cosf(att_sp.yaw   * 0.5f);
 8013b80:	4b59      	ldr	r3, [pc, #356]	@ (8013ce8 <process_main+0x4bc>)
 8013b82:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8013b92:	f003 fa45 	bl	8017020 <cosf>
 8013b96:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
        float sy = sinf(att_sp.yaw   * 0.5f);
 8013b9a:	4b53      	ldr	r3, [pc, #332]	@ (8013ce8 <process_main+0x4bc>)
 8013b9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013ba0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8013bac:	f003 f974 	bl	8016e98 <sinf>
 8013bb0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

        _qd.w = cr*cp*cy + sr*sp*sy;
 8013bb4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013bb8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013bc0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013bc8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8013bcc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8013bd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013bd4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013be0:	4b43      	ldr	r3, [pc, #268]	@ (8013cf0 <process_main+0x4c4>)
 8013be2:	edc3 7a00 	vstr	s15, [r3]
        _qd.x = sr*cp*cy - cr*sp*sy;
 8013be6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8013bea:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013bf2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013bfa:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8013bfe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8013c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013c06:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c12:	4b37      	ldr	r3, [pc, #220]	@ (8013cf0 <process_main+0x4c4>)
 8013c14:	edc3 7a01 	vstr	s15, [r3, #4]
        _qd.y = cr*sp*cy + sr*cp*sy;
 8013c18:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013c1c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8013c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c24:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c2c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8013c30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013c34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013c38:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c44:	4b2a      	ldr	r3, [pc, #168]	@ (8013cf0 <process_main+0x4c4>)
 8013c46:	edc3 7a02 	vstr	s15, [r3, #8]
        _qd.z = cr*cp*sy - sr*sp*cy;
 8013c4a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013c4e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c56:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c5e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8013c62:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8013c66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013c6a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c76:	4b1e      	ldr	r3, [pc, #120]	@ (8013cf0 <process_main+0x4c4>)
 8013c78:	edc3 7a03 	vstr	s15, [r3, #12]




    // 4. 姿态控制
     attitude_error_to_rates();//计算期望角速度
 8013c7c:	f7fe fcca 	bl	8012614 <attitude_error_to_rates>
     rate_error_to_torque(dt);//计算期望扭矩
 8013c80:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8013ce4 <process_main+0x4b8>
 8013c84:	eeb0 0a67 	vmov.f32	s0, s15
 8013c88:	f7fe fe3a 	bl	8012900 <rate_error_to_torque>
     printf(" %f, %f, %f\r\n", _rates_sp.v[0], _rates_sp.v[1], _rates_sp.v[2] );
 8013c8c:	4b19      	ldr	r3, [pc, #100]	@ (8013cf4 <process_main+0x4c8>)
 8013c8e:	edd3 7a00 	vldr	s15, [r3]
 8013c92:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8013c96:	4b17      	ldr	r3, [pc, #92]	@ (8013cf4 <process_main+0x4c8>)
 8013c98:	edd3 7a01 	vldr	s15, [r3, #4]
 8013c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013ca0:	4b14      	ldr	r3, [pc, #80]	@ (8013cf4 <process_main+0x4c8>)
 8013ca2:	edd3 6a02 	vldr	s13, [r3, #8]
 8013ca6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8013caa:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013cae:	ed8d 7b00 	vstr	d7, [sp]
 8013cb2:	ec53 2b15 	vmov	r2, r3, d5
 8013cb6:	4810      	ldr	r0, [pc, #64]	@ (8013cf8 <process_main+0x4cc>)
 8013cb8:	f000 fe4e 	bl	8014958 <iprintf>
//     printf("%f,%f,%f\n", _rates_sp.v[0], _rates_sp.v[1], _rates_sp.v[2]);
//     printf("torque: %f, %f, %f\r\n", torque.v[0], torque.v[1], torque.v[2] );
     torque_to_motor(&torque, att_sp.thrust, &motor_out);//计算电机输出
 8013cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8013ce8 <process_main+0x4bc>)
 8013cbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8013cc2:	490e      	ldr	r1, [pc, #56]	@ (8013cfc <process_main+0x4d0>)
 8013cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8013cc8:	480d      	ldr	r0, [pc, #52]	@ (8013d00 <process_main+0x4d4>)
 8013cca:	f7fe ff7f 	bl	8012bcc <torque_to_motor>
 8013cce:	e000      	b.n	8013cd2 <process_main+0x4a6>
	    return;          // 校准未完，直接退出主流程
 8013cd0:	bf00      	nop
//

//     printf(" %f, %f, %f, %f\r\n", motor_out.m[0], motor_out.m[1], motor_out.m[2], motor_out.m[3]);

}
 8013cd2:	3750      	adds	r7, #80	@ 0x50
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	24000b2c 	.word	0x24000b2c
 8013cdc:	24001200 	.word	0x24001200
 8013ce0:	2400120c 	.word	0x2400120c
 8013ce4:	3a83126f 	.word	0x3a83126f
 8013ce8:	240011a8 	.word	0x240011a8
 8013cec:	411ccccd 	.word	0x411ccccd
 8013cf0:	24000fa4 	.word	0x24000fa4
 8013cf4:	24000fb4 	.word	0x24000fb4
 8013cf8:	08018270 	.word	0x08018270
 8013cfc:	240011d0 	.word	0x240011d0
 8013d00:	24000ff0 	.word	0x24000ff0

08013d04 <micolink_decode>:
bool micolink_parse_char(MICOLINK_MSG_t* msg, uint8_t data);



void micolink_decode(uint8_t data)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	71fb      	strb	r3, [r7, #7]
    static MICOLINK_MSG_t msg;

    // 解析接收到的字符，如果解析失败则直接返回
    if(micolink_parse_char(&msg, data) == false)
 8013d0e:	79fb      	ldrb	r3, [r7, #7]
 8013d10:	4619      	mov	r1, r3
 8013d12:	4812      	ldr	r0, [pc, #72]	@ (8013d5c <micolink_decode+0x58>)
 8013d14:	f000 f864 	bl	8013de0 <micolink_parse_char>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	f083 0301 	eor.w	r3, r3, #1
 8013d1e:	b2db      	uxtb	r3, r3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d113      	bne.n	8013d4c <micolink_decode+0x48>
        return;

    // 根据消息ID处理不同的消息类型
    switch(msg.msg_id)
 8013d24:	4b0d      	ldr	r3, [pc, #52]	@ (8013d5c <micolink_decode+0x58>)
 8013d26:	78db      	ldrb	r3, [r3, #3]
 8013d28:	2b51      	cmp	r3, #81	@ 0x51
 8013d2a:	d111      	bne.n	8013d50 <micolink_decode+0x4c>
    {
        case MICOLINK_MSG_ID_RANGE_SENSOR:
        {
        	if(msg.payload[10] == 1 && msg.payload[17] == 1)
 8013d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8013d5c <micolink_decode+0x58>)
 8013d2e:	7c1b      	ldrb	r3, [r3, #16]
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d10f      	bne.n	8013d54 <micolink_decode+0x50>
 8013d34:	4b09      	ldr	r3, [pc, #36]	@ (8013d5c <micolink_decode+0x58>)
 8013d36:	7ddb      	ldrb	r3, [r3, #23]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d10b      	bne.n	8013d54 <micolink_decode+0x50>
        	{
                // 将消息载荷数据复制到payload结构体中
                memcpy(&payload, msg.payload, msg.len);
 8013d3c:	4b07      	ldr	r3, [pc, #28]	@ (8013d5c <micolink_decode+0x58>)
 8013d3e:	795b      	ldrb	r3, [r3, #5]
 8013d40:	461a      	mov	r2, r3
 8013d42:	4907      	ldr	r1, [pc, #28]	@ (8013d60 <micolink_decode+0x5c>)
 8013d44:	4807      	ldr	r0, [pc, #28]	@ (8013d64 <micolink_decode+0x60>)
 8013d46:	f000 ffce 	bl	8014ce6 <memcpy>
            */

//            HAL_UART_Transmit(&huart4, (uint8_t*)&payload, sizeof(payload), 100);


            break;
 8013d4a:	e003      	b.n	8013d54 <micolink_decode+0x50>
        return;
 8013d4c:	bf00      	nop
 8013d4e:	e002      	b.n	8013d56 <micolink_decode+0x52>
        }

        default:
            break;
 8013d50:	bf00      	nop
 8013d52:	e000      	b.n	8013d56 <micolink_decode+0x52>
            break;
 8013d54:	bf00      	nop
        }
}
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	2400122c 	.word	0x2400122c
 8013d60:	24001232 	.word	0x24001232
 8013d64:	24001218 	.word	0x24001218

08013d68 <micolink_check_sum>:

bool micolink_check_sum(MICOLINK_MSG_t* msg)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b096      	sub	sp, #88	@ 0x58
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
    // 计算消息的实际长度加上头部和尾部的固定长度（6字节）
    uint8_t length = msg->len + 6;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	795b      	ldrb	r3, [r3, #5]
 8013d74:	3306      	adds	r3, #6
 8013d76:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    // 创建一个临时数组用于存储消息的所有字节
    uint8_t temp[MICOLINK_MAX_LEN];
    // 初始化校验和为0
    uint8_t checksum = 0;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // 将消息的所有字节复制到临时数组中
    memcpy(temp, msg, length);
 8013d80:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8013d84:	f107 030c 	add.w	r3, r7, #12
 8013d88:	6879      	ldr	r1, [r7, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f000 ffab 	bl	8014ce6 <memcpy>

    // 遍历临时数组中的每个字节，累加到校验和中
    for(uint8_t i=0; i<length; i++)
 8013d90:	2300      	movs	r3, #0
 8013d92:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8013d96:	e00f      	b.n	8013db8 <micolink_check_sum+0x50>
    {
        checksum += temp[i];
 8013d98:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8013d9c:	3358      	adds	r3, #88	@ 0x58
 8013d9e:	443b      	add	r3, r7
 8013da0:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8013da4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013da8:	4413      	add	r3, r2
 8013daa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    for(uint8_t i=0; i<length; i++)
 8013dae:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8013db2:	3301      	adds	r3, #1
 8013db4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8013db8:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8013dbc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d3e9      	bcc.n	8013d98 <micolink_check_sum+0x30>
    }

    // 检查计算得到的校验和是否与消息中的校验和相等
    if(checksum == msg->checksum)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013dca:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d101      	bne.n	8013dd6 <micolink_check_sum+0x6e>
        return true;
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	e000      	b.n	8013dd8 <micolink_check_sum+0x70>
    else
        return false;
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3758      	adds	r7, #88	@ 0x58
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}

08013de0 <micolink_parse_char>:

bool micolink_parse_char(MICOLINK_MSG_t* msg, uint8_t data)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	460b      	mov	r3, r1
 8013dea:	70fb      	strb	r3, [r7, #3]
    switch(msg->status)
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013df2:	2b07      	cmp	r3, #7
 8013df4:	f200 80a7 	bhi.w	8013f46 <micolink_parse_char+0x166>
 8013df8:	a201      	add	r2, pc, #4	@ (adr r2, 8013e00 <micolink_parse_char+0x20>)
 8013dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dfe:	bf00      	nop
 8013e00:	08013e21 	.word	0x08013e21
 8013e04:	08013e41 	.word	0x08013e41
 8013e08:	08013e59 	.word	0x08013e59
 8013e0c:	08013e71 	.word	0x08013e71
 8013e10:	08013e89 	.word	0x08013e89
 8013e14:	08013ea1 	.word	0x08013ea1
 8013e18:	08013ee5 	.word	0x08013ee5
 8013e1c:	08013f27 	.word	0x08013f27
    {
    case 0:     //帧头
        if(data == MICOLINK_MSG_HEAD)
 8013e20:	78fb      	ldrb	r3, [r7, #3]
 8013e22:	2bef      	cmp	r3, #239	@ 0xef
 8013e24:	f040 8098 	bne.w	8013f58 <micolink_parse_char+0x178>
        {
            msg->head = data;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	78fa      	ldrb	r2, [r7, #3]
 8013e2c:	701a      	strb	r2, [r3, #0]
            msg->status++;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013e34:	3301      	adds	r3, #1
 8013e36:	b2da      	uxtb	r2, r3
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        }
        break;
 8013e3e:	e08b      	b.n	8013f58 <micolink_parse_char+0x178>

    case 1:     // 设备ID
        msg->dev_id = data;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	78fa      	ldrb	r2, [r7, #3]
 8013e44:	705a      	strb	r2, [r3, #1]
        msg->status++;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	b2da      	uxtb	r2, r3
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        break;
 8013e56:	e082      	b.n	8013f5e <micolink_parse_char+0x17e>

    case 2:     // 系统ID
        msg->sys_id = data;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	78fa      	ldrb	r2, [r7, #3]
 8013e5c:	709a      	strb	r2, [r3, #2]
        msg->status++;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013e64:	3301      	adds	r3, #1
 8013e66:	b2da      	uxtb	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        break;
 8013e6e:	e076      	b.n	8013f5e <micolink_parse_char+0x17e>

    case 3:     // 消息ID
        msg->msg_id = data;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	78fa      	ldrb	r2, [r7, #3]
 8013e74:	70da      	strb	r2, [r3, #3]
        msg->status++;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	b2da      	uxtb	r2, r3
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        break;
 8013e86:	e06a      	b.n	8013f5e <micolink_parse_char+0x17e>

    case 4:     // 包序列
        msg->seq = data;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	78fa      	ldrb	r2, [r7, #3]
 8013e8c:	711a      	strb	r2, [r3, #4]
        msg->status++;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013e94:	3301      	adds	r3, #1
 8013e96:	b2da      	uxtb	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        break;
 8013e9e:	e05e      	b.n	8013f5e <micolink_parse_char+0x17e>

    case 5:     // 负载长度
        msg->len = data;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	78fa      	ldrb	r2, [r7, #3]
 8013ea4:	715a      	strb	r2, [r3, #5]
        if(msg->len == 0)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	795b      	ldrb	r3, [r3, #5]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d108      	bne.n	8013ec0 <micolink_parse_char+0xe0>
            msg->status += 2;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013eb4:	3302      	adds	r3, #2
 8013eb6:	b2da      	uxtb	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        else if(msg->len > MICOLINK_MAX_PAYLOAD_LEN)
            msg->status = 0;
        else
            msg->status++;
        break;
 8013ebe:	e04e      	b.n	8013f5e <micolink_parse_char+0x17e>
        else if(msg->len > MICOLINK_MAX_PAYLOAD_LEN)
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	795b      	ldrb	r3, [r3, #5]
 8013ec4:	2b40      	cmp	r3, #64	@ 0x40
 8013ec6:	d904      	bls.n	8013ed2 <micolink_parse_char+0xf2>
            msg->status = 0;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        break;
 8013ed0:	e045      	b.n	8013f5e <micolink_parse_char+0x17e>
            msg->status++;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013ed8:	3301      	adds	r3, #1
 8013eda:	b2da      	uxtb	r2, r3
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        break;
 8013ee2:	e03c      	b.n	8013f5e <micolink_parse_char+0x17e>

    case 6:     // 数据负载接收
        msg->payload[msg->payload_cnt++] = data;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013eea:	1c5a      	adds	r2, r3, #1
 8013eec:	b2d1      	uxtb	r1, r2
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	f882 1048 	strb.w	r1, [r2, #72]	@ 0x48
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	4413      	add	r3, r2
 8013efa:	78fa      	ldrb	r2, [r7, #3]
 8013efc:	719a      	strb	r2, [r3, #6]
        if(msg->payload_cnt == msg->len)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	795b      	ldrb	r3, [r3, #5]
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d127      	bne.n	8013f5c <micolink_parse_char+0x17c>
        {
            msg->payload_cnt = 0;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            msg->status++;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	b2da      	uxtb	r2, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        }
        break;
 8013f24:	e01a      	b.n	8013f5c <micolink_parse_char+0x17c>

    case 7:     // 帧校验
        msg->checksum = data;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	78fa      	ldrb	r2, [r7, #3]
 8013f2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        msg->status = 0;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2200      	movs	r2, #0
 8013f32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        if(micolink_check_sum(msg))
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ff ff16 	bl	8013d68 <micolink_check_sum>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d001      	beq.n	8013f46 <micolink_parse_char+0x166>
        {
            return true;
 8013f42:	2301      	movs	r3, #1
 8013f44:	e00c      	b.n	8013f60 <micolink_parse_char+0x180>
        }

    default:
        msg->status = 0;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
        msg->payload_cnt = 0;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2200      	movs	r2, #0
 8013f52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 8013f56:	e002      	b.n	8013f5e <micolink_parse_char+0x17e>
        break;
 8013f58:	bf00      	nop
 8013f5a:	e000      	b.n	8013f5e <micolink_parse_char+0x17e>
        break;
 8013f5c:	bf00      	nop
    }

    return false;
 8013f5e:	2300      	movs	r3, #0
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <__cvt>:
 8013f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f6a:	ed2d 8b02 	vpush	{d8}
 8013f6e:	eeb0 8b40 	vmov.f64	d8, d0
 8013f72:	b085      	sub	sp, #20
 8013f74:	4617      	mov	r7, r2
 8013f76:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013f78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013f7a:	ee18 2a90 	vmov	r2, s17
 8013f7e:	f025 0520 	bic.w	r5, r5, #32
 8013f82:	2a00      	cmp	r2, #0
 8013f84:	bfb6      	itet	lt
 8013f86:	222d      	movlt	r2, #45	@ 0x2d
 8013f88:	2200      	movge	r2, #0
 8013f8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8013f8e:	2d46      	cmp	r5, #70	@ 0x46
 8013f90:	460c      	mov	r4, r1
 8013f92:	701a      	strb	r2, [r3, #0]
 8013f94:	d004      	beq.n	8013fa0 <__cvt+0x38>
 8013f96:	2d45      	cmp	r5, #69	@ 0x45
 8013f98:	d100      	bne.n	8013f9c <__cvt+0x34>
 8013f9a:	3401      	adds	r4, #1
 8013f9c:	2102      	movs	r1, #2
 8013f9e:	e000      	b.n	8013fa2 <__cvt+0x3a>
 8013fa0:	2103      	movs	r1, #3
 8013fa2:	ab03      	add	r3, sp, #12
 8013fa4:	9301      	str	r3, [sp, #4]
 8013fa6:	ab02      	add	r3, sp, #8
 8013fa8:	9300      	str	r3, [sp, #0]
 8013faa:	4622      	mov	r2, r4
 8013fac:	4633      	mov	r3, r6
 8013fae:	eeb0 0b48 	vmov.f64	d0, d8
 8013fb2:	f000 ff31 	bl	8014e18 <_dtoa_r>
 8013fb6:	2d47      	cmp	r5, #71	@ 0x47
 8013fb8:	d114      	bne.n	8013fe4 <__cvt+0x7c>
 8013fba:	07fb      	lsls	r3, r7, #31
 8013fbc:	d50a      	bpl.n	8013fd4 <__cvt+0x6c>
 8013fbe:	1902      	adds	r2, r0, r4
 8013fc0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc8:	bf08      	it	eq
 8013fca:	9203      	streq	r2, [sp, #12]
 8013fcc:	2130      	movs	r1, #48	@ 0x30
 8013fce:	9b03      	ldr	r3, [sp, #12]
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d319      	bcc.n	8014008 <__cvt+0xa0>
 8013fd4:	9b03      	ldr	r3, [sp, #12]
 8013fd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fd8:	1a1b      	subs	r3, r3, r0
 8013fda:	6013      	str	r3, [r2, #0]
 8013fdc:	b005      	add	sp, #20
 8013fde:	ecbd 8b02 	vpop	{d8}
 8013fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fe4:	2d46      	cmp	r5, #70	@ 0x46
 8013fe6:	eb00 0204 	add.w	r2, r0, r4
 8013fea:	d1e9      	bne.n	8013fc0 <__cvt+0x58>
 8013fec:	7803      	ldrb	r3, [r0, #0]
 8013fee:	2b30      	cmp	r3, #48	@ 0x30
 8013ff0:	d107      	bne.n	8014002 <__cvt+0x9a>
 8013ff2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	bf1c      	itt	ne
 8013ffc:	f1c4 0401 	rsbne	r4, r4, #1
 8014000:	6034      	strne	r4, [r6, #0]
 8014002:	6833      	ldr	r3, [r6, #0]
 8014004:	441a      	add	r2, r3
 8014006:	e7db      	b.n	8013fc0 <__cvt+0x58>
 8014008:	1c5c      	adds	r4, r3, #1
 801400a:	9403      	str	r4, [sp, #12]
 801400c:	7019      	strb	r1, [r3, #0]
 801400e:	e7de      	b.n	8013fce <__cvt+0x66>

08014010 <__exponent>:
 8014010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014012:	2900      	cmp	r1, #0
 8014014:	bfba      	itte	lt
 8014016:	4249      	neglt	r1, r1
 8014018:	232d      	movlt	r3, #45	@ 0x2d
 801401a:	232b      	movge	r3, #43	@ 0x2b
 801401c:	2909      	cmp	r1, #9
 801401e:	7002      	strb	r2, [r0, #0]
 8014020:	7043      	strb	r3, [r0, #1]
 8014022:	dd29      	ble.n	8014078 <__exponent+0x68>
 8014024:	f10d 0307 	add.w	r3, sp, #7
 8014028:	461d      	mov	r5, r3
 801402a:	270a      	movs	r7, #10
 801402c:	461a      	mov	r2, r3
 801402e:	fbb1 f6f7 	udiv	r6, r1, r7
 8014032:	fb07 1416 	mls	r4, r7, r6, r1
 8014036:	3430      	adds	r4, #48	@ 0x30
 8014038:	f802 4c01 	strb.w	r4, [r2, #-1]
 801403c:	460c      	mov	r4, r1
 801403e:	2c63      	cmp	r4, #99	@ 0x63
 8014040:	f103 33ff 	add.w	r3, r3, #4294967295
 8014044:	4631      	mov	r1, r6
 8014046:	dcf1      	bgt.n	801402c <__exponent+0x1c>
 8014048:	3130      	adds	r1, #48	@ 0x30
 801404a:	1e94      	subs	r4, r2, #2
 801404c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014050:	1c41      	adds	r1, r0, #1
 8014052:	4623      	mov	r3, r4
 8014054:	42ab      	cmp	r3, r5
 8014056:	d30a      	bcc.n	801406e <__exponent+0x5e>
 8014058:	f10d 0309 	add.w	r3, sp, #9
 801405c:	1a9b      	subs	r3, r3, r2
 801405e:	42ac      	cmp	r4, r5
 8014060:	bf88      	it	hi
 8014062:	2300      	movhi	r3, #0
 8014064:	3302      	adds	r3, #2
 8014066:	4403      	add	r3, r0
 8014068:	1a18      	subs	r0, r3, r0
 801406a:	b003      	add	sp, #12
 801406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801406e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014072:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014076:	e7ed      	b.n	8014054 <__exponent+0x44>
 8014078:	2330      	movs	r3, #48	@ 0x30
 801407a:	3130      	adds	r1, #48	@ 0x30
 801407c:	7083      	strb	r3, [r0, #2]
 801407e:	70c1      	strb	r1, [r0, #3]
 8014080:	1d03      	adds	r3, r0, #4
 8014082:	e7f1      	b.n	8014068 <__exponent+0x58>
 8014084:	0000      	movs	r0, r0
	...

08014088 <_printf_float>:
 8014088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801408c:	b08d      	sub	sp, #52	@ 0x34
 801408e:	460c      	mov	r4, r1
 8014090:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014094:	4616      	mov	r6, r2
 8014096:	461f      	mov	r7, r3
 8014098:	4605      	mov	r5, r0
 801409a:	f000 fdad 	bl	8014bf8 <_localeconv_r>
 801409e:	f8d0 b000 	ldr.w	fp, [r0]
 80140a2:	4658      	mov	r0, fp
 80140a4:	f7ec f96c 	bl	8000380 <strlen>
 80140a8:	2300      	movs	r3, #0
 80140aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80140ac:	f8d8 3000 	ldr.w	r3, [r8]
 80140b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80140b4:	6822      	ldr	r2, [r4, #0]
 80140b6:	9005      	str	r0, [sp, #20]
 80140b8:	3307      	adds	r3, #7
 80140ba:	f023 0307 	bic.w	r3, r3, #7
 80140be:	f103 0108 	add.w	r1, r3, #8
 80140c2:	f8c8 1000 	str.w	r1, [r8]
 80140c6:	ed93 0b00 	vldr	d0, [r3]
 80140ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014328 <_printf_float+0x2a0>
 80140ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80140d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80140d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80140de:	dd24      	ble.n	801412a <_printf_float+0xa2>
 80140e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80140e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e8:	d502      	bpl.n	80140f0 <_printf_float+0x68>
 80140ea:	232d      	movs	r3, #45	@ 0x2d
 80140ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140f0:	498f      	ldr	r1, [pc, #572]	@ (8014330 <_printf_float+0x2a8>)
 80140f2:	4b90      	ldr	r3, [pc, #576]	@ (8014334 <_printf_float+0x2ac>)
 80140f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80140f8:	bf8c      	ite	hi
 80140fa:	4688      	movhi	r8, r1
 80140fc:	4698      	movls	r8, r3
 80140fe:	f022 0204 	bic.w	r2, r2, #4
 8014102:	2303      	movs	r3, #3
 8014104:	6123      	str	r3, [r4, #16]
 8014106:	6022      	str	r2, [r4, #0]
 8014108:	f04f 0a00 	mov.w	sl, #0
 801410c:	9700      	str	r7, [sp, #0]
 801410e:	4633      	mov	r3, r6
 8014110:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014112:	4621      	mov	r1, r4
 8014114:	4628      	mov	r0, r5
 8014116:	f000 f9d1 	bl	80144bc <_printf_common>
 801411a:	3001      	adds	r0, #1
 801411c:	f040 8089 	bne.w	8014232 <_printf_float+0x1aa>
 8014120:	f04f 30ff 	mov.w	r0, #4294967295
 8014124:	b00d      	add	sp, #52	@ 0x34
 8014126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801412a:	eeb4 0b40 	vcmp.f64	d0, d0
 801412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014132:	d709      	bvc.n	8014148 <_printf_float+0xc0>
 8014134:	ee10 3a90 	vmov	r3, s1
 8014138:	2b00      	cmp	r3, #0
 801413a:	bfbc      	itt	lt
 801413c:	232d      	movlt	r3, #45	@ 0x2d
 801413e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014142:	497d      	ldr	r1, [pc, #500]	@ (8014338 <_printf_float+0x2b0>)
 8014144:	4b7d      	ldr	r3, [pc, #500]	@ (801433c <_printf_float+0x2b4>)
 8014146:	e7d5      	b.n	80140f4 <_printf_float+0x6c>
 8014148:	6863      	ldr	r3, [r4, #4]
 801414a:	1c59      	adds	r1, r3, #1
 801414c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8014150:	d139      	bne.n	80141c6 <_printf_float+0x13e>
 8014152:	2306      	movs	r3, #6
 8014154:	6063      	str	r3, [r4, #4]
 8014156:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801415a:	2300      	movs	r3, #0
 801415c:	6022      	str	r2, [r4, #0]
 801415e:	9303      	str	r3, [sp, #12]
 8014160:	ab0a      	add	r3, sp, #40	@ 0x28
 8014162:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014166:	ab09      	add	r3, sp, #36	@ 0x24
 8014168:	9300      	str	r3, [sp, #0]
 801416a:	6861      	ldr	r1, [r4, #4]
 801416c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014170:	4628      	mov	r0, r5
 8014172:	f7ff fef9 	bl	8013f68 <__cvt>
 8014176:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801417a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801417c:	4680      	mov	r8, r0
 801417e:	d129      	bne.n	80141d4 <_printf_float+0x14c>
 8014180:	1cc8      	adds	r0, r1, #3
 8014182:	db02      	blt.n	801418a <_printf_float+0x102>
 8014184:	6863      	ldr	r3, [r4, #4]
 8014186:	4299      	cmp	r1, r3
 8014188:	dd41      	ble.n	801420e <_printf_float+0x186>
 801418a:	f1a9 0902 	sub.w	r9, r9, #2
 801418e:	fa5f f989 	uxtb.w	r9, r9
 8014192:	3901      	subs	r1, #1
 8014194:	464a      	mov	r2, r9
 8014196:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801419a:	9109      	str	r1, [sp, #36]	@ 0x24
 801419c:	f7ff ff38 	bl	8014010 <__exponent>
 80141a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80141a2:	1813      	adds	r3, r2, r0
 80141a4:	2a01      	cmp	r2, #1
 80141a6:	4682      	mov	sl, r0
 80141a8:	6123      	str	r3, [r4, #16]
 80141aa:	dc02      	bgt.n	80141b2 <_printf_float+0x12a>
 80141ac:	6822      	ldr	r2, [r4, #0]
 80141ae:	07d2      	lsls	r2, r2, #31
 80141b0:	d501      	bpl.n	80141b6 <_printf_float+0x12e>
 80141b2:	3301      	adds	r3, #1
 80141b4:	6123      	str	r3, [r4, #16]
 80141b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d0a6      	beq.n	801410c <_printf_float+0x84>
 80141be:	232d      	movs	r3, #45	@ 0x2d
 80141c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80141c4:	e7a2      	b.n	801410c <_printf_float+0x84>
 80141c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80141ca:	d1c4      	bne.n	8014156 <_printf_float+0xce>
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d1c2      	bne.n	8014156 <_printf_float+0xce>
 80141d0:	2301      	movs	r3, #1
 80141d2:	e7bf      	b.n	8014154 <_printf_float+0xcc>
 80141d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80141d8:	d9db      	bls.n	8014192 <_printf_float+0x10a>
 80141da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80141de:	d118      	bne.n	8014212 <_printf_float+0x18a>
 80141e0:	2900      	cmp	r1, #0
 80141e2:	6863      	ldr	r3, [r4, #4]
 80141e4:	dd0b      	ble.n	80141fe <_printf_float+0x176>
 80141e6:	6121      	str	r1, [r4, #16]
 80141e8:	b913      	cbnz	r3, 80141f0 <_printf_float+0x168>
 80141ea:	6822      	ldr	r2, [r4, #0]
 80141ec:	07d0      	lsls	r0, r2, #31
 80141ee:	d502      	bpl.n	80141f6 <_printf_float+0x16e>
 80141f0:	3301      	adds	r3, #1
 80141f2:	440b      	add	r3, r1
 80141f4:	6123      	str	r3, [r4, #16]
 80141f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80141f8:	f04f 0a00 	mov.w	sl, #0
 80141fc:	e7db      	b.n	80141b6 <_printf_float+0x12e>
 80141fe:	b913      	cbnz	r3, 8014206 <_printf_float+0x17e>
 8014200:	6822      	ldr	r2, [r4, #0]
 8014202:	07d2      	lsls	r2, r2, #31
 8014204:	d501      	bpl.n	801420a <_printf_float+0x182>
 8014206:	3302      	adds	r3, #2
 8014208:	e7f4      	b.n	80141f4 <_printf_float+0x16c>
 801420a:	2301      	movs	r3, #1
 801420c:	e7f2      	b.n	80141f4 <_printf_float+0x16c>
 801420e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8014212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014214:	4299      	cmp	r1, r3
 8014216:	db05      	blt.n	8014224 <_printf_float+0x19c>
 8014218:	6823      	ldr	r3, [r4, #0]
 801421a:	6121      	str	r1, [r4, #16]
 801421c:	07d8      	lsls	r0, r3, #31
 801421e:	d5ea      	bpl.n	80141f6 <_printf_float+0x16e>
 8014220:	1c4b      	adds	r3, r1, #1
 8014222:	e7e7      	b.n	80141f4 <_printf_float+0x16c>
 8014224:	2900      	cmp	r1, #0
 8014226:	bfd4      	ite	le
 8014228:	f1c1 0202 	rsble	r2, r1, #2
 801422c:	2201      	movgt	r2, #1
 801422e:	4413      	add	r3, r2
 8014230:	e7e0      	b.n	80141f4 <_printf_float+0x16c>
 8014232:	6823      	ldr	r3, [r4, #0]
 8014234:	055a      	lsls	r2, r3, #21
 8014236:	d407      	bmi.n	8014248 <_printf_float+0x1c0>
 8014238:	6923      	ldr	r3, [r4, #16]
 801423a:	4642      	mov	r2, r8
 801423c:	4631      	mov	r1, r6
 801423e:	4628      	mov	r0, r5
 8014240:	47b8      	blx	r7
 8014242:	3001      	adds	r0, #1
 8014244:	d12a      	bne.n	801429c <_printf_float+0x214>
 8014246:	e76b      	b.n	8014120 <_printf_float+0x98>
 8014248:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801424c:	f240 80e0 	bls.w	8014410 <_printf_float+0x388>
 8014250:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014254:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425c:	d133      	bne.n	80142c6 <_printf_float+0x23e>
 801425e:	4a38      	ldr	r2, [pc, #224]	@ (8014340 <_printf_float+0x2b8>)
 8014260:	2301      	movs	r3, #1
 8014262:	4631      	mov	r1, r6
 8014264:	4628      	mov	r0, r5
 8014266:	47b8      	blx	r7
 8014268:	3001      	adds	r0, #1
 801426a:	f43f af59 	beq.w	8014120 <_printf_float+0x98>
 801426e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014272:	4543      	cmp	r3, r8
 8014274:	db02      	blt.n	801427c <_printf_float+0x1f4>
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	07d8      	lsls	r0, r3, #31
 801427a:	d50f      	bpl.n	801429c <_printf_float+0x214>
 801427c:	9b05      	ldr	r3, [sp, #20]
 801427e:	465a      	mov	r2, fp
 8014280:	4631      	mov	r1, r6
 8014282:	4628      	mov	r0, r5
 8014284:	47b8      	blx	r7
 8014286:	3001      	adds	r0, #1
 8014288:	f43f af4a 	beq.w	8014120 <_printf_float+0x98>
 801428c:	f04f 0900 	mov.w	r9, #0
 8014290:	f108 38ff 	add.w	r8, r8, #4294967295
 8014294:	f104 0a1a 	add.w	sl, r4, #26
 8014298:	45c8      	cmp	r8, r9
 801429a:	dc09      	bgt.n	80142b0 <_printf_float+0x228>
 801429c:	6823      	ldr	r3, [r4, #0]
 801429e:	079b      	lsls	r3, r3, #30
 80142a0:	f100 8107 	bmi.w	80144b2 <_printf_float+0x42a>
 80142a4:	68e0      	ldr	r0, [r4, #12]
 80142a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142a8:	4298      	cmp	r0, r3
 80142aa:	bfb8      	it	lt
 80142ac:	4618      	movlt	r0, r3
 80142ae:	e739      	b.n	8014124 <_printf_float+0x9c>
 80142b0:	2301      	movs	r3, #1
 80142b2:	4652      	mov	r2, sl
 80142b4:	4631      	mov	r1, r6
 80142b6:	4628      	mov	r0, r5
 80142b8:	47b8      	blx	r7
 80142ba:	3001      	adds	r0, #1
 80142bc:	f43f af30 	beq.w	8014120 <_printf_float+0x98>
 80142c0:	f109 0901 	add.w	r9, r9, #1
 80142c4:	e7e8      	b.n	8014298 <_printf_float+0x210>
 80142c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	dc3b      	bgt.n	8014344 <_printf_float+0x2bc>
 80142cc:	4a1c      	ldr	r2, [pc, #112]	@ (8014340 <_printf_float+0x2b8>)
 80142ce:	2301      	movs	r3, #1
 80142d0:	4631      	mov	r1, r6
 80142d2:	4628      	mov	r0, r5
 80142d4:	47b8      	blx	r7
 80142d6:	3001      	adds	r0, #1
 80142d8:	f43f af22 	beq.w	8014120 <_printf_float+0x98>
 80142dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80142e0:	ea59 0303 	orrs.w	r3, r9, r3
 80142e4:	d102      	bne.n	80142ec <_printf_float+0x264>
 80142e6:	6823      	ldr	r3, [r4, #0]
 80142e8:	07d9      	lsls	r1, r3, #31
 80142ea:	d5d7      	bpl.n	801429c <_printf_float+0x214>
 80142ec:	9b05      	ldr	r3, [sp, #20]
 80142ee:	465a      	mov	r2, fp
 80142f0:	4631      	mov	r1, r6
 80142f2:	4628      	mov	r0, r5
 80142f4:	47b8      	blx	r7
 80142f6:	3001      	adds	r0, #1
 80142f8:	f43f af12 	beq.w	8014120 <_printf_float+0x98>
 80142fc:	f04f 0a00 	mov.w	sl, #0
 8014300:	f104 0b1a 	add.w	fp, r4, #26
 8014304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014306:	425b      	negs	r3, r3
 8014308:	4553      	cmp	r3, sl
 801430a:	dc01      	bgt.n	8014310 <_printf_float+0x288>
 801430c:	464b      	mov	r3, r9
 801430e:	e794      	b.n	801423a <_printf_float+0x1b2>
 8014310:	2301      	movs	r3, #1
 8014312:	465a      	mov	r2, fp
 8014314:	4631      	mov	r1, r6
 8014316:	4628      	mov	r0, r5
 8014318:	47b8      	blx	r7
 801431a:	3001      	adds	r0, #1
 801431c:	f43f af00 	beq.w	8014120 <_printf_float+0x98>
 8014320:	f10a 0a01 	add.w	sl, sl, #1
 8014324:	e7ee      	b.n	8014304 <_printf_float+0x27c>
 8014326:	bf00      	nop
 8014328:	ffffffff 	.word	0xffffffff
 801432c:	7fefffff 	.word	0x7fefffff
 8014330:	080182c4 	.word	0x080182c4
 8014334:	080182c0 	.word	0x080182c0
 8014338:	080182cc 	.word	0x080182cc
 801433c:	080182c8 	.word	0x080182c8
 8014340:	080182d0 	.word	0x080182d0
 8014344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801434a:	4553      	cmp	r3, sl
 801434c:	bfa8      	it	ge
 801434e:	4653      	movge	r3, sl
 8014350:	2b00      	cmp	r3, #0
 8014352:	4699      	mov	r9, r3
 8014354:	dc37      	bgt.n	80143c6 <_printf_float+0x33e>
 8014356:	2300      	movs	r3, #0
 8014358:	9307      	str	r3, [sp, #28]
 801435a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801435e:	f104 021a 	add.w	r2, r4, #26
 8014362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014364:	9907      	ldr	r1, [sp, #28]
 8014366:	9306      	str	r3, [sp, #24]
 8014368:	eba3 0309 	sub.w	r3, r3, r9
 801436c:	428b      	cmp	r3, r1
 801436e:	dc31      	bgt.n	80143d4 <_printf_float+0x34c>
 8014370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014372:	459a      	cmp	sl, r3
 8014374:	dc3b      	bgt.n	80143ee <_printf_float+0x366>
 8014376:	6823      	ldr	r3, [r4, #0]
 8014378:	07da      	lsls	r2, r3, #31
 801437a:	d438      	bmi.n	80143ee <_printf_float+0x366>
 801437c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801437e:	ebaa 0903 	sub.w	r9, sl, r3
 8014382:	9b06      	ldr	r3, [sp, #24]
 8014384:	ebaa 0303 	sub.w	r3, sl, r3
 8014388:	4599      	cmp	r9, r3
 801438a:	bfa8      	it	ge
 801438c:	4699      	movge	r9, r3
 801438e:	f1b9 0f00 	cmp.w	r9, #0
 8014392:	dc34      	bgt.n	80143fe <_printf_float+0x376>
 8014394:	f04f 0800 	mov.w	r8, #0
 8014398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801439c:	f104 0b1a 	add.w	fp, r4, #26
 80143a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143a2:	ebaa 0303 	sub.w	r3, sl, r3
 80143a6:	eba3 0309 	sub.w	r3, r3, r9
 80143aa:	4543      	cmp	r3, r8
 80143ac:	f77f af76 	ble.w	801429c <_printf_float+0x214>
 80143b0:	2301      	movs	r3, #1
 80143b2:	465a      	mov	r2, fp
 80143b4:	4631      	mov	r1, r6
 80143b6:	4628      	mov	r0, r5
 80143b8:	47b8      	blx	r7
 80143ba:	3001      	adds	r0, #1
 80143bc:	f43f aeb0 	beq.w	8014120 <_printf_float+0x98>
 80143c0:	f108 0801 	add.w	r8, r8, #1
 80143c4:	e7ec      	b.n	80143a0 <_printf_float+0x318>
 80143c6:	4642      	mov	r2, r8
 80143c8:	4631      	mov	r1, r6
 80143ca:	4628      	mov	r0, r5
 80143cc:	47b8      	blx	r7
 80143ce:	3001      	adds	r0, #1
 80143d0:	d1c1      	bne.n	8014356 <_printf_float+0x2ce>
 80143d2:	e6a5      	b.n	8014120 <_printf_float+0x98>
 80143d4:	2301      	movs	r3, #1
 80143d6:	4631      	mov	r1, r6
 80143d8:	4628      	mov	r0, r5
 80143da:	9206      	str	r2, [sp, #24]
 80143dc:	47b8      	blx	r7
 80143de:	3001      	adds	r0, #1
 80143e0:	f43f ae9e 	beq.w	8014120 <_printf_float+0x98>
 80143e4:	9b07      	ldr	r3, [sp, #28]
 80143e6:	9a06      	ldr	r2, [sp, #24]
 80143e8:	3301      	adds	r3, #1
 80143ea:	9307      	str	r3, [sp, #28]
 80143ec:	e7b9      	b.n	8014362 <_printf_float+0x2da>
 80143ee:	9b05      	ldr	r3, [sp, #20]
 80143f0:	465a      	mov	r2, fp
 80143f2:	4631      	mov	r1, r6
 80143f4:	4628      	mov	r0, r5
 80143f6:	47b8      	blx	r7
 80143f8:	3001      	adds	r0, #1
 80143fa:	d1bf      	bne.n	801437c <_printf_float+0x2f4>
 80143fc:	e690      	b.n	8014120 <_printf_float+0x98>
 80143fe:	9a06      	ldr	r2, [sp, #24]
 8014400:	464b      	mov	r3, r9
 8014402:	4442      	add	r2, r8
 8014404:	4631      	mov	r1, r6
 8014406:	4628      	mov	r0, r5
 8014408:	47b8      	blx	r7
 801440a:	3001      	adds	r0, #1
 801440c:	d1c2      	bne.n	8014394 <_printf_float+0x30c>
 801440e:	e687      	b.n	8014120 <_printf_float+0x98>
 8014410:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8014414:	f1b9 0f01 	cmp.w	r9, #1
 8014418:	dc01      	bgt.n	801441e <_printf_float+0x396>
 801441a:	07db      	lsls	r3, r3, #31
 801441c:	d536      	bpl.n	801448c <_printf_float+0x404>
 801441e:	2301      	movs	r3, #1
 8014420:	4642      	mov	r2, r8
 8014422:	4631      	mov	r1, r6
 8014424:	4628      	mov	r0, r5
 8014426:	47b8      	blx	r7
 8014428:	3001      	adds	r0, #1
 801442a:	f43f ae79 	beq.w	8014120 <_printf_float+0x98>
 801442e:	9b05      	ldr	r3, [sp, #20]
 8014430:	465a      	mov	r2, fp
 8014432:	4631      	mov	r1, r6
 8014434:	4628      	mov	r0, r5
 8014436:	47b8      	blx	r7
 8014438:	3001      	adds	r0, #1
 801443a:	f43f ae71 	beq.w	8014120 <_printf_float+0x98>
 801443e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014442:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444a:	f109 39ff 	add.w	r9, r9, #4294967295
 801444e:	d018      	beq.n	8014482 <_printf_float+0x3fa>
 8014450:	464b      	mov	r3, r9
 8014452:	f108 0201 	add.w	r2, r8, #1
 8014456:	4631      	mov	r1, r6
 8014458:	4628      	mov	r0, r5
 801445a:	47b8      	blx	r7
 801445c:	3001      	adds	r0, #1
 801445e:	d10c      	bne.n	801447a <_printf_float+0x3f2>
 8014460:	e65e      	b.n	8014120 <_printf_float+0x98>
 8014462:	2301      	movs	r3, #1
 8014464:	465a      	mov	r2, fp
 8014466:	4631      	mov	r1, r6
 8014468:	4628      	mov	r0, r5
 801446a:	47b8      	blx	r7
 801446c:	3001      	adds	r0, #1
 801446e:	f43f ae57 	beq.w	8014120 <_printf_float+0x98>
 8014472:	f108 0801 	add.w	r8, r8, #1
 8014476:	45c8      	cmp	r8, r9
 8014478:	dbf3      	blt.n	8014462 <_printf_float+0x3da>
 801447a:	4653      	mov	r3, sl
 801447c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014480:	e6dc      	b.n	801423c <_printf_float+0x1b4>
 8014482:	f04f 0800 	mov.w	r8, #0
 8014486:	f104 0b1a 	add.w	fp, r4, #26
 801448a:	e7f4      	b.n	8014476 <_printf_float+0x3ee>
 801448c:	2301      	movs	r3, #1
 801448e:	4642      	mov	r2, r8
 8014490:	e7e1      	b.n	8014456 <_printf_float+0x3ce>
 8014492:	2301      	movs	r3, #1
 8014494:	464a      	mov	r2, r9
 8014496:	4631      	mov	r1, r6
 8014498:	4628      	mov	r0, r5
 801449a:	47b8      	blx	r7
 801449c:	3001      	adds	r0, #1
 801449e:	f43f ae3f 	beq.w	8014120 <_printf_float+0x98>
 80144a2:	f108 0801 	add.w	r8, r8, #1
 80144a6:	68e3      	ldr	r3, [r4, #12]
 80144a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80144aa:	1a5b      	subs	r3, r3, r1
 80144ac:	4543      	cmp	r3, r8
 80144ae:	dcf0      	bgt.n	8014492 <_printf_float+0x40a>
 80144b0:	e6f8      	b.n	80142a4 <_printf_float+0x21c>
 80144b2:	f04f 0800 	mov.w	r8, #0
 80144b6:	f104 0919 	add.w	r9, r4, #25
 80144ba:	e7f4      	b.n	80144a6 <_printf_float+0x41e>

080144bc <_printf_common>:
 80144bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144c0:	4616      	mov	r6, r2
 80144c2:	4698      	mov	r8, r3
 80144c4:	688a      	ldr	r2, [r1, #8]
 80144c6:	690b      	ldr	r3, [r1, #16]
 80144c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80144cc:	4293      	cmp	r3, r2
 80144ce:	bfb8      	it	lt
 80144d0:	4613      	movlt	r3, r2
 80144d2:	6033      	str	r3, [r6, #0]
 80144d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80144d8:	4607      	mov	r7, r0
 80144da:	460c      	mov	r4, r1
 80144dc:	b10a      	cbz	r2, 80144e2 <_printf_common+0x26>
 80144de:	3301      	adds	r3, #1
 80144e0:	6033      	str	r3, [r6, #0]
 80144e2:	6823      	ldr	r3, [r4, #0]
 80144e4:	0699      	lsls	r1, r3, #26
 80144e6:	bf42      	ittt	mi
 80144e8:	6833      	ldrmi	r3, [r6, #0]
 80144ea:	3302      	addmi	r3, #2
 80144ec:	6033      	strmi	r3, [r6, #0]
 80144ee:	6825      	ldr	r5, [r4, #0]
 80144f0:	f015 0506 	ands.w	r5, r5, #6
 80144f4:	d106      	bne.n	8014504 <_printf_common+0x48>
 80144f6:	f104 0a19 	add.w	sl, r4, #25
 80144fa:	68e3      	ldr	r3, [r4, #12]
 80144fc:	6832      	ldr	r2, [r6, #0]
 80144fe:	1a9b      	subs	r3, r3, r2
 8014500:	42ab      	cmp	r3, r5
 8014502:	dc26      	bgt.n	8014552 <_printf_common+0x96>
 8014504:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014508:	6822      	ldr	r2, [r4, #0]
 801450a:	3b00      	subs	r3, #0
 801450c:	bf18      	it	ne
 801450e:	2301      	movne	r3, #1
 8014510:	0692      	lsls	r2, r2, #26
 8014512:	d42b      	bmi.n	801456c <_printf_common+0xb0>
 8014514:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014518:	4641      	mov	r1, r8
 801451a:	4638      	mov	r0, r7
 801451c:	47c8      	blx	r9
 801451e:	3001      	adds	r0, #1
 8014520:	d01e      	beq.n	8014560 <_printf_common+0xa4>
 8014522:	6823      	ldr	r3, [r4, #0]
 8014524:	6922      	ldr	r2, [r4, #16]
 8014526:	f003 0306 	and.w	r3, r3, #6
 801452a:	2b04      	cmp	r3, #4
 801452c:	bf02      	ittt	eq
 801452e:	68e5      	ldreq	r5, [r4, #12]
 8014530:	6833      	ldreq	r3, [r6, #0]
 8014532:	1aed      	subeq	r5, r5, r3
 8014534:	68a3      	ldr	r3, [r4, #8]
 8014536:	bf0c      	ite	eq
 8014538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801453c:	2500      	movne	r5, #0
 801453e:	4293      	cmp	r3, r2
 8014540:	bfc4      	itt	gt
 8014542:	1a9b      	subgt	r3, r3, r2
 8014544:	18ed      	addgt	r5, r5, r3
 8014546:	2600      	movs	r6, #0
 8014548:	341a      	adds	r4, #26
 801454a:	42b5      	cmp	r5, r6
 801454c:	d11a      	bne.n	8014584 <_printf_common+0xc8>
 801454e:	2000      	movs	r0, #0
 8014550:	e008      	b.n	8014564 <_printf_common+0xa8>
 8014552:	2301      	movs	r3, #1
 8014554:	4652      	mov	r2, sl
 8014556:	4641      	mov	r1, r8
 8014558:	4638      	mov	r0, r7
 801455a:	47c8      	blx	r9
 801455c:	3001      	adds	r0, #1
 801455e:	d103      	bne.n	8014568 <_printf_common+0xac>
 8014560:	f04f 30ff 	mov.w	r0, #4294967295
 8014564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014568:	3501      	adds	r5, #1
 801456a:	e7c6      	b.n	80144fa <_printf_common+0x3e>
 801456c:	18e1      	adds	r1, r4, r3
 801456e:	1c5a      	adds	r2, r3, #1
 8014570:	2030      	movs	r0, #48	@ 0x30
 8014572:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014576:	4422      	add	r2, r4
 8014578:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801457c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014580:	3302      	adds	r3, #2
 8014582:	e7c7      	b.n	8014514 <_printf_common+0x58>
 8014584:	2301      	movs	r3, #1
 8014586:	4622      	mov	r2, r4
 8014588:	4641      	mov	r1, r8
 801458a:	4638      	mov	r0, r7
 801458c:	47c8      	blx	r9
 801458e:	3001      	adds	r0, #1
 8014590:	d0e6      	beq.n	8014560 <_printf_common+0xa4>
 8014592:	3601      	adds	r6, #1
 8014594:	e7d9      	b.n	801454a <_printf_common+0x8e>
	...

08014598 <_printf_i>:
 8014598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801459c:	7e0f      	ldrb	r7, [r1, #24]
 801459e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80145a0:	2f78      	cmp	r7, #120	@ 0x78
 80145a2:	4691      	mov	r9, r2
 80145a4:	4680      	mov	r8, r0
 80145a6:	460c      	mov	r4, r1
 80145a8:	469a      	mov	sl, r3
 80145aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80145ae:	d807      	bhi.n	80145c0 <_printf_i+0x28>
 80145b0:	2f62      	cmp	r7, #98	@ 0x62
 80145b2:	d80a      	bhi.n	80145ca <_printf_i+0x32>
 80145b4:	2f00      	cmp	r7, #0
 80145b6:	f000 80d1 	beq.w	801475c <_printf_i+0x1c4>
 80145ba:	2f58      	cmp	r7, #88	@ 0x58
 80145bc:	f000 80b8 	beq.w	8014730 <_printf_i+0x198>
 80145c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80145c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80145c8:	e03a      	b.n	8014640 <_printf_i+0xa8>
 80145ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80145ce:	2b15      	cmp	r3, #21
 80145d0:	d8f6      	bhi.n	80145c0 <_printf_i+0x28>
 80145d2:	a101      	add	r1, pc, #4	@ (adr r1, 80145d8 <_printf_i+0x40>)
 80145d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80145d8:	08014631 	.word	0x08014631
 80145dc:	08014645 	.word	0x08014645
 80145e0:	080145c1 	.word	0x080145c1
 80145e4:	080145c1 	.word	0x080145c1
 80145e8:	080145c1 	.word	0x080145c1
 80145ec:	080145c1 	.word	0x080145c1
 80145f0:	08014645 	.word	0x08014645
 80145f4:	080145c1 	.word	0x080145c1
 80145f8:	080145c1 	.word	0x080145c1
 80145fc:	080145c1 	.word	0x080145c1
 8014600:	080145c1 	.word	0x080145c1
 8014604:	08014743 	.word	0x08014743
 8014608:	0801466f 	.word	0x0801466f
 801460c:	080146fd 	.word	0x080146fd
 8014610:	080145c1 	.word	0x080145c1
 8014614:	080145c1 	.word	0x080145c1
 8014618:	08014765 	.word	0x08014765
 801461c:	080145c1 	.word	0x080145c1
 8014620:	0801466f 	.word	0x0801466f
 8014624:	080145c1 	.word	0x080145c1
 8014628:	080145c1 	.word	0x080145c1
 801462c:	08014705 	.word	0x08014705
 8014630:	6833      	ldr	r3, [r6, #0]
 8014632:	1d1a      	adds	r2, r3, #4
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	6032      	str	r2, [r6, #0]
 8014638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801463c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014640:	2301      	movs	r3, #1
 8014642:	e09c      	b.n	801477e <_printf_i+0x1e6>
 8014644:	6833      	ldr	r3, [r6, #0]
 8014646:	6820      	ldr	r0, [r4, #0]
 8014648:	1d19      	adds	r1, r3, #4
 801464a:	6031      	str	r1, [r6, #0]
 801464c:	0606      	lsls	r6, r0, #24
 801464e:	d501      	bpl.n	8014654 <_printf_i+0xbc>
 8014650:	681d      	ldr	r5, [r3, #0]
 8014652:	e003      	b.n	801465c <_printf_i+0xc4>
 8014654:	0645      	lsls	r5, r0, #25
 8014656:	d5fb      	bpl.n	8014650 <_printf_i+0xb8>
 8014658:	f9b3 5000 	ldrsh.w	r5, [r3]
 801465c:	2d00      	cmp	r5, #0
 801465e:	da03      	bge.n	8014668 <_printf_i+0xd0>
 8014660:	232d      	movs	r3, #45	@ 0x2d
 8014662:	426d      	negs	r5, r5
 8014664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014668:	4858      	ldr	r0, [pc, #352]	@ (80147cc <_printf_i+0x234>)
 801466a:	230a      	movs	r3, #10
 801466c:	e011      	b.n	8014692 <_printf_i+0xfa>
 801466e:	6821      	ldr	r1, [r4, #0]
 8014670:	6833      	ldr	r3, [r6, #0]
 8014672:	0608      	lsls	r0, r1, #24
 8014674:	f853 5b04 	ldr.w	r5, [r3], #4
 8014678:	d402      	bmi.n	8014680 <_printf_i+0xe8>
 801467a:	0649      	lsls	r1, r1, #25
 801467c:	bf48      	it	mi
 801467e:	b2ad      	uxthmi	r5, r5
 8014680:	2f6f      	cmp	r7, #111	@ 0x6f
 8014682:	4852      	ldr	r0, [pc, #328]	@ (80147cc <_printf_i+0x234>)
 8014684:	6033      	str	r3, [r6, #0]
 8014686:	bf14      	ite	ne
 8014688:	230a      	movne	r3, #10
 801468a:	2308      	moveq	r3, #8
 801468c:	2100      	movs	r1, #0
 801468e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014692:	6866      	ldr	r6, [r4, #4]
 8014694:	60a6      	str	r6, [r4, #8]
 8014696:	2e00      	cmp	r6, #0
 8014698:	db05      	blt.n	80146a6 <_printf_i+0x10e>
 801469a:	6821      	ldr	r1, [r4, #0]
 801469c:	432e      	orrs	r6, r5
 801469e:	f021 0104 	bic.w	r1, r1, #4
 80146a2:	6021      	str	r1, [r4, #0]
 80146a4:	d04b      	beq.n	801473e <_printf_i+0x1a6>
 80146a6:	4616      	mov	r6, r2
 80146a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80146ac:	fb03 5711 	mls	r7, r3, r1, r5
 80146b0:	5dc7      	ldrb	r7, [r0, r7]
 80146b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80146b6:	462f      	mov	r7, r5
 80146b8:	42bb      	cmp	r3, r7
 80146ba:	460d      	mov	r5, r1
 80146bc:	d9f4      	bls.n	80146a8 <_printf_i+0x110>
 80146be:	2b08      	cmp	r3, #8
 80146c0:	d10b      	bne.n	80146da <_printf_i+0x142>
 80146c2:	6823      	ldr	r3, [r4, #0]
 80146c4:	07df      	lsls	r7, r3, #31
 80146c6:	d508      	bpl.n	80146da <_printf_i+0x142>
 80146c8:	6923      	ldr	r3, [r4, #16]
 80146ca:	6861      	ldr	r1, [r4, #4]
 80146cc:	4299      	cmp	r1, r3
 80146ce:	bfde      	ittt	le
 80146d0:	2330      	movle	r3, #48	@ 0x30
 80146d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80146d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80146da:	1b92      	subs	r2, r2, r6
 80146dc:	6122      	str	r2, [r4, #16]
 80146de:	f8cd a000 	str.w	sl, [sp]
 80146e2:	464b      	mov	r3, r9
 80146e4:	aa03      	add	r2, sp, #12
 80146e6:	4621      	mov	r1, r4
 80146e8:	4640      	mov	r0, r8
 80146ea:	f7ff fee7 	bl	80144bc <_printf_common>
 80146ee:	3001      	adds	r0, #1
 80146f0:	d14a      	bne.n	8014788 <_printf_i+0x1f0>
 80146f2:	f04f 30ff 	mov.w	r0, #4294967295
 80146f6:	b004      	add	sp, #16
 80146f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146fc:	6823      	ldr	r3, [r4, #0]
 80146fe:	f043 0320 	orr.w	r3, r3, #32
 8014702:	6023      	str	r3, [r4, #0]
 8014704:	4832      	ldr	r0, [pc, #200]	@ (80147d0 <_printf_i+0x238>)
 8014706:	2778      	movs	r7, #120	@ 0x78
 8014708:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801470c:	6823      	ldr	r3, [r4, #0]
 801470e:	6831      	ldr	r1, [r6, #0]
 8014710:	061f      	lsls	r7, r3, #24
 8014712:	f851 5b04 	ldr.w	r5, [r1], #4
 8014716:	d402      	bmi.n	801471e <_printf_i+0x186>
 8014718:	065f      	lsls	r7, r3, #25
 801471a:	bf48      	it	mi
 801471c:	b2ad      	uxthmi	r5, r5
 801471e:	6031      	str	r1, [r6, #0]
 8014720:	07d9      	lsls	r1, r3, #31
 8014722:	bf44      	itt	mi
 8014724:	f043 0320 	orrmi.w	r3, r3, #32
 8014728:	6023      	strmi	r3, [r4, #0]
 801472a:	b11d      	cbz	r5, 8014734 <_printf_i+0x19c>
 801472c:	2310      	movs	r3, #16
 801472e:	e7ad      	b.n	801468c <_printf_i+0xf4>
 8014730:	4826      	ldr	r0, [pc, #152]	@ (80147cc <_printf_i+0x234>)
 8014732:	e7e9      	b.n	8014708 <_printf_i+0x170>
 8014734:	6823      	ldr	r3, [r4, #0]
 8014736:	f023 0320 	bic.w	r3, r3, #32
 801473a:	6023      	str	r3, [r4, #0]
 801473c:	e7f6      	b.n	801472c <_printf_i+0x194>
 801473e:	4616      	mov	r6, r2
 8014740:	e7bd      	b.n	80146be <_printf_i+0x126>
 8014742:	6833      	ldr	r3, [r6, #0]
 8014744:	6825      	ldr	r5, [r4, #0]
 8014746:	6961      	ldr	r1, [r4, #20]
 8014748:	1d18      	adds	r0, r3, #4
 801474a:	6030      	str	r0, [r6, #0]
 801474c:	062e      	lsls	r6, r5, #24
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	d501      	bpl.n	8014756 <_printf_i+0x1be>
 8014752:	6019      	str	r1, [r3, #0]
 8014754:	e002      	b.n	801475c <_printf_i+0x1c4>
 8014756:	0668      	lsls	r0, r5, #25
 8014758:	d5fb      	bpl.n	8014752 <_printf_i+0x1ba>
 801475a:	8019      	strh	r1, [r3, #0]
 801475c:	2300      	movs	r3, #0
 801475e:	6123      	str	r3, [r4, #16]
 8014760:	4616      	mov	r6, r2
 8014762:	e7bc      	b.n	80146de <_printf_i+0x146>
 8014764:	6833      	ldr	r3, [r6, #0]
 8014766:	1d1a      	adds	r2, r3, #4
 8014768:	6032      	str	r2, [r6, #0]
 801476a:	681e      	ldr	r6, [r3, #0]
 801476c:	6862      	ldr	r2, [r4, #4]
 801476e:	2100      	movs	r1, #0
 8014770:	4630      	mov	r0, r6
 8014772:	f7eb fdb5 	bl	80002e0 <memchr>
 8014776:	b108      	cbz	r0, 801477c <_printf_i+0x1e4>
 8014778:	1b80      	subs	r0, r0, r6
 801477a:	6060      	str	r0, [r4, #4]
 801477c:	6863      	ldr	r3, [r4, #4]
 801477e:	6123      	str	r3, [r4, #16]
 8014780:	2300      	movs	r3, #0
 8014782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014786:	e7aa      	b.n	80146de <_printf_i+0x146>
 8014788:	6923      	ldr	r3, [r4, #16]
 801478a:	4632      	mov	r2, r6
 801478c:	4649      	mov	r1, r9
 801478e:	4640      	mov	r0, r8
 8014790:	47d0      	blx	sl
 8014792:	3001      	adds	r0, #1
 8014794:	d0ad      	beq.n	80146f2 <_printf_i+0x15a>
 8014796:	6823      	ldr	r3, [r4, #0]
 8014798:	079b      	lsls	r3, r3, #30
 801479a:	d413      	bmi.n	80147c4 <_printf_i+0x22c>
 801479c:	68e0      	ldr	r0, [r4, #12]
 801479e:	9b03      	ldr	r3, [sp, #12]
 80147a0:	4298      	cmp	r0, r3
 80147a2:	bfb8      	it	lt
 80147a4:	4618      	movlt	r0, r3
 80147a6:	e7a6      	b.n	80146f6 <_printf_i+0x15e>
 80147a8:	2301      	movs	r3, #1
 80147aa:	4632      	mov	r2, r6
 80147ac:	4649      	mov	r1, r9
 80147ae:	4640      	mov	r0, r8
 80147b0:	47d0      	blx	sl
 80147b2:	3001      	adds	r0, #1
 80147b4:	d09d      	beq.n	80146f2 <_printf_i+0x15a>
 80147b6:	3501      	adds	r5, #1
 80147b8:	68e3      	ldr	r3, [r4, #12]
 80147ba:	9903      	ldr	r1, [sp, #12]
 80147bc:	1a5b      	subs	r3, r3, r1
 80147be:	42ab      	cmp	r3, r5
 80147c0:	dcf2      	bgt.n	80147a8 <_printf_i+0x210>
 80147c2:	e7eb      	b.n	801479c <_printf_i+0x204>
 80147c4:	2500      	movs	r5, #0
 80147c6:	f104 0619 	add.w	r6, r4, #25
 80147ca:	e7f5      	b.n	80147b8 <_printf_i+0x220>
 80147cc:	080182d2 	.word	0x080182d2
 80147d0:	080182e3 	.word	0x080182e3

080147d4 <std>:
 80147d4:	2300      	movs	r3, #0
 80147d6:	b510      	push	{r4, lr}
 80147d8:	4604      	mov	r4, r0
 80147da:	e9c0 3300 	strd	r3, r3, [r0]
 80147de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147e2:	6083      	str	r3, [r0, #8]
 80147e4:	8181      	strh	r1, [r0, #12]
 80147e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80147e8:	81c2      	strh	r2, [r0, #14]
 80147ea:	6183      	str	r3, [r0, #24]
 80147ec:	4619      	mov	r1, r3
 80147ee:	2208      	movs	r2, #8
 80147f0:	305c      	adds	r0, #92	@ 0x5c
 80147f2:	f000 f9f9 	bl	8014be8 <memset>
 80147f6:	4b0d      	ldr	r3, [pc, #52]	@ (801482c <std+0x58>)
 80147f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80147fa:	4b0d      	ldr	r3, [pc, #52]	@ (8014830 <std+0x5c>)
 80147fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80147fe:	4b0d      	ldr	r3, [pc, #52]	@ (8014834 <std+0x60>)
 8014800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014802:	4b0d      	ldr	r3, [pc, #52]	@ (8014838 <std+0x64>)
 8014804:	6323      	str	r3, [r4, #48]	@ 0x30
 8014806:	4b0d      	ldr	r3, [pc, #52]	@ (801483c <std+0x68>)
 8014808:	6224      	str	r4, [r4, #32]
 801480a:	429c      	cmp	r4, r3
 801480c:	d006      	beq.n	801481c <std+0x48>
 801480e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014812:	4294      	cmp	r4, r2
 8014814:	d002      	beq.n	801481c <std+0x48>
 8014816:	33d0      	adds	r3, #208	@ 0xd0
 8014818:	429c      	cmp	r4, r3
 801481a:	d105      	bne.n	8014828 <std+0x54>
 801481c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014824:	f000 ba5c 	b.w	8014ce0 <__retarget_lock_init_recursive>
 8014828:	bd10      	pop	{r4, pc}
 801482a:	bf00      	nop
 801482c:	08014a39 	.word	0x08014a39
 8014830:	08014a5b 	.word	0x08014a5b
 8014834:	08014a93 	.word	0x08014a93
 8014838:	08014ab7 	.word	0x08014ab7
 801483c:	24001278 	.word	0x24001278

08014840 <stdio_exit_handler>:
 8014840:	4a02      	ldr	r2, [pc, #8]	@ (801484c <stdio_exit_handler+0xc>)
 8014842:	4903      	ldr	r1, [pc, #12]	@ (8014850 <stdio_exit_handler+0x10>)
 8014844:	4803      	ldr	r0, [pc, #12]	@ (8014854 <stdio_exit_handler+0x14>)
 8014846:	f000 b869 	b.w	801491c <_fwalk_sglue>
 801484a:	bf00      	nop
 801484c:	24000068 	.word	0x24000068
 8014850:	08016555 	.word	0x08016555
 8014854:	24000078 	.word	0x24000078

08014858 <cleanup_stdio>:
 8014858:	6841      	ldr	r1, [r0, #4]
 801485a:	4b0c      	ldr	r3, [pc, #48]	@ (801488c <cleanup_stdio+0x34>)
 801485c:	4299      	cmp	r1, r3
 801485e:	b510      	push	{r4, lr}
 8014860:	4604      	mov	r4, r0
 8014862:	d001      	beq.n	8014868 <cleanup_stdio+0x10>
 8014864:	f001 fe76 	bl	8016554 <_fflush_r>
 8014868:	68a1      	ldr	r1, [r4, #8]
 801486a:	4b09      	ldr	r3, [pc, #36]	@ (8014890 <cleanup_stdio+0x38>)
 801486c:	4299      	cmp	r1, r3
 801486e:	d002      	beq.n	8014876 <cleanup_stdio+0x1e>
 8014870:	4620      	mov	r0, r4
 8014872:	f001 fe6f 	bl	8016554 <_fflush_r>
 8014876:	68e1      	ldr	r1, [r4, #12]
 8014878:	4b06      	ldr	r3, [pc, #24]	@ (8014894 <cleanup_stdio+0x3c>)
 801487a:	4299      	cmp	r1, r3
 801487c:	d004      	beq.n	8014888 <cleanup_stdio+0x30>
 801487e:	4620      	mov	r0, r4
 8014880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014884:	f001 be66 	b.w	8016554 <_fflush_r>
 8014888:	bd10      	pop	{r4, pc}
 801488a:	bf00      	nop
 801488c:	24001278 	.word	0x24001278
 8014890:	240012e0 	.word	0x240012e0
 8014894:	24001348 	.word	0x24001348

08014898 <global_stdio_init.part.0>:
 8014898:	b510      	push	{r4, lr}
 801489a:	4b0b      	ldr	r3, [pc, #44]	@ (80148c8 <global_stdio_init.part.0+0x30>)
 801489c:	4c0b      	ldr	r4, [pc, #44]	@ (80148cc <global_stdio_init.part.0+0x34>)
 801489e:	4a0c      	ldr	r2, [pc, #48]	@ (80148d0 <global_stdio_init.part.0+0x38>)
 80148a0:	601a      	str	r2, [r3, #0]
 80148a2:	4620      	mov	r0, r4
 80148a4:	2200      	movs	r2, #0
 80148a6:	2104      	movs	r1, #4
 80148a8:	f7ff ff94 	bl	80147d4 <std>
 80148ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80148b0:	2201      	movs	r2, #1
 80148b2:	2109      	movs	r1, #9
 80148b4:	f7ff ff8e 	bl	80147d4 <std>
 80148b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80148bc:	2202      	movs	r2, #2
 80148be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148c2:	2112      	movs	r1, #18
 80148c4:	f7ff bf86 	b.w	80147d4 <std>
 80148c8:	240013b0 	.word	0x240013b0
 80148cc:	24001278 	.word	0x24001278
 80148d0:	08014841 	.word	0x08014841

080148d4 <__sfp_lock_acquire>:
 80148d4:	4801      	ldr	r0, [pc, #4]	@ (80148dc <__sfp_lock_acquire+0x8>)
 80148d6:	f000 ba04 	b.w	8014ce2 <__retarget_lock_acquire_recursive>
 80148da:	bf00      	nop
 80148dc:	240013b9 	.word	0x240013b9

080148e0 <__sfp_lock_release>:
 80148e0:	4801      	ldr	r0, [pc, #4]	@ (80148e8 <__sfp_lock_release+0x8>)
 80148e2:	f000 b9ff 	b.w	8014ce4 <__retarget_lock_release_recursive>
 80148e6:	bf00      	nop
 80148e8:	240013b9 	.word	0x240013b9

080148ec <__sinit>:
 80148ec:	b510      	push	{r4, lr}
 80148ee:	4604      	mov	r4, r0
 80148f0:	f7ff fff0 	bl	80148d4 <__sfp_lock_acquire>
 80148f4:	6a23      	ldr	r3, [r4, #32]
 80148f6:	b11b      	cbz	r3, 8014900 <__sinit+0x14>
 80148f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148fc:	f7ff bff0 	b.w	80148e0 <__sfp_lock_release>
 8014900:	4b04      	ldr	r3, [pc, #16]	@ (8014914 <__sinit+0x28>)
 8014902:	6223      	str	r3, [r4, #32]
 8014904:	4b04      	ldr	r3, [pc, #16]	@ (8014918 <__sinit+0x2c>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d1f5      	bne.n	80148f8 <__sinit+0xc>
 801490c:	f7ff ffc4 	bl	8014898 <global_stdio_init.part.0>
 8014910:	e7f2      	b.n	80148f8 <__sinit+0xc>
 8014912:	bf00      	nop
 8014914:	08014859 	.word	0x08014859
 8014918:	240013b0 	.word	0x240013b0

0801491c <_fwalk_sglue>:
 801491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014920:	4607      	mov	r7, r0
 8014922:	4688      	mov	r8, r1
 8014924:	4614      	mov	r4, r2
 8014926:	2600      	movs	r6, #0
 8014928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801492c:	f1b9 0901 	subs.w	r9, r9, #1
 8014930:	d505      	bpl.n	801493e <_fwalk_sglue+0x22>
 8014932:	6824      	ldr	r4, [r4, #0]
 8014934:	2c00      	cmp	r4, #0
 8014936:	d1f7      	bne.n	8014928 <_fwalk_sglue+0xc>
 8014938:	4630      	mov	r0, r6
 801493a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801493e:	89ab      	ldrh	r3, [r5, #12]
 8014940:	2b01      	cmp	r3, #1
 8014942:	d907      	bls.n	8014954 <_fwalk_sglue+0x38>
 8014944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014948:	3301      	adds	r3, #1
 801494a:	d003      	beq.n	8014954 <_fwalk_sglue+0x38>
 801494c:	4629      	mov	r1, r5
 801494e:	4638      	mov	r0, r7
 8014950:	47c0      	blx	r8
 8014952:	4306      	orrs	r6, r0
 8014954:	3568      	adds	r5, #104	@ 0x68
 8014956:	e7e9      	b.n	801492c <_fwalk_sglue+0x10>

08014958 <iprintf>:
 8014958:	b40f      	push	{r0, r1, r2, r3}
 801495a:	b507      	push	{r0, r1, r2, lr}
 801495c:	4906      	ldr	r1, [pc, #24]	@ (8014978 <iprintf+0x20>)
 801495e:	ab04      	add	r3, sp, #16
 8014960:	6808      	ldr	r0, [r1, #0]
 8014962:	f853 2b04 	ldr.w	r2, [r3], #4
 8014966:	6881      	ldr	r1, [r0, #8]
 8014968:	9301      	str	r3, [sp, #4]
 801496a:	f001 fc57 	bl	801621c <_vfiprintf_r>
 801496e:	b003      	add	sp, #12
 8014970:	f85d eb04 	ldr.w	lr, [sp], #4
 8014974:	b004      	add	sp, #16
 8014976:	4770      	bx	lr
 8014978:	24000074 	.word	0x24000074

0801497c <_puts_r>:
 801497c:	6a03      	ldr	r3, [r0, #32]
 801497e:	b570      	push	{r4, r5, r6, lr}
 8014980:	6884      	ldr	r4, [r0, #8]
 8014982:	4605      	mov	r5, r0
 8014984:	460e      	mov	r6, r1
 8014986:	b90b      	cbnz	r3, 801498c <_puts_r+0x10>
 8014988:	f7ff ffb0 	bl	80148ec <__sinit>
 801498c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801498e:	07db      	lsls	r3, r3, #31
 8014990:	d405      	bmi.n	801499e <_puts_r+0x22>
 8014992:	89a3      	ldrh	r3, [r4, #12]
 8014994:	0598      	lsls	r0, r3, #22
 8014996:	d402      	bmi.n	801499e <_puts_r+0x22>
 8014998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801499a:	f000 f9a2 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 801499e:	89a3      	ldrh	r3, [r4, #12]
 80149a0:	0719      	lsls	r1, r3, #28
 80149a2:	d502      	bpl.n	80149aa <_puts_r+0x2e>
 80149a4:	6923      	ldr	r3, [r4, #16]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d135      	bne.n	8014a16 <_puts_r+0x9a>
 80149aa:	4621      	mov	r1, r4
 80149ac:	4628      	mov	r0, r5
 80149ae:	f000 f8c5 	bl	8014b3c <__swsetup_r>
 80149b2:	b380      	cbz	r0, 8014a16 <_puts_r+0x9a>
 80149b4:	f04f 35ff 	mov.w	r5, #4294967295
 80149b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80149ba:	07da      	lsls	r2, r3, #31
 80149bc:	d405      	bmi.n	80149ca <_puts_r+0x4e>
 80149be:	89a3      	ldrh	r3, [r4, #12]
 80149c0:	059b      	lsls	r3, r3, #22
 80149c2:	d402      	bmi.n	80149ca <_puts_r+0x4e>
 80149c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80149c6:	f000 f98d 	bl	8014ce4 <__retarget_lock_release_recursive>
 80149ca:	4628      	mov	r0, r5
 80149cc:	bd70      	pop	{r4, r5, r6, pc}
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	da04      	bge.n	80149dc <_puts_r+0x60>
 80149d2:	69a2      	ldr	r2, [r4, #24]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	dc17      	bgt.n	8014a08 <_puts_r+0x8c>
 80149d8:	290a      	cmp	r1, #10
 80149da:	d015      	beq.n	8014a08 <_puts_r+0x8c>
 80149dc:	6823      	ldr	r3, [r4, #0]
 80149de:	1c5a      	adds	r2, r3, #1
 80149e0:	6022      	str	r2, [r4, #0]
 80149e2:	7019      	strb	r1, [r3, #0]
 80149e4:	68a3      	ldr	r3, [r4, #8]
 80149e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80149ea:	3b01      	subs	r3, #1
 80149ec:	60a3      	str	r3, [r4, #8]
 80149ee:	2900      	cmp	r1, #0
 80149f0:	d1ed      	bne.n	80149ce <_puts_r+0x52>
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	da11      	bge.n	8014a1a <_puts_r+0x9e>
 80149f6:	4622      	mov	r2, r4
 80149f8:	210a      	movs	r1, #10
 80149fa:	4628      	mov	r0, r5
 80149fc:	f000 f85f 	bl	8014abe <__swbuf_r>
 8014a00:	3001      	adds	r0, #1
 8014a02:	d0d7      	beq.n	80149b4 <_puts_r+0x38>
 8014a04:	250a      	movs	r5, #10
 8014a06:	e7d7      	b.n	80149b8 <_puts_r+0x3c>
 8014a08:	4622      	mov	r2, r4
 8014a0a:	4628      	mov	r0, r5
 8014a0c:	f000 f857 	bl	8014abe <__swbuf_r>
 8014a10:	3001      	adds	r0, #1
 8014a12:	d1e7      	bne.n	80149e4 <_puts_r+0x68>
 8014a14:	e7ce      	b.n	80149b4 <_puts_r+0x38>
 8014a16:	3e01      	subs	r6, #1
 8014a18:	e7e4      	b.n	80149e4 <_puts_r+0x68>
 8014a1a:	6823      	ldr	r3, [r4, #0]
 8014a1c:	1c5a      	adds	r2, r3, #1
 8014a1e:	6022      	str	r2, [r4, #0]
 8014a20:	220a      	movs	r2, #10
 8014a22:	701a      	strb	r2, [r3, #0]
 8014a24:	e7ee      	b.n	8014a04 <_puts_r+0x88>
	...

08014a28 <puts>:
 8014a28:	4b02      	ldr	r3, [pc, #8]	@ (8014a34 <puts+0xc>)
 8014a2a:	4601      	mov	r1, r0
 8014a2c:	6818      	ldr	r0, [r3, #0]
 8014a2e:	f7ff bfa5 	b.w	801497c <_puts_r>
 8014a32:	bf00      	nop
 8014a34:	24000074 	.word	0x24000074

08014a38 <__sread>:
 8014a38:	b510      	push	{r4, lr}
 8014a3a:	460c      	mov	r4, r1
 8014a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a40:	f000 f900 	bl	8014c44 <_read_r>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	bfab      	itete	ge
 8014a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8014a4c:	181b      	addge	r3, r3, r0
 8014a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014a52:	bfac      	ite	ge
 8014a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014a56:	81a3      	strhlt	r3, [r4, #12]
 8014a58:	bd10      	pop	{r4, pc}

08014a5a <__swrite>:
 8014a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a5e:	461f      	mov	r7, r3
 8014a60:	898b      	ldrh	r3, [r1, #12]
 8014a62:	05db      	lsls	r3, r3, #23
 8014a64:	4605      	mov	r5, r0
 8014a66:	460c      	mov	r4, r1
 8014a68:	4616      	mov	r6, r2
 8014a6a:	d505      	bpl.n	8014a78 <__swrite+0x1e>
 8014a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a70:	2302      	movs	r3, #2
 8014a72:	2200      	movs	r2, #0
 8014a74:	f000 f8d4 	bl	8014c20 <_lseek_r>
 8014a78:	89a3      	ldrh	r3, [r4, #12]
 8014a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a82:	81a3      	strh	r3, [r4, #12]
 8014a84:	4632      	mov	r2, r6
 8014a86:	463b      	mov	r3, r7
 8014a88:	4628      	mov	r0, r5
 8014a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a8e:	f000 b8eb 	b.w	8014c68 <_write_r>

08014a92 <__sseek>:
 8014a92:	b510      	push	{r4, lr}
 8014a94:	460c      	mov	r4, r1
 8014a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a9a:	f000 f8c1 	bl	8014c20 <_lseek_r>
 8014a9e:	1c43      	adds	r3, r0, #1
 8014aa0:	89a3      	ldrh	r3, [r4, #12]
 8014aa2:	bf15      	itete	ne
 8014aa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014aa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014aaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014aae:	81a3      	strheq	r3, [r4, #12]
 8014ab0:	bf18      	it	ne
 8014ab2:	81a3      	strhne	r3, [r4, #12]
 8014ab4:	bd10      	pop	{r4, pc}

08014ab6 <__sclose>:
 8014ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014aba:	f000 b8a1 	b.w	8014c00 <_close_r>

08014abe <__swbuf_r>:
 8014abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac0:	460e      	mov	r6, r1
 8014ac2:	4614      	mov	r4, r2
 8014ac4:	4605      	mov	r5, r0
 8014ac6:	b118      	cbz	r0, 8014ad0 <__swbuf_r+0x12>
 8014ac8:	6a03      	ldr	r3, [r0, #32]
 8014aca:	b90b      	cbnz	r3, 8014ad0 <__swbuf_r+0x12>
 8014acc:	f7ff ff0e 	bl	80148ec <__sinit>
 8014ad0:	69a3      	ldr	r3, [r4, #24]
 8014ad2:	60a3      	str	r3, [r4, #8]
 8014ad4:	89a3      	ldrh	r3, [r4, #12]
 8014ad6:	071a      	lsls	r2, r3, #28
 8014ad8:	d501      	bpl.n	8014ade <__swbuf_r+0x20>
 8014ada:	6923      	ldr	r3, [r4, #16]
 8014adc:	b943      	cbnz	r3, 8014af0 <__swbuf_r+0x32>
 8014ade:	4621      	mov	r1, r4
 8014ae0:	4628      	mov	r0, r5
 8014ae2:	f000 f82b 	bl	8014b3c <__swsetup_r>
 8014ae6:	b118      	cbz	r0, 8014af0 <__swbuf_r+0x32>
 8014ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8014aec:	4638      	mov	r0, r7
 8014aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014af0:	6823      	ldr	r3, [r4, #0]
 8014af2:	6922      	ldr	r2, [r4, #16]
 8014af4:	1a98      	subs	r0, r3, r2
 8014af6:	6963      	ldr	r3, [r4, #20]
 8014af8:	b2f6      	uxtb	r6, r6
 8014afa:	4283      	cmp	r3, r0
 8014afc:	4637      	mov	r7, r6
 8014afe:	dc05      	bgt.n	8014b0c <__swbuf_r+0x4e>
 8014b00:	4621      	mov	r1, r4
 8014b02:	4628      	mov	r0, r5
 8014b04:	f001 fd26 	bl	8016554 <_fflush_r>
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	d1ed      	bne.n	8014ae8 <__swbuf_r+0x2a>
 8014b0c:	68a3      	ldr	r3, [r4, #8]
 8014b0e:	3b01      	subs	r3, #1
 8014b10:	60a3      	str	r3, [r4, #8]
 8014b12:	6823      	ldr	r3, [r4, #0]
 8014b14:	1c5a      	adds	r2, r3, #1
 8014b16:	6022      	str	r2, [r4, #0]
 8014b18:	701e      	strb	r6, [r3, #0]
 8014b1a:	6962      	ldr	r2, [r4, #20]
 8014b1c:	1c43      	adds	r3, r0, #1
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d004      	beq.n	8014b2c <__swbuf_r+0x6e>
 8014b22:	89a3      	ldrh	r3, [r4, #12]
 8014b24:	07db      	lsls	r3, r3, #31
 8014b26:	d5e1      	bpl.n	8014aec <__swbuf_r+0x2e>
 8014b28:	2e0a      	cmp	r6, #10
 8014b2a:	d1df      	bne.n	8014aec <__swbuf_r+0x2e>
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	4628      	mov	r0, r5
 8014b30:	f001 fd10 	bl	8016554 <_fflush_r>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d0d9      	beq.n	8014aec <__swbuf_r+0x2e>
 8014b38:	e7d6      	b.n	8014ae8 <__swbuf_r+0x2a>
	...

08014b3c <__swsetup_r>:
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	4b29      	ldr	r3, [pc, #164]	@ (8014be4 <__swsetup_r+0xa8>)
 8014b40:	4605      	mov	r5, r0
 8014b42:	6818      	ldr	r0, [r3, #0]
 8014b44:	460c      	mov	r4, r1
 8014b46:	b118      	cbz	r0, 8014b50 <__swsetup_r+0x14>
 8014b48:	6a03      	ldr	r3, [r0, #32]
 8014b4a:	b90b      	cbnz	r3, 8014b50 <__swsetup_r+0x14>
 8014b4c:	f7ff fece 	bl	80148ec <__sinit>
 8014b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b54:	0719      	lsls	r1, r3, #28
 8014b56:	d422      	bmi.n	8014b9e <__swsetup_r+0x62>
 8014b58:	06da      	lsls	r2, r3, #27
 8014b5a:	d407      	bmi.n	8014b6c <__swsetup_r+0x30>
 8014b5c:	2209      	movs	r2, #9
 8014b5e:	602a      	str	r2, [r5, #0]
 8014b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b64:	81a3      	strh	r3, [r4, #12]
 8014b66:	f04f 30ff 	mov.w	r0, #4294967295
 8014b6a:	e033      	b.n	8014bd4 <__swsetup_r+0x98>
 8014b6c:	0758      	lsls	r0, r3, #29
 8014b6e:	d512      	bpl.n	8014b96 <__swsetup_r+0x5a>
 8014b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b72:	b141      	cbz	r1, 8014b86 <__swsetup_r+0x4a>
 8014b74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b78:	4299      	cmp	r1, r3
 8014b7a:	d002      	beq.n	8014b82 <__swsetup_r+0x46>
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	f000 fea9 	bl	80158d4 <_free_r>
 8014b82:	2300      	movs	r3, #0
 8014b84:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b86:	89a3      	ldrh	r3, [r4, #12]
 8014b88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014b8c:	81a3      	strh	r3, [r4, #12]
 8014b8e:	2300      	movs	r3, #0
 8014b90:	6063      	str	r3, [r4, #4]
 8014b92:	6923      	ldr	r3, [r4, #16]
 8014b94:	6023      	str	r3, [r4, #0]
 8014b96:	89a3      	ldrh	r3, [r4, #12]
 8014b98:	f043 0308 	orr.w	r3, r3, #8
 8014b9c:	81a3      	strh	r3, [r4, #12]
 8014b9e:	6923      	ldr	r3, [r4, #16]
 8014ba0:	b94b      	cbnz	r3, 8014bb6 <__swsetup_r+0x7a>
 8014ba2:	89a3      	ldrh	r3, [r4, #12]
 8014ba4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bac:	d003      	beq.n	8014bb6 <__swsetup_r+0x7a>
 8014bae:	4621      	mov	r1, r4
 8014bb0:	4628      	mov	r0, r5
 8014bb2:	f001 fd1d 	bl	80165f0 <__smakebuf_r>
 8014bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bba:	f013 0201 	ands.w	r2, r3, #1
 8014bbe:	d00a      	beq.n	8014bd6 <__swsetup_r+0x9a>
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	60a2      	str	r2, [r4, #8]
 8014bc4:	6962      	ldr	r2, [r4, #20]
 8014bc6:	4252      	negs	r2, r2
 8014bc8:	61a2      	str	r2, [r4, #24]
 8014bca:	6922      	ldr	r2, [r4, #16]
 8014bcc:	b942      	cbnz	r2, 8014be0 <__swsetup_r+0xa4>
 8014bce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014bd2:	d1c5      	bne.n	8014b60 <__swsetup_r+0x24>
 8014bd4:	bd38      	pop	{r3, r4, r5, pc}
 8014bd6:	0799      	lsls	r1, r3, #30
 8014bd8:	bf58      	it	pl
 8014bda:	6962      	ldrpl	r2, [r4, #20]
 8014bdc:	60a2      	str	r2, [r4, #8]
 8014bde:	e7f4      	b.n	8014bca <__swsetup_r+0x8e>
 8014be0:	2000      	movs	r0, #0
 8014be2:	e7f7      	b.n	8014bd4 <__swsetup_r+0x98>
 8014be4:	24000074 	.word	0x24000074

08014be8 <memset>:
 8014be8:	4402      	add	r2, r0
 8014bea:	4603      	mov	r3, r0
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d100      	bne.n	8014bf2 <memset+0xa>
 8014bf0:	4770      	bx	lr
 8014bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8014bf6:	e7f9      	b.n	8014bec <memset+0x4>

08014bf8 <_localeconv_r>:
 8014bf8:	4800      	ldr	r0, [pc, #0]	@ (8014bfc <_localeconv_r+0x4>)
 8014bfa:	4770      	bx	lr
 8014bfc:	240001b4 	.word	0x240001b4

08014c00 <_close_r>:
 8014c00:	b538      	push	{r3, r4, r5, lr}
 8014c02:	4d06      	ldr	r5, [pc, #24]	@ (8014c1c <_close_r+0x1c>)
 8014c04:	2300      	movs	r3, #0
 8014c06:	4604      	mov	r4, r0
 8014c08:	4608      	mov	r0, r1
 8014c0a:	602b      	str	r3, [r5, #0]
 8014c0c:	f7ed fdc0 	bl	8002790 <_close>
 8014c10:	1c43      	adds	r3, r0, #1
 8014c12:	d102      	bne.n	8014c1a <_close_r+0x1a>
 8014c14:	682b      	ldr	r3, [r5, #0]
 8014c16:	b103      	cbz	r3, 8014c1a <_close_r+0x1a>
 8014c18:	6023      	str	r3, [r4, #0]
 8014c1a:	bd38      	pop	{r3, r4, r5, pc}
 8014c1c:	240013b4 	.word	0x240013b4

08014c20 <_lseek_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4d07      	ldr	r5, [pc, #28]	@ (8014c40 <_lseek_r+0x20>)
 8014c24:	4604      	mov	r4, r0
 8014c26:	4608      	mov	r0, r1
 8014c28:	4611      	mov	r1, r2
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	602a      	str	r2, [r5, #0]
 8014c2e:	461a      	mov	r2, r3
 8014c30:	f7ed fdd5 	bl	80027de <_lseek>
 8014c34:	1c43      	adds	r3, r0, #1
 8014c36:	d102      	bne.n	8014c3e <_lseek_r+0x1e>
 8014c38:	682b      	ldr	r3, [r5, #0]
 8014c3a:	b103      	cbz	r3, 8014c3e <_lseek_r+0x1e>
 8014c3c:	6023      	str	r3, [r4, #0]
 8014c3e:	bd38      	pop	{r3, r4, r5, pc}
 8014c40:	240013b4 	.word	0x240013b4

08014c44 <_read_r>:
 8014c44:	b538      	push	{r3, r4, r5, lr}
 8014c46:	4d07      	ldr	r5, [pc, #28]	@ (8014c64 <_read_r+0x20>)
 8014c48:	4604      	mov	r4, r0
 8014c4a:	4608      	mov	r0, r1
 8014c4c:	4611      	mov	r1, r2
 8014c4e:	2200      	movs	r2, #0
 8014c50:	602a      	str	r2, [r5, #0]
 8014c52:	461a      	mov	r2, r3
 8014c54:	f7ed fd63 	bl	800271e <_read>
 8014c58:	1c43      	adds	r3, r0, #1
 8014c5a:	d102      	bne.n	8014c62 <_read_r+0x1e>
 8014c5c:	682b      	ldr	r3, [r5, #0]
 8014c5e:	b103      	cbz	r3, 8014c62 <_read_r+0x1e>
 8014c60:	6023      	str	r3, [r4, #0]
 8014c62:	bd38      	pop	{r3, r4, r5, pc}
 8014c64:	240013b4 	.word	0x240013b4

08014c68 <_write_r>:
 8014c68:	b538      	push	{r3, r4, r5, lr}
 8014c6a:	4d07      	ldr	r5, [pc, #28]	@ (8014c88 <_write_r+0x20>)
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	4608      	mov	r0, r1
 8014c70:	4611      	mov	r1, r2
 8014c72:	2200      	movs	r2, #0
 8014c74:	602a      	str	r2, [r5, #0]
 8014c76:	461a      	mov	r2, r3
 8014c78:	f7ed fd6e 	bl	8002758 <_write>
 8014c7c:	1c43      	adds	r3, r0, #1
 8014c7e:	d102      	bne.n	8014c86 <_write_r+0x1e>
 8014c80:	682b      	ldr	r3, [r5, #0]
 8014c82:	b103      	cbz	r3, 8014c86 <_write_r+0x1e>
 8014c84:	6023      	str	r3, [r4, #0]
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	240013b4 	.word	0x240013b4

08014c8c <__errno>:
 8014c8c:	4b01      	ldr	r3, [pc, #4]	@ (8014c94 <__errno+0x8>)
 8014c8e:	6818      	ldr	r0, [r3, #0]
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	24000074 	.word	0x24000074

08014c98 <__libc_init_array>:
 8014c98:	b570      	push	{r4, r5, r6, lr}
 8014c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8014cd0 <__libc_init_array+0x38>)
 8014c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8014cd4 <__libc_init_array+0x3c>)
 8014c9e:	1b64      	subs	r4, r4, r5
 8014ca0:	10a4      	asrs	r4, r4, #2
 8014ca2:	2600      	movs	r6, #0
 8014ca4:	42a6      	cmp	r6, r4
 8014ca6:	d109      	bne.n	8014cbc <__libc_init_array+0x24>
 8014ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8014cd8 <__libc_init_array+0x40>)
 8014caa:	4c0c      	ldr	r4, [pc, #48]	@ (8014cdc <__libc_init_array+0x44>)
 8014cac:	f003 fa64 	bl	8018178 <_init>
 8014cb0:	1b64      	subs	r4, r4, r5
 8014cb2:	10a4      	asrs	r4, r4, #2
 8014cb4:	2600      	movs	r6, #0
 8014cb6:	42a6      	cmp	r6, r4
 8014cb8:	d105      	bne.n	8014cc6 <__libc_init_array+0x2e>
 8014cba:	bd70      	pop	{r4, r5, r6, pc}
 8014cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cc0:	4798      	blx	r3
 8014cc2:	3601      	adds	r6, #1
 8014cc4:	e7ee      	b.n	8014ca4 <__libc_init_array+0xc>
 8014cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cca:	4798      	blx	r3
 8014ccc:	3601      	adds	r6, #1
 8014cce:	e7f2      	b.n	8014cb6 <__libc_init_array+0x1e>
 8014cd0:	0801a440 	.word	0x0801a440
 8014cd4:	0801a440 	.word	0x0801a440
 8014cd8:	0801a440 	.word	0x0801a440
 8014cdc:	0801a444 	.word	0x0801a444

08014ce0 <__retarget_lock_init_recursive>:
 8014ce0:	4770      	bx	lr

08014ce2 <__retarget_lock_acquire_recursive>:
 8014ce2:	4770      	bx	lr

08014ce4 <__retarget_lock_release_recursive>:
 8014ce4:	4770      	bx	lr

08014ce6 <memcpy>:
 8014ce6:	440a      	add	r2, r1
 8014ce8:	4291      	cmp	r1, r2
 8014cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8014cee:	d100      	bne.n	8014cf2 <memcpy+0xc>
 8014cf0:	4770      	bx	lr
 8014cf2:	b510      	push	{r4, lr}
 8014cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014cfc:	4291      	cmp	r1, r2
 8014cfe:	d1f9      	bne.n	8014cf4 <memcpy+0xe>
 8014d00:	bd10      	pop	{r4, pc}

08014d02 <quorem>:
 8014d02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d06:	6903      	ldr	r3, [r0, #16]
 8014d08:	690c      	ldr	r4, [r1, #16]
 8014d0a:	42a3      	cmp	r3, r4
 8014d0c:	4607      	mov	r7, r0
 8014d0e:	db7e      	blt.n	8014e0e <quorem+0x10c>
 8014d10:	3c01      	subs	r4, #1
 8014d12:	f101 0814 	add.w	r8, r1, #20
 8014d16:	00a3      	lsls	r3, r4, #2
 8014d18:	f100 0514 	add.w	r5, r0, #20
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d22:	9301      	str	r3, [sp, #4]
 8014d24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d34:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d38:	d32e      	bcc.n	8014d98 <quorem+0x96>
 8014d3a:	f04f 0a00 	mov.w	sl, #0
 8014d3e:	46c4      	mov	ip, r8
 8014d40:	46ae      	mov	lr, r5
 8014d42:	46d3      	mov	fp, sl
 8014d44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014d48:	b298      	uxth	r0, r3
 8014d4a:	fb06 a000 	mla	r0, r6, r0, sl
 8014d4e:	0c02      	lsrs	r2, r0, #16
 8014d50:	0c1b      	lsrs	r3, r3, #16
 8014d52:	fb06 2303 	mla	r3, r6, r3, r2
 8014d56:	f8de 2000 	ldr.w	r2, [lr]
 8014d5a:	b280      	uxth	r0, r0
 8014d5c:	b292      	uxth	r2, r2
 8014d5e:	1a12      	subs	r2, r2, r0
 8014d60:	445a      	add	r2, fp
 8014d62:	f8de 0000 	ldr.w	r0, [lr]
 8014d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014d6a:	b29b      	uxth	r3, r3
 8014d6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014d70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014d74:	b292      	uxth	r2, r2
 8014d76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014d7a:	45e1      	cmp	r9, ip
 8014d7c:	f84e 2b04 	str.w	r2, [lr], #4
 8014d80:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014d84:	d2de      	bcs.n	8014d44 <quorem+0x42>
 8014d86:	9b00      	ldr	r3, [sp, #0]
 8014d88:	58eb      	ldr	r3, [r5, r3]
 8014d8a:	b92b      	cbnz	r3, 8014d98 <quorem+0x96>
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	3b04      	subs	r3, #4
 8014d90:	429d      	cmp	r5, r3
 8014d92:	461a      	mov	r2, r3
 8014d94:	d32f      	bcc.n	8014df6 <quorem+0xf4>
 8014d96:	613c      	str	r4, [r7, #16]
 8014d98:	4638      	mov	r0, r7
 8014d9a:	f001 f90d 	bl	8015fb8 <__mcmp>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	db25      	blt.n	8014dee <quorem+0xec>
 8014da2:	4629      	mov	r1, r5
 8014da4:	2000      	movs	r0, #0
 8014da6:	f858 2b04 	ldr.w	r2, [r8], #4
 8014daa:	f8d1 c000 	ldr.w	ip, [r1]
 8014dae:	fa1f fe82 	uxth.w	lr, r2
 8014db2:	fa1f f38c 	uxth.w	r3, ip
 8014db6:	eba3 030e 	sub.w	r3, r3, lr
 8014dba:	4403      	add	r3, r0
 8014dbc:	0c12      	lsrs	r2, r2, #16
 8014dbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014dc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dcc:	45c1      	cmp	r9, r8
 8014dce:	f841 3b04 	str.w	r3, [r1], #4
 8014dd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014dd6:	d2e6      	bcs.n	8014da6 <quorem+0xa4>
 8014dd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ddc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014de0:	b922      	cbnz	r2, 8014dec <quorem+0xea>
 8014de2:	3b04      	subs	r3, #4
 8014de4:	429d      	cmp	r5, r3
 8014de6:	461a      	mov	r2, r3
 8014de8:	d30b      	bcc.n	8014e02 <quorem+0x100>
 8014dea:	613c      	str	r4, [r7, #16]
 8014dec:	3601      	adds	r6, #1
 8014dee:	4630      	mov	r0, r6
 8014df0:	b003      	add	sp, #12
 8014df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df6:	6812      	ldr	r2, [r2, #0]
 8014df8:	3b04      	subs	r3, #4
 8014dfa:	2a00      	cmp	r2, #0
 8014dfc:	d1cb      	bne.n	8014d96 <quorem+0x94>
 8014dfe:	3c01      	subs	r4, #1
 8014e00:	e7c6      	b.n	8014d90 <quorem+0x8e>
 8014e02:	6812      	ldr	r2, [r2, #0]
 8014e04:	3b04      	subs	r3, #4
 8014e06:	2a00      	cmp	r2, #0
 8014e08:	d1ef      	bne.n	8014dea <quorem+0xe8>
 8014e0a:	3c01      	subs	r4, #1
 8014e0c:	e7ea      	b.n	8014de4 <quorem+0xe2>
 8014e0e:	2000      	movs	r0, #0
 8014e10:	e7ee      	b.n	8014df0 <quorem+0xee>
 8014e12:	0000      	movs	r0, r0
 8014e14:	0000      	movs	r0, r0
	...

08014e18 <_dtoa_r>:
 8014e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1c:	ed2d 8b02 	vpush	{d8}
 8014e20:	69c7      	ldr	r7, [r0, #28]
 8014e22:	b091      	sub	sp, #68	@ 0x44
 8014e24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014e28:	ec55 4b10 	vmov	r4, r5, d0
 8014e2c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014e2e:	9107      	str	r1, [sp, #28]
 8014e30:	4681      	mov	r9, r0
 8014e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e34:	930d      	str	r3, [sp, #52]	@ 0x34
 8014e36:	b97f      	cbnz	r7, 8014e58 <_dtoa_r+0x40>
 8014e38:	2010      	movs	r0, #16
 8014e3a:	f000 fd95 	bl	8015968 <malloc>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	f8c9 001c 	str.w	r0, [r9, #28]
 8014e44:	b920      	cbnz	r0, 8014e50 <_dtoa_r+0x38>
 8014e46:	4ba0      	ldr	r3, [pc, #640]	@ (80150c8 <_dtoa_r+0x2b0>)
 8014e48:	21ef      	movs	r1, #239	@ 0xef
 8014e4a:	48a0      	ldr	r0, [pc, #640]	@ (80150cc <_dtoa_r+0x2b4>)
 8014e4c:	f001 fc3e 	bl	80166cc <__assert_func>
 8014e50:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014e54:	6007      	str	r7, [r0, #0]
 8014e56:	60c7      	str	r7, [r0, #12]
 8014e58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014e5c:	6819      	ldr	r1, [r3, #0]
 8014e5e:	b159      	cbz	r1, 8014e78 <_dtoa_r+0x60>
 8014e60:	685a      	ldr	r2, [r3, #4]
 8014e62:	604a      	str	r2, [r1, #4]
 8014e64:	2301      	movs	r3, #1
 8014e66:	4093      	lsls	r3, r2
 8014e68:	608b      	str	r3, [r1, #8]
 8014e6a:	4648      	mov	r0, r9
 8014e6c:	f000 fe72 	bl	8015b54 <_Bfree>
 8014e70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014e74:	2200      	movs	r2, #0
 8014e76:	601a      	str	r2, [r3, #0]
 8014e78:	1e2b      	subs	r3, r5, #0
 8014e7a:	bfbb      	ittet	lt
 8014e7c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014e80:	9303      	strlt	r3, [sp, #12]
 8014e82:	2300      	movge	r3, #0
 8014e84:	2201      	movlt	r2, #1
 8014e86:	bfac      	ite	ge
 8014e88:	6033      	strge	r3, [r6, #0]
 8014e8a:	6032      	strlt	r2, [r6, #0]
 8014e8c:	4b90      	ldr	r3, [pc, #576]	@ (80150d0 <_dtoa_r+0x2b8>)
 8014e8e:	9e03      	ldr	r6, [sp, #12]
 8014e90:	43b3      	bics	r3, r6
 8014e92:	d110      	bne.n	8014eb6 <_dtoa_r+0x9e>
 8014e94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014e96:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014e9a:	6013      	str	r3, [r2, #0]
 8014e9c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014ea0:	4323      	orrs	r3, r4
 8014ea2:	f000 84e6 	beq.w	8015872 <_dtoa_r+0xa5a>
 8014ea6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ea8:	4f8a      	ldr	r7, [pc, #552]	@ (80150d4 <_dtoa_r+0x2bc>)
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	f000 84e8 	beq.w	8015880 <_dtoa_r+0xa68>
 8014eb0:	1cfb      	adds	r3, r7, #3
 8014eb2:	f000 bce3 	b.w	801587c <_dtoa_r+0xa64>
 8014eb6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014eba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ec2:	d10a      	bne.n	8014eda <_dtoa_r+0xc2>
 8014ec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	6013      	str	r3, [r2, #0]
 8014eca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ecc:	b113      	cbz	r3, 8014ed4 <_dtoa_r+0xbc>
 8014ece:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014ed0:	4b81      	ldr	r3, [pc, #516]	@ (80150d8 <_dtoa_r+0x2c0>)
 8014ed2:	6013      	str	r3, [r2, #0]
 8014ed4:	4f81      	ldr	r7, [pc, #516]	@ (80150dc <_dtoa_r+0x2c4>)
 8014ed6:	f000 bcd3 	b.w	8015880 <_dtoa_r+0xa68>
 8014eda:	aa0e      	add	r2, sp, #56	@ 0x38
 8014edc:	a90f      	add	r1, sp, #60	@ 0x3c
 8014ede:	4648      	mov	r0, r9
 8014ee0:	eeb0 0b48 	vmov.f64	d0, d8
 8014ee4:	f001 f918 	bl	8016118 <__d2b>
 8014ee8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014eec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014eee:	9001      	str	r0, [sp, #4]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d045      	beq.n	8014f80 <_dtoa_r+0x168>
 8014ef4:	eeb0 7b48 	vmov.f64	d7, d8
 8014ef8:	ee18 1a90 	vmov	r1, s17
 8014efc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014f00:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014f04:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014f08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014f0c:	2500      	movs	r5, #0
 8014f0e:	ee07 1a90 	vmov	s15, r1
 8014f12:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014f16:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80150b0 <_dtoa_r+0x298>
 8014f1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014f1e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80150b8 <_dtoa_r+0x2a0>
 8014f22:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014f26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80150c0 <_dtoa_r+0x2a8>
 8014f2a:	ee07 3a90 	vmov	s15, r3
 8014f2e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014f32:	eeb0 7b46 	vmov.f64	d7, d6
 8014f36:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014f3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014f3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f46:	ee16 8a90 	vmov	r8, s13
 8014f4a:	d508      	bpl.n	8014f5e <_dtoa_r+0x146>
 8014f4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014f50:	eeb4 6b47 	vcmp.f64	d6, d7
 8014f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f58:	bf18      	it	ne
 8014f5a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8014f5e:	f1b8 0f16 	cmp.w	r8, #22
 8014f62:	d82b      	bhi.n	8014fbc <_dtoa_r+0x1a4>
 8014f64:	495e      	ldr	r1, [pc, #376]	@ (80150e0 <_dtoa_r+0x2c8>)
 8014f66:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8014f6a:	ed91 7b00 	vldr	d7, [r1]
 8014f6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f76:	d501      	bpl.n	8014f7c <_dtoa_r+0x164>
 8014f78:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	e01e      	b.n	8014fbe <_dtoa_r+0x1a6>
 8014f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f82:	4413      	add	r3, r2
 8014f84:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014f88:	2920      	cmp	r1, #32
 8014f8a:	bfc1      	itttt	gt
 8014f8c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8014f90:	408e      	lslgt	r6, r1
 8014f92:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8014f96:	fa24 f101 	lsrgt.w	r1, r4, r1
 8014f9a:	bfd6      	itet	le
 8014f9c:	f1c1 0120 	rsble	r1, r1, #32
 8014fa0:	4331      	orrgt	r1, r6
 8014fa2:	fa04 f101 	lslle.w	r1, r4, r1
 8014fa6:	ee07 1a90 	vmov	s15, r1
 8014faa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014fae:	3b01      	subs	r3, #1
 8014fb0:	ee17 1a90 	vmov	r1, s15
 8014fb4:	2501      	movs	r5, #1
 8014fb6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8014fba:	e7a8      	b.n	8014f0e <_dtoa_r+0xf6>
 8014fbc:	2101      	movs	r1, #1
 8014fbe:	1ad2      	subs	r2, r2, r3
 8014fc0:	1e53      	subs	r3, r2, #1
 8014fc2:	9306      	str	r3, [sp, #24]
 8014fc4:	bf45      	ittet	mi
 8014fc6:	f1c2 0301 	rsbmi	r3, r2, #1
 8014fca:	9304      	strmi	r3, [sp, #16]
 8014fcc:	2300      	movpl	r3, #0
 8014fce:	2300      	movmi	r3, #0
 8014fd0:	bf4c      	ite	mi
 8014fd2:	9306      	strmi	r3, [sp, #24]
 8014fd4:	9304      	strpl	r3, [sp, #16]
 8014fd6:	f1b8 0f00 	cmp.w	r8, #0
 8014fda:	910c      	str	r1, [sp, #48]	@ 0x30
 8014fdc:	db18      	blt.n	8015010 <_dtoa_r+0x1f8>
 8014fde:	9b06      	ldr	r3, [sp, #24]
 8014fe0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8014fe4:	4443      	add	r3, r8
 8014fe6:	9306      	str	r3, [sp, #24]
 8014fe8:	2300      	movs	r3, #0
 8014fea:	9a07      	ldr	r2, [sp, #28]
 8014fec:	2a09      	cmp	r2, #9
 8014fee:	d845      	bhi.n	801507c <_dtoa_r+0x264>
 8014ff0:	2a05      	cmp	r2, #5
 8014ff2:	bfc4      	itt	gt
 8014ff4:	3a04      	subgt	r2, #4
 8014ff6:	9207      	strgt	r2, [sp, #28]
 8014ff8:	9a07      	ldr	r2, [sp, #28]
 8014ffa:	f1a2 0202 	sub.w	r2, r2, #2
 8014ffe:	bfcc      	ite	gt
 8015000:	2400      	movgt	r4, #0
 8015002:	2401      	movle	r4, #1
 8015004:	2a03      	cmp	r2, #3
 8015006:	d844      	bhi.n	8015092 <_dtoa_r+0x27a>
 8015008:	e8df f002 	tbb	[pc, r2]
 801500c:	0b173634 	.word	0x0b173634
 8015010:	9b04      	ldr	r3, [sp, #16]
 8015012:	2200      	movs	r2, #0
 8015014:	eba3 0308 	sub.w	r3, r3, r8
 8015018:	9304      	str	r3, [sp, #16]
 801501a:	920a      	str	r2, [sp, #40]	@ 0x28
 801501c:	f1c8 0300 	rsb	r3, r8, #0
 8015020:	e7e3      	b.n	8014fea <_dtoa_r+0x1d2>
 8015022:	2201      	movs	r2, #1
 8015024:	9208      	str	r2, [sp, #32]
 8015026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015028:	eb08 0b02 	add.w	fp, r8, r2
 801502c:	f10b 0a01 	add.w	sl, fp, #1
 8015030:	4652      	mov	r2, sl
 8015032:	2a01      	cmp	r2, #1
 8015034:	bfb8      	it	lt
 8015036:	2201      	movlt	r2, #1
 8015038:	e006      	b.n	8015048 <_dtoa_r+0x230>
 801503a:	2201      	movs	r2, #1
 801503c:	9208      	str	r2, [sp, #32]
 801503e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015040:	2a00      	cmp	r2, #0
 8015042:	dd29      	ble.n	8015098 <_dtoa_r+0x280>
 8015044:	4693      	mov	fp, r2
 8015046:	4692      	mov	sl, r2
 8015048:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801504c:	2100      	movs	r1, #0
 801504e:	2004      	movs	r0, #4
 8015050:	f100 0614 	add.w	r6, r0, #20
 8015054:	4296      	cmp	r6, r2
 8015056:	d926      	bls.n	80150a6 <_dtoa_r+0x28e>
 8015058:	6079      	str	r1, [r7, #4]
 801505a:	4648      	mov	r0, r9
 801505c:	9305      	str	r3, [sp, #20]
 801505e:	f000 fd39 	bl	8015ad4 <_Balloc>
 8015062:	9b05      	ldr	r3, [sp, #20]
 8015064:	4607      	mov	r7, r0
 8015066:	2800      	cmp	r0, #0
 8015068:	d13e      	bne.n	80150e8 <_dtoa_r+0x2d0>
 801506a:	4b1e      	ldr	r3, [pc, #120]	@ (80150e4 <_dtoa_r+0x2cc>)
 801506c:	4602      	mov	r2, r0
 801506e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015072:	e6ea      	b.n	8014e4a <_dtoa_r+0x32>
 8015074:	2200      	movs	r2, #0
 8015076:	e7e1      	b.n	801503c <_dtoa_r+0x224>
 8015078:	2200      	movs	r2, #0
 801507a:	e7d3      	b.n	8015024 <_dtoa_r+0x20c>
 801507c:	2401      	movs	r4, #1
 801507e:	2200      	movs	r2, #0
 8015080:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015084:	f04f 3bff 	mov.w	fp, #4294967295
 8015088:	2100      	movs	r1, #0
 801508a:	46da      	mov	sl, fp
 801508c:	2212      	movs	r2, #18
 801508e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015090:	e7da      	b.n	8015048 <_dtoa_r+0x230>
 8015092:	2201      	movs	r2, #1
 8015094:	9208      	str	r2, [sp, #32]
 8015096:	e7f5      	b.n	8015084 <_dtoa_r+0x26c>
 8015098:	f04f 0b01 	mov.w	fp, #1
 801509c:	46da      	mov	sl, fp
 801509e:	465a      	mov	r2, fp
 80150a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80150a4:	e7d0      	b.n	8015048 <_dtoa_r+0x230>
 80150a6:	3101      	adds	r1, #1
 80150a8:	0040      	lsls	r0, r0, #1
 80150aa:	e7d1      	b.n	8015050 <_dtoa_r+0x238>
 80150ac:	f3af 8000 	nop.w
 80150b0:	636f4361 	.word	0x636f4361
 80150b4:	3fd287a7 	.word	0x3fd287a7
 80150b8:	8b60c8b3 	.word	0x8b60c8b3
 80150bc:	3fc68a28 	.word	0x3fc68a28
 80150c0:	509f79fb 	.word	0x509f79fb
 80150c4:	3fd34413 	.word	0x3fd34413
 80150c8:	08018301 	.word	0x08018301
 80150cc:	08018318 	.word	0x08018318
 80150d0:	7ff00000 	.word	0x7ff00000
 80150d4:	080182fd 	.word	0x080182fd
 80150d8:	080182d1 	.word	0x080182d1
 80150dc:	080182d0 	.word	0x080182d0
 80150e0:	08018468 	.word	0x08018468
 80150e4:	08018370 	.word	0x08018370
 80150e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80150ec:	f1ba 0f0e 	cmp.w	sl, #14
 80150f0:	6010      	str	r0, [r2, #0]
 80150f2:	d86e      	bhi.n	80151d2 <_dtoa_r+0x3ba>
 80150f4:	2c00      	cmp	r4, #0
 80150f6:	d06c      	beq.n	80151d2 <_dtoa_r+0x3ba>
 80150f8:	f1b8 0f00 	cmp.w	r8, #0
 80150fc:	f340 80b4 	ble.w	8015268 <_dtoa_r+0x450>
 8015100:	4ac8      	ldr	r2, [pc, #800]	@ (8015424 <_dtoa_r+0x60c>)
 8015102:	f008 010f 	and.w	r1, r8, #15
 8015106:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801510a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801510e:	ed92 7b00 	vldr	d7, [r2]
 8015112:	ea4f 1128 	mov.w	r1, r8, asr #4
 8015116:	f000 809b 	beq.w	8015250 <_dtoa_r+0x438>
 801511a:	4ac3      	ldr	r2, [pc, #780]	@ (8015428 <_dtoa_r+0x610>)
 801511c:	ed92 6b08 	vldr	d6, [r2, #32]
 8015120:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015124:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015128:	f001 010f 	and.w	r1, r1, #15
 801512c:	2203      	movs	r2, #3
 801512e:	48be      	ldr	r0, [pc, #760]	@ (8015428 <_dtoa_r+0x610>)
 8015130:	2900      	cmp	r1, #0
 8015132:	f040 808f 	bne.w	8015254 <_dtoa_r+0x43c>
 8015136:	ed9d 6b02 	vldr	d6, [sp, #8]
 801513a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801513e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015142:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015144:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015148:	2900      	cmp	r1, #0
 801514a:	f000 80b3 	beq.w	80152b4 <_dtoa_r+0x49c>
 801514e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015152:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801515a:	f140 80ab 	bpl.w	80152b4 <_dtoa_r+0x49c>
 801515e:	f1ba 0f00 	cmp.w	sl, #0
 8015162:	f000 80a7 	beq.w	80152b4 <_dtoa_r+0x49c>
 8015166:	f1bb 0f00 	cmp.w	fp, #0
 801516a:	dd30      	ble.n	80151ce <_dtoa_r+0x3b6>
 801516c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015170:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015174:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015178:	f108 31ff 	add.w	r1, r8, #4294967295
 801517c:	9105      	str	r1, [sp, #20]
 801517e:	3201      	adds	r2, #1
 8015180:	465c      	mov	r4, fp
 8015182:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015186:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801518a:	ee07 2a90 	vmov	s15, r2
 801518e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015192:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015196:	ee15 2a90 	vmov	r2, s11
 801519a:	ec51 0b15 	vmov	r0, r1, d5
 801519e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80151a2:	2c00      	cmp	r4, #0
 80151a4:	f040 808a 	bne.w	80152bc <_dtoa_r+0x4a4>
 80151a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80151ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80151b0:	ec41 0b17 	vmov	d7, r0, r1
 80151b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151bc:	f300 826a 	bgt.w	8015694 <_dtoa_r+0x87c>
 80151c0:	eeb1 7b47 	vneg.f64	d7, d7
 80151c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151cc:	d423      	bmi.n	8015216 <_dtoa_r+0x3fe>
 80151ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 80151d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80151d4:	2a00      	cmp	r2, #0
 80151d6:	f2c0 8129 	blt.w	801542c <_dtoa_r+0x614>
 80151da:	f1b8 0f0e 	cmp.w	r8, #14
 80151de:	f300 8125 	bgt.w	801542c <_dtoa_r+0x614>
 80151e2:	4b90      	ldr	r3, [pc, #576]	@ (8015424 <_dtoa_r+0x60c>)
 80151e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80151e8:	ed93 6b00 	vldr	d6, [r3]
 80151ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f280 80c8 	bge.w	8015384 <_dtoa_r+0x56c>
 80151f4:	f1ba 0f00 	cmp.w	sl, #0
 80151f8:	f300 80c4 	bgt.w	8015384 <_dtoa_r+0x56c>
 80151fc:	d10b      	bne.n	8015216 <_dtoa_r+0x3fe>
 80151fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015202:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015206:	ed9d 7b02 	vldr	d7, [sp, #8]
 801520a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015212:	f2c0 823c 	blt.w	801568e <_dtoa_r+0x876>
 8015216:	2400      	movs	r4, #0
 8015218:	4625      	mov	r5, r4
 801521a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801521c:	43db      	mvns	r3, r3
 801521e:	9305      	str	r3, [sp, #20]
 8015220:	463e      	mov	r6, r7
 8015222:	f04f 0800 	mov.w	r8, #0
 8015226:	4621      	mov	r1, r4
 8015228:	4648      	mov	r0, r9
 801522a:	f000 fc93 	bl	8015b54 <_Bfree>
 801522e:	2d00      	cmp	r5, #0
 8015230:	f000 80a2 	beq.w	8015378 <_dtoa_r+0x560>
 8015234:	f1b8 0f00 	cmp.w	r8, #0
 8015238:	d005      	beq.n	8015246 <_dtoa_r+0x42e>
 801523a:	45a8      	cmp	r8, r5
 801523c:	d003      	beq.n	8015246 <_dtoa_r+0x42e>
 801523e:	4641      	mov	r1, r8
 8015240:	4648      	mov	r0, r9
 8015242:	f000 fc87 	bl	8015b54 <_Bfree>
 8015246:	4629      	mov	r1, r5
 8015248:	4648      	mov	r0, r9
 801524a:	f000 fc83 	bl	8015b54 <_Bfree>
 801524e:	e093      	b.n	8015378 <_dtoa_r+0x560>
 8015250:	2202      	movs	r2, #2
 8015252:	e76c      	b.n	801512e <_dtoa_r+0x316>
 8015254:	07cc      	lsls	r4, r1, #31
 8015256:	d504      	bpl.n	8015262 <_dtoa_r+0x44a>
 8015258:	ed90 6b00 	vldr	d6, [r0]
 801525c:	3201      	adds	r2, #1
 801525e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015262:	1049      	asrs	r1, r1, #1
 8015264:	3008      	adds	r0, #8
 8015266:	e763      	b.n	8015130 <_dtoa_r+0x318>
 8015268:	d022      	beq.n	80152b0 <_dtoa_r+0x498>
 801526a:	f1c8 0100 	rsb	r1, r8, #0
 801526e:	4a6d      	ldr	r2, [pc, #436]	@ (8015424 <_dtoa_r+0x60c>)
 8015270:	f001 000f 	and.w	r0, r1, #15
 8015274:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015278:	ed92 7b00 	vldr	d7, [r2]
 801527c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015280:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015284:	4868      	ldr	r0, [pc, #416]	@ (8015428 <_dtoa_r+0x610>)
 8015286:	1109      	asrs	r1, r1, #4
 8015288:	2400      	movs	r4, #0
 801528a:	2202      	movs	r2, #2
 801528c:	b929      	cbnz	r1, 801529a <_dtoa_r+0x482>
 801528e:	2c00      	cmp	r4, #0
 8015290:	f43f af57 	beq.w	8015142 <_dtoa_r+0x32a>
 8015294:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015298:	e753      	b.n	8015142 <_dtoa_r+0x32a>
 801529a:	07ce      	lsls	r6, r1, #31
 801529c:	d505      	bpl.n	80152aa <_dtoa_r+0x492>
 801529e:	ed90 6b00 	vldr	d6, [r0]
 80152a2:	3201      	adds	r2, #1
 80152a4:	2401      	movs	r4, #1
 80152a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80152aa:	1049      	asrs	r1, r1, #1
 80152ac:	3008      	adds	r0, #8
 80152ae:	e7ed      	b.n	801528c <_dtoa_r+0x474>
 80152b0:	2202      	movs	r2, #2
 80152b2:	e746      	b.n	8015142 <_dtoa_r+0x32a>
 80152b4:	f8cd 8014 	str.w	r8, [sp, #20]
 80152b8:	4654      	mov	r4, sl
 80152ba:	e762      	b.n	8015182 <_dtoa_r+0x36a>
 80152bc:	4a59      	ldr	r2, [pc, #356]	@ (8015424 <_dtoa_r+0x60c>)
 80152be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80152c2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80152c6:	9a08      	ldr	r2, [sp, #32]
 80152c8:	ec41 0b17 	vmov	d7, r0, r1
 80152cc:	443c      	add	r4, r7
 80152ce:	b34a      	cbz	r2, 8015324 <_dtoa_r+0x50c>
 80152d0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80152d4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80152d8:	463e      	mov	r6, r7
 80152da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80152de:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80152e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80152e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80152ea:	ee14 2a90 	vmov	r2, s9
 80152ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80152f2:	3230      	adds	r2, #48	@ 0x30
 80152f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80152f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80152fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015300:	f806 2b01 	strb.w	r2, [r6], #1
 8015304:	d438      	bmi.n	8015378 <_dtoa_r+0x560>
 8015306:	ee32 5b46 	vsub.f64	d5, d2, d6
 801530a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801530e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015312:	d46e      	bmi.n	80153f2 <_dtoa_r+0x5da>
 8015314:	42a6      	cmp	r6, r4
 8015316:	f43f af5a 	beq.w	80151ce <_dtoa_r+0x3b6>
 801531a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801531e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015322:	e7e0      	b.n	80152e6 <_dtoa_r+0x4ce>
 8015324:	4621      	mov	r1, r4
 8015326:	463e      	mov	r6, r7
 8015328:	ee27 7b04 	vmul.f64	d7, d7, d4
 801532c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015330:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015334:	ee14 2a90 	vmov	r2, s9
 8015338:	3230      	adds	r2, #48	@ 0x30
 801533a:	f806 2b01 	strb.w	r2, [r6], #1
 801533e:	42a6      	cmp	r6, r4
 8015340:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015344:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015348:	d119      	bne.n	801537e <_dtoa_r+0x566>
 801534a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801534e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015352:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801535a:	dc4a      	bgt.n	80153f2 <_dtoa_r+0x5da>
 801535c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015360:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015368:	f57f af31 	bpl.w	80151ce <_dtoa_r+0x3b6>
 801536c:	460e      	mov	r6, r1
 801536e:	3901      	subs	r1, #1
 8015370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015374:	2b30      	cmp	r3, #48	@ 0x30
 8015376:	d0f9      	beq.n	801536c <_dtoa_r+0x554>
 8015378:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801537c:	e027      	b.n	80153ce <_dtoa_r+0x5b6>
 801537e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015382:	e7d5      	b.n	8015330 <_dtoa_r+0x518>
 8015384:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015388:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801538c:	463e      	mov	r6, r7
 801538e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015392:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015396:	ee15 3a10 	vmov	r3, s10
 801539a:	3330      	adds	r3, #48	@ 0x30
 801539c:	f806 3b01 	strb.w	r3, [r6], #1
 80153a0:	1bf3      	subs	r3, r6, r7
 80153a2:	459a      	cmp	sl, r3
 80153a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80153a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80153ac:	d132      	bne.n	8015414 <_dtoa_r+0x5fc>
 80153ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80153b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ba:	dc18      	bgt.n	80153ee <_dtoa_r+0x5d6>
 80153bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80153c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c4:	d103      	bne.n	80153ce <_dtoa_r+0x5b6>
 80153c6:	ee15 3a10 	vmov	r3, s10
 80153ca:	07db      	lsls	r3, r3, #31
 80153cc:	d40f      	bmi.n	80153ee <_dtoa_r+0x5d6>
 80153ce:	9901      	ldr	r1, [sp, #4]
 80153d0:	4648      	mov	r0, r9
 80153d2:	f000 fbbf 	bl	8015b54 <_Bfree>
 80153d6:	2300      	movs	r3, #0
 80153d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80153da:	7033      	strb	r3, [r6, #0]
 80153dc:	f108 0301 	add.w	r3, r8, #1
 80153e0:	6013      	str	r3, [r2, #0]
 80153e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	f000 824b 	beq.w	8015880 <_dtoa_r+0xa68>
 80153ea:	601e      	str	r6, [r3, #0]
 80153ec:	e248      	b.n	8015880 <_dtoa_r+0xa68>
 80153ee:	f8cd 8014 	str.w	r8, [sp, #20]
 80153f2:	4633      	mov	r3, r6
 80153f4:	461e      	mov	r6, r3
 80153f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153fa:	2a39      	cmp	r2, #57	@ 0x39
 80153fc:	d106      	bne.n	801540c <_dtoa_r+0x5f4>
 80153fe:	429f      	cmp	r7, r3
 8015400:	d1f8      	bne.n	80153f4 <_dtoa_r+0x5dc>
 8015402:	9a05      	ldr	r2, [sp, #20]
 8015404:	3201      	adds	r2, #1
 8015406:	9205      	str	r2, [sp, #20]
 8015408:	2230      	movs	r2, #48	@ 0x30
 801540a:	703a      	strb	r2, [r7, #0]
 801540c:	781a      	ldrb	r2, [r3, #0]
 801540e:	3201      	adds	r2, #1
 8015410:	701a      	strb	r2, [r3, #0]
 8015412:	e7b1      	b.n	8015378 <_dtoa_r+0x560>
 8015414:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015418:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801541c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015420:	d1b5      	bne.n	801538e <_dtoa_r+0x576>
 8015422:	e7d4      	b.n	80153ce <_dtoa_r+0x5b6>
 8015424:	08018468 	.word	0x08018468
 8015428:	08018440 	.word	0x08018440
 801542c:	9908      	ldr	r1, [sp, #32]
 801542e:	2900      	cmp	r1, #0
 8015430:	f000 80e9 	beq.w	8015606 <_dtoa_r+0x7ee>
 8015434:	9907      	ldr	r1, [sp, #28]
 8015436:	2901      	cmp	r1, #1
 8015438:	f300 80cb 	bgt.w	80155d2 <_dtoa_r+0x7ba>
 801543c:	2d00      	cmp	r5, #0
 801543e:	f000 80c4 	beq.w	80155ca <_dtoa_r+0x7b2>
 8015442:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015446:	9e04      	ldr	r6, [sp, #16]
 8015448:	461c      	mov	r4, r3
 801544a:	9305      	str	r3, [sp, #20]
 801544c:	9b04      	ldr	r3, [sp, #16]
 801544e:	4413      	add	r3, r2
 8015450:	9304      	str	r3, [sp, #16]
 8015452:	9b06      	ldr	r3, [sp, #24]
 8015454:	2101      	movs	r1, #1
 8015456:	4413      	add	r3, r2
 8015458:	4648      	mov	r0, r9
 801545a:	9306      	str	r3, [sp, #24]
 801545c:	f000 fc2e 	bl	8015cbc <__i2b>
 8015460:	9b05      	ldr	r3, [sp, #20]
 8015462:	4605      	mov	r5, r0
 8015464:	b166      	cbz	r6, 8015480 <_dtoa_r+0x668>
 8015466:	9a06      	ldr	r2, [sp, #24]
 8015468:	2a00      	cmp	r2, #0
 801546a:	dd09      	ble.n	8015480 <_dtoa_r+0x668>
 801546c:	42b2      	cmp	r2, r6
 801546e:	9904      	ldr	r1, [sp, #16]
 8015470:	bfa8      	it	ge
 8015472:	4632      	movge	r2, r6
 8015474:	1a89      	subs	r1, r1, r2
 8015476:	9104      	str	r1, [sp, #16]
 8015478:	9906      	ldr	r1, [sp, #24]
 801547a:	1ab6      	subs	r6, r6, r2
 801547c:	1a8a      	subs	r2, r1, r2
 801547e:	9206      	str	r2, [sp, #24]
 8015480:	b30b      	cbz	r3, 80154c6 <_dtoa_r+0x6ae>
 8015482:	9a08      	ldr	r2, [sp, #32]
 8015484:	2a00      	cmp	r2, #0
 8015486:	f000 80c5 	beq.w	8015614 <_dtoa_r+0x7fc>
 801548a:	2c00      	cmp	r4, #0
 801548c:	f000 80bf 	beq.w	801560e <_dtoa_r+0x7f6>
 8015490:	4629      	mov	r1, r5
 8015492:	4622      	mov	r2, r4
 8015494:	4648      	mov	r0, r9
 8015496:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015498:	f000 fcc8 	bl	8015e2c <__pow5mult>
 801549c:	9a01      	ldr	r2, [sp, #4]
 801549e:	4601      	mov	r1, r0
 80154a0:	4605      	mov	r5, r0
 80154a2:	4648      	mov	r0, r9
 80154a4:	f000 fc20 	bl	8015ce8 <__multiply>
 80154a8:	9901      	ldr	r1, [sp, #4]
 80154aa:	9005      	str	r0, [sp, #20]
 80154ac:	4648      	mov	r0, r9
 80154ae:	f000 fb51 	bl	8015b54 <_Bfree>
 80154b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154b4:	1b1b      	subs	r3, r3, r4
 80154b6:	f000 80b0 	beq.w	801561a <_dtoa_r+0x802>
 80154ba:	9905      	ldr	r1, [sp, #20]
 80154bc:	461a      	mov	r2, r3
 80154be:	4648      	mov	r0, r9
 80154c0:	f000 fcb4 	bl	8015e2c <__pow5mult>
 80154c4:	9001      	str	r0, [sp, #4]
 80154c6:	2101      	movs	r1, #1
 80154c8:	4648      	mov	r0, r9
 80154ca:	f000 fbf7 	bl	8015cbc <__i2b>
 80154ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154d0:	4604      	mov	r4, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	f000 81da 	beq.w	801588c <_dtoa_r+0xa74>
 80154d8:	461a      	mov	r2, r3
 80154da:	4601      	mov	r1, r0
 80154dc:	4648      	mov	r0, r9
 80154de:	f000 fca5 	bl	8015e2c <__pow5mult>
 80154e2:	9b07      	ldr	r3, [sp, #28]
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	4604      	mov	r4, r0
 80154e8:	f300 80a0 	bgt.w	801562c <_dtoa_r+0x814>
 80154ec:	9b02      	ldr	r3, [sp, #8]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	f040 8096 	bne.w	8015620 <_dtoa_r+0x808>
 80154f4:	9b03      	ldr	r3, [sp, #12]
 80154f6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80154fa:	2a00      	cmp	r2, #0
 80154fc:	f040 8092 	bne.w	8015624 <_dtoa_r+0x80c>
 8015500:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015504:	0d12      	lsrs	r2, r2, #20
 8015506:	0512      	lsls	r2, r2, #20
 8015508:	2a00      	cmp	r2, #0
 801550a:	f000 808d 	beq.w	8015628 <_dtoa_r+0x810>
 801550e:	9b04      	ldr	r3, [sp, #16]
 8015510:	3301      	adds	r3, #1
 8015512:	9304      	str	r3, [sp, #16]
 8015514:	9b06      	ldr	r3, [sp, #24]
 8015516:	3301      	adds	r3, #1
 8015518:	9306      	str	r3, [sp, #24]
 801551a:	2301      	movs	r3, #1
 801551c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801551e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015520:	2b00      	cmp	r3, #0
 8015522:	f000 81b9 	beq.w	8015898 <_dtoa_r+0xa80>
 8015526:	6922      	ldr	r2, [r4, #16]
 8015528:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801552c:	6910      	ldr	r0, [r2, #16]
 801552e:	f000 fb79 	bl	8015c24 <__hi0bits>
 8015532:	f1c0 0020 	rsb	r0, r0, #32
 8015536:	9b06      	ldr	r3, [sp, #24]
 8015538:	4418      	add	r0, r3
 801553a:	f010 001f 	ands.w	r0, r0, #31
 801553e:	f000 8081 	beq.w	8015644 <_dtoa_r+0x82c>
 8015542:	f1c0 0220 	rsb	r2, r0, #32
 8015546:	2a04      	cmp	r2, #4
 8015548:	dd73      	ble.n	8015632 <_dtoa_r+0x81a>
 801554a:	9b04      	ldr	r3, [sp, #16]
 801554c:	f1c0 001c 	rsb	r0, r0, #28
 8015550:	4403      	add	r3, r0
 8015552:	9304      	str	r3, [sp, #16]
 8015554:	9b06      	ldr	r3, [sp, #24]
 8015556:	4406      	add	r6, r0
 8015558:	4403      	add	r3, r0
 801555a:	9306      	str	r3, [sp, #24]
 801555c:	9b04      	ldr	r3, [sp, #16]
 801555e:	2b00      	cmp	r3, #0
 8015560:	dd05      	ble.n	801556e <_dtoa_r+0x756>
 8015562:	9901      	ldr	r1, [sp, #4]
 8015564:	461a      	mov	r2, r3
 8015566:	4648      	mov	r0, r9
 8015568:	f000 fcba 	bl	8015ee0 <__lshift>
 801556c:	9001      	str	r0, [sp, #4]
 801556e:	9b06      	ldr	r3, [sp, #24]
 8015570:	2b00      	cmp	r3, #0
 8015572:	dd05      	ble.n	8015580 <_dtoa_r+0x768>
 8015574:	4621      	mov	r1, r4
 8015576:	461a      	mov	r2, r3
 8015578:	4648      	mov	r0, r9
 801557a:	f000 fcb1 	bl	8015ee0 <__lshift>
 801557e:	4604      	mov	r4, r0
 8015580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015582:	2b00      	cmp	r3, #0
 8015584:	d060      	beq.n	8015648 <_dtoa_r+0x830>
 8015586:	9801      	ldr	r0, [sp, #4]
 8015588:	4621      	mov	r1, r4
 801558a:	f000 fd15 	bl	8015fb8 <__mcmp>
 801558e:	2800      	cmp	r0, #0
 8015590:	da5a      	bge.n	8015648 <_dtoa_r+0x830>
 8015592:	f108 33ff 	add.w	r3, r8, #4294967295
 8015596:	9305      	str	r3, [sp, #20]
 8015598:	9901      	ldr	r1, [sp, #4]
 801559a:	2300      	movs	r3, #0
 801559c:	220a      	movs	r2, #10
 801559e:	4648      	mov	r0, r9
 80155a0:	f000 fafa 	bl	8015b98 <__multadd>
 80155a4:	9b08      	ldr	r3, [sp, #32]
 80155a6:	9001      	str	r0, [sp, #4]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	f000 8177 	beq.w	801589c <_dtoa_r+0xa84>
 80155ae:	4629      	mov	r1, r5
 80155b0:	2300      	movs	r3, #0
 80155b2:	220a      	movs	r2, #10
 80155b4:	4648      	mov	r0, r9
 80155b6:	f000 faef 	bl	8015b98 <__multadd>
 80155ba:	f1bb 0f00 	cmp.w	fp, #0
 80155be:	4605      	mov	r5, r0
 80155c0:	dc6e      	bgt.n	80156a0 <_dtoa_r+0x888>
 80155c2:	9b07      	ldr	r3, [sp, #28]
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	dc48      	bgt.n	801565a <_dtoa_r+0x842>
 80155c8:	e06a      	b.n	80156a0 <_dtoa_r+0x888>
 80155ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80155cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80155d0:	e739      	b.n	8015446 <_dtoa_r+0x62e>
 80155d2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80155d6:	42a3      	cmp	r3, r4
 80155d8:	db07      	blt.n	80155ea <_dtoa_r+0x7d2>
 80155da:	f1ba 0f00 	cmp.w	sl, #0
 80155de:	eba3 0404 	sub.w	r4, r3, r4
 80155e2:	db0b      	blt.n	80155fc <_dtoa_r+0x7e4>
 80155e4:	9e04      	ldr	r6, [sp, #16]
 80155e6:	4652      	mov	r2, sl
 80155e8:	e72f      	b.n	801544a <_dtoa_r+0x632>
 80155ea:	1ae2      	subs	r2, r4, r3
 80155ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155ee:	9e04      	ldr	r6, [sp, #16]
 80155f0:	4413      	add	r3, r2
 80155f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80155f4:	4652      	mov	r2, sl
 80155f6:	4623      	mov	r3, r4
 80155f8:	2400      	movs	r4, #0
 80155fa:	e726      	b.n	801544a <_dtoa_r+0x632>
 80155fc:	9a04      	ldr	r2, [sp, #16]
 80155fe:	eba2 060a 	sub.w	r6, r2, sl
 8015602:	2200      	movs	r2, #0
 8015604:	e721      	b.n	801544a <_dtoa_r+0x632>
 8015606:	9e04      	ldr	r6, [sp, #16]
 8015608:	9d08      	ldr	r5, [sp, #32]
 801560a:	461c      	mov	r4, r3
 801560c:	e72a      	b.n	8015464 <_dtoa_r+0x64c>
 801560e:	9a01      	ldr	r2, [sp, #4]
 8015610:	9205      	str	r2, [sp, #20]
 8015612:	e752      	b.n	80154ba <_dtoa_r+0x6a2>
 8015614:	9901      	ldr	r1, [sp, #4]
 8015616:	461a      	mov	r2, r3
 8015618:	e751      	b.n	80154be <_dtoa_r+0x6a6>
 801561a:	9b05      	ldr	r3, [sp, #20]
 801561c:	9301      	str	r3, [sp, #4]
 801561e:	e752      	b.n	80154c6 <_dtoa_r+0x6ae>
 8015620:	2300      	movs	r3, #0
 8015622:	e77b      	b.n	801551c <_dtoa_r+0x704>
 8015624:	9b02      	ldr	r3, [sp, #8]
 8015626:	e779      	b.n	801551c <_dtoa_r+0x704>
 8015628:	920b      	str	r2, [sp, #44]	@ 0x2c
 801562a:	e778      	b.n	801551e <_dtoa_r+0x706>
 801562c:	2300      	movs	r3, #0
 801562e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015630:	e779      	b.n	8015526 <_dtoa_r+0x70e>
 8015632:	d093      	beq.n	801555c <_dtoa_r+0x744>
 8015634:	9b04      	ldr	r3, [sp, #16]
 8015636:	321c      	adds	r2, #28
 8015638:	4413      	add	r3, r2
 801563a:	9304      	str	r3, [sp, #16]
 801563c:	9b06      	ldr	r3, [sp, #24]
 801563e:	4416      	add	r6, r2
 8015640:	4413      	add	r3, r2
 8015642:	e78a      	b.n	801555a <_dtoa_r+0x742>
 8015644:	4602      	mov	r2, r0
 8015646:	e7f5      	b.n	8015634 <_dtoa_r+0x81c>
 8015648:	f1ba 0f00 	cmp.w	sl, #0
 801564c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015650:	46d3      	mov	fp, sl
 8015652:	dc21      	bgt.n	8015698 <_dtoa_r+0x880>
 8015654:	9b07      	ldr	r3, [sp, #28]
 8015656:	2b02      	cmp	r3, #2
 8015658:	dd1e      	ble.n	8015698 <_dtoa_r+0x880>
 801565a:	f1bb 0f00 	cmp.w	fp, #0
 801565e:	f47f addc 	bne.w	801521a <_dtoa_r+0x402>
 8015662:	4621      	mov	r1, r4
 8015664:	465b      	mov	r3, fp
 8015666:	2205      	movs	r2, #5
 8015668:	4648      	mov	r0, r9
 801566a:	f000 fa95 	bl	8015b98 <__multadd>
 801566e:	4601      	mov	r1, r0
 8015670:	4604      	mov	r4, r0
 8015672:	9801      	ldr	r0, [sp, #4]
 8015674:	f000 fca0 	bl	8015fb8 <__mcmp>
 8015678:	2800      	cmp	r0, #0
 801567a:	f77f adce 	ble.w	801521a <_dtoa_r+0x402>
 801567e:	463e      	mov	r6, r7
 8015680:	2331      	movs	r3, #49	@ 0x31
 8015682:	f806 3b01 	strb.w	r3, [r6], #1
 8015686:	9b05      	ldr	r3, [sp, #20]
 8015688:	3301      	adds	r3, #1
 801568a:	9305      	str	r3, [sp, #20]
 801568c:	e5c9      	b.n	8015222 <_dtoa_r+0x40a>
 801568e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015692:	4654      	mov	r4, sl
 8015694:	4625      	mov	r5, r4
 8015696:	e7f2      	b.n	801567e <_dtoa_r+0x866>
 8015698:	9b08      	ldr	r3, [sp, #32]
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 8102 	beq.w	80158a4 <_dtoa_r+0xa8c>
 80156a0:	2e00      	cmp	r6, #0
 80156a2:	dd05      	ble.n	80156b0 <_dtoa_r+0x898>
 80156a4:	4629      	mov	r1, r5
 80156a6:	4632      	mov	r2, r6
 80156a8:	4648      	mov	r0, r9
 80156aa:	f000 fc19 	bl	8015ee0 <__lshift>
 80156ae:	4605      	mov	r5, r0
 80156b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d058      	beq.n	8015768 <_dtoa_r+0x950>
 80156b6:	6869      	ldr	r1, [r5, #4]
 80156b8:	4648      	mov	r0, r9
 80156ba:	f000 fa0b 	bl	8015ad4 <_Balloc>
 80156be:	4606      	mov	r6, r0
 80156c0:	b928      	cbnz	r0, 80156ce <_dtoa_r+0x8b6>
 80156c2:	4b82      	ldr	r3, [pc, #520]	@ (80158cc <_dtoa_r+0xab4>)
 80156c4:	4602      	mov	r2, r0
 80156c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80156ca:	f7ff bbbe 	b.w	8014e4a <_dtoa_r+0x32>
 80156ce:	692a      	ldr	r2, [r5, #16]
 80156d0:	3202      	adds	r2, #2
 80156d2:	0092      	lsls	r2, r2, #2
 80156d4:	f105 010c 	add.w	r1, r5, #12
 80156d8:	300c      	adds	r0, #12
 80156da:	f7ff fb04 	bl	8014ce6 <memcpy>
 80156de:	2201      	movs	r2, #1
 80156e0:	4631      	mov	r1, r6
 80156e2:	4648      	mov	r0, r9
 80156e4:	f000 fbfc 	bl	8015ee0 <__lshift>
 80156e8:	1c7b      	adds	r3, r7, #1
 80156ea:	9304      	str	r3, [sp, #16]
 80156ec:	eb07 030b 	add.w	r3, r7, fp
 80156f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80156f2:	9b02      	ldr	r3, [sp, #8]
 80156f4:	f003 0301 	and.w	r3, r3, #1
 80156f8:	46a8      	mov	r8, r5
 80156fa:	9308      	str	r3, [sp, #32]
 80156fc:	4605      	mov	r5, r0
 80156fe:	9b04      	ldr	r3, [sp, #16]
 8015700:	9801      	ldr	r0, [sp, #4]
 8015702:	4621      	mov	r1, r4
 8015704:	f103 3bff 	add.w	fp, r3, #4294967295
 8015708:	f7ff fafb 	bl	8014d02 <quorem>
 801570c:	4641      	mov	r1, r8
 801570e:	9002      	str	r0, [sp, #8]
 8015710:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015714:	9801      	ldr	r0, [sp, #4]
 8015716:	f000 fc4f 	bl	8015fb8 <__mcmp>
 801571a:	462a      	mov	r2, r5
 801571c:	9006      	str	r0, [sp, #24]
 801571e:	4621      	mov	r1, r4
 8015720:	4648      	mov	r0, r9
 8015722:	f000 fc65 	bl	8015ff0 <__mdiff>
 8015726:	68c2      	ldr	r2, [r0, #12]
 8015728:	4606      	mov	r6, r0
 801572a:	b9fa      	cbnz	r2, 801576c <_dtoa_r+0x954>
 801572c:	4601      	mov	r1, r0
 801572e:	9801      	ldr	r0, [sp, #4]
 8015730:	f000 fc42 	bl	8015fb8 <__mcmp>
 8015734:	4602      	mov	r2, r0
 8015736:	4631      	mov	r1, r6
 8015738:	4648      	mov	r0, r9
 801573a:	920a      	str	r2, [sp, #40]	@ 0x28
 801573c:	f000 fa0a 	bl	8015b54 <_Bfree>
 8015740:	9b07      	ldr	r3, [sp, #28]
 8015742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015744:	9e04      	ldr	r6, [sp, #16]
 8015746:	ea42 0103 	orr.w	r1, r2, r3
 801574a:	9b08      	ldr	r3, [sp, #32]
 801574c:	4319      	orrs	r1, r3
 801574e:	d10f      	bne.n	8015770 <_dtoa_r+0x958>
 8015750:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015754:	d028      	beq.n	80157a8 <_dtoa_r+0x990>
 8015756:	9b06      	ldr	r3, [sp, #24]
 8015758:	2b00      	cmp	r3, #0
 801575a:	dd02      	ble.n	8015762 <_dtoa_r+0x94a>
 801575c:	9b02      	ldr	r3, [sp, #8]
 801575e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015762:	f88b a000 	strb.w	sl, [fp]
 8015766:	e55e      	b.n	8015226 <_dtoa_r+0x40e>
 8015768:	4628      	mov	r0, r5
 801576a:	e7bd      	b.n	80156e8 <_dtoa_r+0x8d0>
 801576c:	2201      	movs	r2, #1
 801576e:	e7e2      	b.n	8015736 <_dtoa_r+0x91e>
 8015770:	9b06      	ldr	r3, [sp, #24]
 8015772:	2b00      	cmp	r3, #0
 8015774:	db04      	blt.n	8015780 <_dtoa_r+0x968>
 8015776:	9907      	ldr	r1, [sp, #28]
 8015778:	430b      	orrs	r3, r1
 801577a:	9908      	ldr	r1, [sp, #32]
 801577c:	430b      	orrs	r3, r1
 801577e:	d120      	bne.n	80157c2 <_dtoa_r+0x9aa>
 8015780:	2a00      	cmp	r2, #0
 8015782:	ddee      	ble.n	8015762 <_dtoa_r+0x94a>
 8015784:	9901      	ldr	r1, [sp, #4]
 8015786:	2201      	movs	r2, #1
 8015788:	4648      	mov	r0, r9
 801578a:	f000 fba9 	bl	8015ee0 <__lshift>
 801578e:	4621      	mov	r1, r4
 8015790:	9001      	str	r0, [sp, #4]
 8015792:	f000 fc11 	bl	8015fb8 <__mcmp>
 8015796:	2800      	cmp	r0, #0
 8015798:	dc03      	bgt.n	80157a2 <_dtoa_r+0x98a>
 801579a:	d1e2      	bne.n	8015762 <_dtoa_r+0x94a>
 801579c:	f01a 0f01 	tst.w	sl, #1
 80157a0:	d0df      	beq.n	8015762 <_dtoa_r+0x94a>
 80157a2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80157a6:	d1d9      	bne.n	801575c <_dtoa_r+0x944>
 80157a8:	2339      	movs	r3, #57	@ 0x39
 80157aa:	f88b 3000 	strb.w	r3, [fp]
 80157ae:	4633      	mov	r3, r6
 80157b0:	461e      	mov	r6, r3
 80157b2:	3b01      	subs	r3, #1
 80157b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80157b8:	2a39      	cmp	r2, #57	@ 0x39
 80157ba:	d052      	beq.n	8015862 <_dtoa_r+0xa4a>
 80157bc:	3201      	adds	r2, #1
 80157be:	701a      	strb	r2, [r3, #0]
 80157c0:	e531      	b.n	8015226 <_dtoa_r+0x40e>
 80157c2:	2a00      	cmp	r2, #0
 80157c4:	dd07      	ble.n	80157d6 <_dtoa_r+0x9be>
 80157c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80157ca:	d0ed      	beq.n	80157a8 <_dtoa_r+0x990>
 80157cc:	f10a 0301 	add.w	r3, sl, #1
 80157d0:	f88b 3000 	strb.w	r3, [fp]
 80157d4:	e527      	b.n	8015226 <_dtoa_r+0x40e>
 80157d6:	9b04      	ldr	r3, [sp, #16]
 80157d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80157da:	f803 ac01 	strb.w	sl, [r3, #-1]
 80157de:	4293      	cmp	r3, r2
 80157e0:	d029      	beq.n	8015836 <_dtoa_r+0xa1e>
 80157e2:	9901      	ldr	r1, [sp, #4]
 80157e4:	2300      	movs	r3, #0
 80157e6:	220a      	movs	r2, #10
 80157e8:	4648      	mov	r0, r9
 80157ea:	f000 f9d5 	bl	8015b98 <__multadd>
 80157ee:	45a8      	cmp	r8, r5
 80157f0:	9001      	str	r0, [sp, #4]
 80157f2:	f04f 0300 	mov.w	r3, #0
 80157f6:	f04f 020a 	mov.w	r2, #10
 80157fa:	4641      	mov	r1, r8
 80157fc:	4648      	mov	r0, r9
 80157fe:	d107      	bne.n	8015810 <_dtoa_r+0x9f8>
 8015800:	f000 f9ca 	bl	8015b98 <__multadd>
 8015804:	4680      	mov	r8, r0
 8015806:	4605      	mov	r5, r0
 8015808:	9b04      	ldr	r3, [sp, #16]
 801580a:	3301      	adds	r3, #1
 801580c:	9304      	str	r3, [sp, #16]
 801580e:	e776      	b.n	80156fe <_dtoa_r+0x8e6>
 8015810:	f000 f9c2 	bl	8015b98 <__multadd>
 8015814:	4629      	mov	r1, r5
 8015816:	4680      	mov	r8, r0
 8015818:	2300      	movs	r3, #0
 801581a:	220a      	movs	r2, #10
 801581c:	4648      	mov	r0, r9
 801581e:	f000 f9bb 	bl	8015b98 <__multadd>
 8015822:	4605      	mov	r5, r0
 8015824:	e7f0      	b.n	8015808 <_dtoa_r+0x9f0>
 8015826:	f1bb 0f00 	cmp.w	fp, #0
 801582a:	bfcc      	ite	gt
 801582c:	465e      	movgt	r6, fp
 801582e:	2601      	movle	r6, #1
 8015830:	443e      	add	r6, r7
 8015832:	f04f 0800 	mov.w	r8, #0
 8015836:	9901      	ldr	r1, [sp, #4]
 8015838:	2201      	movs	r2, #1
 801583a:	4648      	mov	r0, r9
 801583c:	f000 fb50 	bl	8015ee0 <__lshift>
 8015840:	4621      	mov	r1, r4
 8015842:	9001      	str	r0, [sp, #4]
 8015844:	f000 fbb8 	bl	8015fb8 <__mcmp>
 8015848:	2800      	cmp	r0, #0
 801584a:	dcb0      	bgt.n	80157ae <_dtoa_r+0x996>
 801584c:	d102      	bne.n	8015854 <_dtoa_r+0xa3c>
 801584e:	f01a 0f01 	tst.w	sl, #1
 8015852:	d1ac      	bne.n	80157ae <_dtoa_r+0x996>
 8015854:	4633      	mov	r3, r6
 8015856:	461e      	mov	r6, r3
 8015858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801585c:	2a30      	cmp	r2, #48	@ 0x30
 801585e:	d0fa      	beq.n	8015856 <_dtoa_r+0xa3e>
 8015860:	e4e1      	b.n	8015226 <_dtoa_r+0x40e>
 8015862:	429f      	cmp	r7, r3
 8015864:	d1a4      	bne.n	80157b0 <_dtoa_r+0x998>
 8015866:	9b05      	ldr	r3, [sp, #20]
 8015868:	3301      	adds	r3, #1
 801586a:	9305      	str	r3, [sp, #20]
 801586c:	2331      	movs	r3, #49	@ 0x31
 801586e:	703b      	strb	r3, [r7, #0]
 8015870:	e4d9      	b.n	8015226 <_dtoa_r+0x40e>
 8015872:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015874:	4f16      	ldr	r7, [pc, #88]	@ (80158d0 <_dtoa_r+0xab8>)
 8015876:	b11b      	cbz	r3, 8015880 <_dtoa_r+0xa68>
 8015878:	f107 0308 	add.w	r3, r7, #8
 801587c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801587e:	6013      	str	r3, [r2, #0]
 8015880:	4638      	mov	r0, r7
 8015882:	b011      	add	sp, #68	@ 0x44
 8015884:	ecbd 8b02 	vpop	{d8}
 8015888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801588c:	9b07      	ldr	r3, [sp, #28]
 801588e:	2b01      	cmp	r3, #1
 8015890:	f77f ae2c 	ble.w	80154ec <_dtoa_r+0x6d4>
 8015894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015896:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015898:	2001      	movs	r0, #1
 801589a:	e64c      	b.n	8015536 <_dtoa_r+0x71e>
 801589c:	f1bb 0f00 	cmp.w	fp, #0
 80158a0:	f77f aed8 	ble.w	8015654 <_dtoa_r+0x83c>
 80158a4:	463e      	mov	r6, r7
 80158a6:	9801      	ldr	r0, [sp, #4]
 80158a8:	4621      	mov	r1, r4
 80158aa:	f7ff fa2a 	bl	8014d02 <quorem>
 80158ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80158b2:	f806 ab01 	strb.w	sl, [r6], #1
 80158b6:	1bf2      	subs	r2, r6, r7
 80158b8:	4593      	cmp	fp, r2
 80158ba:	ddb4      	ble.n	8015826 <_dtoa_r+0xa0e>
 80158bc:	9901      	ldr	r1, [sp, #4]
 80158be:	2300      	movs	r3, #0
 80158c0:	220a      	movs	r2, #10
 80158c2:	4648      	mov	r0, r9
 80158c4:	f000 f968 	bl	8015b98 <__multadd>
 80158c8:	9001      	str	r0, [sp, #4]
 80158ca:	e7ec      	b.n	80158a6 <_dtoa_r+0xa8e>
 80158cc:	08018370 	.word	0x08018370
 80158d0:	080182f4 	.word	0x080182f4

080158d4 <_free_r>:
 80158d4:	b538      	push	{r3, r4, r5, lr}
 80158d6:	4605      	mov	r5, r0
 80158d8:	2900      	cmp	r1, #0
 80158da:	d041      	beq.n	8015960 <_free_r+0x8c>
 80158dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158e0:	1f0c      	subs	r4, r1, #4
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	bfb8      	it	lt
 80158e6:	18e4      	addlt	r4, r4, r3
 80158e8:	f000 f8e8 	bl	8015abc <__malloc_lock>
 80158ec:	4a1d      	ldr	r2, [pc, #116]	@ (8015964 <_free_r+0x90>)
 80158ee:	6813      	ldr	r3, [r2, #0]
 80158f0:	b933      	cbnz	r3, 8015900 <_free_r+0x2c>
 80158f2:	6063      	str	r3, [r4, #4]
 80158f4:	6014      	str	r4, [r2, #0]
 80158f6:	4628      	mov	r0, r5
 80158f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158fc:	f000 b8e4 	b.w	8015ac8 <__malloc_unlock>
 8015900:	42a3      	cmp	r3, r4
 8015902:	d908      	bls.n	8015916 <_free_r+0x42>
 8015904:	6820      	ldr	r0, [r4, #0]
 8015906:	1821      	adds	r1, r4, r0
 8015908:	428b      	cmp	r3, r1
 801590a:	bf01      	itttt	eq
 801590c:	6819      	ldreq	r1, [r3, #0]
 801590e:	685b      	ldreq	r3, [r3, #4]
 8015910:	1809      	addeq	r1, r1, r0
 8015912:	6021      	streq	r1, [r4, #0]
 8015914:	e7ed      	b.n	80158f2 <_free_r+0x1e>
 8015916:	461a      	mov	r2, r3
 8015918:	685b      	ldr	r3, [r3, #4]
 801591a:	b10b      	cbz	r3, 8015920 <_free_r+0x4c>
 801591c:	42a3      	cmp	r3, r4
 801591e:	d9fa      	bls.n	8015916 <_free_r+0x42>
 8015920:	6811      	ldr	r1, [r2, #0]
 8015922:	1850      	adds	r0, r2, r1
 8015924:	42a0      	cmp	r0, r4
 8015926:	d10b      	bne.n	8015940 <_free_r+0x6c>
 8015928:	6820      	ldr	r0, [r4, #0]
 801592a:	4401      	add	r1, r0
 801592c:	1850      	adds	r0, r2, r1
 801592e:	4283      	cmp	r3, r0
 8015930:	6011      	str	r1, [r2, #0]
 8015932:	d1e0      	bne.n	80158f6 <_free_r+0x22>
 8015934:	6818      	ldr	r0, [r3, #0]
 8015936:	685b      	ldr	r3, [r3, #4]
 8015938:	6053      	str	r3, [r2, #4]
 801593a:	4408      	add	r0, r1
 801593c:	6010      	str	r0, [r2, #0]
 801593e:	e7da      	b.n	80158f6 <_free_r+0x22>
 8015940:	d902      	bls.n	8015948 <_free_r+0x74>
 8015942:	230c      	movs	r3, #12
 8015944:	602b      	str	r3, [r5, #0]
 8015946:	e7d6      	b.n	80158f6 <_free_r+0x22>
 8015948:	6820      	ldr	r0, [r4, #0]
 801594a:	1821      	adds	r1, r4, r0
 801594c:	428b      	cmp	r3, r1
 801594e:	bf04      	itt	eq
 8015950:	6819      	ldreq	r1, [r3, #0]
 8015952:	685b      	ldreq	r3, [r3, #4]
 8015954:	6063      	str	r3, [r4, #4]
 8015956:	bf04      	itt	eq
 8015958:	1809      	addeq	r1, r1, r0
 801595a:	6021      	streq	r1, [r4, #0]
 801595c:	6054      	str	r4, [r2, #4]
 801595e:	e7ca      	b.n	80158f6 <_free_r+0x22>
 8015960:	bd38      	pop	{r3, r4, r5, pc}
 8015962:	bf00      	nop
 8015964:	240013c0 	.word	0x240013c0

08015968 <malloc>:
 8015968:	4b02      	ldr	r3, [pc, #8]	@ (8015974 <malloc+0xc>)
 801596a:	4601      	mov	r1, r0
 801596c:	6818      	ldr	r0, [r3, #0]
 801596e:	f000 b825 	b.w	80159bc <_malloc_r>
 8015972:	bf00      	nop
 8015974:	24000074 	.word	0x24000074

08015978 <sbrk_aligned>:
 8015978:	b570      	push	{r4, r5, r6, lr}
 801597a:	4e0f      	ldr	r6, [pc, #60]	@ (80159b8 <sbrk_aligned+0x40>)
 801597c:	460c      	mov	r4, r1
 801597e:	6831      	ldr	r1, [r6, #0]
 8015980:	4605      	mov	r5, r0
 8015982:	b911      	cbnz	r1, 801598a <sbrk_aligned+0x12>
 8015984:	f000 fe92 	bl	80166ac <_sbrk_r>
 8015988:	6030      	str	r0, [r6, #0]
 801598a:	4621      	mov	r1, r4
 801598c:	4628      	mov	r0, r5
 801598e:	f000 fe8d 	bl	80166ac <_sbrk_r>
 8015992:	1c43      	adds	r3, r0, #1
 8015994:	d103      	bne.n	801599e <sbrk_aligned+0x26>
 8015996:	f04f 34ff 	mov.w	r4, #4294967295
 801599a:	4620      	mov	r0, r4
 801599c:	bd70      	pop	{r4, r5, r6, pc}
 801599e:	1cc4      	adds	r4, r0, #3
 80159a0:	f024 0403 	bic.w	r4, r4, #3
 80159a4:	42a0      	cmp	r0, r4
 80159a6:	d0f8      	beq.n	801599a <sbrk_aligned+0x22>
 80159a8:	1a21      	subs	r1, r4, r0
 80159aa:	4628      	mov	r0, r5
 80159ac:	f000 fe7e 	bl	80166ac <_sbrk_r>
 80159b0:	3001      	adds	r0, #1
 80159b2:	d1f2      	bne.n	801599a <sbrk_aligned+0x22>
 80159b4:	e7ef      	b.n	8015996 <sbrk_aligned+0x1e>
 80159b6:	bf00      	nop
 80159b8:	240013bc 	.word	0x240013bc

080159bc <_malloc_r>:
 80159bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159c0:	1ccd      	adds	r5, r1, #3
 80159c2:	f025 0503 	bic.w	r5, r5, #3
 80159c6:	3508      	adds	r5, #8
 80159c8:	2d0c      	cmp	r5, #12
 80159ca:	bf38      	it	cc
 80159cc:	250c      	movcc	r5, #12
 80159ce:	2d00      	cmp	r5, #0
 80159d0:	4606      	mov	r6, r0
 80159d2:	db01      	blt.n	80159d8 <_malloc_r+0x1c>
 80159d4:	42a9      	cmp	r1, r5
 80159d6:	d904      	bls.n	80159e2 <_malloc_r+0x26>
 80159d8:	230c      	movs	r3, #12
 80159da:	6033      	str	r3, [r6, #0]
 80159dc:	2000      	movs	r0, #0
 80159de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015ab8 <_malloc_r+0xfc>
 80159e6:	f000 f869 	bl	8015abc <__malloc_lock>
 80159ea:	f8d8 3000 	ldr.w	r3, [r8]
 80159ee:	461c      	mov	r4, r3
 80159f0:	bb44      	cbnz	r4, 8015a44 <_malloc_r+0x88>
 80159f2:	4629      	mov	r1, r5
 80159f4:	4630      	mov	r0, r6
 80159f6:	f7ff ffbf 	bl	8015978 <sbrk_aligned>
 80159fa:	1c43      	adds	r3, r0, #1
 80159fc:	4604      	mov	r4, r0
 80159fe:	d158      	bne.n	8015ab2 <_malloc_r+0xf6>
 8015a00:	f8d8 4000 	ldr.w	r4, [r8]
 8015a04:	4627      	mov	r7, r4
 8015a06:	2f00      	cmp	r7, #0
 8015a08:	d143      	bne.n	8015a92 <_malloc_r+0xd6>
 8015a0a:	2c00      	cmp	r4, #0
 8015a0c:	d04b      	beq.n	8015aa6 <_malloc_r+0xea>
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	4639      	mov	r1, r7
 8015a12:	4630      	mov	r0, r6
 8015a14:	eb04 0903 	add.w	r9, r4, r3
 8015a18:	f000 fe48 	bl	80166ac <_sbrk_r>
 8015a1c:	4581      	cmp	r9, r0
 8015a1e:	d142      	bne.n	8015aa6 <_malloc_r+0xea>
 8015a20:	6821      	ldr	r1, [r4, #0]
 8015a22:	1a6d      	subs	r5, r5, r1
 8015a24:	4629      	mov	r1, r5
 8015a26:	4630      	mov	r0, r6
 8015a28:	f7ff ffa6 	bl	8015978 <sbrk_aligned>
 8015a2c:	3001      	adds	r0, #1
 8015a2e:	d03a      	beq.n	8015aa6 <_malloc_r+0xea>
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	442b      	add	r3, r5
 8015a34:	6023      	str	r3, [r4, #0]
 8015a36:	f8d8 3000 	ldr.w	r3, [r8]
 8015a3a:	685a      	ldr	r2, [r3, #4]
 8015a3c:	bb62      	cbnz	r2, 8015a98 <_malloc_r+0xdc>
 8015a3e:	f8c8 7000 	str.w	r7, [r8]
 8015a42:	e00f      	b.n	8015a64 <_malloc_r+0xa8>
 8015a44:	6822      	ldr	r2, [r4, #0]
 8015a46:	1b52      	subs	r2, r2, r5
 8015a48:	d420      	bmi.n	8015a8c <_malloc_r+0xd0>
 8015a4a:	2a0b      	cmp	r2, #11
 8015a4c:	d917      	bls.n	8015a7e <_malloc_r+0xc2>
 8015a4e:	1961      	adds	r1, r4, r5
 8015a50:	42a3      	cmp	r3, r4
 8015a52:	6025      	str	r5, [r4, #0]
 8015a54:	bf18      	it	ne
 8015a56:	6059      	strne	r1, [r3, #4]
 8015a58:	6863      	ldr	r3, [r4, #4]
 8015a5a:	bf08      	it	eq
 8015a5c:	f8c8 1000 	streq.w	r1, [r8]
 8015a60:	5162      	str	r2, [r4, r5]
 8015a62:	604b      	str	r3, [r1, #4]
 8015a64:	4630      	mov	r0, r6
 8015a66:	f000 f82f 	bl	8015ac8 <__malloc_unlock>
 8015a6a:	f104 000b 	add.w	r0, r4, #11
 8015a6e:	1d23      	adds	r3, r4, #4
 8015a70:	f020 0007 	bic.w	r0, r0, #7
 8015a74:	1ac2      	subs	r2, r0, r3
 8015a76:	bf1c      	itt	ne
 8015a78:	1a1b      	subne	r3, r3, r0
 8015a7a:	50a3      	strne	r3, [r4, r2]
 8015a7c:	e7af      	b.n	80159de <_malloc_r+0x22>
 8015a7e:	6862      	ldr	r2, [r4, #4]
 8015a80:	42a3      	cmp	r3, r4
 8015a82:	bf0c      	ite	eq
 8015a84:	f8c8 2000 	streq.w	r2, [r8]
 8015a88:	605a      	strne	r2, [r3, #4]
 8015a8a:	e7eb      	b.n	8015a64 <_malloc_r+0xa8>
 8015a8c:	4623      	mov	r3, r4
 8015a8e:	6864      	ldr	r4, [r4, #4]
 8015a90:	e7ae      	b.n	80159f0 <_malloc_r+0x34>
 8015a92:	463c      	mov	r4, r7
 8015a94:	687f      	ldr	r7, [r7, #4]
 8015a96:	e7b6      	b.n	8015a06 <_malloc_r+0x4a>
 8015a98:	461a      	mov	r2, r3
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	42a3      	cmp	r3, r4
 8015a9e:	d1fb      	bne.n	8015a98 <_malloc_r+0xdc>
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	6053      	str	r3, [r2, #4]
 8015aa4:	e7de      	b.n	8015a64 <_malloc_r+0xa8>
 8015aa6:	230c      	movs	r3, #12
 8015aa8:	6033      	str	r3, [r6, #0]
 8015aaa:	4630      	mov	r0, r6
 8015aac:	f000 f80c 	bl	8015ac8 <__malloc_unlock>
 8015ab0:	e794      	b.n	80159dc <_malloc_r+0x20>
 8015ab2:	6005      	str	r5, [r0, #0]
 8015ab4:	e7d6      	b.n	8015a64 <_malloc_r+0xa8>
 8015ab6:	bf00      	nop
 8015ab8:	240013c0 	.word	0x240013c0

08015abc <__malloc_lock>:
 8015abc:	4801      	ldr	r0, [pc, #4]	@ (8015ac4 <__malloc_lock+0x8>)
 8015abe:	f7ff b910 	b.w	8014ce2 <__retarget_lock_acquire_recursive>
 8015ac2:	bf00      	nop
 8015ac4:	240013b8 	.word	0x240013b8

08015ac8 <__malloc_unlock>:
 8015ac8:	4801      	ldr	r0, [pc, #4]	@ (8015ad0 <__malloc_unlock+0x8>)
 8015aca:	f7ff b90b 	b.w	8014ce4 <__retarget_lock_release_recursive>
 8015ace:	bf00      	nop
 8015ad0:	240013b8 	.word	0x240013b8

08015ad4 <_Balloc>:
 8015ad4:	b570      	push	{r4, r5, r6, lr}
 8015ad6:	69c6      	ldr	r6, [r0, #28]
 8015ad8:	4604      	mov	r4, r0
 8015ada:	460d      	mov	r5, r1
 8015adc:	b976      	cbnz	r6, 8015afc <_Balloc+0x28>
 8015ade:	2010      	movs	r0, #16
 8015ae0:	f7ff ff42 	bl	8015968 <malloc>
 8015ae4:	4602      	mov	r2, r0
 8015ae6:	61e0      	str	r0, [r4, #28]
 8015ae8:	b920      	cbnz	r0, 8015af4 <_Balloc+0x20>
 8015aea:	4b18      	ldr	r3, [pc, #96]	@ (8015b4c <_Balloc+0x78>)
 8015aec:	4818      	ldr	r0, [pc, #96]	@ (8015b50 <_Balloc+0x7c>)
 8015aee:	216b      	movs	r1, #107	@ 0x6b
 8015af0:	f000 fdec 	bl	80166cc <__assert_func>
 8015af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015af8:	6006      	str	r6, [r0, #0]
 8015afa:	60c6      	str	r6, [r0, #12]
 8015afc:	69e6      	ldr	r6, [r4, #28]
 8015afe:	68f3      	ldr	r3, [r6, #12]
 8015b00:	b183      	cbz	r3, 8015b24 <_Balloc+0x50>
 8015b02:	69e3      	ldr	r3, [r4, #28]
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b0a:	b9b8      	cbnz	r0, 8015b3c <_Balloc+0x68>
 8015b0c:	2101      	movs	r1, #1
 8015b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8015b12:	1d72      	adds	r2, r6, #5
 8015b14:	0092      	lsls	r2, r2, #2
 8015b16:	4620      	mov	r0, r4
 8015b18:	f000 fdf6 	bl	8016708 <_calloc_r>
 8015b1c:	b160      	cbz	r0, 8015b38 <_Balloc+0x64>
 8015b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b22:	e00e      	b.n	8015b42 <_Balloc+0x6e>
 8015b24:	2221      	movs	r2, #33	@ 0x21
 8015b26:	2104      	movs	r1, #4
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f000 fded 	bl	8016708 <_calloc_r>
 8015b2e:	69e3      	ldr	r3, [r4, #28]
 8015b30:	60f0      	str	r0, [r6, #12]
 8015b32:	68db      	ldr	r3, [r3, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1e4      	bne.n	8015b02 <_Balloc+0x2e>
 8015b38:	2000      	movs	r0, #0
 8015b3a:	bd70      	pop	{r4, r5, r6, pc}
 8015b3c:	6802      	ldr	r2, [r0, #0]
 8015b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b42:	2300      	movs	r3, #0
 8015b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b48:	e7f7      	b.n	8015b3a <_Balloc+0x66>
 8015b4a:	bf00      	nop
 8015b4c:	08018301 	.word	0x08018301
 8015b50:	08018381 	.word	0x08018381

08015b54 <_Bfree>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	69c6      	ldr	r6, [r0, #28]
 8015b58:	4605      	mov	r5, r0
 8015b5a:	460c      	mov	r4, r1
 8015b5c:	b976      	cbnz	r6, 8015b7c <_Bfree+0x28>
 8015b5e:	2010      	movs	r0, #16
 8015b60:	f7ff ff02 	bl	8015968 <malloc>
 8015b64:	4602      	mov	r2, r0
 8015b66:	61e8      	str	r0, [r5, #28]
 8015b68:	b920      	cbnz	r0, 8015b74 <_Bfree+0x20>
 8015b6a:	4b09      	ldr	r3, [pc, #36]	@ (8015b90 <_Bfree+0x3c>)
 8015b6c:	4809      	ldr	r0, [pc, #36]	@ (8015b94 <_Bfree+0x40>)
 8015b6e:	218f      	movs	r1, #143	@ 0x8f
 8015b70:	f000 fdac 	bl	80166cc <__assert_func>
 8015b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b78:	6006      	str	r6, [r0, #0]
 8015b7a:	60c6      	str	r6, [r0, #12]
 8015b7c:	b13c      	cbz	r4, 8015b8e <_Bfree+0x3a>
 8015b7e:	69eb      	ldr	r3, [r5, #28]
 8015b80:	6862      	ldr	r2, [r4, #4]
 8015b82:	68db      	ldr	r3, [r3, #12]
 8015b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b88:	6021      	str	r1, [r4, #0]
 8015b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b8e:	bd70      	pop	{r4, r5, r6, pc}
 8015b90:	08018301 	.word	0x08018301
 8015b94:	08018381 	.word	0x08018381

08015b98 <__multadd>:
 8015b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9c:	690d      	ldr	r5, [r1, #16]
 8015b9e:	4607      	mov	r7, r0
 8015ba0:	460c      	mov	r4, r1
 8015ba2:	461e      	mov	r6, r3
 8015ba4:	f101 0c14 	add.w	ip, r1, #20
 8015ba8:	2000      	movs	r0, #0
 8015baa:	f8dc 3000 	ldr.w	r3, [ip]
 8015bae:	b299      	uxth	r1, r3
 8015bb0:	fb02 6101 	mla	r1, r2, r1, r6
 8015bb4:	0c1e      	lsrs	r6, r3, #16
 8015bb6:	0c0b      	lsrs	r3, r1, #16
 8015bb8:	fb02 3306 	mla	r3, r2, r6, r3
 8015bbc:	b289      	uxth	r1, r1
 8015bbe:	3001      	adds	r0, #1
 8015bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015bc4:	4285      	cmp	r5, r0
 8015bc6:	f84c 1b04 	str.w	r1, [ip], #4
 8015bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015bce:	dcec      	bgt.n	8015baa <__multadd+0x12>
 8015bd0:	b30e      	cbz	r6, 8015c16 <__multadd+0x7e>
 8015bd2:	68a3      	ldr	r3, [r4, #8]
 8015bd4:	42ab      	cmp	r3, r5
 8015bd6:	dc19      	bgt.n	8015c0c <__multadd+0x74>
 8015bd8:	6861      	ldr	r1, [r4, #4]
 8015bda:	4638      	mov	r0, r7
 8015bdc:	3101      	adds	r1, #1
 8015bde:	f7ff ff79 	bl	8015ad4 <_Balloc>
 8015be2:	4680      	mov	r8, r0
 8015be4:	b928      	cbnz	r0, 8015bf2 <__multadd+0x5a>
 8015be6:	4602      	mov	r2, r0
 8015be8:	4b0c      	ldr	r3, [pc, #48]	@ (8015c1c <__multadd+0x84>)
 8015bea:	480d      	ldr	r0, [pc, #52]	@ (8015c20 <__multadd+0x88>)
 8015bec:	21ba      	movs	r1, #186	@ 0xba
 8015bee:	f000 fd6d 	bl	80166cc <__assert_func>
 8015bf2:	6922      	ldr	r2, [r4, #16]
 8015bf4:	3202      	adds	r2, #2
 8015bf6:	f104 010c 	add.w	r1, r4, #12
 8015bfa:	0092      	lsls	r2, r2, #2
 8015bfc:	300c      	adds	r0, #12
 8015bfe:	f7ff f872 	bl	8014ce6 <memcpy>
 8015c02:	4621      	mov	r1, r4
 8015c04:	4638      	mov	r0, r7
 8015c06:	f7ff ffa5 	bl	8015b54 <_Bfree>
 8015c0a:	4644      	mov	r4, r8
 8015c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c10:	3501      	adds	r5, #1
 8015c12:	615e      	str	r6, [r3, #20]
 8015c14:	6125      	str	r5, [r4, #16]
 8015c16:	4620      	mov	r0, r4
 8015c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c1c:	08018370 	.word	0x08018370
 8015c20:	08018381 	.word	0x08018381

08015c24 <__hi0bits>:
 8015c24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015c28:	4603      	mov	r3, r0
 8015c2a:	bf36      	itet	cc
 8015c2c:	0403      	lslcc	r3, r0, #16
 8015c2e:	2000      	movcs	r0, #0
 8015c30:	2010      	movcc	r0, #16
 8015c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015c36:	bf3c      	itt	cc
 8015c38:	021b      	lslcc	r3, r3, #8
 8015c3a:	3008      	addcc	r0, #8
 8015c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015c40:	bf3c      	itt	cc
 8015c42:	011b      	lslcc	r3, r3, #4
 8015c44:	3004      	addcc	r0, #4
 8015c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015c4a:	bf3c      	itt	cc
 8015c4c:	009b      	lslcc	r3, r3, #2
 8015c4e:	3002      	addcc	r0, #2
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	db05      	blt.n	8015c60 <__hi0bits+0x3c>
 8015c54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015c58:	f100 0001 	add.w	r0, r0, #1
 8015c5c:	bf08      	it	eq
 8015c5e:	2020      	moveq	r0, #32
 8015c60:	4770      	bx	lr

08015c62 <__lo0bits>:
 8015c62:	6803      	ldr	r3, [r0, #0]
 8015c64:	4602      	mov	r2, r0
 8015c66:	f013 0007 	ands.w	r0, r3, #7
 8015c6a:	d00b      	beq.n	8015c84 <__lo0bits+0x22>
 8015c6c:	07d9      	lsls	r1, r3, #31
 8015c6e:	d421      	bmi.n	8015cb4 <__lo0bits+0x52>
 8015c70:	0798      	lsls	r0, r3, #30
 8015c72:	bf49      	itett	mi
 8015c74:	085b      	lsrmi	r3, r3, #1
 8015c76:	089b      	lsrpl	r3, r3, #2
 8015c78:	2001      	movmi	r0, #1
 8015c7a:	6013      	strmi	r3, [r2, #0]
 8015c7c:	bf5c      	itt	pl
 8015c7e:	6013      	strpl	r3, [r2, #0]
 8015c80:	2002      	movpl	r0, #2
 8015c82:	4770      	bx	lr
 8015c84:	b299      	uxth	r1, r3
 8015c86:	b909      	cbnz	r1, 8015c8c <__lo0bits+0x2a>
 8015c88:	0c1b      	lsrs	r3, r3, #16
 8015c8a:	2010      	movs	r0, #16
 8015c8c:	b2d9      	uxtb	r1, r3
 8015c8e:	b909      	cbnz	r1, 8015c94 <__lo0bits+0x32>
 8015c90:	3008      	adds	r0, #8
 8015c92:	0a1b      	lsrs	r3, r3, #8
 8015c94:	0719      	lsls	r1, r3, #28
 8015c96:	bf04      	itt	eq
 8015c98:	091b      	lsreq	r3, r3, #4
 8015c9a:	3004      	addeq	r0, #4
 8015c9c:	0799      	lsls	r1, r3, #30
 8015c9e:	bf04      	itt	eq
 8015ca0:	089b      	lsreq	r3, r3, #2
 8015ca2:	3002      	addeq	r0, #2
 8015ca4:	07d9      	lsls	r1, r3, #31
 8015ca6:	d403      	bmi.n	8015cb0 <__lo0bits+0x4e>
 8015ca8:	085b      	lsrs	r3, r3, #1
 8015caa:	f100 0001 	add.w	r0, r0, #1
 8015cae:	d003      	beq.n	8015cb8 <__lo0bits+0x56>
 8015cb0:	6013      	str	r3, [r2, #0]
 8015cb2:	4770      	bx	lr
 8015cb4:	2000      	movs	r0, #0
 8015cb6:	4770      	bx	lr
 8015cb8:	2020      	movs	r0, #32
 8015cba:	4770      	bx	lr

08015cbc <__i2b>:
 8015cbc:	b510      	push	{r4, lr}
 8015cbe:	460c      	mov	r4, r1
 8015cc0:	2101      	movs	r1, #1
 8015cc2:	f7ff ff07 	bl	8015ad4 <_Balloc>
 8015cc6:	4602      	mov	r2, r0
 8015cc8:	b928      	cbnz	r0, 8015cd6 <__i2b+0x1a>
 8015cca:	4b05      	ldr	r3, [pc, #20]	@ (8015ce0 <__i2b+0x24>)
 8015ccc:	4805      	ldr	r0, [pc, #20]	@ (8015ce4 <__i2b+0x28>)
 8015cce:	f240 1145 	movw	r1, #325	@ 0x145
 8015cd2:	f000 fcfb 	bl	80166cc <__assert_func>
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	6144      	str	r4, [r0, #20]
 8015cda:	6103      	str	r3, [r0, #16]
 8015cdc:	bd10      	pop	{r4, pc}
 8015cde:	bf00      	nop
 8015ce0:	08018370 	.word	0x08018370
 8015ce4:	08018381 	.word	0x08018381

08015ce8 <__multiply>:
 8015ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cec:	4617      	mov	r7, r2
 8015cee:	690a      	ldr	r2, [r1, #16]
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	bfa8      	it	ge
 8015cf6:	463b      	movge	r3, r7
 8015cf8:	4689      	mov	r9, r1
 8015cfa:	bfa4      	itt	ge
 8015cfc:	460f      	movge	r7, r1
 8015cfe:	4699      	movge	r9, r3
 8015d00:	693d      	ldr	r5, [r7, #16]
 8015d02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	6879      	ldr	r1, [r7, #4]
 8015d0a:	eb05 060a 	add.w	r6, r5, sl
 8015d0e:	42b3      	cmp	r3, r6
 8015d10:	b085      	sub	sp, #20
 8015d12:	bfb8      	it	lt
 8015d14:	3101      	addlt	r1, #1
 8015d16:	f7ff fedd 	bl	8015ad4 <_Balloc>
 8015d1a:	b930      	cbnz	r0, 8015d2a <__multiply+0x42>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	4b41      	ldr	r3, [pc, #260]	@ (8015e24 <__multiply+0x13c>)
 8015d20:	4841      	ldr	r0, [pc, #260]	@ (8015e28 <__multiply+0x140>)
 8015d22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015d26:	f000 fcd1 	bl	80166cc <__assert_func>
 8015d2a:	f100 0414 	add.w	r4, r0, #20
 8015d2e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015d32:	4623      	mov	r3, r4
 8015d34:	2200      	movs	r2, #0
 8015d36:	4573      	cmp	r3, lr
 8015d38:	d320      	bcc.n	8015d7c <__multiply+0x94>
 8015d3a:	f107 0814 	add.w	r8, r7, #20
 8015d3e:	f109 0114 	add.w	r1, r9, #20
 8015d42:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015d46:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015d4a:	9302      	str	r3, [sp, #8]
 8015d4c:	1beb      	subs	r3, r5, r7
 8015d4e:	3b15      	subs	r3, #21
 8015d50:	f023 0303 	bic.w	r3, r3, #3
 8015d54:	3304      	adds	r3, #4
 8015d56:	3715      	adds	r7, #21
 8015d58:	42bd      	cmp	r5, r7
 8015d5a:	bf38      	it	cc
 8015d5c:	2304      	movcc	r3, #4
 8015d5e:	9301      	str	r3, [sp, #4]
 8015d60:	9b02      	ldr	r3, [sp, #8]
 8015d62:	9103      	str	r1, [sp, #12]
 8015d64:	428b      	cmp	r3, r1
 8015d66:	d80c      	bhi.n	8015d82 <__multiply+0x9a>
 8015d68:	2e00      	cmp	r6, #0
 8015d6a:	dd03      	ble.n	8015d74 <__multiply+0x8c>
 8015d6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d055      	beq.n	8015e20 <__multiply+0x138>
 8015d74:	6106      	str	r6, [r0, #16]
 8015d76:	b005      	add	sp, #20
 8015d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7c:	f843 2b04 	str.w	r2, [r3], #4
 8015d80:	e7d9      	b.n	8015d36 <__multiply+0x4e>
 8015d82:	f8b1 a000 	ldrh.w	sl, [r1]
 8015d86:	f1ba 0f00 	cmp.w	sl, #0
 8015d8a:	d01f      	beq.n	8015dcc <__multiply+0xe4>
 8015d8c:	46c4      	mov	ip, r8
 8015d8e:	46a1      	mov	r9, r4
 8015d90:	2700      	movs	r7, #0
 8015d92:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015d96:	f8d9 3000 	ldr.w	r3, [r9]
 8015d9a:	fa1f fb82 	uxth.w	fp, r2
 8015d9e:	b29b      	uxth	r3, r3
 8015da0:	fb0a 330b 	mla	r3, sl, fp, r3
 8015da4:	443b      	add	r3, r7
 8015da6:	f8d9 7000 	ldr.w	r7, [r9]
 8015daa:	0c12      	lsrs	r2, r2, #16
 8015dac:	0c3f      	lsrs	r7, r7, #16
 8015dae:	fb0a 7202 	mla	r2, sl, r2, r7
 8015db2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015dbc:	4565      	cmp	r5, ip
 8015dbe:	f849 3b04 	str.w	r3, [r9], #4
 8015dc2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015dc6:	d8e4      	bhi.n	8015d92 <__multiply+0xaa>
 8015dc8:	9b01      	ldr	r3, [sp, #4]
 8015dca:	50e7      	str	r7, [r4, r3]
 8015dcc:	9b03      	ldr	r3, [sp, #12]
 8015dce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015dd2:	3104      	adds	r1, #4
 8015dd4:	f1b9 0f00 	cmp.w	r9, #0
 8015dd8:	d020      	beq.n	8015e1c <__multiply+0x134>
 8015dda:	6823      	ldr	r3, [r4, #0]
 8015ddc:	4647      	mov	r7, r8
 8015dde:	46a4      	mov	ip, r4
 8015de0:	f04f 0a00 	mov.w	sl, #0
 8015de4:	f8b7 b000 	ldrh.w	fp, [r7]
 8015de8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015dec:	fb09 220b 	mla	r2, r9, fp, r2
 8015df0:	4452      	add	r2, sl
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015df8:	f84c 3b04 	str.w	r3, [ip], #4
 8015dfc:	f857 3b04 	ldr.w	r3, [r7], #4
 8015e00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e04:	f8bc 3000 	ldrh.w	r3, [ip]
 8015e08:	fb09 330a 	mla	r3, r9, sl, r3
 8015e0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015e10:	42bd      	cmp	r5, r7
 8015e12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e16:	d8e5      	bhi.n	8015de4 <__multiply+0xfc>
 8015e18:	9a01      	ldr	r2, [sp, #4]
 8015e1a:	50a3      	str	r3, [r4, r2]
 8015e1c:	3404      	adds	r4, #4
 8015e1e:	e79f      	b.n	8015d60 <__multiply+0x78>
 8015e20:	3e01      	subs	r6, #1
 8015e22:	e7a1      	b.n	8015d68 <__multiply+0x80>
 8015e24:	08018370 	.word	0x08018370
 8015e28:	08018381 	.word	0x08018381

08015e2c <__pow5mult>:
 8015e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e30:	4615      	mov	r5, r2
 8015e32:	f012 0203 	ands.w	r2, r2, #3
 8015e36:	4607      	mov	r7, r0
 8015e38:	460e      	mov	r6, r1
 8015e3a:	d007      	beq.n	8015e4c <__pow5mult+0x20>
 8015e3c:	4c25      	ldr	r4, [pc, #148]	@ (8015ed4 <__pow5mult+0xa8>)
 8015e3e:	3a01      	subs	r2, #1
 8015e40:	2300      	movs	r3, #0
 8015e42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e46:	f7ff fea7 	bl	8015b98 <__multadd>
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	10ad      	asrs	r5, r5, #2
 8015e4e:	d03d      	beq.n	8015ecc <__pow5mult+0xa0>
 8015e50:	69fc      	ldr	r4, [r7, #28]
 8015e52:	b97c      	cbnz	r4, 8015e74 <__pow5mult+0x48>
 8015e54:	2010      	movs	r0, #16
 8015e56:	f7ff fd87 	bl	8015968 <malloc>
 8015e5a:	4602      	mov	r2, r0
 8015e5c:	61f8      	str	r0, [r7, #28]
 8015e5e:	b928      	cbnz	r0, 8015e6c <__pow5mult+0x40>
 8015e60:	4b1d      	ldr	r3, [pc, #116]	@ (8015ed8 <__pow5mult+0xac>)
 8015e62:	481e      	ldr	r0, [pc, #120]	@ (8015edc <__pow5mult+0xb0>)
 8015e64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015e68:	f000 fc30 	bl	80166cc <__assert_func>
 8015e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e70:	6004      	str	r4, [r0, #0]
 8015e72:	60c4      	str	r4, [r0, #12]
 8015e74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015e78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e7c:	b94c      	cbnz	r4, 8015e92 <__pow5mult+0x66>
 8015e7e:	f240 2171 	movw	r1, #625	@ 0x271
 8015e82:	4638      	mov	r0, r7
 8015e84:	f7ff ff1a 	bl	8015cbc <__i2b>
 8015e88:	2300      	movs	r3, #0
 8015e8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e8e:	4604      	mov	r4, r0
 8015e90:	6003      	str	r3, [r0, #0]
 8015e92:	f04f 0900 	mov.w	r9, #0
 8015e96:	07eb      	lsls	r3, r5, #31
 8015e98:	d50a      	bpl.n	8015eb0 <__pow5mult+0x84>
 8015e9a:	4631      	mov	r1, r6
 8015e9c:	4622      	mov	r2, r4
 8015e9e:	4638      	mov	r0, r7
 8015ea0:	f7ff ff22 	bl	8015ce8 <__multiply>
 8015ea4:	4631      	mov	r1, r6
 8015ea6:	4680      	mov	r8, r0
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f7ff fe53 	bl	8015b54 <_Bfree>
 8015eae:	4646      	mov	r6, r8
 8015eb0:	106d      	asrs	r5, r5, #1
 8015eb2:	d00b      	beq.n	8015ecc <__pow5mult+0xa0>
 8015eb4:	6820      	ldr	r0, [r4, #0]
 8015eb6:	b938      	cbnz	r0, 8015ec8 <__pow5mult+0x9c>
 8015eb8:	4622      	mov	r2, r4
 8015eba:	4621      	mov	r1, r4
 8015ebc:	4638      	mov	r0, r7
 8015ebe:	f7ff ff13 	bl	8015ce8 <__multiply>
 8015ec2:	6020      	str	r0, [r4, #0]
 8015ec4:	f8c0 9000 	str.w	r9, [r0]
 8015ec8:	4604      	mov	r4, r0
 8015eca:	e7e4      	b.n	8015e96 <__pow5mult+0x6a>
 8015ecc:	4630      	mov	r0, r6
 8015ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ed2:	bf00      	nop
 8015ed4:	08018434 	.word	0x08018434
 8015ed8:	08018301 	.word	0x08018301
 8015edc:	08018381 	.word	0x08018381

08015ee0 <__lshift>:
 8015ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee4:	460c      	mov	r4, r1
 8015ee6:	6849      	ldr	r1, [r1, #4]
 8015ee8:	6923      	ldr	r3, [r4, #16]
 8015eea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015eee:	68a3      	ldr	r3, [r4, #8]
 8015ef0:	4607      	mov	r7, r0
 8015ef2:	4691      	mov	r9, r2
 8015ef4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015ef8:	f108 0601 	add.w	r6, r8, #1
 8015efc:	42b3      	cmp	r3, r6
 8015efe:	db0b      	blt.n	8015f18 <__lshift+0x38>
 8015f00:	4638      	mov	r0, r7
 8015f02:	f7ff fde7 	bl	8015ad4 <_Balloc>
 8015f06:	4605      	mov	r5, r0
 8015f08:	b948      	cbnz	r0, 8015f1e <__lshift+0x3e>
 8015f0a:	4602      	mov	r2, r0
 8015f0c:	4b28      	ldr	r3, [pc, #160]	@ (8015fb0 <__lshift+0xd0>)
 8015f0e:	4829      	ldr	r0, [pc, #164]	@ (8015fb4 <__lshift+0xd4>)
 8015f10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015f14:	f000 fbda 	bl	80166cc <__assert_func>
 8015f18:	3101      	adds	r1, #1
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	e7ee      	b.n	8015efc <__lshift+0x1c>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	f100 0114 	add.w	r1, r0, #20
 8015f24:	f100 0210 	add.w	r2, r0, #16
 8015f28:	4618      	mov	r0, r3
 8015f2a:	4553      	cmp	r3, sl
 8015f2c:	db33      	blt.n	8015f96 <__lshift+0xb6>
 8015f2e:	6920      	ldr	r0, [r4, #16]
 8015f30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f34:	f104 0314 	add.w	r3, r4, #20
 8015f38:	f019 091f 	ands.w	r9, r9, #31
 8015f3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015f44:	d02b      	beq.n	8015f9e <__lshift+0xbe>
 8015f46:	f1c9 0e20 	rsb	lr, r9, #32
 8015f4a:	468a      	mov	sl, r1
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	6818      	ldr	r0, [r3, #0]
 8015f50:	fa00 f009 	lsl.w	r0, r0, r9
 8015f54:	4310      	orrs	r0, r2
 8015f56:	f84a 0b04 	str.w	r0, [sl], #4
 8015f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f5e:	459c      	cmp	ip, r3
 8015f60:	fa22 f20e 	lsr.w	r2, r2, lr
 8015f64:	d8f3      	bhi.n	8015f4e <__lshift+0x6e>
 8015f66:	ebac 0304 	sub.w	r3, ip, r4
 8015f6a:	3b15      	subs	r3, #21
 8015f6c:	f023 0303 	bic.w	r3, r3, #3
 8015f70:	3304      	adds	r3, #4
 8015f72:	f104 0015 	add.w	r0, r4, #21
 8015f76:	4560      	cmp	r0, ip
 8015f78:	bf88      	it	hi
 8015f7a:	2304      	movhi	r3, #4
 8015f7c:	50ca      	str	r2, [r1, r3]
 8015f7e:	b10a      	cbz	r2, 8015f84 <__lshift+0xa4>
 8015f80:	f108 0602 	add.w	r6, r8, #2
 8015f84:	3e01      	subs	r6, #1
 8015f86:	4638      	mov	r0, r7
 8015f88:	612e      	str	r6, [r5, #16]
 8015f8a:	4621      	mov	r1, r4
 8015f8c:	f7ff fde2 	bl	8015b54 <_Bfree>
 8015f90:	4628      	mov	r0, r5
 8015f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f96:	f842 0f04 	str.w	r0, [r2, #4]!
 8015f9a:	3301      	adds	r3, #1
 8015f9c:	e7c5      	b.n	8015f2a <__lshift+0x4a>
 8015f9e:	3904      	subs	r1, #4
 8015fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fa4:	f841 2f04 	str.w	r2, [r1, #4]!
 8015fa8:	459c      	cmp	ip, r3
 8015faa:	d8f9      	bhi.n	8015fa0 <__lshift+0xc0>
 8015fac:	e7ea      	b.n	8015f84 <__lshift+0xa4>
 8015fae:	bf00      	nop
 8015fb0:	08018370 	.word	0x08018370
 8015fb4:	08018381 	.word	0x08018381

08015fb8 <__mcmp>:
 8015fb8:	690a      	ldr	r2, [r1, #16]
 8015fba:	4603      	mov	r3, r0
 8015fbc:	6900      	ldr	r0, [r0, #16]
 8015fbe:	1a80      	subs	r0, r0, r2
 8015fc0:	b530      	push	{r4, r5, lr}
 8015fc2:	d10e      	bne.n	8015fe2 <__mcmp+0x2a>
 8015fc4:	3314      	adds	r3, #20
 8015fc6:	3114      	adds	r1, #20
 8015fc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015fcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015fd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015fd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015fd8:	4295      	cmp	r5, r2
 8015fda:	d003      	beq.n	8015fe4 <__mcmp+0x2c>
 8015fdc:	d205      	bcs.n	8015fea <__mcmp+0x32>
 8015fde:	f04f 30ff 	mov.w	r0, #4294967295
 8015fe2:	bd30      	pop	{r4, r5, pc}
 8015fe4:	42a3      	cmp	r3, r4
 8015fe6:	d3f3      	bcc.n	8015fd0 <__mcmp+0x18>
 8015fe8:	e7fb      	b.n	8015fe2 <__mcmp+0x2a>
 8015fea:	2001      	movs	r0, #1
 8015fec:	e7f9      	b.n	8015fe2 <__mcmp+0x2a>
	...

08015ff0 <__mdiff>:
 8015ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff4:	4689      	mov	r9, r1
 8015ff6:	4606      	mov	r6, r0
 8015ff8:	4611      	mov	r1, r2
 8015ffa:	4648      	mov	r0, r9
 8015ffc:	4614      	mov	r4, r2
 8015ffe:	f7ff ffdb 	bl	8015fb8 <__mcmp>
 8016002:	1e05      	subs	r5, r0, #0
 8016004:	d112      	bne.n	801602c <__mdiff+0x3c>
 8016006:	4629      	mov	r1, r5
 8016008:	4630      	mov	r0, r6
 801600a:	f7ff fd63 	bl	8015ad4 <_Balloc>
 801600e:	4602      	mov	r2, r0
 8016010:	b928      	cbnz	r0, 801601e <__mdiff+0x2e>
 8016012:	4b3f      	ldr	r3, [pc, #252]	@ (8016110 <__mdiff+0x120>)
 8016014:	f240 2137 	movw	r1, #567	@ 0x237
 8016018:	483e      	ldr	r0, [pc, #248]	@ (8016114 <__mdiff+0x124>)
 801601a:	f000 fb57 	bl	80166cc <__assert_func>
 801601e:	2301      	movs	r3, #1
 8016020:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016024:	4610      	mov	r0, r2
 8016026:	b003      	add	sp, #12
 8016028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801602c:	bfbc      	itt	lt
 801602e:	464b      	movlt	r3, r9
 8016030:	46a1      	movlt	r9, r4
 8016032:	4630      	mov	r0, r6
 8016034:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016038:	bfba      	itte	lt
 801603a:	461c      	movlt	r4, r3
 801603c:	2501      	movlt	r5, #1
 801603e:	2500      	movge	r5, #0
 8016040:	f7ff fd48 	bl	8015ad4 <_Balloc>
 8016044:	4602      	mov	r2, r0
 8016046:	b918      	cbnz	r0, 8016050 <__mdiff+0x60>
 8016048:	4b31      	ldr	r3, [pc, #196]	@ (8016110 <__mdiff+0x120>)
 801604a:	f240 2145 	movw	r1, #581	@ 0x245
 801604e:	e7e3      	b.n	8016018 <__mdiff+0x28>
 8016050:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016054:	6926      	ldr	r6, [r4, #16]
 8016056:	60c5      	str	r5, [r0, #12]
 8016058:	f109 0310 	add.w	r3, r9, #16
 801605c:	f109 0514 	add.w	r5, r9, #20
 8016060:	f104 0e14 	add.w	lr, r4, #20
 8016064:	f100 0b14 	add.w	fp, r0, #20
 8016068:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801606c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016070:	9301      	str	r3, [sp, #4]
 8016072:	46d9      	mov	r9, fp
 8016074:	f04f 0c00 	mov.w	ip, #0
 8016078:	9b01      	ldr	r3, [sp, #4]
 801607a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801607e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016082:	9301      	str	r3, [sp, #4]
 8016084:	fa1f f38a 	uxth.w	r3, sl
 8016088:	4619      	mov	r1, r3
 801608a:	b283      	uxth	r3, r0
 801608c:	1acb      	subs	r3, r1, r3
 801608e:	0c00      	lsrs	r0, r0, #16
 8016090:	4463      	add	r3, ip
 8016092:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016096:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801609a:	b29b      	uxth	r3, r3
 801609c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80160a0:	4576      	cmp	r6, lr
 80160a2:	f849 3b04 	str.w	r3, [r9], #4
 80160a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80160aa:	d8e5      	bhi.n	8016078 <__mdiff+0x88>
 80160ac:	1b33      	subs	r3, r6, r4
 80160ae:	3b15      	subs	r3, #21
 80160b0:	f023 0303 	bic.w	r3, r3, #3
 80160b4:	3415      	adds	r4, #21
 80160b6:	3304      	adds	r3, #4
 80160b8:	42a6      	cmp	r6, r4
 80160ba:	bf38      	it	cc
 80160bc:	2304      	movcc	r3, #4
 80160be:	441d      	add	r5, r3
 80160c0:	445b      	add	r3, fp
 80160c2:	461e      	mov	r6, r3
 80160c4:	462c      	mov	r4, r5
 80160c6:	4544      	cmp	r4, r8
 80160c8:	d30e      	bcc.n	80160e8 <__mdiff+0xf8>
 80160ca:	f108 0103 	add.w	r1, r8, #3
 80160ce:	1b49      	subs	r1, r1, r5
 80160d0:	f021 0103 	bic.w	r1, r1, #3
 80160d4:	3d03      	subs	r5, #3
 80160d6:	45a8      	cmp	r8, r5
 80160d8:	bf38      	it	cc
 80160da:	2100      	movcc	r1, #0
 80160dc:	440b      	add	r3, r1
 80160de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80160e2:	b191      	cbz	r1, 801610a <__mdiff+0x11a>
 80160e4:	6117      	str	r7, [r2, #16]
 80160e6:	e79d      	b.n	8016024 <__mdiff+0x34>
 80160e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80160ec:	46e6      	mov	lr, ip
 80160ee:	0c08      	lsrs	r0, r1, #16
 80160f0:	fa1c fc81 	uxtah	ip, ip, r1
 80160f4:	4471      	add	r1, lr
 80160f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80160fa:	b289      	uxth	r1, r1
 80160fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016100:	f846 1b04 	str.w	r1, [r6], #4
 8016104:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016108:	e7dd      	b.n	80160c6 <__mdiff+0xd6>
 801610a:	3f01      	subs	r7, #1
 801610c:	e7e7      	b.n	80160de <__mdiff+0xee>
 801610e:	bf00      	nop
 8016110:	08018370 	.word	0x08018370
 8016114:	08018381 	.word	0x08018381

08016118 <__d2b>:
 8016118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801611c:	460f      	mov	r7, r1
 801611e:	2101      	movs	r1, #1
 8016120:	ec59 8b10 	vmov	r8, r9, d0
 8016124:	4616      	mov	r6, r2
 8016126:	f7ff fcd5 	bl	8015ad4 <_Balloc>
 801612a:	4604      	mov	r4, r0
 801612c:	b930      	cbnz	r0, 801613c <__d2b+0x24>
 801612e:	4602      	mov	r2, r0
 8016130:	4b23      	ldr	r3, [pc, #140]	@ (80161c0 <__d2b+0xa8>)
 8016132:	4824      	ldr	r0, [pc, #144]	@ (80161c4 <__d2b+0xac>)
 8016134:	f240 310f 	movw	r1, #783	@ 0x30f
 8016138:	f000 fac8 	bl	80166cc <__assert_func>
 801613c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016144:	b10d      	cbz	r5, 801614a <__d2b+0x32>
 8016146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	f1b8 0300 	subs.w	r3, r8, #0
 8016150:	d023      	beq.n	801619a <__d2b+0x82>
 8016152:	4668      	mov	r0, sp
 8016154:	9300      	str	r3, [sp, #0]
 8016156:	f7ff fd84 	bl	8015c62 <__lo0bits>
 801615a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801615e:	b1d0      	cbz	r0, 8016196 <__d2b+0x7e>
 8016160:	f1c0 0320 	rsb	r3, r0, #32
 8016164:	fa02 f303 	lsl.w	r3, r2, r3
 8016168:	430b      	orrs	r3, r1
 801616a:	40c2      	lsrs	r2, r0
 801616c:	6163      	str	r3, [r4, #20]
 801616e:	9201      	str	r2, [sp, #4]
 8016170:	9b01      	ldr	r3, [sp, #4]
 8016172:	61a3      	str	r3, [r4, #24]
 8016174:	2b00      	cmp	r3, #0
 8016176:	bf0c      	ite	eq
 8016178:	2201      	moveq	r2, #1
 801617a:	2202      	movne	r2, #2
 801617c:	6122      	str	r2, [r4, #16]
 801617e:	b1a5      	cbz	r5, 80161aa <__d2b+0x92>
 8016180:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016184:	4405      	add	r5, r0
 8016186:	603d      	str	r5, [r7, #0]
 8016188:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801618c:	6030      	str	r0, [r6, #0]
 801618e:	4620      	mov	r0, r4
 8016190:	b003      	add	sp, #12
 8016192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016196:	6161      	str	r1, [r4, #20]
 8016198:	e7ea      	b.n	8016170 <__d2b+0x58>
 801619a:	a801      	add	r0, sp, #4
 801619c:	f7ff fd61 	bl	8015c62 <__lo0bits>
 80161a0:	9b01      	ldr	r3, [sp, #4]
 80161a2:	6163      	str	r3, [r4, #20]
 80161a4:	3020      	adds	r0, #32
 80161a6:	2201      	movs	r2, #1
 80161a8:	e7e8      	b.n	801617c <__d2b+0x64>
 80161aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80161ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80161b2:	6038      	str	r0, [r7, #0]
 80161b4:	6918      	ldr	r0, [r3, #16]
 80161b6:	f7ff fd35 	bl	8015c24 <__hi0bits>
 80161ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161be:	e7e5      	b.n	801618c <__d2b+0x74>
 80161c0:	08018370 	.word	0x08018370
 80161c4:	08018381 	.word	0x08018381

080161c8 <__sfputc_r>:
 80161c8:	6893      	ldr	r3, [r2, #8]
 80161ca:	3b01      	subs	r3, #1
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	b410      	push	{r4}
 80161d0:	6093      	str	r3, [r2, #8]
 80161d2:	da08      	bge.n	80161e6 <__sfputc_r+0x1e>
 80161d4:	6994      	ldr	r4, [r2, #24]
 80161d6:	42a3      	cmp	r3, r4
 80161d8:	db01      	blt.n	80161de <__sfputc_r+0x16>
 80161da:	290a      	cmp	r1, #10
 80161dc:	d103      	bne.n	80161e6 <__sfputc_r+0x1e>
 80161de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161e2:	f7fe bc6c 	b.w	8014abe <__swbuf_r>
 80161e6:	6813      	ldr	r3, [r2, #0]
 80161e8:	1c58      	adds	r0, r3, #1
 80161ea:	6010      	str	r0, [r2, #0]
 80161ec:	7019      	strb	r1, [r3, #0]
 80161ee:	4608      	mov	r0, r1
 80161f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161f4:	4770      	bx	lr

080161f6 <__sfputs_r>:
 80161f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161f8:	4606      	mov	r6, r0
 80161fa:	460f      	mov	r7, r1
 80161fc:	4614      	mov	r4, r2
 80161fe:	18d5      	adds	r5, r2, r3
 8016200:	42ac      	cmp	r4, r5
 8016202:	d101      	bne.n	8016208 <__sfputs_r+0x12>
 8016204:	2000      	movs	r0, #0
 8016206:	e007      	b.n	8016218 <__sfputs_r+0x22>
 8016208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801620c:	463a      	mov	r2, r7
 801620e:	4630      	mov	r0, r6
 8016210:	f7ff ffda 	bl	80161c8 <__sfputc_r>
 8016214:	1c43      	adds	r3, r0, #1
 8016216:	d1f3      	bne.n	8016200 <__sfputs_r+0xa>
 8016218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801621c <_vfiprintf_r>:
 801621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016220:	460d      	mov	r5, r1
 8016222:	b09d      	sub	sp, #116	@ 0x74
 8016224:	4614      	mov	r4, r2
 8016226:	4698      	mov	r8, r3
 8016228:	4606      	mov	r6, r0
 801622a:	b118      	cbz	r0, 8016234 <_vfiprintf_r+0x18>
 801622c:	6a03      	ldr	r3, [r0, #32]
 801622e:	b90b      	cbnz	r3, 8016234 <_vfiprintf_r+0x18>
 8016230:	f7fe fb5c 	bl	80148ec <__sinit>
 8016234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016236:	07d9      	lsls	r1, r3, #31
 8016238:	d405      	bmi.n	8016246 <_vfiprintf_r+0x2a>
 801623a:	89ab      	ldrh	r3, [r5, #12]
 801623c:	059a      	lsls	r2, r3, #22
 801623e:	d402      	bmi.n	8016246 <_vfiprintf_r+0x2a>
 8016240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016242:	f7fe fd4e 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 8016246:	89ab      	ldrh	r3, [r5, #12]
 8016248:	071b      	lsls	r3, r3, #28
 801624a:	d501      	bpl.n	8016250 <_vfiprintf_r+0x34>
 801624c:	692b      	ldr	r3, [r5, #16]
 801624e:	b99b      	cbnz	r3, 8016278 <_vfiprintf_r+0x5c>
 8016250:	4629      	mov	r1, r5
 8016252:	4630      	mov	r0, r6
 8016254:	f7fe fc72 	bl	8014b3c <__swsetup_r>
 8016258:	b170      	cbz	r0, 8016278 <_vfiprintf_r+0x5c>
 801625a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801625c:	07dc      	lsls	r4, r3, #31
 801625e:	d504      	bpl.n	801626a <_vfiprintf_r+0x4e>
 8016260:	f04f 30ff 	mov.w	r0, #4294967295
 8016264:	b01d      	add	sp, #116	@ 0x74
 8016266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801626a:	89ab      	ldrh	r3, [r5, #12]
 801626c:	0598      	lsls	r0, r3, #22
 801626e:	d4f7      	bmi.n	8016260 <_vfiprintf_r+0x44>
 8016270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016272:	f7fe fd37 	bl	8014ce4 <__retarget_lock_release_recursive>
 8016276:	e7f3      	b.n	8016260 <_vfiprintf_r+0x44>
 8016278:	2300      	movs	r3, #0
 801627a:	9309      	str	r3, [sp, #36]	@ 0x24
 801627c:	2320      	movs	r3, #32
 801627e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016282:	f8cd 800c 	str.w	r8, [sp, #12]
 8016286:	2330      	movs	r3, #48	@ 0x30
 8016288:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016438 <_vfiprintf_r+0x21c>
 801628c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016290:	f04f 0901 	mov.w	r9, #1
 8016294:	4623      	mov	r3, r4
 8016296:	469a      	mov	sl, r3
 8016298:	f813 2b01 	ldrb.w	r2, [r3], #1
 801629c:	b10a      	cbz	r2, 80162a2 <_vfiprintf_r+0x86>
 801629e:	2a25      	cmp	r2, #37	@ 0x25
 80162a0:	d1f9      	bne.n	8016296 <_vfiprintf_r+0x7a>
 80162a2:	ebba 0b04 	subs.w	fp, sl, r4
 80162a6:	d00b      	beq.n	80162c0 <_vfiprintf_r+0xa4>
 80162a8:	465b      	mov	r3, fp
 80162aa:	4622      	mov	r2, r4
 80162ac:	4629      	mov	r1, r5
 80162ae:	4630      	mov	r0, r6
 80162b0:	f7ff ffa1 	bl	80161f6 <__sfputs_r>
 80162b4:	3001      	adds	r0, #1
 80162b6:	f000 80a7 	beq.w	8016408 <_vfiprintf_r+0x1ec>
 80162ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80162bc:	445a      	add	r2, fp
 80162be:	9209      	str	r2, [sp, #36]	@ 0x24
 80162c0:	f89a 3000 	ldrb.w	r3, [sl]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	f000 809f 	beq.w	8016408 <_vfiprintf_r+0x1ec>
 80162ca:	2300      	movs	r3, #0
 80162cc:	f04f 32ff 	mov.w	r2, #4294967295
 80162d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162d4:	f10a 0a01 	add.w	sl, sl, #1
 80162d8:	9304      	str	r3, [sp, #16]
 80162da:	9307      	str	r3, [sp, #28]
 80162dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80162e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80162e2:	4654      	mov	r4, sl
 80162e4:	2205      	movs	r2, #5
 80162e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162ea:	4853      	ldr	r0, [pc, #332]	@ (8016438 <_vfiprintf_r+0x21c>)
 80162ec:	f7e9 fff8 	bl	80002e0 <memchr>
 80162f0:	9a04      	ldr	r2, [sp, #16]
 80162f2:	b9d8      	cbnz	r0, 801632c <_vfiprintf_r+0x110>
 80162f4:	06d1      	lsls	r1, r2, #27
 80162f6:	bf44      	itt	mi
 80162f8:	2320      	movmi	r3, #32
 80162fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162fe:	0713      	lsls	r3, r2, #28
 8016300:	bf44      	itt	mi
 8016302:	232b      	movmi	r3, #43	@ 0x2b
 8016304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016308:	f89a 3000 	ldrb.w	r3, [sl]
 801630c:	2b2a      	cmp	r3, #42	@ 0x2a
 801630e:	d015      	beq.n	801633c <_vfiprintf_r+0x120>
 8016310:	9a07      	ldr	r2, [sp, #28]
 8016312:	4654      	mov	r4, sl
 8016314:	2000      	movs	r0, #0
 8016316:	f04f 0c0a 	mov.w	ip, #10
 801631a:	4621      	mov	r1, r4
 801631c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016320:	3b30      	subs	r3, #48	@ 0x30
 8016322:	2b09      	cmp	r3, #9
 8016324:	d94b      	bls.n	80163be <_vfiprintf_r+0x1a2>
 8016326:	b1b0      	cbz	r0, 8016356 <_vfiprintf_r+0x13a>
 8016328:	9207      	str	r2, [sp, #28]
 801632a:	e014      	b.n	8016356 <_vfiprintf_r+0x13a>
 801632c:	eba0 0308 	sub.w	r3, r0, r8
 8016330:	fa09 f303 	lsl.w	r3, r9, r3
 8016334:	4313      	orrs	r3, r2
 8016336:	9304      	str	r3, [sp, #16]
 8016338:	46a2      	mov	sl, r4
 801633a:	e7d2      	b.n	80162e2 <_vfiprintf_r+0xc6>
 801633c:	9b03      	ldr	r3, [sp, #12]
 801633e:	1d19      	adds	r1, r3, #4
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	9103      	str	r1, [sp, #12]
 8016344:	2b00      	cmp	r3, #0
 8016346:	bfbb      	ittet	lt
 8016348:	425b      	neglt	r3, r3
 801634a:	f042 0202 	orrlt.w	r2, r2, #2
 801634e:	9307      	strge	r3, [sp, #28]
 8016350:	9307      	strlt	r3, [sp, #28]
 8016352:	bfb8      	it	lt
 8016354:	9204      	strlt	r2, [sp, #16]
 8016356:	7823      	ldrb	r3, [r4, #0]
 8016358:	2b2e      	cmp	r3, #46	@ 0x2e
 801635a:	d10a      	bne.n	8016372 <_vfiprintf_r+0x156>
 801635c:	7863      	ldrb	r3, [r4, #1]
 801635e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016360:	d132      	bne.n	80163c8 <_vfiprintf_r+0x1ac>
 8016362:	9b03      	ldr	r3, [sp, #12]
 8016364:	1d1a      	adds	r2, r3, #4
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	9203      	str	r2, [sp, #12]
 801636a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801636e:	3402      	adds	r4, #2
 8016370:	9305      	str	r3, [sp, #20]
 8016372:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016448 <_vfiprintf_r+0x22c>
 8016376:	7821      	ldrb	r1, [r4, #0]
 8016378:	2203      	movs	r2, #3
 801637a:	4650      	mov	r0, sl
 801637c:	f7e9 ffb0 	bl	80002e0 <memchr>
 8016380:	b138      	cbz	r0, 8016392 <_vfiprintf_r+0x176>
 8016382:	9b04      	ldr	r3, [sp, #16]
 8016384:	eba0 000a 	sub.w	r0, r0, sl
 8016388:	2240      	movs	r2, #64	@ 0x40
 801638a:	4082      	lsls	r2, r0
 801638c:	4313      	orrs	r3, r2
 801638e:	3401      	adds	r4, #1
 8016390:	9304      	str	r3, [sp, #16]
 8016392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016396:	4829      	ldr	r0, [pc, #164]	@ (801643c <_vfiprintf_r+0x220>)
 8016398:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801639c:	2206      	movs	r2, #6
 801639e:	f7e9 ff9f 	bl	80002e0 <memchr>
 80163a2:	2800      	cmp	r0, #0
 80163a4:	d03f      	beq.n	8016426 <_vfiprintf_r+0x20a>
 80163a6:	4b26      	ldr	r3, [pc, #152]	@ (8016440 <_vfiprintf_r+0x224>)
 80163a8:	bb1b      	cbnz	r3, 80163f2 <_vfiprintf_r+0x1d6>
 80163aa:	9b03      	ldr	r3, [sp, #12]
 80163ac:	3307      	adds	r3, #7
 80163ae:	f023 0307 	bic.w	r3, r3, #7
 80163b2:	3308      	adds	r3, #8
 80163b4:	9303      	str	r3, [sp, #12]
 80163b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163b8:	443b      	add	r3, r7
 80163ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80163bc:	e76a      	b.n	8016294 <_vfiprintf_r+0x78>
 80163be:	fb0c 3202 	mla	r2, ip, r2, r3
 80163c2:	460c      	mov	r4, r1
 80163c4:	2001      	movs	r0, #1
 80163c6:	e7a8      	b.n	801631a <_vfiprintf_r+0xfe>
 80163c8:	2300      	movs	r3, #0
 80163ca:	3401      	adds	r4, #1
 80163cc:	9305      	str	r3, [sp, #20]
 80163ce:	4619      	mov	r1, r3
 80163d0:	f04f 0c0a 	mov.w	ip, #10
 80163d4:	4620      	mov	r0, r4
 80163d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163da:	3a30      	subs	r2, #48	@ 0x30
 80163dc:	2a09      	cmp	r2, #9
 80163de:	d903      	bls.n	80163e8 <_vfiprintf_r+0x1cc>
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d0c6      	beq.n	8016372 <_vfiprintf_r+0x156>
 80163e4:	9105      	str	r1, [sp, #20]
 80163e6:	e7c4      	b.n	8016372 <_vfiprintf_r+0x156>
 80163e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80163ec:	4604      	mov	r4, r0
 80163ee:	2301      	movs	r3, #1
 80163f0:	e7f0      	b.n	80163d4 <_vfiprintf_r+0x1b8>
 80163f2:	ab03      	add	r3, sp, #12
 80163f4:	9300      	str	r3, [sp, #0]
 80163f6:	462a      	mov	r2, r5
 80163f8:	4b12      	ldr	r3, [pc, #72]	@ (8016444 <_vfiprintf_r+0x228>)
 80163fa:	a904      	add	r1, sp, #16
 80163fc:	4630      	mov	r0, r6
 80163fe:	f7fd fe43 	bl	8014088 <_printf_float>
 8016402:	4607      	mov	r7, r0
 8016404:	1c78      	adds	r0, r7, #1
 8016406:	d1d6      	bne.n	80163b6 <_vfiprintf_r+0x19a>
 8016408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801640a:	07d9      	lsls	r1, r3, #31
 801640c:	d405      	bmi.n	801641a <_vfiprintf_r+0x1fe>
 801640e:	89ab      	ldrh	r3, [r5, #12]
 8016410:	059a      	lsls	r2, r3, #22
 8016412:	d402      	bmi.n	801641a <_vfiprintf_r+0x1fe>
 8016414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016416:	f7fe fc65 	bl	8014ce4 <__retarget_lock_release_recursive>
 801641a:	89ab      	ldrh	r3, [r5, #12]
 801641c:	065b      	lsls	r3, r3, #25
 801641e:	f53f af1f 	bmi.w	8016260 <_vfiprintf_r+0x44>
 8016422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016424:	e71e      	b.n	8016264 <_vfiprintf_r+0x48>
 8016426:	ab03      	add	r3, sp, #12
 8016428:	9300      	str	r3, [sp, #0]
 801642a:	462a      	mov	r2, r5
 801642c:	4b05      	ldr	r3, [pc, #20]	@ (8016444 <_vfiprintf_r+0x228>)
 801642e:	a904      	add	r1, sp, #16
 8016430:	4630      	mov	r0, r6
 8016432:	f7fe f8b1 	bl	8014598 <_printf_i>
 8016436:	e7e4      	b.n	8016402 <_vfiprintf_r+0x1e6>
 8016438:	080183da 	.word	0x080183da
 801643c:	080183e4 	.word	0x080183e4
 8016440:	08014089 	.word	0x08014089
 8016444:	080161f7 	.word	0x080161f7
 8016448:	080183e0 	.word	0x080183e0

0801644c <__sflush_r>:
 801644c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016454:	0716      	lsls	r6, r2, #28
 8016456:	4605      	mov	r5, r0
 8016458:	460c      	mov	r4, r1
 801645a:	d454      	bmi.n	8016506 <__sflush_r+0xba>
 801645c:	684b      	ldr	r3, [r1, #4]
 801645e:	2b00      	cmp	r3, #0
 8016460:	dc02      	bgt.n	8016468 <__sflush_r+0x1c>
 8016462:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016464:	2b00      	cmp	r3, #0
 8016466:	dd48      	ble.n	80164fa <__sflush_r+0xae>
 8016468:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801646a:	2e00      	cmp	r6, #0
 801646c:	d045      	beq.n	80164fa <__sflush_r+0xae>
 801646e:	2300      	movs	r3, #0
 8016470:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016474:	682f      	ldr	r7, [r5, #0]
 8016476:	6a21      	ldr	r1, [r4, #32]
 8016478:	602b      	str	r3, [r5, #0]
 801647a:	d030      	beq.n	80164de <__sflush_r+0x92>
 801647c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801647e:	89a3      	ldrh	r3, [r4, #12]
 8016480:	0759      	lsls	r1, r3, #29
 8016482:	d505      	bpl.n	8016490 <__sflush_r+0x44>
 8016484:	6863      	ldr	r3, [r4, #4]
 8016486:	1ad2      	subs	r2, r2, r3
 8016488:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801648a:	b10b      	cbz	r3, 8016490 <__sflush_r+0x44>
 801648c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801648e:	1ad2      	subs	r2, r2, r3
 8016490:	2300      	movs	r3, #0
 8016492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016494:	6a21      	ldr	r1, [r4, #32]
 8016496:	4628      	mov	r0, r5
 8016498:	47b0      	blx	r6
 801649a:	1c43      	adds	r3, r0, #1
 801649c:	89a3      	ldrh	r3, [r4, #12]
 801649e:	d106      	bne.n	80164ae <__sflush_r+0x62>
 80164a0:	6829      	ldr	r1, [r5, #0]
 80164a2:	291d      	cmp	r1, #29
 80164a4:	d82b      	bhi.n	80164fe <__sflush_r+0xb2>
 80164a6:	4a2a      	ldr	r2, [pc, #168]	@ (8016550 <__sflush_r+0x104>)
 80164a8:	40ca      	lsrs	r2, r1
 80164aa:	07d6      	lsls	r6, r2, #31
 80164ac:	d527      	bpl.n	80164fe <__sflush_r+0xb2>
 80164ae:	2200      	movs	r2, #0
 80164b0:	6062      	str	r2, [r4, #4]
 80164b2:	04d9      	lsls	r1, r3, #19
 80164b4:	6922      	ldr	r2, [r4, #16]
 80164b6:	6022      	str	r2, [r4, #0]
 80164b8:	d504      	bpl.n	80164c4 <__sflush_r+0x78>
 80164ba:	1c42      	adds	r2, r0, #1
 80164bc:	d101      	bne.n	80164c2 <__sflush_r+0x76>
 80164be:	682b      	ldr	r3, [r5, #0]
 80164c0:	b903      	cbnz	r3, 80164c4 <__sflush_r+0x78>
 80164c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80164c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80164c6:	602f      	str	r7, [r5, #0]
 80164c8:	b1b9      	cbz	r1, 80164fa <__sflush_r+0xae>
 80164ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80164ce:	4299      	cmp	r1, r3
 80164d0:	d002      	beq.n	80164d8 <__sflush_r+0x8c>
 80164d2:	4628      	mov	r0, r5
 80164d4:	f7ff f9fe 	bl	80158d4 <_free_r>
 80164d8:	2300      	movs	r3, #0
 80164da:	6363      	str	r3, [r4, #52]	@ 0x34
 80164dc:	e00d      	b.n	80164fa <__sflush_r+0xae>
 80164de:	2301      	movs	r3, #1
 80164e0:	4628      	mov	r0, r5
 80164e2:	47b0      	blx	r6
 80164e4:	4602      	mov	r2, r0
 80164e6:	1c50      	adds	r0, r2, #1
 80164e8:	d1c9      	bne.n	801647e <__sflush_r+0x32>
 80164ea:	682b      	ldr	r3, [r5, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d0c6      	beq.n	801647e <__sflush_r+0x32>
 80164f0:	2b1d      	cmp	r3, #29
 80164f2:	d001      	beq.n	80164f8 <__sflush_r+0xac>
 80164f4:	2b16      	cmp	r3, #22
 80164f6:	d11e      	bne.n	8016536 <__sflush_r+0xea>
 80164f8:	602f      	str	r7, [r5, #0]
 80164fa:	2000      	movs	r0, #0
 80164fc:	e022      	b.n	8016544 <__sflush_r+0xf8>
 80164fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016502:	b21b      	sxth	r3, r3
 8016504:	e01b      	b.n	801653e <__sflush_r+0xf2>
 8016506:	690f      	ldr	r7, [r1, #16]
 8016508:	2f00      	cmp	r7, #0
 801650a:	d0f6      	beq.n	80164fa <__sflush_r+0xae>
 801650c:	0793      	lsls	r3, r2, #30
 801650e:	680e      	ldr	r6, [r1, #0]
 8016510:	bf08      	it	eq
 8016512:	694b      	ldreq	r3, [r1, #20]
 8016514:	600f      	str	r7, [r1, #0]
 8016516:	bf18      	it	ne
 8016518:	2300      	movne	r3, #0
 801651a:	eba6 0807 	sub.w	r8, r6, r7
 801651e:	608b      	str	r3, [r1, #8]
 8016520:	f1b8 0f00 	cmp.w	r8, #0
 8016524:	dde9      	ble.n	80164fa <__sflush_r+0xae>
 8016526:	6a21      	ldr	r1, [r4, #32]
 8016528:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801652a:	4643      	mov	r3, r8
 801652c:	463a      	mov	r2, r7
 801652e:	4628      	mov	r0, r5
 8016530:	47b0      	blx	r6
 8016532:	2800      	cmp	r0, #0
 8016534:	dc08      	bgt.n	8016548 <__sflush_r+0xfc>
 8016536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801653a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801653e:	81a3      	strh	r3, [r4, #12]
 8016540:	f04f 30ff 	mov.w	r0, #4294967295
 8016544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016548:	4407      	add	r7, r0
 801654a:	eba8 0800 	sub.w	r8, r8, r0
 801654e:	e7e7      	b.n	8016520 <__sflush_r+0xd4>
 8016550:	20400001 	.word	0x20400001

08016554 <_fflush_r>:
 8016554:	b538      	push	{r3, r4, r5, lr}
 8016556:	690b      	ldr	r3, [r1, #16]
 8016558:	4605      	mov	r5, r0
 801655a:	460c      	mov	r4, r1
 801655c:	b913      	cbnz	r3, 8016564 <_fflush_r+0x10>
 801655e:	2500      	movs	r5, #0
 8016560:	4628      	mov	r0, r5
 8016562:	bd38      	pop	{r3, r4, r5, pc}
 8016564:	b118      	cbz	r0, 801656e <_fflush_r+0x1a>
 8016566:	6a03      	ldr	r3, [r0, #32]
 8016568:	b90b      	cbnz	r3, 801656e <_fflush_r+0x1a>
 801656a:	f7fe f9bf 	bl	80148ec <__sinit>
 801656e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d0f3      	beq.n	801655e <_fflush_r+0xa>
 8016576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016578:	07d0      	lsls	r0, r2, #31
 801657a:	d404      	bmi.n	8016586 <_fflush_r+0x32>
 801657c:	0599      	lsls	r1, r3, #22
 801657e:	d402      	bmi.n	8016586 <_fflush_r+0x32>
 8016580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016582:	f7fe fbae 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 8016586:	4628      	mov	r0, r5
 8016588:	4621      	mov	r1, r4
 801658a:	f7ff ff5f 	bl	801644c <__sflush_r>
 801658e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016590:	07da      	lsls	r2, r3, #31
 8016592:	4605      	mov	r5, r0
 8016594:	d4e4      	bmi.n	8016560 <_fflush_r+0xc>
 8016596:	89a3      	ldrh	r3, [r4, #12]
 8016598:	059b      	lsls	r3, r3, #22
 801659a:	d4e1      	bmi.n	8016560 <_fflush_r+0xc>
 801659c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801659e:	f7fe fba1 	bl	8014ce4 <__retarget_lock_release_recursive>
 80165a2:	e7dd      	b.n	8016560 <_fflush_r+0xc>

080165a4 <__swhatbuf_r>:
 80165a4:	b570      	push	{r4, r5, r6, lr}
 80165a6:	460c      	mov	r4, r1
 80165a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165ac:	2900      	cmp	r1, #0
 80165ae:	b096      	sub	sp, #88	@ 0x58
 80165b0:	4615      	mov	r5, r2
 80165b2:	461e      	mov	r6, r3
 80165b4:	da0d      	bge.n	80165d2 <__swhatbuf_r+0x2e>
 80165b6:	89a3      	ldrh	r3, [r4, #12]
 80165b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80165bc:	f04f 0100 	mov.w	r1, #0
 80165c0:	bf14      	ite	ne
 80165c2:	2340      	movne	r3, #64	@ 0x40
 80165c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80165c8:	2000      	movs	r0, #0
 80165ca:	6031      	str	r1, [r6, #0]
 80165cc:	602b      	str	r3, [r5, #0]
 80165ce:	b016      	add	sp, #88	@ 0x58
 80165d0:	bd70      	pop	{r4, r5, r6, pc}
 80165d2:	466a      	mov	r2, sp
 80165d4:	f000 f848 	bl	8016668 <_fstat_r>
 80165d8:	2800      	cmp	r0, #0
 80165da:	dbec      	blt.n	80165b6 <__swhatbuf_r+0x12>
 80165dc:	9901      	ldr	r1, [sp, #4]
 80165de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80165e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80165e6:	4259      	negs	r1, r3
 80165e8:	4159      	adcs	r1, r3
 80165ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80165ee:	e7eb      	b.n	80165c8 <__swhatbuf_r+0x24>

080165f0 <__smakebuf_r>:
 80165f0:	898b      	ldrh	r3, [r1, #12]
 80165f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165f4:	079d      	lsls	r5, r3, #30
 80165f6:	4606      	mov	r6, r0
 80165f8:	460c      	mov	r4, r1
 80165fa:	d507      	bpl.n	801660c <__smakebuf_r+0x1c>
 80165fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016600:	6023      	str	r3, [r4, #0]
 8016602:	6123      	str	r3, [r4, #16]
 8016604:	2301      	movs	r3, #1
 8016606:	6163      	str	r3, [r4, #20]
 8016608:	b003      	add	sp, #12
 801660a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801660c:	ab01      	add	r3, sp, #4
 801660e:	466a      	mov	r2, sp
 8016610:	f7ff ffc8 	bl	80165a4 <__swhatbuf_r>
 8016614:	9f00      	ldr	r7, [sp, #0]
 8016616:	4605      	mov	r5, r0
 8016618:	4639      	mov	r1, r7
 801661a:	4630      	mov	r0, r6
 801661c:	f7ff f9ce 	bl	80159bc <_malloc_r>
 8016620:	b948      	cbnz	r0, 8016636 <__smakebuf_r+0x46>
 8016622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016626:	059a      	lsls	r2, r3, #22
 8016628:	d4ee      	bmi.n	8016608 <__smakebuf_r+0x18>
 801662a:	f023 0303 	bic.w	r3, r3, #3
 801662e:	f043 0302 	orr.w	r3, r3, #2
 8016632:	81a3      	strh	r3, [r4, #12]
 8016634:	e7e2      	b.n	80165fc <__smakebuf_r+0xc>
 8016636:	89a3      	ldrh	r3, [r4, #12]
 8016638:	6020      	str	r0, [r4, #0]
 801663a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801663e:	81a3      	strh	r3, [r4, #12]
 8016640:	9b01      	ldr	r3, [sp, #4]
 8016642:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016646:	b15b      	cbz	r3, 8016660 <__smakebuf_r+0x70>
 8016648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801664c:	4630      	mov	r0, r6
 801664e:	f000 f81d 	bl	801668c <_isatty_r>
 8016652:	b128      	cbz	r0, 8016660 <__smakebuf_r+0x70>
 8016654:	89a3      	ldrh	r3, [r4, #12]
 8016656:	f023 0303 	bic.w	r3, r3, #3
 801665a:	f043 0301 	orr.w	r3, r3, #1
 801665e:	81a3      	strh	r3, [r4, #12]
 8016660:	89a3      	ldrh	r3, [r4, #12]
 8016662:	431d      	orrs	r5, r3
 8016664:	81a5      	strh	r5, [r4, #12]
 8016666:	e7cf      	b.n	8016608 <__smakebuf_r+0x18>

08016668 <_fstat_r>:
 8016668:	b538      	push	{r3, r4, r5, lr}
 801666a:	4d07      	ldr	r5, [pc, #28]	@ (8016688 <_fstat_r+0x20>)
 801666c:	2300      	movs	r3, #0
 801666e:	4604      	mov	r4, r0
 8016670:	4608      	mov	r0, r1
 8016672:	4611      	mov	r1, r2
 8016674:	602b      	str	r3, [r5, #0]
 8016676:	f7ec f897 	bl	80027a8 <_fstat>
 801667a:	1c43      	adds	r3, r0, #1
 801667c:	d102      	bne.n	8016684 <_fstat_r+0x1c>
 801667e:	682b      	ldr	r3, [r5, #0]
 8016680:	b103      	cbz	r3, 8016684 <_fstat_r+0x1c>
 8016682:	6023      	str	r3, [r4, #0]
 8016684:	bd38      	pop	{r3, r4, r5, pc}
 8016686:	bf00      	nop
 8016688:	240013b4 	.word	0x240013b4

0801668c <_isatty_r>:
 801668c:	b538      	push	{r3, r4, r5, lr}
 801668e:	4d06      	ldr	r5, [pc, #24]	@ (80166a8 <_isatty_r+0x1c>)
 8016690:	2300      	movs	r3, #0
 8016692:	4604      	mov	r4, r0
 8016694:	4608      	mov	r0, r1
 8016696:	602b      	str	r3, [r5, #0]
 8016698:	f7ec f896 	bl	80027c8 <_isatty>
 801669c:	1c43      	adds	r3, r0, #1
 801669e:	d102      	bne.n	80166a6 <_isatty_r+0x1a>
 80166a0:	682b      	ldr	r3, [r5, #0]
 80166a2:	b103      	cbz	r3, 80166a6 <_isatty_r+0x1a>
 80166a4:	6023      	str	r3, [r4, #0]
 80166a6:	bd38      	pop	{r3, r4, r5, pc}
 80166a8:	240013b4 	.word	0x240013b4

080166ac <_sbrk_r>:
 80166ac:	b538      	push	{r3, r4, r5, lr}
 80166ae:	4d06      	ldr	r5, [pc, #24]	@ (80166c8 <_sbrk_r+0x1c>)
 80166b0:	2300      	movs	r3, #0
 80166b2:	4604      	mov	r4, r0
 80166b4:	4608      	mov	r0, r1
 80166b6:	602b      	str	r3, [r5, #0]
 80166b8:	f7ec f89e 	bl	80027f8 <_sbrk>
 80166bc:	1c43      	adds	r3, r0, #1
 80166be:	d102      	bne.n	80166c6 <_sbrk_r+0x1a>
 80166c0:	682b      	ldr	r3, [r5, #0]
 80166c2:	b103      	cbz	r3, 80166c6 <_sbrk_r+0x1a>
 80166c4:	6023      	str	r3, [r4, #0]
 80166c6:	bd38      	pop	{r3, r4, r5, pc}
 80166c8:	240013b4 	.word	0x240013b4

080166cc <__assert_func>:
 80166cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80166ce:	4614      	mov	r4, r2
 80166d0:	461a      	mov	r2, r3
 80166d2:	4b09      	ldr	r3, [pc, #36]	@ (80166f8 <__assert_func+0x2c>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	4605      	mov	r5, r0
 80166d8:	68d8      	ldr	r0, [r3, #12]
 80166da:	b14c      	cbz	r4, 80166f0 <__assert_func+0x24>
 80166dc:	4b07      	ldr	r3, [pc, #28]	@ (80166fc <__assert_func+0x30>)
 80166de:	9100      	str	r1, [sp, #0]
 80166e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80166e4:	4906      	ldr	r1, [pc, #24]	@ (8016700 <__assert_func+0x34>)
 80166e6:	462b      	mov	r3, r5
 80166e8:	f000 f842 	bl	8016770 <fiprintf>
 80166ec:	f000 f852 	bl	8016794 <abort>
 80166f0:	4b04      	ldr	r3, [pc, #16]	@ (8016704 <__assert_func+0x38>)
 80166f2:	461c      	mov	r4, r3
 80166f4:	e7f3      	b.n	80166de <__assert_func+0x12>
 80166f6:	bf00      	nop
 80166f8:	24000074 	.word	0x24000074
 80166fc:	080183f5 	.word	0x080183f5
 8016700:	08018402 	.word	0x08018402
 8016704:	08018430 	.word	0x08018430

08016708 <_calloc_r>:
 8016708:	b570      	push	{r4, r5, r6, lr}
 801670a:	fba1 5402 	umull	r5, r4, r1, r2
 801670e:	b934      	cbnz	r4, 801671e <_calloc_r+0x16>
 8016710:	4629      	mov	r1, r5
 8016712:	f7ff f953 	bl	80159bc <_malloc_r>
 8016716:	4606      	mov	r6, r0
 8016718:	b928      	cbnz	r0, 8016726 <_calloc_r+0x1e>
 801671a:	4630      	mov	r0, r6
 801671c:	bd70      	pop	{r4, r5, r6, pc}
 801671e:	220c      	movs	r2, #12
 8016720:	6002      	str	r2, [r0, #0]
 8016722:	2600      	movs	r6, #0
 8016724:	e7f9      	b.n	801671a <_calloc_r+0x12>
 8016726:	462a      	mov	r2, r5
 8016728:	4621      	mov	r1, r4
 801672a:	f7fe fa5d 	bl	8014be8 <memset>
 801672e:	e7f4      	b.n	801671a <_calloc_r+0x12>

08016730 <__ascii_mbtowc>:
 8016730:	b082      	sub	sp, #8
 8016732:	b901      	cbnz	r1, 8016736 <__ascii_mbtowc+0x6>
 8016734:	a901      	add	r1, sp, #4
 8016736:	b142      	cbz	r2, 801674a <__ascii_mbtowc+0x1a>
 8016738:	b14b      	cbz	r3, 801674e <__ascii_mbtowc+0x1e>
 801673a:	7813      	ldrb	r3, [r2, #0]
 801673c:	600b      	str	r3, [r1, #0]
 801673e:	7812      	ldrb	r2, [r2, #0]
 8016740:	1e10      	subs	r0, r2, #0
 8016742:	bf18      	it	ne
 8016744:	2001      	movne	r0, #1
 8016746:	b002      	add	sp, #8
 8016748:	4770      	bx	lr
 801674a:	4610      	mov	r0, r2
 801674c:	e7fb      	b.n	8016746 <__ascii_mbtowc+0x16>
 801674e:	f06f 0001 	mvn.w	r0, #1
 8016752:	e7f8      	b.n	8016746 <__ascii_mbtowc+0x16>

08016754 <__ascii_wctomb>:
 8016754:	4603      	mov	r3, r0
 8016756:	4608      	mov	r0, r1
 8016758:	b141      	cbz	r1, 801676c <__ascii_wctomb+0x18>
 801675a:	2aff      	cmp	r2, #255	@ 0xff
 801675c:	d904      	bls.n	8016768 <__ascii_wctomb+0x14>
 801675e:	228a      	movs	r2, #138	@ 0x8a
 8016760:	601a      	str	r2, [r3, #0]
 8016762:	f04f 30ff 	mov.w	r0, #4294967295
 8016766:	4770      	bx	lr
 8016768:	700a      	strb	r2, [r1, #0]
 801676a:	2001      	movs	r0, #1
 801676c:	4770      	bx	lr
	...

08016770 <fiprintf>:
 8016770:	b40e      	push	{r1, r2, r3}
 8016772:	b503      	push	{r0, r1, lr}
 8016774:	4601      	mov	r1, r0
 8016776:	ab03      	add	r3, sp, #12
 8016778:	4805      	ldr	r0, [pc, #20]	@ (8016790 <fiprintf+0x20>)
 801677a:	f853 2b04 	ldr.w	r2, [r3], #4
 801677e:	6800      	ldr	r0, [r0, #0]
 8016780:	9301      	str	r3, [sp, #4]
 8016782:	f7ff fd4b 	bl	801621c <_vfiprintf_r>
 8016786:	b002      	add	sp, #8
 8016788:	f85d eb04 	ldr.w	lr, [sp], #4
 801678c:	b003      	add	sp, #12
 801678e:	4770      	bx	lr
 8016790:	24000074 	.word	0x24000074

08016794 <abort>:
 8016794:	b508      	push	{r3, lr}
 8016796:	2006      	movs	r0, #6
 8016798:	f000 f82c 	bl	80167f4 <raise>
 801679c:	2001      	movs	r0, #1
 801679e:	f7eb ffb3 	bl	8002708 <_exit>

080167a2 <_raise_r>:
 80167a2:	291f      	cmp	r1, #31
 80167a4:	b538      	push	{r3, r4, r5, lr}
 80167a6:	4605      	mov	r5, r0
 80167a8:	460c      	mov	r4, r1
 80167aa:	d904      	bls.n	80167b6 <_raise_r+0x14>
 80167ac:	2316      	movs	r3, #22
 80167ae:	6003      	str	r3, [r0, #0]
 80167b0:	f04f 30ff 	mov.w	r0, #4294967295
 80167b4:	bd38      	pop	{r3, r4, r5, pc}
 80167b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80167b8:	b112      	cbz	r2, 80167c0 <_raise_r+0x1e>
 80167ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80167be:	b94b      	cbnz	r3, 80167d4 <_raise_r+0x32>
 80167c0:	4628      	mov	r0, r5
 80167c2:	f000 f831 	bl	8016828 <_getpid_r>
 80167c6:	4622      	mov	r2, r4
 80167c8:	4601      	mov	r1, r0
 80167ca:	4628      	mov	r0, r5
 80167cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167d0:	f000 b818 	b.w	8016804 <_kill_r>
 80167d4:	2b01      	cmp	r3, #1
 80167d6:	d00a      	beq.n	80167ee <_raise_r+0x4c>
 80167d8:	1c59      	adds	r1, r3, #1
 80167da:	d103      	bne.n	80167e4 <_raise_r+0x42>
 80167dc:	2316      	movs	r3, #22
 80167de:	6003      	str	r3, [r0, #0]
 80167e0:	2001      	movs	r0, #1
 80167e2:	e7e7      	b.n	80167b4 <_raise_r+0x12>
 80167e4:	2100      	movs	r1, #0
 80167e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80167ea:	4620      	mov	r0, r4
 80167ec:	4798      	blx	r3
 80167ee:	2000      	movs	r0, #0
 80167f0:	e7e0      	b.n	80167b4 <_raise_r+0x12>
	...

080167f4 <raise>:
 80167f4:	4b02      	ldr	r3, [pc, #8]	@ (8016800 <raise+0xc>)
 80167f6:	4601      	mov	r1, r0
 80167f8:	6818      	ldr	r0, [r3, #0]
 80167fa:	f7ff bfd2 	b.w	80167a2 <_raise_r>
 80167fe:	bf00      	nop
 8016800:	24000074 	.word	0x24000074

08016804 <_kill_r>:
 8016804:	b538      	push	{r3, r4, r5, lr}
 8016806:	4d07      	ldr	r5, [pc, #28]	@ (8016824 <_kill_r+0x20>)
 8016808:	2300      	movs	r3, #0
 801680a:	4604      	mov	r4, r0
 801680c:	4608      	mov	r0, r1
 801680e:	4611      	mov	r1, r2
 8016810:	602b      	str	r3, [r5, #0]
 8016812:	f7eb ff69 	bl	80026e8 <_kill>
 8016816:	1c43      	adds	r3, r0, #1
 8016818:	d102      	bne.n	8016820 <_kill_r+0x1c>
 801681a:	682b      	ldr	r3, [r5, #0]
 801681c:	b103      	cbz	r3, 8016820 <_kill_r+0x1c>
 801681e:	6023      	str	r3, [r4, #0]
 8016820:	bd38      	pop	{r3, r4, r5, pc}
 8016822:	bf00      	nop
 8016824:	240013b4 	.word	0x240013b4

08016828 <_getpid_r>:
 8016828:	f7eb bf56 	b.w	80026d8 <_getpid>

0801682c <asinf>:
 801682c:	b508      	push	{r3, lr}
 801682e:	ed2d 8b02 	vpush	{d8}
 8016832:	eeb0 8a40 	vmov.f32	s16, s0
 8016836:	f000 fd93 	bl	8017360 <__ieee754_asinf>
 801683a:	eeb4 8a48 	vcmp.f32	s16, s16
 801683e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016842:	eef0 8a40 	vmov.f32	s17, s0
 8016846:	d615      	bvs.n	8016874 <asinf+0x48>
 8016848:	eeb0 0a48 	vmov.f32	s0, s16
 801684c:	f000 f83a 	bl	80168c4 <fabsf>
 8016850:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016854:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801685c:	dd0a      	ble.n	8016874 <asinf+0x48>
 801685e:	f7fe fa15 	bl	8014c8c <__errno>
 8016862:	ecbd 8b02 	vpop	{d8}
 8016866:	2321      	movs	r3, #33	@ 0x21
 8016868:	6003      	str	r3, [r0, #0]
 801686a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801686e:	4804      	ldr	r0, [pc, #16]	@ (8016880 <asinf+0x54>)
 8016870:	f000 bae2 	b.w	8016e38 <nanf>
 8016874:	eeb0 0a68 	vmov.f32	s0, s17
 8016878:	ecbd 8b02 	vpop	{d8}
 801687c:	bd08      	pop	{r3, pc}
 801687e:	bf00      	nop
 8016880:	08018430 	.word	0x08018430

08016884 <atan2f>:
 8016884:	f000 be50 	b.w	8017528 <__ieee754_atan2f>

08016888 <sqrtf>:
 8016888:	b508      	push	{r3, lr}
 801688a:	ed2d 8b02 	vpush	{d8}
 801688e:	eeb0 8a40 	vmov.f32	s16, s0
 8016892:	f000 fc82 	bl	801719a <__ieee754_sqrtf>
 8016896:	eeb4 8a48 	vcmp.f32	s16, s16
 801689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689e:	d60c      	bvs.n	80168ba <sqrtf+0x32>
 80168a0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80168c0 <sqrtf+0x38>
 80168a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80168a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ac:	d505      	bpl.n	80168ba <sqrtf+0x32>
 80168ae:	f7fe f9ed 	bl	8014c8c <__errno>
 80168b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80168b6:	2321      	movs	r3, #33	@ 0x21
 80168b8:	6003      	str	r3, [r0, #0]
 80168ba:	ecbd 8b02 	vpop	{d8}
 80168be:	bd08      	pop	{r3, pc}
 80168c0:	00000000 	.word	0x00000000

080168c4 <fabsf>:
 80168c4:	ee10 3a10 	vmov	r3, s0
 80168c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80168cc:	ee00 3a10 	vmov	s0, r3
 80168d0:	4770      	bx	lr
	...

080168d4 <tanf>:
 80168d4:	ee10 3a10 	vmov	r3, s0
 80168d8:	b507      	push	{r0, r1, r2, lr}
 80168da:	4a12      	ldr	r2, [pc, #72]	@ (8016924 <tanf+0x50>)
 80168dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80168e0:	4293      	cmp	r3, r2
 80168e2:	d807      	bhi.n	80168f4 <tanf+0x20>
 80168e4:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8016928 <tanf+0x54>
 80168e8:	2001      	movs	r0, #1
 80168ea:	b003      	add	sp, #12
 80168ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80168f0:	f000 bc56 	b.w	80171a0 <__kernel_tanf>
 80168f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80168f8:	d304      	bcc.n	8016904 <tanf+0x30>
 80168fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80168fe:	b003      	add	sp, #12
 8016900:	f85d fb04 	ldr.w	pc, [sp], #4
 8016904:	4668      	mov	r0, sp
 8016906:	f000 fead 	bl	8017664 <__ieee754_rem_pio2f>
 801690a:	0040      	lsls	r0, r0, #1
 801690c:	f000 0002 	and.w	r0, r0, #2
 8016910:	eddd 0a01 	vldr	s1, [sp, #4]
 8016914:	ed9d 0a00 	vldr	s0, [sp]
 8016918:	f1c0 0001 	rsb	r0, r0, #1
 801691c:	f000 fc40 	bl	80171a0 <__kernel_tanf>
 8016920:	e7ed      	b.n	80168fe <tanf+0x2a>
 8016922:	bf00      	nop
 8016924:	3f490fda 	.word	0x3f490fda
 8016928:	00000000 	.word	0x00000000

0801692c <checkint>:
 801692c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016930:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8016934:	429a      	cmp	r2, r3
 8016936:	b570      	push	{r4, r5, r6, lr}
 8016938:	dd2a      	ble.n	8016990 <checkint+0x64>
 801693a:	f240 4333 	movw	r3, #1075	@ 0x433
 801693e:	429a      	cmp	r2, r3
 8016940:	dc24      	bgt.n	801698c <checkint+0x60>
 8016942:	1a9b      	subs	r3, r3, r2
 8016944:	f1a3 0620 	sub.w	r6, r3, #32
 8016948:	f04f 32ff 	mov.w	r2, #4294967295
 801694c:	fa02 f403 	lsl.w	r4, r2, r3
 8016950:	fa02 f606 	lsl.w	r6, r2, r6
 8016954:	f1c3 0520 	rsb	r5, r3, #32
 8016958:	fa22 f505 	lsr.w	r5, r2, r5
 801695c:	4334      	orrs	r4, r6
 801695e:	432c      	orrs	r4, r5
 8016960:	409a      	lsls	r2, r3
 8016962:	ea20 0202 	bic.w	r2, r0, r2
 8016966:	ea21 0404 	bic.w	r4, r1, r4
 801696a:	4322      	orrs	r2, r4
 801696c:	f1a3 0420 	sub.w	r4, r3, #32
 8016970:	f1c3 0220 	rsb	r2, r3, #32
 8016974:	d10c      	bne.n	8016990 <checkint+0x64>
 8016976:	40d8      	lsrs	r0, r3
 8016978:	fa01 f302 	lsl.w	r3, r1, r2
 801697c:	4318      	orrs	r0, r3
 801697e:	40e1      	lsrs	r1, r4
 8016980:	4308      	orrs	r0, r1
 8016982:	f000 0001 	and.w	r0, r0, #1
 8016986:	f1d0 0002 	rsbs	r0, r0, #2
 801698a:	bd70      	pop	{r4, r5, r6, pc}
 801698c:	2002      	movs	r0, #2
 801698e:	e7fc      	b.n	801698a <checkint+0x5e>
 8016990:	2000      	movs	r0, #0
 8016992:	e7fa      	b.n	801698a <checkint+0x5e>
 8016994:	0000      	movs	r0, r0
	...

08016998 <pow>:
 8016998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699c:	ee10 4a90 	vmov	r4, s1
 80169a0:	ed2d 8b0a 	vpush	{d8-d12}
 80169a4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80169a8:	ee11 aa90 	vmov	sl, s3
 80169ac:	f108 32ff 	add.w	r2, r8, #4294967295
 80169b0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80169b4:	429a      	cmp	r2, r3
 80169b6:	ee10 5a10 	vmov	r5, s0
 80169ba:	ee11 0a10 	vmov	r0, s2
 80169be:	b087      	sub	sp, #28
 80169c0:	46c4      	mov	ip, r8
 80169c2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80169c6:	d806      	bhi.n	80169d6 <pow+0x3e>
 80169c8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80169cc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 80169d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80169d2:	f240 8157 	bls.w	8016c84 <pow+0x2ec>
 80169d6:	1802      	adds	r2, r0, r0
 80169d8:	eb4a 010a 	adc.w	r1, sl, sl
 80169dc:	f06f 0b01 	mvn.w	fp, #1
 80169e0:	1e57      	subs	r7, r2, #1
 80169e2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80169e6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 80169ea:	45bb      	cmp	fp, r7
 80169ec:	eb7e 0303 	sbcs.w	r3, lr, r3
 80169f0:	d242      	bcs.n	8016a78 <pow+0xe0>
 80169f2:	ea52 0301 	orrs.w	r3, r2, r1
 80169f6:	f04f 0300 	mov.w	r3, #0
 80169fa:	d10c      	bne.n	8016a16 <pow+0x7e>
 80169fc:	196d      	adds	r5, r5, r5
 80169fe:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8016a02:	4164      	adcs	r4, r4
 8016a04:	42ab      	cmp	r3, r5
 8016a06:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016a0a:	41a3      	sbcs	r3, r4
 8016a0c:	f0c0 808f 	bcc.w	8016b2e <pow+0x196>
 8016a10:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016a14:	e02b      	b.n	8016a6e <pow+0xd6>
 8016a16:	4ed4      	ldr	r6, [pc, #848]	@ (8016d68 <pow+0x3d0>)
 8016a18:	42b4      	cmp	r4, r6
 8016a1a:	bf08      	it	eq
 8016a1c:	429d      	cmpeq	r5, r3
 8016a1e:	d109      	bne.n	8016a34 <pow+0x9c>
 8016a20:	1800      	adds	r0, r0, r0
 8016a22:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8016a26:	eb4a 0a0a 	adc.w	sl, sl, sl
 8016a2a:	4283      	cmp	r3, r0
 8016a2c:	4bcf      	ldr	r3, [pc, #828]	@ (8016d6c <pow+0x3d4>)
 8016a2e:	eb73 030a 	sbcs.w	r3, r3, sl
 8016a32:	e7eb      	b.n	8016a0c <pow+0x74>
 8016a34:	196d      	adds	r5, r5, r5
 8016a36:	48ce      	ldr	r0, [pc, #824]	@ (8016d70 <pow+0x3d8>)
 8016a38:	4164      	adcs	r4, r4
 8016a3a:	42ab      	cmp	r3, r5
 8016a3c:	eb70 0604 	sbcs.w	r6, r0, r4
 8016a40:	d375      	bcc.n	8016b2e <pow+0x196>
 8016a42:	4281      	cmp	r1, r0
 8016a44:	bf08      	it	eq
 8016a46:	429a      	cmpeq	r2, r3
 8016a48:	d171      	bne.n	8016b2e <pow+0x196>
 8016a4a:	4aca      	ldr	r2, [pc, #808]	@ (8016d74 <pow+0x3dc>)
 8016a4c:	4294      	cmp	r4, r2
 8016a4e:	bf08      	it	eq
 8016a50:	429d      	cmpeq	r5, r3
 8016a52:	d0dd      	beq.n	8016a10 <pow+0x78>
 8016a54:	4294      	cmp	r4, r2
 8016a56:	ea6f 0a0a 	mvn.w	sl, sl
 8016a5a:	bf34      	ite	cc
 8016a5c:	2400      	movcc	r4, #0
 8016a5e:	2401      	movcs	r4, #1
 8016a60:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8016a64:	4554      	cmp	r4, sl
 8016a66:	f040 81dc 	bne.w	8016e22 <pow+0x48a>
 8016a6a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8016a6e:	b007      	add	sp, #28
 8016a70:	ecbd 8b0a 	vpop	{d8-d12}
 8016a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a78:	196f      	adds	r7, r5, r5
 8016a7a:	eb44 0904 	adc.w	r9, r4, r4
 8016a7e:	1e7a      	subs	r2, r7, #1
 8016a80:	f169 0300 	sbc.w	r3, r9, #0
 8016a84:	4593      	cmp	fp, r2
 8016a86:	eb7e 0303 	sbcs.w	r3, lr, r3
 8016a8a:	d225      	bcs.n	8016ad8 <pow+0x140>
 8016a8c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8016a90:	2c00      	cmp	r4, #0
 8016a92:	da13      	bge.n	8016abc <pow+0x124>
 8016a94:	4651      	mov	r1, sl
 8016a96:	f7ff ff49 	bl	801692c <checkint>
 8016a9a:	2801      	cmp	r0, #1
 8016a9c:	d10e      	bne.n	8016abc <pow+0x124>
 8016a9e:	eeb1 0b40 	vneg.f64	d0, d0
 8016aa2:	ea57 0909 	orrs.w	r9, r7, r9
 8016aa6:	d10b      	bne.n	8016ac0 <pow+0x128>
 8016aa8:	f1ba 0f00 	cmp.w	sl, #0
 8016aac:	dadf      	bge.n	8016a6e <pow+0xd6>
 8016aae:	b007      	add	sp, #28
 8016ab0:	ecbd 8b0a 	vpop	{d8-d12}
 8016ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	f001 b80a 	b.w	8017ad0 <__math_divzero>
 8016abc:	2000      	movs	r0, #0
 8016abe:	e7f0      	b.n	8016aa2 <pow+0x10a>
 8016ac0:	f1ba 0f00 	cmp.w	sl, #0
 8016ac4:	dad3      	bge.n	8016a6e <pow+0xd6>
 8016ac6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8016aca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016ace:	ed8d 7b00 	vstr	d7, [sp]
 8016ad2:	ed9d 0b00 	vldr	d0, [sp]
 8016ad6:	e7ca      	b.n	8016a6e <pow+0xd6>
 8016ad8:	2c00      	cmp	r4, #0
 8016ada:	da2b      	bge.n	8016b34 <pow+0x19c>
 8016adc:	4651      	mov	r1, sl
 8016ade:	f7ff ff25 	bl	801692c <checkint>
 8016ae2:	b930      	cbnz	r0, 8016af2 <pow+0x15a>
 8016ae4:	b007      	add	sp, #28
 8016ae6:	ecbd 8b0a 	vpop	{d8-d12}
 8016aea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aee:	f001 b807 	b.w	8017b00 <__math_invalid>
 8016af2:	1e41      	subs	r1, r0, #1
 8016af4:	4248      	negs	r0, r1
 8016af6:	4148      	adcs	r0, r1
 8016af8:	0480      	lsls	r0, r0, #18
 8016afa:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8016afe:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8016b02:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8016b06:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8016b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8016b0c:	d92d      	bls.n	8016b6a <pow+0x1d2>
 8016b0e:	4b96      	ldr	r3, [pc, #600]	@ (8016d68 <pow+0x3d0>)
 8016b10:	2000      	movs	r0, #0
 8016b12:	429c      	cmp	r4, r3
 8016b14:	bf08      	it	eq
 8016b16:	4285      	cmpeq	r5, r0
 8016b18:	f43f af7a 	beq.w	8016a10 <pow+0x78>
 8016b1c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8016b20:	428a      	cmp	r2, r1
 8016b22:	d80c      	bhi.n	8016b3e <pow+0x1a6>
 8016b24:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016b28:	42a8      	cmp	r0, r5
 8016b2a:	41a3      	sbcs	r3, r4
 8016b2c:	d204      	bcs.n	8016b38 <pow+0x1a0>
 8016b2e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8016b32:	e79c      	b.n	8016a6e <pow+0xd6>
 8016b34:	2000      	movs	r0, #0
 8016b36:	e7e4      	b.n	8016b02 <pow+0x16a>
 8016b38:	ee30 0b41 	vsub.f64	d0, d0, d1
 8016b3c:	e797      	b.n	8016a6e <pow+0xd6>
 8016b3e:	2d01      	cmp	r5, #1
 8016b40:	eb74 0303 	sbcs.w	r3, r4, r3
 8016b44:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016b48:	bf34      	ite	cc
 8016b4a:	2301      	movcc	r3, #1
 8016b4c:	2300      	movcs	r3, #0
 8016b4e:	4296      	cmp	r6, r2
 8016b50:	bf8c      	ite	hi
 8016b52:	2600      	movhi	r6, #0
 8016b54:	2601      	movls	r6, #1
 8016b56:	42b3      	cmp	r3, r6
 8016b58:	f000 809c 	beq.w	8016c94 <pow+0x2fc>
 8016b5c:	b007      	add	sp, #28
 8016b5e:	ecbd 8b0a 	vpop	{d8-d12}
 8016b62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b66:	f000 bfab 	b.w	8017ac0 <__math_oflow>
 8016b6a:	f1bc 0f00 	cmp.w	ip, #0
 8016b6e:	d10a      	bne.n	8016b86 <pow+0x1ee>
 8016b70:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8016d58 <pow+0x3c0>
 8016b74:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016b78:	ec53 2b17 	vmov	r2, r3, d7
 8016b7c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8016b80:	4615      	mov	r5, r2
 8016b82:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8016b86:	4a7c      	ldr	r2, [pc, #496]	@ (8016d78 <pow+0x3e0>)
 8016b88:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8016b8c:	4422      	add	r2, r4
 8016b8e:	1513      	asrs	r3, r2, #20
 8016b90:	ee03 3a10 	vmov	s6, r3
 8016b94:	4b79      	ldr	r3, [pc, #484]	@ (8016d7c <pow+0x3e4>)
 8016b96:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8016b9a:	f36f 0213 	bfc	r2, #0, #20
 8016b9e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8016ba2:	1aa7      	subs	r7, r4, r2
 8016ba4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8016ba8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8016bac:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8016bb0:	1e2e      	subs	r6, r5, #0
 8016bb2:	ec47 6b14 	vmov	d4, r6, r7
 8016bb6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8016bba:	eea4 6b05 	vfma.f64	d6, d4, d5
 8016bbe:	ed93 5b00 	vldr	d5, [r3]
 8016bc2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8016bc6:	eea3 2b05 	vfma.f64	d2, d3, d5
 8016bca:	ed93 5b02 	vldr	d5, [r3, #8]
 8016bce:	ee36 4b02 	vadd.f64	d4, d6, d2
 8016bd2:	ee32 2b44 	vsub.f64	d2, d2, d4
 8016bd6:	eea3 7b05 	vfma.f64	d7, d3, d5
 8016bda:	ed93 5b04 	vldr	d5, [r3, #16]
 8016bde:	ee32 2b06 	vadd.f64	d2, d2, d6
 8016be2:	ee37 7b02 	vadd.f64	d7, d7, d2
 8016be6:	ee26 5b05 	vmul.f64	d5, d6, d5
 8016bea:	ee26 0b05 	vmul.f64	d0, d6, d5
 8016bee:	ee34 8b00 	vadd.f64	d8, d4, d0
 8016bf2:	eeb0 9b40 	vmov.f64	d9, d0
 8016bf6:	ee34 4b48 	vsub.f64	d4, d4, d8
 8016bfa:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8016bfe:	ee34 ab00 	vadd.f64	d10, d4, d0
 8016c02:	ed93 5b06 	vldr	d5, [r3, #24]
 8016c06:	ee26 bb00 	vmul.f64	d11, d6, d0
 8016c0a:	ee37 7b09 	vadd.f64	d7, d7, d9
 8016c0e:	ed93 4b08 	vldr	d4, [r3, #32]
 8016c12:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8016c16:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8016c1a:	eea6 5b04 	vfma.f64	d5, d6, d4
 8016c1e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8016c22:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8016c26:	eea6 4b03 	vfma.f64	d4, d6, d3
 8016c2a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8016c2e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8016c32:	eea0 4b03 	vfma.f64	d4, d0, d3
 8016c36:	eea0 5b04 	vfma.f64	d5, d0, d4
 8016c3a:	eeab 7b05 	vfma.f64	d7, d11, d5
 8016c3e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8016c42:	ee21 6b04 	vmul.f64	d6, d1, d4
 8016c46:	ee16 3a90 	vmov	r3, s13
 8016c4a:	eeb0 5b46 	vmov.f64	d5, d6
 8016c4e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8016c52:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8016c56:	18b2      	adds	r2, r6, r2
 8016c58:	2a3e      	cmp	r2, #62	@ 0x3e
 8016c5a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8016c5e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8016c62:	ee38 8b07 	vadd.f64	d8, d8, d7
 8016c66:	eea1 5b08 	vfma.f64	d5, d1, d8
 8016c6a:	d91b      	bls.n	8016ca4 <pow+0x30c>
 8016c6c:	2a00      	cmp	r2, #0
 8016c6e:	da0b      	bge.n	8016c88 <pow+0x2f0>
 8016c70:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016c74:	ee36 0b00 	vadd.f64	d0, d6, d0
 8016c78:	2800      	cmp	r0, #0
 8016c7a:	f43f aef8 	beq.w	8016a6e <pow+0xd6>
 8016c7e:	eeb1 0b40 	vneg.f64	d0, d0
 8016c82:	e6f4      	b.n	8016a6e <pow+0xd6>
 8016c84:	2000      	movs	r0, #0
 8016c86:	e77e      	b.n	8016b86 <pow+0x1ee>
 8016c88:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8016c8c:	d909      	bls.n	8016ca2 <pow+0x30a>
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	f6bf af64 	bge.w	8016b5c <pow+0x1c4>
 8016c94:	b007      	add	sp, #28
 8016c96:	ecbd 8b0a 	vpop	{d8-d12}
 8016c9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c9e:	f000 bf07 	b.w	8017ab0 <__math_uflow>
 8016ca2:	2600      	movs	r6, #0
 8016ca4:	4936      	ldr	r1, [pc, #216]	@ (8016d80 <pow+0x3e8>)
 8016ca6:	ed91 4b02 	vldr	d4, [r1, #8]
 8016caa:	ed91 3b00 	vldr	d3, [r1]
 8016cae:	eeb0 7b44 	vmov.f64	d7, d4
 8016cb2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8016cb6:	ee17 5a10 	vmov	r5, s14
 8016cba:	ee37 7b44 	vsub.f64	d7, d7, d4
 8016cbe:	ed91 4b04 	vldr	d4, [r1, #16]
 8016cc2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8016cc6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8016cca:	ed91 4b06 	vldr	d4, [r1, #24]
 8016cce:	18dc      	adds	r4, r3, r3
 8016cd0:	f104 030f 	add.w	r3, r4, #15
 8016cd4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8016cd8:	eea7 6b04 	vfma.f64	d6, d7, d4
 8016cdc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8016ce0:	ee35 5b06 	vadd.f64	d5, d5, d6
 8016ce4:	ee25 6b05 	vmul.f64	d6, d5, d5
 8016ce8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8016cec:	ed91 4b08 	vldr	d4, [r1, #32]
 8016cf0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8016cf4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8016cf8:	eea5 4b03 	vfma.f64	d4, d5, d3
 8016cfc:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8016d00:	eea6 7b04 	vfma.f64	d7, d6, d4
 8016d04:	ee26 6b06 	vmul.f64	d6, d6, d6
 8016d08:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8016d0c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8016d10:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8016d14:	eea5 4b03 	vfma.f64	d4, d5, d3
 8016d18:	1940      	adds	r0, r0, r5
 8016d1a:	2700      	movs	r7, #0
 8016d1c:	eb17 020c 	adds.w	r2, r7, ip
 8016d20:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8016d24:	eea6 7b04 	vfma.f64	d7, d6, d4
 8016d28:	2e00      	cmp	r6, #0
 8016d2a:	d175      	bne.n	8016e18 <pow+0x480>
 8016d2c:	42bd      	cmp	r5, r7
 8016d2e:	db29      	blt.n	8016d84 <pow+0x3ec>
 8016d30:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8016d34:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8016d38:	4610      	mov	r0, r2
 8016d3a:	ec41 0b10 	vmov	d0, r0, r1
 8016d3e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8016d42:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8016d60 <pow+0x3c8>
 8016d46:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016d4a:	b007      	add	sp, #28
 8016d4c:	ecbd 8b0a 	vpop	{d8-d12}
 8016d50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d54:	f000 beec 	b.w	8017b30 <__math_check_oflow>
 8016d58:	00000000 	.word	0x00000000
 8016d5c:	43300000 	.word	0x43300000
 8016d60:	00000000 	.word	0x00000000
 8016d64:	7f000000 	.word	0x7f000000
 8016d68:	3ff00000 	.word	0x3ff00000
 8016d6c:	fff00000 	.word	0xfff00000
 8016d70:	ffe00000 	.word	0xffe00000
 8016d74:	7fe00000 	.word	0x7fe00000
 8016d78:	c0196aab 	.word	0xc0196aab
 8016d7c:	08018638 	.word	0x08018638
 8016d80:	08019b90 	.word	0x08019b90
 8016d84:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016d88:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8016d8c:	4610      	mov	r0, r2
 8016d8e:	ec41 0b15 	vmov	d5, r0, r1
 8016d92:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8016d96:	ee27 6b05 	vmul.f64	d6, d7, d5
 8016d9a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8016d9e:	eeb0 4bc7 	vabs.f64	d4, d7
 8016da2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8016da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016daa:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8016e28 <pow+0x490>
 8016dae:	d52a      	bpl.n	8016e06 <pow+0x46e>
 8016db0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016db4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dbc:	ee35 5b06 	vadd.f64	d5, d5, d6
 8016dc0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8016dc4:	bf58      	it	pl
 8016dc6:	eeb0 4b43 	vmovpl.f64	d4, d3
 8016dca:	ee37 3b04 	vadd.f64	d3, d7, d4
 8016dce:	ee34 6b43 	vsub.f64	d6, d4, d3
 8016dd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016dd6:	ee36 6b05 	vadd.f64	d6, d6, d5
 8016dda:	ee36 6b03 	vadd.f64	d6, d6, d3
 8016dde:	ee36 7b44 	vsub.f64	d7, d6, d4
 8016de2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dea:	d104      	bne.n	8016df6 <pow+0x45e>
 8016dec:	4632      	mov	r2, r6
 8016dee:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8016df2:	ec43 2b17 	vmov	d7, r2, r3
 8016df6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016dfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016dfe:	ee26 6b00 	vmul.f64	d6, d6, d0
 8016e02:	ed8d 6b04 	vstr	d6, [sp, #16]
 8016e06:	ee27 0b00 	vmul.f64	d0, d7, d0
 8016e0a:	b007      	add	sp, #28
 8016e0c:	ecbd 8b0a 	vpop	{d8-d12}
 8016e10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e14:	f000 be83 	b.w	8017b1e <__math_check_uflow>
 8016e18:	ec43 2b10 	vmov	d0, r2, r3
 8016e1c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8016e20:	e625      	b.n	8016a6e <pow+0xd6>
 8016e22:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8016e30 <pow+0x498>
 8016e26:	e622      	b.n	8016a6e <pow+0xd6>
 8016e28:	00000000 	.word	0x00000000
 8016e2c:	00100000 	.word	0x00100000
	...

08016e38 <nanf>:
 8016e38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016e40 <nanf+0x8>
 8016e3c:	4770      	bx	lr
 8016e3e:	bf00      	nop
 8016e40:	7fc00000 	.word	0x7fc00000

08016e44 <sinf_poly>:
 8016e44:	07cb      	lsls	r3, r1, #31
 8016e46:	d412      	bmi.n	8016e6e <sinf_poly+0x2a>
 8016e48:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016e4c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8016e50:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8016e54:	eea6 7b01 	vfma.f64	d7, d6, d1
 8016e58:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8016e5c:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016e60:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016e64:	eea7 0b01 	vfma.f64	d0, d7, d1
 8016e68:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016e6c:	4770      	bx	lr
 8016e6e:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8016e72:	ee21 5b01 	vmul.f64	d5, d1, d1
 8016e76:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8016e7a:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8016e7e:	eea1 7b06 	vfma.f64	d7, d1, d6
 8016e82:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8016e86:	eea1 0b06 	vfma.f64	d0, d1, d6
 8016e8a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8016e8e:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016e92:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016e96:	e7e5      	b.n	8016e64 <sinf_poly+0x20>

08016e98 <sinf>:
 8016e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e9a:	ee10 4a10 	vmov	r4, s0
 8016e9e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8016ea2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8016ea6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016eaa:	eef0 7a40 	vmov.f32	s15, s0
 8016eae:	d218      	bcs.n	8016ee2 <sinf+0x4a>
 8016eb0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016eb4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8016eb8:	d20a      	bcs.n	8016ed0 <sinf+0x38>
 8016eba:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8016ebe:	d103      	bne.n	8016ec8 <sinf+0x30>
 8016ec0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8016ec4:	ed8d 1a01 	vstr	s2, [sp, #4]
 8016ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8016ecc:	b003      	add	sp, #12
 8016ece:	bd30      	pop	{r4, r5, pc}
 8016ed0:	483b      	ldr	r0, [pc, #236]	@ (8016fc0 <sinf+0x128>)
 8016ed2:	eeb0 0b46 	vmov.f64	d0, d6
 8016ed6:	2100      	movs	r1, #0
 8016ed8:	b003      	add	sp, #12
 8016eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ede:	f7ff bfb1 	b.w	8016e44 <sinf_poly>
 8016ee2:	f240 422e 	movw	r2, #1070	@ 0x42e
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d824      	bhi.n	8016f34 <sinf+0x9c>
 8016eea:	4b35      	ldr	r3, [pc, #212]	@ (8016fc0 <sinf+0x128>)
 8016eec:	ed93 7b08 	vldr	d7, [r3, #32]
 8016ef0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016ef4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016ef8:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016efc:	ee17 1a90 	vmov	r1, s15
 8016f00:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8016f04:	1609      	asrs	r1, r1, #24
 8016f06:	ee07 1a90 	vmov	s15, r1
 8016f0a:	f001 0203 	and.w	r2, r1, #3
 8016f0e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016f12:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8016f16:	ed92 0b00 	vldr	d0, [r2]
 8016f1a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8016f1e:	f011 0f02 	tst.w	r1, #2
 8016f22:	eea5 6b47 	vfms.f64	d6, d5, d7
 8016f26:	bf08      	it	eq
 8016f28:	4618      	moveq	r0, r3
 8016f2a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016f2e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016f32:	e7d1      	b.n	8016ed8 <sinf+0x40>
 8016f34:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8016f38:	d237      	bcs.n	8016faa <sinf+0x112>
 8016f3a:	4922      	ldr	r1, [pc, #136]	@ (8016fc4 <sinf+0x12c>)
 8016f3c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8016f40:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8016f44:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8016f48:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8016f4c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016f50:	6a10      	ldr	r0, [r2, #32]
 8016f52:	6912      	ldr	r2, [r2, #16]
 8016f54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8016f58:	40ab      	lsls	r3, r5
 8016f5a:	fba0 5003 	umull	r5, r0, r0, r3
 8016f5e:	4359      	muls	r1, r3
 8016f60:	fbe3 0102 	umlal	r0, r1, r3, r2
 8016f64:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8016f68:	0f9d      	lsrs	r5, r3, #30
 8016f6a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8016f6e:	1ac9      	subs	r1, r1, r3
 8016f70:	f7e9 fb9c 	bl	80006ac <__aeabi_l2d>
 8016f74:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8016f78:	4b11      	ldr	r3, [pc, #68]	@ (8016fc0 <sinf+0x128>)
 8016f7a:	f004 0203 	and.w	r2, r4, #3
 8016f7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016f82:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8016fb8 <sinf+0x120>
 8016f86:	ed92 0b00 	vldr	d0, [r2]
 8016f8a:	ec41 0b17 	vmov	d7, r0, r1
 8016f8e:	f014 0f02 	tst.w	r4, #2
 8016f92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f96:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016f9a:	4629      	mov	r1, r5
 8016f9c:	bf08      	it	eq
 8016f9e:	4618      	moveq	r0, r3
 8016fa0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8016fa4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016fa8:	e796      	b.n	8016ed8 <sinf+0x40>
 8016faa:	b003      	add	sp, #12
 8016fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fb0:	f000 b8e4 	b.w	801717c <__math_invalidf>
 8016fb4:	f3af 8000 	nop.w
 8016fb8:	54442d18 	.word	0x54442d18
 8016fbc:	3c1921fb 	.word	0x3c1921fb
 8016fc0:	080196e0 	.word	0x080196e0
 8016fc4:	08019680 	.word	0x08019680

08016fc8 <sinf_poly>:
 8016fc8:	07cb      	lsls	r3, r1, #31
 8016fca:	d412      	bmi.n	8016ff2 <sinf_poly+0x2a>
 8016fcc:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016fd0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8016fd4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8016fd8:	eea6 7b01 	vfma.f64	d7, d6, d1
 8016fdc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8016fe0:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016fe4:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016fe8:	eea7 0b01 	vfma.f64	d0, d7, d1
 8016fec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016ff0:	4770      	bx	lr
 8016ff2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8016ff6:	ee21 5b01 	vmul.f64	d5, d1, d1
 8016ffa:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8016ffe:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8017002:	eea1 7b06 	vfma.f64	d7, d1, d6
 8017006:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801700a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801700e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8017012:	ee21 1b05 	vmul.f64	d1, d1, d5
 8017016:	eea5 0b06 	vfma.f64	d0, d5, d6
 801701a:	e7e5      	b.n	8016fe8 <sinf_poly+0x20>
 801701c:	0000      	movs	r0, r0
	...

08017020 <cosf>:
 8017020:	b538      	push	{r3, r4, r5, lr}
 8017022:	ee10 4a10 	vmov	r4, s0
 8017026:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801702a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801702e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8017032:	d21f      	bcs.n	8017074 <cosf+0x54>
 8017034:	ee27 7b07 	vmul.f64	d7, d7, d7
 8017038:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801703c:	f0c0 8082 	bcc.w	8017144 <cosf+0x124>
 8017040:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017044:	4b44      	ldr	r3, [pc, #272]	@ (8017158 <cosf+0x138>)
 8017046:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801704a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801704e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8017052:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017056:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801705a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801705e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8017062:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017066:	eea4 0b05 	vfma.f64	d0, d4, d5
 801706a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801706e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017072:	bd38      	pop	{r3, r4, r5, pc}
 8017074:	f240 422e 	movw	r2, #1070	@ 0x42e
 8017078:	4293      	cmp	r3, r2
 801707a:	d829      	bhi.n	80170d0 <cosf+0xb0>
 801707c:	4b36      	ldr	r3, [pc, #216]	@ (8017158 <cosf+0x138>)
 801707e:	ed93 6b08 	vldr	d6, [r3, #32]
 8017082:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017086:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801708a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801708e:	ee16 1a90 	vmov	r1, s13
 8017092:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8017096:	1609      	asrs	r1, r1, #24
 8017098:	ee06 1a90 	vmov	s13, r1
 801709c:	f001 0203 	and.w	r2, r1, #3
 80170a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80170a4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80170a8:	ed92 0b00 	vldr	d0, [r2]
 80170ac:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80170b0:	f011 0f02 	tst.w	r1, #2
 80170b4:	f081 0101 	eor.w	r1, r1, #1
 80170b8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80170bc:	bf08      	it	eq
 80170be:	4618      	moveq	r0, r3
 80170c0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80170c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80170cc:	f7ff bf7c 	b.w	8016fc8 <sinf_poly>
 80170d0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80170d4:	d232      	bcs.n	801713c <cosf+0x11c>
 80170d6:	4921      	ldr	r1, [pc, #132]	@ (801715c <cosf+0x13c>)
 80170d8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80170dc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80170e0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80170e4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80170e8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80170ec:	6a10      	ldr	r0, [r2, #32]
 80170ee:	6912      	ldr	r2, [r2, #16]
 80170f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80170f4:	40ab      	lsls	r3, r5
 80170f6:	fba0 5003 	umull	r5, r0, r0, r3
 80170fa:	4359      	muls	r1, r3
 80170fc:	fbe3 0102 	umlal	r0, r1, r3, r2
 8017100:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8017104:	0f9d      	lsrs	r5, r3, #30
 8017106:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801710a:	1ac9      	subs	r1, r1, r3
 801710c:	f7e9 face 	bl	80006ac <__aeabi_l2d>
 8017110:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017114:	4b10      	ldr	r3, [pc, #64]	@ (8017158 <cosf+0x138>)
 8017116:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8017150 <cosf+0x130>
 801711a:	ec41 0b17 	vmov	d7, r0, r1
 801711e:	f004 0203 	and.w	r2, r4, #3
 8017122:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017126:	ed92 0b00 	vldr	d0, [r2]
 801712a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801712e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017132:	f014 0f02 	tst.w	r4, #2
 8017136:	f085 0101 	eor.w	r1, r5, #1
 801713a:	e7bf      	b.n	80170bc <cosf+0x9c>
 801713c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017140:	f000 b81c 	b.w	801717c <__math_invalidf>
 8017144:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017148:	e793      	b.n	8017072 <cosf+0x52>
 801714a:	bf00      	nop
 801714c:	f3af 8000 	nop.w
 8017150:	54442d18 	.word	0x54442d18
 8017154:	3c1921fb 	.word	0x3c1921fb
 8017158:	080196e0 	.word	0x080196e0
 801715c:	08019680 	.word	0x08019680

08017160 <with_errnof>:
 8017160:	b510      	push	{r4, lr}
 8017162:	ed2d 8b02 	vpush	{d8}
 8017166:	eeb0 8a40 	vmov.f32	s16, s0
 801716a:	4604      	mov	r4, r0
 801716c:	f7fd fd8e 	bl	8014c8c <__errno>
 8017170:	eeb0 0a48 	vmov.f32	s0, s16
 8017174:	ecbd 8b02 	vpop	{d8}
 8017178:	6004      	str	r4, [r0, #0]
 801717a:	bd10      	pop	{r4, pc}

0801717c <__math_invalidf>:
 801717c:	eef0 7a40 	vmov.f32	s15, s0
 8017180:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017184:	eef4 7a67 	vcmp.f32	s15, s15
 8017188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801718c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017190:	d602      	bvs.n	8017198 <__math_invalidf+0x1c>
 8017192:	2021      	movs	r0, #33	@ 0x21
 8017194:	f7ff bfe4 	b.w	8017160 <with_errnof>
 8017198:	4770      	bx	lr

0801719a <__ieee754_sqrtf>:
 801719a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801719e:	4770      	bx	lr

080171a0 <__kernel_tanf>:
 80171a0:	b508      	push	{r3, lr}
 80171a2:	ee10 3a10 	vmov	r3, s0
 80171a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80171aa:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80171ae:	eef0 7a40 	vmov.f32	s15, s0
 80171b2:	d217      	bcs.n	80171e4 <__kernel_tanf+0x44>
 80171b4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80171b8:	ee17 1a10 	vmov	r1, s14
 80171bc:	bb41      	cbnz	r1, 8017210 <__kernel_tanf+0x70>
 80171be:	1c43      	adds	r3, r0, #1
 80171c0:	4313      	orrs	r3, r2
 80171c2:	d108      	bne.n	80171d6 <__kernel_tanf+0x36>
 80171c4:	f7ff fb7e 	bl	80168c4 <fabsf>
 80171c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80171cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80171d0:	eeb0 0a67 	vmov.f32	s0, s15
 80171d4:	bd08      	pop	{r3, pc}
 80171d6:	2801      	cmp	r0, #1
 80171d8:	d0fa      	beq.n	80171d0 <__kernel_tanf+0x30>
 80171da:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80171de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80171e2:	e7f5      	b.n	80171d0 <__kernel_tanf+0x30>
 80171e4:	494c      	ldr	r1, [pc, #304]	@ (8017318 <__kernel_tanf+0x178>)
 80171e6:	428a      	cmp	r2, r1
 80171e8:	d312      	bcc.n	8017210 <__kernel_tanf+0x70>
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801731c <__kernel_tanf+0x17c>
 80171f0:	bfb8      	it	lt
 80171f2:	eef1 7a40 	vneglt.f32	s15, s0
 80171f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80171fa:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8017320 <__kernel_tanf+0x180>
 80171fe:	bfb8      	it	lt
 8017200:	eef1 0a60 	vneglt.f32	s1, s1
 8017204:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017208:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8017324 <__kernel_tanf+0x184>
 801720c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017210:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017214:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8017328 <__kernel_tanf+0x188>
 8017218:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801732c <__kernel_tanf+0x18c>
 801721c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8017330 <__kernel_tanf+0x190>
 8017220:	493d      	ldr	r1, [pc, #244]	@ (8017318 <__kernel_tanf+0x178>)
 8017222:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017226:	428a      	cmp	r2, r1
 8017228:	eea7 6a25 	vfma.f32	s12, s14, s11
 801722c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8017334 <__kernel_tanf+0x194>
 8017230:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017234:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8017338 <__kernel_tanf+0x198>
 8017238:	eea5 6a87 	vfma.f32	s12, s11, s14
 801723c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801733c <__kernel_tanf+0x19c>
 8017240:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017244:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8017340 <__kernel_tanf+0x1a0>
 8017248:	eea5 6a87 	vfma.f32	s12, s11, s14
 801724c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8017344 <__kernel_tanf+0x1a4>
 8017250:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017254:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8017348 <__kernel_tanf+0x1a8>
 8017258:	eea5 5a87 	vfma.f32	s10, s11, s14
 801725c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801734c <__kernel_tanf+0x1ac>
 8017260:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017264:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8017350 <__kernel_tanf+0x1b0>
 8017268:	eea5 5a87 	vfma.f32	s10, s11, s14
 801726c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8017354 <__kernel_tanf+0x1b4>
 8017270:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017274:	eeb0 7a46 	vmov.f32	s14, s12
 8017278:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801727c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8017280:	eeb0 6a60 	vmov.f32	s12, s1
 8017284:	eea7 6a05 	vfma.f32	s12, s14, s10
 8017288:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8017358 <__kernel_tanf+0x1b8>
 801728c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8017290:	eee5 0a07 	vfma.f32	s1, s10, s14
 8017294:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8017298:	d31d      	bcc.n	80172d6 <__kernel_tanf+0x136>
 801729a:	ee07 0a10 	vmov	s14, r0
 801729e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172a2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80172a6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80172aa:	179b      	asrs	r3, r3, #30
 80172ac:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80172b0:	f003 0302 	and.w	r3, r3, #2
 80172b4:	f1c3 0301 	rsb	r3, r3, #1
 80172b8:	ee06 3a90 	vmov	s13, r3
 80172bc:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80172c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80172c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80172c8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80172cc:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80172d0:	ee66 7a87 	vmul.f32	s15, s13, s14
 80172d4:	e77c      	b.n	80171d0 <__kernel_tanf+0x30>
 80172d6:	2801      	cmp	r0, #1
 80172d8:	d01b      	beq.n	8017312 <__kernel_tanf+0x172>
 80172da:	4b20      	ldr	r3, [pc, #128]	@ (801735c <__kernel_tanf+0x1bc>)
 80172dc:	ee16 2a10 	vmov	r2, s12
 80172e0:	401a      	ands	r2, r3
 80172e2:	ee05 2a90 	vmov	s11, r2
 80172e6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80172ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80172ee:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80172f2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80172f6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80172fa:	ee16 2a90 	vmov	r2, s13
 80172fe:	4013      	ands	r3, r2
 8017300:	ee07 3a90 	vmov	s15, r3
 8017304:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017308:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801730c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017310:	e75e      	b.n	80171d0 <__kernel_tanf+0x30>
 8017312:	eef0 7a46 	vmov.f32	s15, s12
 8017316:	e75b      	b.n	80171d0 <__kernel_tanf+0x30>
 8017318:	3f2ca140 	.word	0x3f2ca140
 801731c:	3f490fda 	.word	0x3f490fda
 8017320:	33222168 	.word	0x33222168
 8017324:	00000000 	.word	0x00000000
 8017328:	b79bae5f 	.word	0xb79bae5f
 801732c:	38a3f445 	.word	0x38a3f445
 8017330:	37d95384 	.word	0x37d95384
 8017334:	3a1a26c8 	.word	0x3a1a26c8
 8017338:	3b6b6916 	.word	0x3b6b6916
 801733c:	3cb327a4 	.word	0x3cb327a4
 8017340:	3e088889 	.word	0x3e088889
 8017344:	3895c07a 	.word	0x3895c07a
 8017348:	398137b9 	.word	0x398137b9
 801734c:	3abede48 	.word	0x3abede48
 8017350:	3c11371f 	.word	0x3c11371f
 8017354:	3d5d0dd1 	.word	0x3d5d0dd1
 8017358:	3eaaaaab 	.word	0x3eaaaaab
 801735c:	fffff000 	.word	0xfffff000

08017360 <__ieee754_asinf>:
 8017360:	b538      	push	{r3, r4, r5, lr}
 8017362:	ee10 5a10 	vmov	r5, s0
 8017366:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801736a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801736e:	ed2d 8b04 	vpush	{d8-d9}
 8017372:	d10c      	bne.n	801738e <__ieee754_asinf+0x2e>
 8017374:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80174e8 <__ieee754_asinf+0x188>
 8017378:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80174ec <__ieee754_asinf+0x18c>
 801737c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017380:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017384:	eeb0 0a67 	vmov.f32	s0, s15
 8017388:	ecbd 8b04 	vpop	{d8-d9}
 801738c:	bd38      	pop	{r3, r4, r5, pc}
 801738e:	d904      	bls.n	801739a <__ieee754_asinf+0x3a>
 8017390:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017394:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8017398:	e7f6      	b.n	8017388 <__ieee754_asinf+0x28>
 801739a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801739e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80173a2:	d20b      	bcs.n	80173bc <__ieee754_asinf+0x5c>
 80173a4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80173a8:	d252      	bcs.n	8017450 <__ieee754_asinf+0xf0>
 80173aa:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80174f0 <__ieee754_asinf+0x190>
 80173ae:	ee70 7a27 	vadd.f32	s15, s0, s15
 80173b2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80173b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ba:	dce5      	bgt.n	8017388 <__ieee754_asinf+0x28>
 80173bc:	f7ff fa82 	bl	80168c4 <fabsf>
 80173c0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80173c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80173c8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80173cc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80174f4 <__ieee754_asinf+0x194>
 80173d0:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80174f8 <__ieee754_asinf+0x198>
 80173d4:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 80174fc <__ieee754_asinf+0x19c>
 80173d8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80173dc:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8017500 <__ieee754_asinf+0x1a0>
 80173e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80173e4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8017504 <__ieee754_asinf+0x1a4>
 80173e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80173ec:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8017508 <__ieee754_asinf+0x1a8>
 80173f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80173f4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801750c <__ieee754_asinf+0x1ac>
 80173f8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80173fc:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8017510 <__ieee754_asinf+0x1b0>
 8017400:	eee8 7a07 	vfma.f32	s15, s16, s14
 8017404:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8017514 <__ieee754_asinf+0x1b4>
 8017408:	eea7 7a88 	vfma.f32	s14, s15, s16
 801740c:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8017518 <__ieee754_asinf+0x1b8>
 8017410:	eee7 7a08 	vfma.f32	s15, s14, s16
 8017414:	eeb0 0a48 	vmov.f32	s0, s16
 8017418:	eee7 8a88 	vfma.f32	s17, s15, s16
 801741c:	f7ff febd 	bl	801719a <__ieee754_sqrtf>
 8017420:	4b3e      	ldr	r3, [pc, #248]	@ (801751c <__ieee754_asinf+0x1bc>)
 8017422:	ee29 9a08 	vmul.f32	s18, s18, s16
 8017426:	429c      	cmp	r4, r3
 8017428:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801742c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8017430:	d93d      	bls.n	80174ae <__ieee754_asinf+0x14e>
 8017432:	eea0 0a06 	vfma.f32	s0, s0, s12
 8017436:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8017520 <__ieee754_asinf+0x1c0>
 801743a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801743e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80174ec <__ieee754_asinf+0x18c>
 8017442:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017446:	2d00      	cmp	r5, #0
 8017448:	bfd8      	it	le
 801744a:	eeb1 0a40 	vnegle.f32	s0, s0
 801744e:	e79b      	b.n	8017388 <__ieee754_asinf+0x28>
 8017450:	ee60 7a00 	vmul.f32	s15, s0, s0
 8017454:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80174f8 <__ieee754_asinf+0x198>
 8017458:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80174f4 <__ieee754_asinf+0x194>
 801745c:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801750c <__ieee754_asinf+0x1ac>
 8017460:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017464:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8017500 <__ieee754_asinf+0x1a0>
 8017468:	eee7 6a27 	vfma.f32	s13, s14, s15
 801746c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8017504 <__ieee754_asinf+0x1a4>
 8017470:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017474:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8017508 <__ieee754_asinf+0x1a8>
 8017478:	eee7 6a27 	vfma.f32	s13, s14, s15
 801747c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80174fc <__ieee754_asinf+0x19c>
 8017480:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017484:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8017510 <__ieee754_asinf+0x1b0>
 8017488:	eee7 6a86 	vfma.f32	s13, s15, s12
 801748c:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8017514 <__ieee754_asinf+0x1b4>
 8017490:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8017494:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8017518 <__ieee754_asinf+0x1b8>
 8017498:	eee6 6a27 	vfma.f32	s13, s12, s15
 801749c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80174a0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80174a4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80174a8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80174ac:	e76c      	b.n	8017388 <__ieee754_asinf+0x28>
 80174ae:	ee10 3a10 	vmov	r3, s0
 80174b2:	f36f 030b 	bfc	r3, #0, #12
 80174b6:	ee07 3a10 	vmov	s14, r3
 80174ba:	eea7 8a47 	vfms.f32	s16, s14, s14
 80174be:	ee70 5a00 	vadd.f32	s11, s0, s0
 80174c2:	ee30 0a07 	vadd.f32	s0, s0, s14
 80174c6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80174e8 <__ieee754_asinf+0x188>
 80174ca:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80174ce:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8017524 <__ieee754_asinf+0x1c4>
 80174d2:	eee5 7a66 	vfms.f32	s15, s10, s13
 80174d6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80174da:	eeb0 6a40 	vmov.f32	s12, s0
 80174de:	eea7 6a66 	vfms.f32	s12, s14, s13
 80174e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80174e6:	e7ac      	b.n	8017442 <__ieee754_asinf+0xe2>
 80174e8:	b33bbd2e 	.word	0xb33bbd2e
 80174ec:	3fc90fdb 	.word	0x3fc90fdb
 80174f0:	7149f2ca 	.word	0x7149f2ca
 80174f4:	3a4f7f04 	.word	0x3a4f7f04
 80174f8:	3811ef08 	.word	0x3811ef08
 80174fc:	3e2aaaab 	.word	0x3e2aaaab
 8017500:	bd241146 	.word	0xbd241146
 8017504:	3e4e0aa8 	.word	0x3e4e0aa8
 8017508:	bea6b090 	.word	0xbea6b090
 801750c:	3d9dc62e 	.word	0x3d9dc62e
 8017510:	bf303361 	.word	0xbf303361
 8017514:	4001572d 	.word	0x4001572d
 8017518:	c019d139 	.word	0xc019d139
 801751c:	3f799999 	.word	0x3f799999
 8017520:	333bbd2e 	.word	0x333bbd2e
 8017524:	3f490fdb 	.word	0x3f490fdb

08017528 <__ieee754_atan2f>:
 8017528:	ee10 2a90 	vmov	r2, s1
 801752c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8017530:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8017534:	b510      	push	{r4, lr}
 8017536:	eef0 7a40 	vmov.f32	s15, s0
 801753a:	d806      	bhi.n	801754a <__ieee754_atan2f+0x22>
 801753c:	ee10 0a10 	vmov	r0, s0
 8017540:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8017544:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017548:	d904      	bls.n	8017554 <__ieee754_atan2f+0x2c>
 801754a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801754e:	eeb0 0a67 	vmov.f32	s0, s15
 8017552:	bd10      	pop	{r4, pc}
 8017554:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8017558:	d103      	bne.n	8017562 <__ieee754_atan2f+0x3a>
 801755a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801755e:	f000 b9b1 	b.w	80178c4 <atanf>
 8017562:	1794      	asrs	r4, r2, #30
 8017564:	f004 0402 	and.w	r4, r4, #2
 8017568:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801756c:	b93b      	cbnz	r3, 801757e <__ieee754_atan2f+0x56>
 801756e:	2c02      	cmp	r4, #2
 8017570:	d05c      	beq.n	801762c <__ieee754_atan2f+0x104>
 8017572:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8017640 <__ieee754_atan2f+0x118>
 8017576:	2c03      	cmp	r4, #3
 8017578:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801757c:	e7e7      	b.n	801754e <__ieee754_atan2f+0x26>
 801757e:	b939      	cbnz	r1, 8017590 <__ieee754_atan2f+0x68>
 8017580:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8017644 <__ieee754_atan2f+0x11c>
 8017584:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8017648 <__ieee754_atan2f+0x120>
 8017588:	2800      	cmp	r0, #0
 801758a:	fe67 7a27 	vselge.f32	s15, s14, s15
 801758e:	e7de      	b.n	801754e <__ieee754_atan2f+0x26>
 8017590:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8017594:	d110      	bne.n	80175b8 <__ieee754_atan2f+0x90>
 8017596:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801759a:	f104 34ff 	add.w	r4, r4, #4294967295
 801759e:	d107      	bne.n	80175b0 <__ieee754_atan2f+0x88>
 80175a0:	2c02      	cmp	r4, #2
 80175a2:	d846      	bhi.n	8017632 <__ieee754_atan2f+0x10a>
 80175a4:	4b29      	ldr	r3, [pc, #164]	@ (801764c <__ieee754_atan2f+0x124>)
 80175a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80175aa:	edd3 7a00 	vldr	s15, [r3]
 80175ae:	e7ce      	b.n	801754e <__ieee754_atan2f+0x26>
 80175b0:	2c02      	cmp	r4, #2
 80175b2:	d841      	bhi.n	8017638 <__ieee754_atan2f+0x110>
 80175b4:	4b26      	ldr	r3, [pc, #152]	@ (8017650 <__ieee754_atan2f+0x128>)
 80175b6:	e7f6      	b.n	80175a6 <__ieee754_atan2f+0x7e>
 80175b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80175bc:	d0e0      	beq.n	8017580 <__ieee754_atan2f+0x58>
 80175be:	1a5b      	subs	r3, r3, r1
 80175c0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80175c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80175c8:	da1a      	bge.n	8017600 <__ieee754_atan2f+0xd8>
 80175ca:	2a00      	cmp	r2, #0
 80175cc:	da01      	bge.n	80175d2 <__ieee754_atan2f+0xaa>
 80175ce:	313c      	adds	r1, #60	@ 0x3c
 80175d0:	db19      	blt.n	8017606 <__ieee754_atan2f+0xde>
 80175d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80175d6:	f7ff f975 	bl	80168c4 <fabsf>
 80175da:	f000 f973 	bl	80178c4 <atanf>
 80175de:	eef0 7a40 	vmov.f32	s15, s0
 80175e2:	2c01      	cmp	r4, #1
 80175e4:	d012      	beq.n	801760c <__ieee754_atan2f+0xe4>
 80175e6:	2c02      	cmp	r4, #2
 80175e8:	d017      	beq.n	801761a <__ieee754_atan2f+0xf2>
 80175ea:	2c00      	cmp	r4, #0
 80175ec:	d0af      	beq.n	801754e <__ieee754_atan2f+0x26>
 80175ee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8017654 <__ieee754_atan2f+0x12c>
 80175f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80175f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8017658 <__ieee754_atan2f+0x130>
 80175fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80175fe:	e7a6      	b.n	801754e <__ieee754_atan2f+0x26>
 8017600:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8017648 <__ieee754_atan2f+0x120>
 8017604:	e7ed      	b.n	80175e2 <__ieee754_atan2f+0xba>
 8017606:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801765c <__ieee754_atan2f+0x134>
 801760a:	e7ea      	b.n	80175e2 <__ieee754_atan2f+0xba>
 801760c:	ee17 3a90 	vmov	r3, s15
 8017610:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8017614:	ee07 3a90 	vmov	s15, r3
 8017618:	e799      	b.n	801754e <__ieee754_atan2f+0x26>
 801761a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8017654 <__ieee754_atan2f+0x12c>
 801761e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017622:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8017658 <__ieee754_atan2f+0x130>
 8017626:	ee77 7a67 	vsub.f32	s15, s14, s15
 801762a:	e790      	b.n	801754e <__ieee754_atan2f+0x26>
 801762c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8017658 <__ieee754_atan2f+0x130>
 8017630:	e78d      	b.n	801754e <__ieee754_atan2f+0x26>
 8017632:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8017660 <__ieee754_atan2f+0x138>
 8017636:	e78a      	b.n	801754e <__ieee754_atan2f+0x26>
 8017638:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801765c <__ieee754_atan2f+0x134>
 801763c:	e787      	b.n	801754e <__ieee754_atan2f+0x26>
 801763e:	bf00      	nop
 8017640:	c0490fdb 	.word	0xc0490fdb
 8017644:	bfc90fdb 	.word	0xbfc90fdb
 8017648:	3fc90fdb 	.word	0x3fc90fdb
 801764c:	080197cc 	.word	0x080197cc
 8017650:	080197c0 	.word	0x080197c0
 8017654:	33bbbd2e 	.word	0x33bbbd2e
 8017658:	40490fdb 	.word	0x40490fdb
 801765c:	00000000 	.word	0x00000000
 8017660:	3f490fdb 	.word	0x3f490fdb

08017664 <__ieee754_rem_pio2f>:
 8017664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017666:	ee10 6a10 	vmov	r6, s0
 801766a:	4b88      	ldr	r3, [pc, #544]	@ (801788c <__ieee754_rem_pio2f+0x228>)
 801766c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8017670:	429d      	cmp	r5, r3
 8017672:	b087      	sub	sp, #28
 8017674:	4604      	mov	r4, r0
 8017676:	d805      	bhi.n	8017684 <__ieee754_rem_pio2f+0x20>
 8017678:	2300      	movs	r3, #0
 801767a:	ed80 0a00 	vstr	s0, [r0]
 801767e:	6043      	str	r3, [r0, #4]
 8017680:	2000      	movs	r0, #0
 8017682:	e022      	b.n	80176ca <__ieee754_rem_pio2f+0x66>
 8017684:	4b82      	ldr	r3, [pc, #520]	@ (8017890 <__ieee754_rem_pio2f+0x22c>)
 8017686:	429d      	cmp	r5, r3
 8017688:	d83a      	bhi.n	8017700 <__ieee754_rem_pio2f+0x9c>
 801768a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801768e:	2e00      	cmp	r6, #0
 8017690:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8017894 <__ieee754_rem_pio2f+0x230>
 8017694:	4a80      	ldr	r2, [pc, #512]	@ (8017898 <__ieee754_rem_pio2f+0x234>)
 8017696:	f023 030f 	bic.w	r3, r3, #15
 801769a:	dd18      	ble.n	80176ce <__ieee754_rem_pio2f+0x6a>
 801769c:	4293      	cmp	r3, r2
 801769e:	ee70 7a47 	vsub.f32	s15, s0, s14
 80176a2:	bf09      	itett	eq
 80176a4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801789c <__ieee754_rem_pio2f+0x238>
 80176a8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80178a0 <__ieee754_rem_pio2f+0x23c>
 80176ac:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80178a4 <__ieee754_rem_pio2f+0x240>
 80176b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80176b4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80176b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80176bc:	ed80 7a00 	vstr	s14, [r0]
 80176c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80176c4:	edc0 7a01 	vstr	s15, [r0, #4]
 80176c8:	2001      	movs	r0, #1
 80176ca:	b007      	add	sp, #28
 80176cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ce:	4293      	cmp	r3, r2
 80176d0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80176d4:	bf09      	itett	eq
 80176d6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801789c <__ieee754_rem_pio2f+0x238>
 80176da:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80178a0 <__ieee754_rem_pio2f+0x23c>
 80176de:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80178a4 <__ieee754_rem_pio2f+0x240>
 80176e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80176e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80176ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80176ee:	ed80 7a00 	vstr	s14, [r0]
 80176f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80176f6:	edc0 7a01 	vstr	s15, [r0, #4]
 80176fa:	f04f 30ff 	mov.w	r0, #4294967295
 80176fe:	e7e4      	b.n	80176ca <__ieee754_rem_pio2f+0x66>
 8017700:	4b69      	ldr	r3, [pc, #420]	@ (80178a8 <__ieee754_rem_pio2f+0x244>)
 8017702:	429d      	cmp	r5, r3
 8017704:	d873      	bhi.n	80177ee <__ieee754_rem_pio2f+0x18a>
 8017706:	f7ff f8dd 	bl	80168c4 <fabsf>
 801770a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80178ac <__ieee754_rem_pio2f+0x248>
 801770e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017712:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801771a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801771e:	ee17 0a90 	vmov	r0, s15
 8017722:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8017894 <__ieee754_rem_pio2f+0x230>
 8017726:	eea7 0a67 	vfms.f32	s0, s14, s15
 801772a:	281f      	cmp	r0, #31
 801772c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80178a0 <__ieee754_rem_pio2f+0x23c>
 8017730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017734:	eeb1 6a47 	vneg.f32	s12, s14
 8017738:	ee70 6a67 	vsub.f32	s13, s0, s15
 801773c:	ee16 1a90 	vmov	r1, s13
 8017740:	dc09      	bgt.n	8017756 <__ieee754_rem_pio2f+0xf2>
 8017742:	4a5b      	ldr	r2, [pc, #364]	@ (80178b0 <__ieee754_rem_pio2f+0x24c>)
 8017744:	1e47      	subs	r7, r0, #1
 8017746:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801774a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801774e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017752:	4293      	cmp	r3, r2
 8017754:	d107      	bne.n	8017766 <__ieee754_rem_pio2f+0x102>
 8017756:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801775a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801775e:	2a08      	cmp	r2, #8
 8017760:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8017764:	dc14      	bgt.n	8017790 <__ieee754_rem_pio2f+0x12c>
 8017766:	6021      	str	r1, [r4, #0]
 8017768:	ed94 7a00 	vldr	s14, [r4]
 801776c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017770:	2e00      	cmp	r6, #0
 8017772:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017776:	ed84 0a01 	vstr	s0, [r4, #4]
 801777a:	daa6      	bge.n	80176ca <__ieee754_rem_pio2f+0x66>
 801777c:	eeb1 7a47 	vneg.f32	s14, s14
 8017780:	eeb1 0a40 	vneg.f32	s0, s0
 8017784:	ed84 7a00 	vstr	s14, [r4]
 8017788:	ed84 0a01 	vstr	s0, [r4, #4]
 801778c:	4240      	negs	r0, r0
 801778e:	e79c      	b.n	80176ca <__ieee754_rem_pio2f+0x66>
 8017790:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801789c <__ieee754_rem_pio2f+0x238>
 8017794:	eef0 6a40 	vmov.f32	s13, s0
 8017798:	eee6 6a25 	vfma.f32	s13, s12, s11
 801779c:	ee70 7a66 	vsub.f32	s15, s0, s13
 80177a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80177a4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80178a4 <__ieee754_rem_pio2f+0x240>
 80177a8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80177ac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80177b0:	ee15 2a90 	vmov	r2, s11
 80177b4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80177b8:	1a5b      	subs	r3, r3, r1
 80177ba:	2b19      	cmp	r3, #25
 80177bc:	dc04      	bgt.n	80177c8 <__ieee754_rem_pio2f+0x164>
 80177be:	edc4 5a00 	vstr	s11, [r4]
 80177c2:	eeb0 0a66 	vmov.f32	s0, s13
 80177c6:	e7cf      	b.n	8017768 <__ieee754_rem_pio2f+0x104>
 80177c8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80178b4 <__ieee754_rem_pio2f+0x250>
 80177cc:	eeb0 0a66 	vmov.f32	s0, s13
 80177d0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80177d4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80177d8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80178b8 <__ieee754_rem_pio2f+0x254>
 80177dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80177e0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80177e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80177e8:	ed84 7a00 	vstr	s14, [r4]
 80177ec:	e7bc      	b.n	8017768 <__ieee754_rem_pio2f+0x104>
 80177ee:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80177f2:	d306      	bcc.n	8017802 <__ieee754_rem_pio2f+0x19e>
 80177f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80177f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80177fc:	edc0 7a00 	vstr	s15, [r0]
 8017800:	e73e      	b.n	8017680 <__ieee754_rem_pio2f+0x1c>
 8017802:	15ea      	asrs	r2, r5, #23
 8017804:	3a86      	subs	r2, #134	@ 0x86
 8017806:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801780a:	ee07 3a90 	vmov	s15, r3
 801780e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017812:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80178bc <__ieee754_rem_pio2f+0x258>
 8017816:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801781a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801781e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8017822:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017826:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801782a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801782e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017832:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017836:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801783a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017842:	edcd 7a05 	vstr	s15, [sp, #20]
 8017846:	d11e      	bne.n	8017886 <__ieee754_rem_pio2f+0x222>
 8017848:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017850:	bf0c      	ite	eq
 8017852:	2301      	moveq	r3, #1
 8017854:	2302      	movne	r3, #2
 8017856:	491a      	ldr	r1, [pc, #104]	@ (80178c0 <__ieee754_rem_pio2f+0x25c>)
 8017858:	9101      	str	r1, [sp, #4]
 801785a:	2102      	movs	r1, #2
 801785c:	9100      	str	r1, [sp, #0]
 801785e:	a803      	add	r0, sp, #12
 8017860:	4621      	mov	r1, r4
 8017862:	f000 f979 	bl	8017b58 <__kernel_rem_pio2f>
 8017866:	2e00      	cmp	r6, #0
 8017868:	f6bf af2f 	bge.w	80176ca <__ieee754_rem_pio2f+0x66>
 801786c:	edd4 7a00 	vldr	s15, [r4]
 8017870:	eef1 7a67 	vneg.f32	s15, s15
 8017874:	edc4 7a00 	vstr	s15, [r4]
 8017878:	edd4 7a01 	vldr	s15, [r4, #4]
 801787c:	eef1 7a67 	vneg.f32	s15, s15
 8017880:	edc4 7a01 	vstr	s15, [r4, #4]
 8017884:	e782      	b.n	801778c <__ieee754_rem_pio2f+0x128>
 8017886:	2303      	movs	r3, #3
 8017888:	e7e5      	b.n	8017856 <__ieee754_rem_pio2f+0x1f2>
 801788a:	bf00      	nop
 801788c:	3f490fd8 	.word	0x3f490fd8
 8017890:	4016cbe3 	.word	0x4016cbe3
 8017894:	3fc90f80 	.word	0x3fc90f80
 8017898:	3fc90fd0 	.word	0x3fc90fd0
 801789c:	37354400 	.word	0x37354400
 80178a0:	37354443 	.word	0x37354443
 80178a4:	2e85a308 	.word	0x2e85a308
 80178a8:	43490f80 	.word	0x43490f80
 80178ac:	3f22f984 	.word	0x3f22f984
 80178b0:	080197d8 	.word	0x080197d8
 80178b4:	2e85a300 	.word	0x2e85a300
 80178b8:	248d3132 	.word	0x248d3132
 80178bc:	43800000 	.word	0x43800000
 80178c0:	08019858 	.word	0x08019858

080178c4 <atanf>:
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	ee10 5a10 	vmov	r5, s0
 80178ca:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80178ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80178d2:	eef0 7a40 	vmov.f32	s15, s0
 80178d6:	d30f      	bcc.n	80178f8 <atanf+0x34>
 80178d8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80178dc:	d904      	bls.n	80178e8 <atanf+0x24>
 80178de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80178e2:	eeb0 0a67 	vmov.f32	s0, s15
 80178e6:	bd38      	pop	{r3, r4, r5, pc}
 80178e8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017a20 <atanf+0x15c>
 80178ec:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017a24 <atanf+0x160>
 80178f0:	2d00      	cmp	r5, #0
 80178f2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80178f6:	e7f4      	b.n	80178e2 <atanf+0x1e>
 80178f8:	4b4b      	ldr	r3, [pc, #300]	@ (8017a28 <atanf+0x164>)
 80178fa:	429c      	cmp	r4, r3
 80178fc:	d810      	bhi.n	8017920 <atanf+0x5c>
 80178fe:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017902:	d20a      	bcs.n	801791a <atanf+0x56>
 8017904:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017a2c <atanf+0x168>
 8017908:	ee30 7a07 	vadd.f32	s14, s0, s14
 801790c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017910:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017918:	dce3      	bgt.n	80178e2 <atanf+0x1e>
 801791a:	f04f 33ff 	mov.w	r3, #4294967295
 801791e:	e013      	b.n	8017948 <atanf+0x84>
 8017920:	f7fe ffd0 	bl	80168c4 <fabsf>
 8017924:	4b42      	ldr	r3, [pc, #264]	@ (8017a30 <atanf+0x16c>)
 8017926:	429c      	cmp	r4, r3
 8017928:	d84f      	bhi.n	80179ca <atanf+0x106>
 801792a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801792e:	429c      	cmp	r4, r3
 8017930:	d841      	bhi.n	80179b6 <atanf+0xf2>
 8017932:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017936:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801793a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801793e:	2300      	movs	r3, #0
 8017940:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017944:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017948:	1c5a      	adds	r2, r3, #1
 801794a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801794e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8017a34 <atanf+0x170>
 8017952:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8017a38 <atanf+0x174>
 8017956:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8017a3c <atanf+0x178>
 801795a:	ee66 6a06 	vmul.f32	s13, s12, s12
 801795e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017962:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8017a40 <atanf+0x17c>
 8017966:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801796a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8017a44 <atanf+0x180>
 801796e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017972:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8017a48 <atanf+0x184>
 8017976:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801797a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8017a4c <atanf+0x188>
 801797e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017982:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8017a50 <atanf+0x18c>
 8017986:	eea6 5a87 	vfma.f32	s10, s13, s14
 801798a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017a54 <atanf+0x190>
 801798e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017992:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8017a58 <atanf+0x194>
 8017996:	eea7 5a26 	vfma.f32	s10, s14, s13
 801799a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8017a5c <atanf+0x198>
 801799e:	eea5 7a26 	vfma.f32	s14, s10, s13
 80179a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80179a6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80179aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80179ae:	d121      	bne.n	80179f4 <atanf+0x130>
 80179b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179b4:	e795      	b.n	80178e2 <atanf+0x1e>
 80179b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80179ba:	ee30 7a67 	vsub.f32	s14, s0, s15
 80179be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80179c2:	2301      	movs	r3, #1
 80179c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80179c8:	e7be      	b.n	8017948 <atanf+0x84>
 80179ca:	4b25      	ldr	r3, [pc, #148]	@ (8017a60 <atanf+0x19c>)
 80179cc:	429c      	cmp	r4, r3
 80179ce:	d80b      	bhi.n	80179e8 <atanf+0x124>
 80179d0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80179d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80179d8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80179dc:	2302      	movs	r3, #2
 80179de:	ee70 6a67 	vsub.f32	s13, s0, s15
 80179e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80179e6:	e7af      	b.n	8017948 <atanf+0x84>
 80179e8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80179ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80179f0:	2303      	movs	r3, #3
 80179f2:	e7a9      	b.n	8017948 <atanf+0x84>
 80179f4:	4a1b      	ldr	r2, [pc, #108]	@ (8017a64 <atanf+0x1a0>)
 80179f6:	491c      	ldr	r1, [pc, #112]	@ (8017a68 <atanf+0x1a4>)
 80179f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80179fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017a00:	edd3 6a00 	vldr	s13, [r3]
 8017a04:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017a08:	2d00      	cmp	r5, #0
 8017a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017a0e:	edd2 7a00 	vldr	s15, [r2]
 8017a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a16:	bfb8      	it	lt
 8017a18:	eef1 7a67 	vneglt.f32	s15, s15
 8017a1c:	e761      	b.n	80178e2 <atanf+0x1e>
 8017a1e:	bf00      	nop
 8017a20:	bfc90fdb 	.word	0xbfc90fdb
 8017a24:	3fc90fdb 	.word	0x3fc90fdb
 8017a28:	3edfffff 	.word	0x3edfffff
 8017a2c:	7149f2ca 	.word	0x7149f2ca
 8017a30:	3f97ffff 	.word	0x3f97ffff
 8017a34:	3c8569d7 	.word	0x3c8569d7
 8017a38:	3d4bda59 	.word	0x3d4bda59
 8017a3c:	bd6ef16b 	.word	0xbd6ef16b
 8017a40:	3d886b35 	.word	0x3d886b35
 8017a44:	3dba2e6e 	.word	0x3dba2e6e
 8017a48:	3e124925 	.word	0x3e124925
 8017a4c:	3eaaaaab 	.word	0x3eaaaaab
 8017a50:	bd15a221 	.word	0xbd15a221
 8017a54:	bd9d8795 	.word	0xbd9d8795
 8017a58:	bde38e38 	.word	0xbde38e38
 8017a5c:	be4ccccd 	.word	0xbe4ccccd
 8017a60:	401bffff 	.word	0x401bffff
 8017a64:	08019b80 	.word	0x08019b80
 8017a68:	08019b70 	.word	0x08019b70

08017a6c <with_errno>:
 8017a6c:	b510      	push	{r4, lr}
 8017a6e:	ed2d 8b02 	vpush	{d8}
 8017a72:	eeb0 8b40 	vmov.f64	d8, d0
 8017a76:	4604      	mov	r4, r0
 8017a78:	f7fd f908 	bl	8014c8c <__errno>
 8017a7c:	eeb0 0b48 	vmov.f64	d0, d8
 8017a80:	ecbd 8b02 	vpop	{d8}
 8017a84:	6004      	str	r4, [r0, #0]
 8017a86:	bd10      	pop	{r4, pc}

08017a88 <xflow>:
 8017a88:	b082      	sub	sp, #8
 8017a8a:	b158      	cbz	r0, 8017aa4 <xflow+0x1c>
 8017a8c:	eeb1 7b40 	vneg.f64	d7, d0
 8017a90:	ed8d 7b00 	vstr	d7, [sp]
 8017a94:	ed9d 7b00 	vldr	d7, [sp]
 8017a98:	2022      	movs	r0, #34	@ 0x22
 8017a9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017a9e:	b002      	add	sp, #8
 8017aa0:	f7ff bfe4 	b.w	8017a6c <with_errno>
 8017aa4:	eeb0 7b40 	vmov.f64	d7, d0
 8017aa8:	e7f2      	b.n	8017a90 <xflow+0x8>
 8017aaa:	0000      	movs	r0, r0
 8017aac:	0000      	movs	r0, r0
	...

08017ab0 <__math_uflow>:
 8017ab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017ab8 <__math_uflow+0x8>
 8017ab4:	f7ff bfe8 	b.w	8017a88 <xflow>
 8017ab8:	00000000 	.word	0x00000000
 8017abc:	10000000 	.word	0x10000000

08017ac0 <__math_oflow>:
 8017ac0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017ac8 <__math_oflow+0x8>
 8017ac4:	f7ff bfe0 	b.w	8017a88 <xflow>
 8017ac8:	00000000 	.word	0x00000000
 8017acc:	70000000 	.word	0x70000000

08017ad0 <__math_divzero>:
 8017ad0:	b082      	sub	sp, #8
 8017ad2:	2800      	cmp	r0, #0
 8017ad4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8017ad8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8017adc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8017ae0:	ed8d 7b00 	vstr	d7, [sp]
 8017ae4:	ed9d 0b00 	vldr	d0, [sp]
 8017ae8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8017af8 <__math_divzero+0x28>
 8017aec:	2022      	movs	r0, #34	@ 0x22
 8017aee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8017af2:	b002      	add	sp, #8
 8017af4:	f7ff bfba 	b.w	8017a6c <with_errno>
	...

08017b00 <__math_invalid>:
 8017b00:	eeb0 7b40 	vmov.f64	d7, d0
 8017b04:	eeb4 7b47 	vcmp.f64	d7, d7
 8017b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b0c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017b10:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017b14:	d602      	bvs.n	8017b1c <__math_invalid+0x1c>
 8017b16:	2021      	movs	r0, #33	@ 0x21
 8017b18:	f7ff bfa8 	b.w	8017a6c <with_errno>
 8017b1c:	4770      	bx	lr

08017b1e <__math_check_uflow>:
 8017b1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b26:	d102      	bne.n	8017b2e <__math_check_uflow+0x10>
 8017b28:	2022      	movs	r0, #34	@ 0x22
 8017b2a:	f7ff bf9f 	b.w	8017a6c <with_errno>
 8017b2e:	4770      	bx	lr

08017b30 <__math_check_oflow>:
 8017b30:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8017b50 <__math_check_oflow+0x20>
 8017b34:	eeb0 7bc0 	vabs.f64	d7, d0
 8017b38:	eeb4 7b46 	vcmp.f64	d7, d6
 8017b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b40:	dd02      	ble.n	8017b48 <__math_check_oflow+0x18>
 8017b42:	2022      	movs	r0, #34	@ 0x22
 8017b44:	f7ff bf92 	b.w	8017a6c <with_errno>
 8017b48:	4770      	bx	lr
 8017b4a:	bf00      	nop
 8017b4c:	f3af 8000 	nop.w
 8017b50:	ffffffff 	.word	0xffffffff
 8017b54:	7fefffff 	.word	0x7fefffff

08017b58 <__kernel_rem_pio2f>:
 8017b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b5c:	ed2d 8b04 	vpush	{d8-d9}
 8017b60:	b0d9      	sub	sp, #356	@ 0x164
 8017b62:	4690      	mov	r8, r2
 8017b64:	9001      	str	r0, [sp, #4]
 8017b66:	4ab6      	ldr	r2, [pc, #728]	@ (8017e40 <__kernel_rem_pio2f+0x2e8>)
 8017b68:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8017b6a:	f118 0f04 	cmn.w	r8, #4
 8017b6e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8017b72:	460f      	mov	r7, r1
 8017b74:	f103 3bff 	add.w	fp, r3, #4294967295
 8017b78:	db26      	blt.n	8017bc8 <__kernel_rem_pio2f+0x70>
 8017b7a:	f1b8 0203 	subs.w	r2, r8, #3
 8017b7e:	bf48      	it	mi
 8017b80:	f108 0204 	addmi.w	r2, r8, #4
 8017b84:	10d2      	asrs	r2, r2, #3
 8017b86:	1c55      	adds	r5, r2, #1
 8017b88:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017b8a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8017e50 <__kernel_rem_pio2f+0x2f8>
 8017b8e:	00e8      	lsls	r0, r5, #3
 8017b90:	eba2 060b 	sub.w	r6, r2, fp
 8017b94:	9002      	str	r0, [sp, #8]
 8017b96:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8017b9a:	eb0a 0c0b 	add.w	ip, sl, fp
 8017b9e:	ac1c      	add	r4, sp, #112	@ 0x70
 8017ba0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8017ba4:	2000      	movs	r0, #0
 8017ba6:	4560      	cmp	r0, ip
 8017ba8:	dd10      	ble.n	8017bcc <__kernel_rem_pio2f+0x74>
 8017baa:	a91c      	add	r1, sp, #112	@ 0x70
 8017bac:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8017bb0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8017bb4:	2600      	movs	r6, #0
 8017bb6:	4556      	cmp	r6, sl
 8017bb8:	dc24      	bgt.n	8017c04 <__kernel_rem_pio2f+0xac>
 8017bba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017bbe:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8017e50 <__kernel_rem_pio2f+0x2f8>
 8017bc2:	4684      	mov	ip, r0
 8017bc4:	2400      	movs	r4, #0
 8017bc6:	e016      	b.n	8017bf6 <__kernel_rem_pio2f+0x9e>
 8017bc8:	2200      	movs	r2, #0
 8017bca:	e7dc      	b.n	8017b86 <__kernel_rem_pio2f+0x2e>
 8017bcc:	42c6      	cmn	r6, r0
 8017bce:	bf5d      	ittte	pl
 8017bd0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8017bd4:	ee07 1a90 	vmovpl	s15, r1
 8017bd8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017bdc:	eef0 7a47 	vmovmi.f32	s15, s14
 8017be0:	ece4 7a01 	vstmia	r4!, {s15}
 8017be4:	3001      	adds	r0, #1
 8017be6:	e7de      	b.n	8017ba6 <__kernel_rem_pio2f+0x4e>
 8017be8:	ecfe 6a01 	vldmia	lr!, {s13}
 8017bec:	ed3c 7a01 	vldmdb	ip!, {s14}
 8017bf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017bf4:	3401      	adds	r4, #1
 8017bf6:	455c      	cmp	r4, fp
 8017bf8:	ddf6      	ble.n	8017be8 <__kernel_rem_pio2f+0x90>
 8017bfa:	ece9 7a01 	vstmia	r9!, {s15}
 8017bfe:	3601      	adds	r6, #1
 8017c00:	3004      	adds	r0, #4
 8017c02:	e7d8      	b.n	8017bb6 <__kernel_rem_pio2f+0x5e>
 8017c04:	a908      	add	r1, sp, #32
 8017c06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c0a:	9104      	str	r1, [sp, #16]
 8017c0c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017c0e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8017e4c <__kernel_rem_pio2f+0x2f4>
 8017c12:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8017e48 <__kernel_rem_pio2f+0x2f0>
 8017c16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017c1a:	9203      	str	r2, [sp, #12]
 8017c1c:	4654      	mov	r4, sl
 8017c1e:	00a2      	lsls	r2, r4, #2
 8017c20:	9205      	str	r2, [sp, #20]
 8017c22:	aa58      	add	r2, sp, #352	@ 0x160
 8017c24:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8017c28:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8017c2c:	a944      	add	r1, sp, #272	@ 0x110
 8017c2e:	aa08      	add	r2, sp, #32
 8017c30:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8017c34:	4694      	mov	ip, r2
 8017c36:	4626      	mov	r6, r4
 8017c38:	2e00      	cmp	r6, #0
 8017c3a:	dc4c      	bgt.n	8017cd6 <__kernel_rem_pio2f+0x17e>
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017c42:	f000 f9f1 	bl	8018028 <scalbnf>
 8017c46:	eeb0 8a40 	vmov.f32	s16, s0
 8017c4a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8017c4e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017c52:	f000 fa4d 	bl	80180f0 <floorf>
 8017c56:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8017c5a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017c5e:	2d00      	cmp	r5, #0
 8017c60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017c64:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017c68:	ee17 9a90 	vmov	r9, s15
 8017c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c70:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017c74:	dd41      	ble.n	8017cfa <__kernel_rem_pio2f+0x1a2>
 8017c76:	f104 3cff 	add.w	ip, r4, #4294967295
 8017c7a:	a908      	add	r1, sp, #32
 8017c7c:	f1c5 0e08 	rsb	lr, r5, #8
 8017c80:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8017c84:	fa46 f00e 	asr.w	r0, r6, lr
 8017c88:	4481      	add	r9, r0
 8017c8a:	fa00 f00e 	lsl.w	r0, r0, lr
 8017c8e:	1a36      	subs	r6, r6, r0
 8017c90:	f1c5 0007 	rsb	r0, r5, #7
 8017c94:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8017c98:	4106      	asrs	r6, r0
 8017c9a:	2e00      	cmp	r6, #0
 8017c9c:	dd3c      	ble.n	8017d18 <__kernel_rem_pio2f+0x1c0>
 8017c9e:	f04f 0e00 	mov.w	lr, #0
 8017ca2:	f109 0901 	add.w	r9, r9, #1
 8017ca6:	4670      	mov	r0, lr
 8017ca8:	4574      	cmp	r4, lr
 8017caa:	dc68      	bgt.n	8017d7e <__kernel_rem_pio2f+0x226>
 8017cac:	2d00      	cmp	r5, #0
 8017cae:	dd03      	ble.n	8017cb8 <__kernel_rem_pio2f+0x160>
 8017cb0:	2d01      	cmp	r5, #1
 8017cb2:	d074      	beq.n	8017d9e <__kernel_rem_pio2f+0x246>
 8017cb4:	2d02      	cmp	r5, #2
 8017cb6:	d07d      	beq.n	8017db4 <__kernel_rem_pio2f+0x25c>
 8017cb8:	2e02      	cmp	r6, #2
 8017cba:	d12d      	bne.n	8017d18 <__kernel_rem_pio2f+0x1c0>
 8017cbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017cc0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017cc4:	b340      	cbz	r0, 8017d18 <__kernel_rem_pio2f+0x1c0>
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	9306      	str	r3, [sp, #24]
 8017cca:	f000 f9ad 	bl	8018028 <scalbnf>
 8017cce:	9b06      	ldr	r3, [sp, #24]
 8017cd0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017cd4:	e020      	b.n	8017d18 <__kernel_rem_pio2f+0x1c0>
 8017cd6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017cda:	3e01      	subs	r6, #1
 8017cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ce4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017ce8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017cec:	ecac 0a01 	vstmia	ip!, {s0}
 8017cf0:	ed30 0a01 	vldmdb	r0!, {s0}
 8017cf4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017cf8:	e79e      	b.n	8017c38 <__kernel_rem_pio2f+0xe0>
 8017cfa:	d105      	bne.n	8017d08 <__kernel_rem_pio2f+0x1b0>
 8017cfc:	1e60      	subs	r0, r4, #1
 8017cfe:	a908      	add	r1, sp, #32
 8017d00:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8017d04:	11f6      	asrs	r6, r6, #7
 8017d06:	e7c8      	b.n	8017c9a <__kernel_rem_pio2f+0x142>
 8017d08:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017d0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d14:	da31      	bge.n	8017d7a <__kernel_rem_pio2f+0x222>
 8017d16:	2600      	movs	r6, #0
 8017d18:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d20:	f040 8098 	bne.w	8017e54 <__kernel_rem_pio2f+0x2fc>
 8017d24:	1e60      	subs	r0, r4, #1
 8017d26:	2200      	movs	r2, #0
 8017d28:	4550      	cmp	r0, sl
 8017d2a:	da4b      	bge.n	8017dc4 <__kernel_rem_pio2f+0x26c>
 8017d2c:	2a00      	cmp	r2, #0
 8017d2e:	d065      	beq.n	8017dfc <__kernel_rem_pio2f+0x2a4>
 8017d30:	3c01      	subs	r4, #1
 8017d32:	ab08      	add	r3, sp, #32
 8017d34:	3d08      	subs	r5, #8
 8017d36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d0f8      	beq.n	8017d30 <__kernel_rem_pio2f+0x1d8>
 8017d3e:	4628      	mov	r0, r5
 8017d40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017d44:	f000 f970 	bl	8018028 <scalbnf>
 8017d48:	1c63      	adds	r3, r4, #1
 8017d4a:	aa44      	add	r2, sp, #272	@ 0x110
 8017d4c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8017e4c <__kernel_rem_pio2f+0x2f4>
 8017d50:	0099      	lsls	r1, r3, #2
 8017d52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017d56:	4623      	mov	r3, r4
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	f280 80a9 	bge.w	8017eb0 <__kernel_rem_pio2f+0x358>
 8017d5e:	4623      	mov	r3, r4
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f2c0 80c7 	blt.w	8017ef4 <__kernel_rem_pio2f+0x39c>
 8017d66:	aa44      	add	r2, sp, #272	@ 0x110
 8017d68:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017d6c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8017e44 <__kernel_rem_pio2f+0x2ec>
 8017d70:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8017e50 <__kernel_rem_pio2f+0x2f8>
 8017d74:	2000      	movs	r0, #0
 8017d76:	1ae2      	subs	r2, r4, r3
 8017d78:	e0b1      	b.n	8017ede <__kernel_rem_pio2f+0x386>
 8017d7a:	2602      	movs	r6, #2
 8017d7c:	e78f      	b.n	8017c9e <__kernel_rem_pio2f+0x146>
 8017d7e:	f852 1b04 	ldr.w	r1, [r2], #4
 8017d82:	b948      	cbnz	r0, 8017d98 <__kernel_rem_pio2f+0x240>
 8017d84:	b121      	cbz	r1, 8017d90 <__kernel_rem_pio2f+0x238>
 8017d86:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8017d8a:	f842 1c04 	str.w	r1, [r2, #-4]
 8017d8e:	2101      	movs	r1, #1
 8017d90:	f10e 0e01 	add.w	lr, lr, #1
 8017d94:	4608      	mov	r0, r1
 8017d96:	e787      	b.n	8017ca8 <__kernel_rem_pio2f+0x150>
 8017d98:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8017d9c:	e7f5      	b.n	8017d8a <__kernel_rem_pio2f+0x232>
 8017d9e:	f104 3cff 	add.w	ip, r4, #4294967295
 8017da2:	aa08      	add	r2, sp, #32
 8017da4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017da8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017dac:	a908      	add	r1, sp, #32
 8017dae:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8017db2:	e781      	b.n	8017cb8 <__kernel_rem_pio2f+0x160>
 8017db4:	f104 3cff 	add.w	ip, r4, #4294967295
 8017db8:	aa08      	add	r2, sp, #32
 8017dba:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017dbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017dc2:	e7f3      	b.n	8017dac <__kernel_rem_pio2f+0x254>
 8017dc4:	a908      	add	r1, sp, #32
 8017dc6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017dca:	3801      	subs	r0, #1
 8017dcc:	430a      	orrs	r2, r1
 8017dce:	e7ab      	b.n	8017d28 <__kernel_rem_pio2f+0x1d0>
 8017dd0:	3201      	adds	r2, #1
 8017dd2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8017dd6:	2e00      	cmp	r6, #0
 8017dd8:	d0fa      	beq.n	8017dd0 <__kernel_rem_pio2f+0x278>
 8017dda:	9905      	ldr	r1, [sp, #20]
 8017ddc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8017de0:	eb0d 0001 	add.w	r0, sp, r1
 8017de4:	18e6      	adds	r6, r4, r3
 8017de6:	a91c      	add	r1, sp, #112	@ 0x70
 8017de8:	f104 0c01 	add.w	ip, r4, #1
 8017dec:	384c      	subs	r0, #76	@ 0x4c
 8017dee:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8017df2:	4422      	add	r2, r4
 8017df4:	4562      	cmp	r2, ip
 8017df6:	da04      	bge.n	8017e02 <__kernel_rem_pio2f+0x2aa>
 8017df8:	4614      	mov	r4, r2
 8017dfa:	e710      	b.n	8017c1e <__kernel_rem_pio2f+0xc6>
 8017dfc:	9804      	ldr	r0, [sp, #16]
 8017dfe:	2201      	movs	r2, #1
 8017e00:	e7e7      	b.n	8017dd2 <__kernel_rem_pio2f+0x27a>
 8017e02:	9903      	ldr	r1, [sp, #12]
 8017e04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017e08:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8017e0c:	9105      	str	r1, [sp, #20]
 8017e0e:	ee07 1a90 	vmov	s15, r1
 8017e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e16:	2400      	movs	r4, #0
 8017e18:	ece6 7a01 	vstmia	r6!, {s15}
 8017e1c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8017e50 <__kernel_rem_pio2f+0x2f8>
 8017e20:	46b1      	mov	r9, r6
 8017e22:	455c      	cmp	r4, fp
 8017e24:	dd04      	ble.n	8017e30 <__kernel_rem_pio2f+0x2d8>
 8017e26:	ece0 7a01 	vstmia	r0!, {s15}
 8017e2a:	f10c 0c01 	add.w	ip, ip, #1
 8017e2e:	e7e1      	b.n	8017df4 <__kernel_rem_pio2f+0x29c>
 8017e30:	ecfe 6a01 	vldmia	lr!, {s13}
 8017e34:	ed39 7a01 	vldmdb	r9!, {s14}
 8017e38:	3401      	adds	r4, #1
 8017e3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017e3e:	e7f0      	b.n	8017e22 <__kernel_rem_pio2f+0x2ca>
 8017e40:	0801a42c 	.word	0x0801a42c
 8017e44:	0801a400 	.word	0x0801a400
 8017e48:	43800000 	.word	0x43800000
 8017e4c:	3b800000 	.word	0x3b800000
 8017e50:	00000000 	.word	0x00000000
 8017e54:	9b02      	ldr	r3, [sp, #8]
 8017e56:	eeb0 0a48 	vmov.f32	s0, s16
 8017e5a:	eba3 0008 	sub.w	r0, r3, r8
 8017e5e:	f000 f8e3 	bl	8018028 <scalbnf>
 8017e62:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8017e48 <__kernel_rem_pio2f+0x2f0>
 8017e66:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e6e:	db19      	blt.n	8017ea4 <__kernel_rem_pio2f+0x34c>
 8017e70:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8017e4c <__kernel_rem_pio2f+0x2f4>
 8017e74:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017e78:	aa08      	add	r2, sp, #32
 8017e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e7e:	3508      	adds	r5, #8
 8017e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e84:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017e90:	ee10 3a10 	vmov	r3, s0
 8017e94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017e98:	ee17 3a90 	vmov	r3, s15
 8017e9c:	3401      	adds	r4, #1
 8017e9e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017ea2:	e74c      	b.n	8017d3e <__kernel_rem_pio2f+0x1e6>
 8017ea4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017ea8:	aa08      	add	r2, sp, #32
 8017eaa:	ee10 3a10 	vmov	r3, s0
 8017eae:	e7f6      	b.n	8017e9e <__kernel_rem_pio2f+0x346>
 8017eb0:	a808      	add	r0, sp, #32
 8017eb2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8017eb6:	9001      	str	r0, [sp, #4]
 8017eb8:	ee07 0a90 	vmov	s15, r0
 8017ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ec0:	3b01      	subs	r3, #1
 8017ec2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017ec6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017eca:	ed62 7a01 	vstmdb	r2!, {s15}
 8017ece:	e743      	b.n	8017d58 <__kernel_rem_pio2f+0x200>
 8017ed0:	ecfc 6a01 	vldmia	ip!, {s13}
 8017ed4:	ecb5 7a01 	vldmia	r5!, {s14}
 8017ed8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017edc:	3001      	adds	r0, #1
 8017ede:	4550      	cmp	r0, sl
 8017ee0:	dc01      	bgt.n	8017ee6 <__kernel_rem_pio2f+0x38e>
 8017ee2:	4290      	cmp	r0, r2
 8017ee4:	ddf4      	ble.n	8017ed0 <__kernel_rem_pio2f+0x378>
 8017ee6:	a858      	add	r0, sp, #352	@ 0x160
 8017ee8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8017eec:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8017ef0:	3b01      	subs	r3, #1
 8017ef2:	e735      	b.n	8017d60 <__kernel_rem_pio2f+0x208>
 8017ef4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8017ef6:	2b02      	cmp	r3, #2
 8017ef8:	dc09      	bgt.n	8017f0e <__kernel_rem_pio2f+0x3b6>
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	dc27      	bgt.n	8017f4e <__kernel_rem_pio2f+0x3f6>
 8017efe:	d040      	beq.n	8017f82 <__kernel_rem_pio2f+0x42a>
 8017f00:	f009 0007 	and.w	r0, r9, #7
 8017f04:	b059      	add	sp, #356	@ 0x164
 8017f06:	ecbd 8b04 	vpop	{d8-d9}
 8017f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f0e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8017f10:	2b03      	cmp	r3, #3
 8017f12:	d1f5      	bne.n	8017f00 <__kernel_rem_pio2f+0x3a8>
 8017f14:	aa30      	add	r2, sp, #192	@ 0xc0
 8017f16:	1f0b      	subs	r3, r1, #4
 8017f18:	4413      	add	r3, r2
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	2800      	cmp	r0, #0
 8017f20:	dc50      	bgt.n	8017fc4 <__kernel_rem_pio2f+0x46c>
 8017f22:	4622      	mov	r2, r4
 8017f24:	2a01      	cmp	r2, #1
 8017f26:	dc5d      	bgt.n	8017fe4 <__kernel_rem_pio2f+0x48c>
 8017f28:	ab30      	add	r3, sp, #192	@ 0xc0
 8017f2a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8017e50 <__kernel_rem_pio2f+0x2f8>
 8017f2e:	440b      	add	r3, r1
 8017f30:	2c01      	cmp	r4, #1
 8017f32:	dc67      	bgt.n	8018004 <__kernel_rem_pio2f+0x4ac>
 8017f34:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8017f38:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8017f3c:	2e00      	cmp	r6, #0
 8017f3e:	d167      	bne.n	8018010 <__kernel_rem_pio2f+0x4b8>
 8017f40:	edc7 6a00 	vstr	s13, [r7]
 8017f44:	ed87 7a01 	vstr	s14, [r7, #4]
 8017f48:	edc7 7a02 	vstr	s15, [r7, #8]
 8017f4c:	e7d8      	b.n	8017f00 <__kernel_rem_pio2f+0x3a8>
 8017f4e:	ab30      	add	r3, sp, #192	@ 0xc0
 8017f50:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8017e50 <__kernel_rem_pio2f+0x2f8>
 8017f54:	440b      	add	r3, r1
 8017f56:	4622      	mov	r2, r4
 8017f58:	2a00      	cmp	r2, #0
 8017f5a:	da24      	bge.n	8017fa6 <__kernel_rem_pio2f+0x44e>
 8017f5c:	b34e      	cbz	r6, 8017fb2 <__kernel_rem_pio2f+0x45a>
 8017f5e:	eef1 7a47 	vneg.f32	s15, s14
 8017f62:	edc7 7a00 	vstr	s15, [r7]
 8017f66:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8017f6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017f6e:	aa31      	add	r2, sp, #196	@ 0xc4
 8017f70:	2301      	movs	r3, #1
 8017f72:	429c      	cmp	r4, r3
 8017f74:	da20      	bge.n	8017fb8 <__kernel_rem_pio2f+0x460>
 8017f76:	b10e      	cbz	r6, 8017f7c <__kernel_rem_pio2f+0x424>
 8017f78:	eef1 7a67 	vneg.f32	s15, s15
 8017f7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8017f80:	e7be      	b.n	8017f00 <__kernel_rem_pio2f+0x3a8>
 8017f82:	ab30      	add	r3, sp, #192	@ 0xc0
 8017f84:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8017e50 <__kernel_rem_pio2f+0x2f8>
 8017f88:	440b      	add	r3, r1
 8017f8a:	2c00      	cmp	r4, #0
 8017f8c:	da05      	bge.n	8017f9a <__kernel_rem_pio2f+0x442>
 8017f8e:	b10e      	cbz	r6, 8017f94 <__kernel_rem_pio2f+0x43c>
 8017f90:	eef1 7a67 	vneg.f32	s15, s15
 8017f94:	edc7 7a00 	vstr	s15, [r7]
 8017f98:	e7b2      	b.n	8017f00 <__kernel_rem_pio2f+0x3a8>
 8017f9a:	ed33 7a01 	vldmdb	r3!, {s14}
 8017f9e:	3c01      	subs	r4, #1
 8017fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017fa4:	e7f1      	b.n	8017f8a <__kernel_rem_pio2f+0x432>
 8017fa6:	ed73 7a01 	vldmdb	r3!, {s15}
 8017faa:	3a01      	subs	r2, #1
 8017fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017fb0:	e7d2      	b.n	8017f58 <__kernel_rem_pio2f+0x400>
 8017fb2:	eef0 7a47 	vmov.f32	s15, s14
 8017fb6:	e7d4      	b.n	8017f62 <__kernel_rem_pio2f+0x40a>
 8017fb8:	ecb2 7a01 	vldmia	r2!, {s14}
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017fc2:	e7d6      	b.n	8017f72 <__kernel_rem_pio2f+0x41a>
 8017fc4:	ed72 7a01 	vldmdb	r2!, {s15}
 8017fc8:	edd2 6a01 	vldr	s13, [r2, #4]
 8017fcc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017fd0:	3801      	subs	r0, #1
 8017fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017fd6:	ed82 7a00 	vstr	s14, [r2]
 8017fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017fde:	edc2 7a01 	vstr	s15, [r2, #4]
 8017fe2:	e79c      	b.n	8017f1e <__kernel_rem_pio2f+0x3c6>
 8017fe4:	ed73 7a01 	vldmdb	r3!, {s15}
 8017fe8:	edd3 6a01 	vldr	s13, [r3, #4]
 8017fec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017ff0:	3a01      	subs	r2, #1
 8017ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017ff6:	ed83 7a00 	vstr	s14, [r3]
 8017ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ffe:	edc3 7a01 	vstr	s15, [r3, #4]
 8018002:	e78f      	b.n	8017f24 <__kernel_rem_pio2f+0x3cc>
 8018004:	ed33 7a01 	vldmdb	r3!, {s14}
 8018008:	3c01      	subs	r4, #1
 801800a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801800e:	e78f      	b.n	8017f30 <__kernel_rem_pio2f+0x3d8>
 8018010:	eef1 6a66 	vneg.f32	s13, s13
 8018014:	eeb1 7a47 	vneg.f32	s14, s14
 8018018:	edc7 6a00 	vstr	s13, [r7]
 801801c:	ed87 7a01 	vstr	s14, [r7, #4]
 8018020:	eef1 7a67 	vneg.f32	s15, s15
 8018024:	e790      	b.n	8017f48 <__kernel_rem_pio2f+0x3f0>
 8018026:	bf00      	nop

08018028 <scalbnf>:
 8018028:	ee10 3a10 	vmov	r3, s0
 801802c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018030:	d02a      	beq.n	8018088 <scalbnf+0x60>
 8018032:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018036:	d302      	bcc.n	801803e <scalbnf+0x16>
 8018038:	ee30 0a00 	vadd.f32	s0, s0, s0
 801803c:	4770      	bx	lr
 801803e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018042:	d122      	bne.n	801808a <scalbnf+0x62>
 8018044:	4b23      	ldr	r3, [pc, #140]	@ (80180d4 <scalbnf+0xac>)
 8018046:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80180d8 <scalbnf+0xb0>
 801804a:	4298      	cmp	r0, r3
 801804c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018050:	db16      	blt.n	8018080 <scalbnf+0x58>
 8018052:	ee10 3a10 	vmov	r3, s0
 8018056:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801805a:	3a19      	subs	r2, #25
 801805c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018060:	4288      	cmp	r0, r1
 8018062:	dd14      	ble.n	801808e <scalbnf+0x66>
 8018064:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 80180dc <scalbnf+0xb4>
 8018068:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80180e0 <scalbnf+0xb8>
 801806c:	ee10 3a10 	vmov	r3, s0
 8018070:	eeb0 7a67 	vmov.f32	s14, s15
 8018074:	2b00      	cmp	r3, #0
 8018076:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801807a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801807e:	4770      	bx	lr
 8018080:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80180e4 <scalbnf+0xbc>
 8018084:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018088:	4770      	bx	lr
 801808a:	0dd2      	lsrs	r2, r2, #23
 801808c:	e7e6      	b.n	801805c <scalbnf+0x34>
 801808e:	4410      	add	r0, r2
 8018090:	28fe      	cmp	r0, #254	@ 0xfe
 8018092:	dce7      	bgt.n	8018064 <scalbnf+0x3c>
 8018094:	2800      	cmp	r0, #0
 8018096:	dd06      	ble.n	80180a6 <scalbnf+0x7e>
 8018098:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801809c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80180a0:	ee00 3a10 	vmov	s0, r3
 80180a4:	4770      	bx	lr
 80180a6:	f110 0f16 	cmn.w	r0, #22
 80180aa:	da09      	bge.n	80180c0 <scalbnf+0x98>
 80180ac:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80180e4 <scalbnf+0xbc>
 80180b0:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80180e8 <scalbnf+0xc0>
 80180b4:	ee10 3a10 	vmov	r3, s0
 80180b8:	eeb0 7a67 	vmov.f32	s14, s15
 80180bc:	2b00      	cmp	r3, #0
 80180be:	e7da      	b.n	8018076 <scalbnf+0x4e>
 80180c0:	3019      	adds	r0, #25
 80180c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80180c6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80180ca:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80180ec <scalbnf+0xc4>
 80180ce:	ee07 3a90 	vmov	s15, r3
 80180d2:	e7d7      	b.n	8018084 <scalbnf+0x5c>
 80180d4:	ffff3cb0 	.word	0xffff3cb0
 80180d8:	4c000000 	.word	0x4c000000
 80180dc:	7149f2ca 	.word	0x7149f2ca
 80180e0:	f149f2ca 	.word	0xf149f2ca
 80180e4:	0da24260 	.word	0x0da24260
 80180e8:	8da24260 	.word	0x8da24260
 80180ec:	33000000 	.word	0x33000000

080180f0 <floorf>:
 80180f0:	ee10 3a10 	vmov	r3, s0
 80180f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80180f8:	3a7f      	subs	r2, #127	@ 0x7f
 80180fa:	2a16      	cmp	r2, #22
 80180fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018100:	dc2b      	bgt.n	801815a <floorf+0x6a>
 8018102:	2a00      	cmp	r2, #0
 8018104:	da12      	bge.n	801812c <floorf+0x3c>
 8018106:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801816c <floorf+0x7c>
 801810a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801810e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018116:	dd06      	ble.n	8018126 <floorf+0x36>
 8018118:	2b00      	cmp	r3, #0
 801811a:	da24      	bge.n	8018166 <floorf+0x76>
 801811c:	2900      	cmp	r1, #0
 801811e:	4b14      	ldr	r3, [pc, #80]	@ (8018170 <floorf+0x80>)
 8018120:	bf08      	it	eq
 8018122:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8018126:	ee00 3a10 	vmov	s0, r3
 801812a:	4770      	bx	lr
 801812c:	4911      	ldr	r1, [pc, #68]	@ (8018174 <floorf+0x84>)
 801812e:	4111      	asrs	r1, r2
 8018130:	420b      	tst	r3, r1
 8018132:	d0fa      	beq.n	801812a <floorf+0x3a>
 8018134:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801816c <floorf+0x7c>
 8018138:	ee30 0a27 	vadd.f32	s0, s0, s15
 801813c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018144:	ddef      	ble.n	8018126 <floorf+0x36>
 8018146:	2b00      	cmp	r3, #0
 8018148:	bfbe      	ittt	lt
 801814a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801814e:	fa40 f202 	asrlt.w	r2, r0, r2
 8018152:	189b      	addlt	r3, r3, r2
 8018154:	ea23 0301 	bic.w	r3, r3, r1
 8018158:	e7e5      	b.n	8018126 <floorf+0x36>
 801815a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801815e:	d3e4      	bcc.n	801812a <floorf+0x3a>
 8018160:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018164:	4770      	bx	lr
 8018166:	2300      	movs	r3, #0
 8018168:	e7dd      	b.n	8018126 <floorf+0x36>
 801816a:	bf00      	nop
 801816c:	7149f2ca 	.word	0x7149f2ca
 8018170:	bf800000 	.word	0xbf800000
 8018174:	007fffff 	.word	0x007fffff

08018178 <_init>:
 8018178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801817a:	bf00      	nop
 801817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801817e:	bc08      	pop	{r3}
 8018180:	469e      	mov	lr, r3
 8018182:	4770      	bx	lr

08018184 <_fini>:
 8018184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018186:	bf00      	nop
 8018188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801818a:	bc08      	pop	{r3}
 801818c:	469e      	mov	lr, r3
 801818e:	4770      	bx	lr
